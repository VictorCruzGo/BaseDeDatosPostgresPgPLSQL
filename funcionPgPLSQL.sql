CREATE OR REPLACE FUNCTION sre_recaudaciones.recorrido_de_funcion(p_cadena_a_revisar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
       v_resultado_ejecucion_funcion smallint:=0;
       
       c_funciones_validacion       refcursor;
       r_funciones                  record;
       v_funcion                    character varying;
       v_fuente character varying;
       v_cadena_a_revisar character varying;

begin
       

       v_cadena_a_revisar:=p_cadena_a_revisar;
       raise notice 'sre_recaudaciones.%',p_cadena_a_revisar;    
             

         open c_funciones_validacion for ( SELECT proname
                                                                   FROM pg_catalog.pg_namespace n
                                                                   JOIN pg_catalog.pg_proc p
                                                                   ON pronamespace = n.oid
                                                                   WHERE nspname = 'sre_recaudaciones'
                                                                   AND proname not like 'test%'
                                                                   --limit 1
                                                             ); 
       
         loop
         
           fetch c_funciones_validacion into r_funciones;
           exit when not found;
           v_funcion:=r_funciones::character varying;
           v_funcion:=replace(v_funcion,'(','');
           v_funcion:=replace(v_funcion,')','');
          
           --raise notice '------------------------>%', v_funcion;

           --v_fuente:=(select prosrc from pg_proc where proname = v_funcion);
          v_fuente:=(select prosrc from pg_proc where proname = v_funcion limit 1);
           --raise notice '------------------------>%', v_fuente;           
           if(select v_fuente like '%'||v_cadena_a_revisar||'%') then
              raise notice 'sre_recaudaciones.%', v_funcion;
           v_fuente:='';
           end if;
          
           v_resultado_ejecucion_funcion:=0;
           
         end loop;
         
               --raise notice 'NO ENTRO AL BUCHE -->';
       
         close c_funciones_validacion;

         return '{}';
         EXCEPTION
  when others
    then
      
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'recorrido_de_funcion')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(p_porcentaje_etapa integer, p_sistema_id bigint, p_etapa_certificacion_sistemas_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite actualizar el campo etapa_completada de acuerdo al porcentaje enviado
PARAMETROS INGRESO
	p_porcentaje_etapa : Porcentaje de avance de la etapa
	p_sistema          : Código unico del sistema
	
PARAMETROS SALIDA
SUBSISTEMA : Facturación
FECHA CREACION : 26/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_prueba_etapa_certificacion_id bigint:=0;	
begin
	
	v_prueba_etapa_certificacion_id:=(select prueba_etapa_certificacion_id 
										from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion 
										where etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id 
										and estado_id='AC');
									
	if(p_porcentaje_etapa>=100) then
		update sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas 
		set etapa_completada=true, fecha_fin_prueba=now()
		where sistema_id=p_sistema_id
		and prueba_etapa_certificacion_id=v_prueba_etapa_certificacion_id
		and estado_id='AC';
	end if;
	
	return p_porcentaje_etapa;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_armar_obt_fecha_emision_venta_facturacion_manual(p_tipo_documento_sector_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta SELECT para identificar la fecha emision de las tablas de ventas, segun el tipo documento sector proporcionado
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta SELECT en las tablas de ventas en busca de la fecha emision
SUBSISTEMA : Facturación
FECHA CREACION : 12/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_estandares where venta_estandar_id=$1 limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where venta_alcanzada_ice_id=$1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_alquileres where venta_alquiler_id=$1	 limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where venta_comercial_exportacion_id=$1 limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  where venta_libre_consignacion_id=$1  limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select recepcion_correcta_hidrocarburo_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos where venta_hidrocarburo_id=$1  limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_entidades_financieras where venta_entidad_financiera_id=$1 limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_hospitales where venta_hospital_id=$1 limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_hoteles where venta_hotel_id=$1  limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_sectores_educativos where venta_sector_educativo_id=$1	 limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where venta_nota_credito_debito_id=$1	 limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where venta_nota_moneda_extranjera_id=$1	limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero where venta_nota_tasa_cero_id=$1 limit 1';	
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select fecha_emision from sre_recaudaciones.sre_fman_ventas_notas_zona_franca where venta_nota_zona_franca_id=$1	limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      	
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_armar_obt_fecha_emision_venta_facturacion_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_armar_obt_recepcion_correcta_manual(p_tipo_documento_sector_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta SELECT para identificar la recepcion correcta segun el tipo documento sector proporcionado
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta SELECT en las tablas de ventas en busca del id de recepcion correcta
SUBSISTEMA : Facturación
FECHA CREACION : 25/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select recepcion_correcta_estandar_id from sre_recaudaciones.sre_fman_ventas_estandares where venta_estandar_id=$1 limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select recepcion_correcta_alcanzada_ice from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where venta_alcanzada_ice_id=$1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --ACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select recepcion_correcta_alquiler_id from sre_recaudaciones.sre_fman_ventas_alquileres where venta_alquiler_id=$1	 limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select recepcion_correcta_comercial_exportacion_id from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where venta_comercial_exportacion_id=$1 limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select recepcion_correcta_libre_consignacion_id from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  where venta_libre_consignacion_id=$1  limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select recepcion_correcta_hidrocarburo_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos where venta_hidrocarburo_id=$1  limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select recepcion_correcta_entidad_financiera_id from sre_recaudaciones.sre_fman_ventas_entidades_financieras where venta_entidad_financiera_id=$1 limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select recepcion_correcta_hospital_id from sre_recaudaciones.sre_fman_ventas_hospitales where venta_hospital_id=$1 limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select recepcion_correcta_hotel_id from sre_recaudaciones.sre_fman_ventas_hoteles where venta_hotel_id=$1  limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select recepcion_correcta_sector_educativo_id from sre_recaudaciones.sre_fman_ventas_sectores_educativos where venta_sector_educativo_id=$1	 limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select recepcion_correcta_nota_credito_debito_id from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where venta_nota_credito_debito_id=$1	 limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select recepcion_correcta_nota_moneda_extranjera_id from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where venta_nota_moneda_extranjera_id=$1	limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select recepcion_correcta_nota_tasa_cero_id from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero where venta_nota_tasa_cero_id=$1 limit 1';	
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select recepcion_correcta_nota_zona_franca_id from sre_recaudaciones.sre_fman_ventas_notas_zona_franca where venta_nota_zona_franca_id=$1	limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obt_recepcion_correcta_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_armar_verificar_correcta_venta_manual(p_tipo_documento_sector_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta SELECT JOIN entre las tablas de recepcion, recpciones correctas y ventas, en busca de un id de venta que cumpla la correcta relacion de tablas.
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta SELECT 
SUBSISTEMA : Facturación
FECHA CREACION : 30/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select v.venta_estandar_id from sre_recaudaciones.sre_fman_ventas_estandares v
					join sre_recaudaciones.sre_fman_recepciones_correctas_estandares rc on (v.recepcion_correcta_estandar_id = rc.recepcion_correcta_estandar_id)
					join sre_recaudaciones.sre_fman_recepciones_estandares r on (rc.recepcion_estandar_id = rc.recepcion_estandar_id) 
					where rc.recepcion_estandar_id = $1 limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
			v_sql:= 'select v.venta_alcanzada_ice_id from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice v
					join sre_recaudaciones.sre_fman_recepciones_correctas_alcanzadas_ice rc on (v.recepcion_correcta_alcanzada_ice = rc.recepcion_correcta_alcanzada_ice)
					join sre_recaudaciones.sre_fman_recepciones_alcanzadas_ice r on (rc.recepcion_alcanzada_ice_id = rc.recepcion_alcanzada_ice_id) 
					where rc.recepcion_alcanzada_ice_id = $1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select v.venta_alquiler_id from sre_recaudaciones.sre_fman_ventas_alquileres v
					join sre_recaudaciones.sre_fman_recepciones_correctas_alquileres rc on (v.recepcion_correcta_alquiler_id = rc.recepcion_correcta_alquiler_id)
					join sre_recaudaciones.sre_fman_recepciones_alquileres r on (rc.recepcion_alquiler_id = rc.recepcion_alquiler_id) 
					where rc.recepcion_alquiler_id = $1 limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select v.venta_comercial_exportacion_id from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones v
					join sre_recaudaciones.sre_fman_recepciones_correctas_comerciales_exportaciones rc on (v.recepcion_correcta_comercial_exportacion_id = rc.recepcion_correcta_comercial_exportacion_id)
					join sre_recaudaciones.sre_fman_recepciones_comerciales_exportaciones r on (rc.recepcion_comercial_exportacion_id = rc.recepcion_comercial_exportacion_id) 
					where rc.recepcion_comercial_exportacion_id = $1 limit 1';	
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select v.venta_libre_consignacion_id from sre_recaudaciones.sre_fman_ventas_libres_consignaciones v
					join sre_recaudaciones.sre_fman_recepciones_correctas_libres_consignaciones rc on (v.recepcion_correcta_libre_consignacion_id = rc.recepcion_correcta_libre_consignacion_id)
					join sre_recaudaciones.sre_fman_recepciones_libres_consignaciones r on (rc.recepcion_libre_consignacion_id = rc.recepcion_libre_consignacion_id) 
					where rc.recepcion_libre_consignacion_id = $1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
			v_sql:= 'select v.venta_hidrocarburo_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos v
					join sre_recaudaciones.sre_fman_recepciones_correctas_hidrocarburos rc on (v.recepcion_correcta_hidrocarburo_id = rc.recepcion_correcta_hidrocarburo_id)
					join sre_recaudaciones.sre_fman_recepciones_hidrocarburos r on (rc.recepcion_hidrocarburo_id = rc.recepcion_hidrocarburo_id) 
					where rc.recepcion_hidrocarburo_id = $1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
			v_sql:= 'select v.venta_entidad_financiera_id from sre_recaudaciones.sre_fman_ventas_entidades_financieras v
					join sre_recaudaciones.sre_fman_recepciones_correctas_entidades_financieras rc on (v.recepcion_correcta_entidad_financiera_id = rc.recepcion_correcta_entidad_financiera_id)
					join sre_recaudaciones.sre_fman_recepciones_entidades_financieras r on (rc.recepcion_entidad_financiera_id = rc.recepcion_entidad_financiera_id) 
					where rc.recepcion_entidad_financiera_id = $1 limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select v.venta_hospital_id from sre_recaudaciones.sre_fman_ventas_hospitales v
					join sre_recaudaciones.sre_fman_recepciones_correctas_hospitales rc on (v.recepcion_correcta_hospital_id = rc.recepcion_correcta_hospital_id)
					join sre_recaudaciones.sre_fman_recepciones_hospitales r on (rc.recepcion_hospital_id = rc.recepcion_hospital_id) 
					where rc.recepcion_hospital_id = $1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select v.venta_hotel_id from sre_recaudaciones.sre_fman_ventas_hoteles v
					join sre_recaudaciones.sre_fman_recepciones_correctas_hoteles rc on (v.recepcion_correcta_hotel_id = rc.recepcion_correcta_hotel_id)
					join sre_recaudaciones.sre_fman_recepciones_hoteles r on (rc.recepcion_hotel_id = rc.recepcion_hotel_id) 
					where rc.recepcion_hotel_id = $1 limit 1';	
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select v.venta_sector_educativo_id from sre_recaudaciones.sre_fman_ventas_sectores_educativos v
					join sre_recaudaciones.sre_fman_recepciones_correctas_sectores_educativos rc on (v.recepcion_correcta_sector_educativo_id = rc.recepcion_correcta_sector_educativo_id)
					join sre_recaudaciones.sre_fman_recepciones_sectores_educativos r on (rc.recepcion_sector_educativo_id = rc.recepcion_sector_educativo_id) 
					where rc.recepcion_sector_educativo_id = $1 limit 1';	
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select v.venta_nota_credito_debito_id from sre_recaudaciones.sre_fman_ventas_notas_credito_debito v
					join sre_recaudaciones.sre_fman_recepciones_correctas_notas_credito_debito rc on (v.recepcion_correcta_nota_credito_debito_id = rc.recepcion_correcta_nota_credito_debito_id)
					join sre_recaudaciones.sre_fman_recepciones_notas_credito_debito r on (rc.recepcion_nota_credito_debito_id = rc.recepcion_nota_credito_debito_id) 
					where rc.recepcion_nota_credito_debito_id = $1 limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select v.venta_nota_moneda_extranjera_id from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras v
					join sre_recaudaciones.sre_fman_recepciones_correctas_notas_monedas_extranjeras rc on (v.recepcion_correcta_nota_moneda_extranjera_id = rc.recepcion_correcta_nota_moneda_extranjera_id)
					join sre_recaudaciones.sre_fman_recepciones_notas_monedas_extranjeras r on (rc.recepcion_nota_moneda_extranjera_id = rc.recepcion_nota_moneda_extranjera_id) 
					where rc.recepcion_nota_moneda_extranjera_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select v.venta_nota_tasa_cero_id from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero v
					join sre_recaudaciones.sre_fman_recepciones_correctas_notas_tasas_cero rc on (v.recepcion_correcta_nota_tasa_cero_id = rc.recepcion_correcta_nota_tasa_cero_id)
					join sre_recaudaciones.sre_fman_recepciones_notas_tasa_cero r on (rc.recepcion_nota_tasa_cero_id = rc.recepcion_nota_tasa_cero_id) 
					where rc.recepcion_nota_tasa_cero_id = $1 limit 1';	
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select v.venta_nota_zona_franca_id from sre_recaudaciones.sre_fman_ventas_notas_zona_franca v
					join sre_recaudaciones.sre_fman_recepciones_correctas_notas_zona_franca rc on (v.recepcion_correcta_nota_zona_franca_id = rc.recepcion_correcta_nota_zona_franca_id)
					join sre_recaudaciones.sre_fman_recepciones_notas_zona_franca r on (rc.recepcion_nota_zona_franca_id = rc.recepcion_nota_zona_franca_id) 
					where rc.recepcion_nota_zona_franca_id = $1 limit 1';	
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_armar_verificar_correcta_venta_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(p_cantidad_casos_correctos integer, p_cantidad_casos_incorrectos integer, p_cantidad_casos_esperados integer, p_cantidad_posibles_respuestas integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite calcular el porcentaje de avance por cada caso de prueba
PARAMETROS INGRESO
	p_cantidad_casos_correctos     : nro de casos correctos
	p_cantidad_casos_incorrectos   : nro de casos incorrectos
	p_cantidad_casos_esperados     : nro de casos esperados
	p_cantidad_posibles_respuestas : nro de posibles respuestas por caso de prueba
PARAMETROS SALIDA
SUBSISTEMA : Facturación
FECHA CREACION : 13/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare

	v_cantidad_avance integer := 0;
	v_porcentaje_avance numeric := 0;
	v_porcentaje_caso_prueba_aprobado integer := 0;

begin
	v_porcentaje_caso_prueba_aprobado:=(select sre_recaudaciones.sre_fac_par_estado('estado_porcentaje_caso_prueba_aprobado'));
	v_cantidad_avance := p_cantidad_casos_correctos - (p_cantidad_casos_incorrectos / case when (p_cantidad_posibles_respuestas - 1)=0 then 1 else (p_cantidad_posibles_respuestas - 1) end) ;
	p_cantidad_casos_esperados:=case when p_cantidad_casos_esperados=0 then 1 else p_cantidad_casos_esperados end; 
	v_porcentaje_avance := round (((v_cantidad_avance * 100::numeric)/p_cantidad_casos_esperados),0);
	
	case 
		when v_porcentaje_avance >= 0 and v_porcentaje_avance < v_porcentaje_caso_prueba_aprobado then    --porcentaje mayor igual a cero retorna el valor obtenido
			return v_porcentaje_avance;
		when v_porcentaje_avance >= v_porcentaje_caso_prueba_aprobado then  --porcentaje mayor igual al porcentaje de aproximación devuelve 100 estatico
			return 100;
		else
			return 0;						  --porcentaje menor a 0 se retorna el valor 0 estatico
	end case;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(p_total_casos_correctos integer, p_total_casos_esperados integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite calcular el porcentaje de avance por cada caso de prueba
PARAMETROS INGRESO
	p_total_casos_correctos   : nro de casos correctos
	p_total_casos_esperados   : nro de casos incorrectos
PARAMETROS SALIDA
SUBSISTEMA : Facturación
FECHA CREACION : 17/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare

	v_porcentaje_avance numeric := 0;
	
begin
	
	v_porcentaje_avance := round (((p_total_casos_correctos * 100::numeric)/p_total_casos_esperados),0);
	
	case 
		when v_porcentaje_avance >= 0 and v_porcentaje_avance <= 100 then
			return v_porcentaje_avance::integer;
		when v_porcentaje_avance >= (select sre_recaudaciones.sre_fac_par_estado('estado_porcentaje_caso_prueba_aprobado')) then  --porcentaje mayor igual al porcentaje de aproximación devuelve 100 estatico
			return 100;
		else
			return 0;
	end case;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_archivos_xml_invalidos(p_archivo bytea, p_extesion character varying, p_mime character varying, p_estado_id character varying, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
begin  
	   INSERT INTO sre_recaudaciones.sre_fac_archivos_xml_invalidos
		(archivo, extesion, mime, estado_id)
		VALUES(
		p_archivo,
		p_extesion,
		p_mime,
		p_estado_id
		) returning archivo_xml_invalido_id into v_ultimo_registro;
  		
		return v_ultimo_registro;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_archivos_xml_invalidos'));

	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_archivos_xml_validos(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	
	p_archivo bytea; 
	p_extesion varchar; 
	p_mime varchar;
	p_estado_id varchar; 	
	
	v_resultado bigint;
begin
	
	---------------DATOS DE LA TABLA: ArchivoXmlValidos---------------
	p_archivo :=(p_json->'xmlRecepcionGenerica'->>'v_archivo')::bytea;
	p_extesion :='gzip';
	p_mime :='application/gzip';
	p_estado_id:='AC';	
		
  
  	INSERT INTO sre_recaudaciones.sre_fac_archivos_xml_validos
	(archivo, extesion, mime, estado_id) 
	VALUES(
	p_archivo, 
	p_extesion, 	
	p_mime, 
	p_estado_id
	) returning archivo_xml_valido_id into v_resultado;
  
	return v_resultado;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_archivos_xml_validos'));
     
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_correctas_anulados_facturacion_manual(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_resultado_recepcion bigint, p_persona_contribuyente_id bigint, p_sucursal_contribuyemte_id bigint, p_actividad_economica_id integer, p_modalidad_facturacion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_estado_recepcion_anulado_id integer, p_codigo_actividad integer, p_numero_sucursal integer, p_numero_documento_fiscal bigint, p_caed character varying, p_fecha_emision_anulacion timestamp without time zone, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe las variables con la informacion de la factura y las envia al CRUD dinamico, tomando en cuenta que cada sector tiene su respectiva tabla de recepciones
PARAMETROS INGRESO
Datos de la factura
PARAMETROS SALIDA
Valor del id de recepcion si se registro sin inconveniente en las tablas de recepciones.
SUBSISTEMA : Facturación
FECHA CREACION : 28/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	
	 	v_sql:='INSERT INTO sre_recaudaciones.sre_fman_recepciones_correctas_anuladas
			   (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_anulado_id, persona_contribuyente_id, sucursal_contribuyente_id, actividad_economica_id, 
			   modalidad_facturacion_id, tipo_documento_sector_id, tipo_documento_fiscal_id, estado_recepcion_anulado_manual_id, codigo_actividad_economica, 
			   numero_sucursal, numero_documento_fiscal, caed, fecha_emision_anulacion, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, 
			   fecha_ultima_modificacion, estado_id)
			  VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_anulado_id';
	    	
	  execute v_sql  
	    using 
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_resultado_recepcion,
				p_persona_contribuyente_id,
				p_sucursal_contribuyemte_id,
				p_actividad_economica_id,
				p_modalidad_facturacion_id,
				p_tipo_documento_fiscal_id,
				p_tipo_documento_sector_id,
				p_estado_recepcion_anulado_id,
				p_codigo_actividad,
				p_numero_sucursal,
				p_numero_documento_fiscal,
				p_caed,
				p_fecha_emision_anulacion,
				p_fecha_envio,
				p_fecha_recepcion,
				p_fecha_consolidacion,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id
				
	    into v_ultimo_registro;
	
	  	return v_ultimo_registro; 
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepcion_correctas_anulados_facturacion_manual'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_detalles_ventas_contingencia(p_json_i json, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla 
				sre_fac_detalles_ventas_contingencias_exportaciones_mineras - 25, sre_fac_detalles_ventas_contingencias_libres_consignaciones_ypfb - 26
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 31/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla 
				sre_recaudaciones.sre_fac_detalles_ventas_contingencias_libres_consignaciones - 13
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 15/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Creacion de funcion sre_fac_crud_sub_detalle_turismo_contingencia para el registro de subdetalle sector 21
				Ajuste en consulta para insercion en tabla sre_recaudaciones.sre_fac_detalles_ventas_contingencias_turismos_receptivos - 21
NUMERO SECUENCIAL : 3
FECHA DE MODIFICACION : 18/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/

declare
--*****estandares	
	p_usuario_registro_id bigint;
	p_usuario_ultima_modificacion_id bigint; 
	--p_venta_id bigint; 
	p_producto_id varchar; 
	p_producto_sin_id bigint:=0; 
	p_actividad_economica_id bigint:=0;
	p_numero_serie varchar; 
	p_descripcion varchar; 
	p_cantidad numeric(20,5); 
	p_precio_unitario numeric(20,5); 
	p_monto_descuento numeric(20,5);
	p_subtotal numeric(20,5);
	p_fecha_registro timestamp; 
	p_fecha_ultima_modificacion timestamp; 
	p_estado_id  varchar; 
	p_unidad_medida  varchar;
	p_numero_imei varchar;
	
	--*****alquileres


	--*****bancos
	
	
	--*****colegios	
	
	
	--*****combustibles

		
	--*****embotelladoras
	p_marca_ice varchar;
	p_alicuota_especifica numeric(20,5);
	p_alicuota_porcentual numeric(20,5);
	--add 20190514 rgt
	p_cantidad_litros numeric(20,5);
	
	--*****hospitales
	p_espcecialidad varchar(100); 
	p_especialidad_detalle varchar(200); 
	p_nro_quirofano_sala_operaciones int4; 
	p_especialidad_medico varchar(100); 
	p_nombre_apellido_medico varchar(100); 
	p_nit_documento_medico int8; 
	p_nro_matricula_medico varchar(50); 
	p_nro_factura_medico int8;
	
	--*****hoteles
	p_codigo_tipo_habitacion int4; 
	p_cantidad_dias int4;
	
	--*****exportaciones
	p_codigo_nandina varchar(50); 

	--*****turismos_receptivos
	p_pasaporte_documento varchar(20); 
	p_nacionalidad int4;
	--p_codigo_tipo_habitacion int4; 
	--p_cantidad_dias int4 ;
	
	--****Subdetalle
	v_tiene_sub_detalle bool:=false;
	v_resultado_sub_detalle bigint:=0;
	v_i json;	
	v_detalle_venta_hotel_id int8:=0;
	v_pasaporte_documento_identificacion varchar(50):='-';
	v_nacionalidad int4:=0;
	v_hay_errores_sub_detalle bool:=false;	
	v_nacionalidad_tursimo  varchar(50):='-';	
	v_detalle varchar;
	
	--*****hidrocarburos
	p_porcentaje_iehd numeric(20,5);
	
	--*****Exportaciones YPFB add 20190410 rgt
  	p_partida_arancelaria varchar;
  	p_energiammbtu numeric(20,5);
  	p_preciosusmmbtu numeric(20,5);
	
  	--*****sre_fac_detalles_ventas_exportaciones_mineras -> sector 25
  	p_leyes numeric(20,5);
	p_finos1 numeric(20,5);
	p_finos2 numeric(20,5);
	p_unidad_medida1 varchar(50) := '';
	p_unidad_medida2 varchar(50) := '';
	p_cotizacion numeric(20,5);
	
	v_fecha_actual timestamp:=now();
	v_resultado bigint:=0;	
	
begin	
--*****estandares	  
		p_usuario_registro_id :=1000;
		p_usuario_ultima_modificacion_id :=1000;
		p_producto_id :=(p_json_i->>'codigoProducto');
		p_producto_sin_id :=(p_json_i->>'codigoProductoSin');
		p_actividad_economica_id :=(p_json_i->>'actividadEconomica');
		p_numero_serie :=(p_json_i->>'numeroSerie');
		p_descripcion :=(p_json_i->>'descripcion');
		p_cantidad :=(p_json_i->>'cantidad');
		p_precio_unitario :=(p_json_i->>'precioUnitario');
		p_monto_descuento :=(p_json_i->>'montoDescuento');
		p_subtotal :=(p_json_i->>'subTotal');
		p_unidad_medida  :=(p_json_i->>'unidadMedida');
		p_numero_imei :=(p_json_i->>'numeroImei');
		p_fecha_registro :=v_fecha_actual; 
		p_fecha_ultima_modificacion :=v_fecha_actual; 
		p_estado_id  :='AC'; 		
	
--INSERT
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
		then 										 
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_estandares
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_estandar_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		imei
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		p_numero_imei
		) returning detalle_venta_contingencia_estandar_id into v_resultado;

		return v_resultado;
	    
		when p_tipo_documento_sector_id = 2  --Nota: FACTURA SECTORES EDUCATIVOS
		then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_colegios
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_colegio_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		) returning detalle_venta_contingencia_colegio_id into v_resultado;

		return v_resultado;	
		
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
		then 								
		-- add 20190408 rgt
		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_alquileres
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_alquiler_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		) returning detalle_venta_contingencia_alquiler_id into v_resultado;

		return v_resultado;
		
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
		then 			
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_combustibles								   
		(usuario_registro_id,
		usuario_ultima_modificacion_id, 
		venta_contingencia_combustible_id, 
		producto_id, 
		producto_sin_id, 
		actividad_economica_id,
		descripcion,
		cantidad, 
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida)
        VALUES(
        p_usuario_registro_id,  
        p_usuario_ultima_modificacion_id,  
        p_venta_id, 
        p_producto_id,
        p_producto_sin_id, 
        p_actividad_economica_id, 
        p_descripcion, p_cantidad, 
        p_precio_unitario, 
        p_monto_descuento, 
        p_subtotal, 
        p_fecha_registro, 
        p_fecha_ultima_modificacion, 
        p_estado_id, 
        p_unidad_medida
        )
        returning detalle_venta_contingencia_combustible_id into v_resultado;
		return v_resultado;
		
		when p_tipo_documento_sector_id = 5  --Nota: FACTURA DE SERVICIOS BASICOS
		then 
		--  add 20190408 rgt
		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_servicios
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_servicio_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		) returning detalle_venta_contingencia_servicio_id into v_resultado;
		
		return v_resultado;			
			
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS 
		then 			
		-- add 20190408 rgt
		
		p_marca_ice :=(p_json_i->>'marcaIce');
		p_alicuota_especifica :=(p_json_i->>'alicuotaEspecifica');
		p_alicuota_porcentual :=(p_json_i->>'alicuotaPorcentual');
		p_cantidad_litros := (p_json_i->>'cantidadLitros'); --Nota: Pendiente por agregar en el XML
		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_embotelladoras
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_embotelladora_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		marca_ice,
		alicuota_especifica,
		alicuota_porcentual,
		cantidad_litros
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		p_marca_ice,
		p_alicuota_especifica,
		p_alicuota_porcentual,
		p_cantidad_litros
		) returning detalle_venta_contingencia_embotelladora_id into v_resultado;	
		
		return v_resultado;
		
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
		then 			 
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_bancos
		(usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_banco_id, 
		producto_id, 
		producto_sin_id, 
		actividad_economica_id,
		descripcion, cantidad, 
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id,
		unidad_medida)				    
        VALUES(p_usuario_registro_id,  
        p_usuario_ultima_modificacion_id, 
        p_venta_id, 
        p_producto_id, 
        p_producto_sin_id, 
        p_actividad_economica_id, 
        p_descripcion, 
        p_cantidad, 
        p_precio_unitario, 
        p_monto_descuento, 
        p_subtotal,
        p_fecha_registro,
        p_fecha_ultima_modificacion,
        p_estado_id, p_unidad_medida)
    	returning detalle_venta_contingencia_banco_id into v_resultado;    
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
		then
		--*****hoteles
		p_codigo_tipo_habitacion :=(p_json_i->>'codigoTipoHabitacion');
		p_cantidad_dias :=(p_json_i->>'cantidadDias');
		

		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_hoteles
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_hotel_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		--cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		--campos hoteles
		codigo_tipo_habitacion, 
		cantidad_dias
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		---p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,	
		--campos hoteles
		p_codigo_tipo_habitacion, 
		p_cantidad_dias		
		) returning detalle_venta_contingencia_hotel_id into v_resultado;
		
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
		then 	
		--variables
		p_espcecialidad:=(p_json_i->>'especialidad');
		p_especialidad_detalle:=(p_json_i->>'especialidadDetalle');
		p_nro_quirofano_sala_operaciones:=(p_json_i->>'nroQuirofanoSalaOperaciones');
		p_especialidad_medico:=(p_json_i->>'especialidadMedico');
		p_nombre_apellido_medico:=(p_json_i->>'nombreApellidoMedico');
		p_nit_documento_medico:=(p_json_i->>'nitDocumentoMedico');
		p_nro_matricula_medico:=(p_json_i->>'nroMatriculaMedico');
		p_nro_factura_medico:=(p_json_i->>'nroFacturaMedico');
		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_hospitales			
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_hospital_id, 
		producto_id, 
		producto_sin_id, 
		actividad_economica_id,
		descripcion, 
		cantidad, 
		precio_unitario, 
		subtotal, 
		especialidad, 
		especialidad_detalle, 
		nro_quirofano_sala_operaciones,
		especialidad_medico, 
		nombre_apellido_medico, 
		nit_documento_medico, 
		nro_matricula_medico, 
		nro_factura_medico, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id,
		monto_descuento, 
		unidad_medida)
		values (
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_venta_id, 
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id, 
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_subtotal, 
		p_espcecialidad,
		p_especialidad_detalle,
		p_nro_quirofano_sala_operaciones, 
		p_especialidad_medico, 
		p_nombre_apellido_medico, 
		p_nit_documento_medico, 
		p_nro_matricula_medico, 
		p_nro_factura_medico, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_monto_descuento, 
		p_unidad_medida)
		returning detalle_venta_contingencia_hospital_id into v_resultado;
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
		then 
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_juegos
		(usuario_registro_id,
		usuario_ultima_modificacion_id, 
		venta_contingencia_juego_id, 
		producto_id, 
		producto_sin_id, 
		actividad_economica_id, 
		descripcion, 
		cantidad, 
		precio_unitario, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		monto_descuento, 
		unidad_medida)
		values(p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_venta_id, p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id, 
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_subtotal, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion,
		p_estado_id, 
		p_monto_descuento, 
		p_unidad_medida) returning detalle_venta_contingencia_juego_id into v_resultado;
		return v_resultado;	
		
		
		--falta espectaculos 
		
	    --add 20190726 rgt
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA CONTINGENCIA COMERCIAL DE EXPORTACION
		then 	
		p_codigo_nandina :=(p_json_i->>'codigoNandina');
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_exportaciones
		(usuario_registro_id, 
		usuario_ultima_modificacion_id,
		venta_contingencia_exportacion_id, 
		producto_id, producto_sin_id, 
		actividad_economica_id, 
		descripcion, 
		cantidad, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		precio_unitario, 
		unidad_medida, 
		codigo_nandina)
		values(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_monto_descuento, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_precio_unitario, p_unidad_medida, p_codigo_nandina)
		returning detalle_venta_contingencia_exportacion_id into v_resultado;
		return v_resultado;	
			
		-- add 20190726 rgt
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
		then 			
		
		p_codigo_nandina :=(p_json_i->>'codigoNandina');
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_libres_consignaciones
		(usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_libre_consignacion_id, 
		producto_id, 
		producto_sin_id, 
		actividad_economica_id, 
		descripcion, 
		cantidad, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		precio_unitario, 
		unidad_medida,
		codigo_nandina)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 		 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id,
		p_precio_unitario,
		p_unidad_medida,
		p_codigo_nandina
		) returning detalle_venta_contingencia_libre_consignacion_id into v_resultado;
		
		return v_resultado;
		
		--add 20190728 rgt
		when p_tipo_documento_sector_id = 14  --Nota: NOTA FISCAL DE ZONA FRANCA
		then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_zonas_francas
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_zona_franca_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida		
		)
		values
		(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida		
		) 
		returning detalle_venta_contingencia_zona_franca_id into v_resultado;
					
		return v_resultado;	
		
		--add 20190726 rgt
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
		then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_espectaculos_nacionales
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_espectaculo_nacional_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		)returning detalle_venta_contingencia_espectaculo_nacional_id into v_resultado;
		
		return v_resultado;
		
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
		then
		-- add 20190408 rgt
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_seguridades_alimentarias
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_seguridad_alimentaria_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		) returning detalle_venta_contingencia_seguridad_alimentaria_id into v_resultado;
		
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
		then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_monedas_extranjeras
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_moneda_extranjera_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		)returning detalle_venta_contingencia_moneda_extranjera_id into v_resultado;
			
		return v_resultado;	
			
		--nota credito debito
		
		--nota conciliacion
		
		--boleto aereo
		
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
		then
		--*****turismos_receptivos
		p_pasaporte_documento :=(p_json_i->'detalleDocumentos'->>'pasaporteDocumentoIdentificacion');--* modificar puede que el turista tenga varios documnentos 
		p_nacionalidad :=(p_json_i->'detalleDocumentos'->>'codigoPais');--* modificar puede que el turista tenga varios documnentos
		p_codigo_tipo_habitacion :=(p_json_i->>'codigoTipoHabitacion');
		p_cantidad_dias :=(p_json_i->>'cantidadDias');	
						
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_turismos_receptivos
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_turismo_receptivo_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		--cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		--campos turismo
		pasaporte_documento, 
		nacionalidad,
		codigo_tipo_habitacion, 
		cantidad_dias
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		--p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		--campos turismo
		p_pasaporte_documento, 
		p_nacionalidad,
		p_codigo_tipo_habitacion, 
		p_cantidad_dias
		)returning detalle_venta_contingencia_turismo_receptivo_id into v_resultado;

		
		--Nota: Registrar detalle de Documentos		
		v_detalle := (p_json_i->'detalleDocumentos')::varchar;	
			
		if(left(v_detalle, 1) = '[') 
		then
			v_tiene_sub_detalle := true;
		end if;
				
		if(v_tiene_sub_detalle) then
			for v_i in select * from json_array_elements(p_json_i->'detalleDocumentos')
			loop		
					v_pasaporte_documento_identificacion:=(v_i->>'pasaporteDocumentoIdentificacion');
					v_nacionalidad_tursimo:=(v_i->>'codigoPais');
					
					
					v_resultado_sub_detalle:= sre_recaudaciones.sre_fac_crud_sub_detalle_turismo_contingencia(	
													v_resultado,
													v_pasaporte_documento_identificacion,
													v_nacionalidad_tursimo
		 		   );	
							
 				if(v_resultado_sub_detalle<0) then
					v_hay_errores_sub_detalle:=true;
				end if;
			end loop;							
		else
				v_pasaporte_documento_identificacion:=(p_json_i->'detalleDocumentos'->>'pasaporteDocumentoIdentificacion');
				v_nacionalidad_tursimo:=(p_json_i->'detalleDocumentos'->>'codigoPais');
				
				v_resultado_sub_detalle:= sre_recaudaciones.sre_fac_crud_sub_detalle_turismo_contingencia(	
												v_resultado,
												v_pasaporte_documento_identificacion,
												v_nacionalidad_tursimo
										  );
										  
				if(v_resultado_sub_detalle<0) then
					v_hay_errores_sub_detalle:=true;
				end if;						  
		end if;	
			
		if v_hay_errores_sub_detalle then
			v_resultado:=-1;
		end if;		
		

		return v_resultado;	
		
		--tasa cero
		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
		then				 
		-- add 20190409 rgt
		p_porcentaje_iehd := (p_json_i->>'porcentajeIehd');
		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_hidrocarburos
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_hidrocarburo_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		porcentaje_iehd
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		p_porcentaje_iehd
		) returning detalle_venta_contingencia_hidrocarburo_id into v_resultado;

		return v_resultado;	
		
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
		then
		-- add 20190410 rgt
		p_partida_arancelaria := (p_json_i->>'partidaArancelaria');
	  	p_energiammbtu  := (p_json_i->>'energiaMMBTU');
	  	p_preciosusmmbtu  := (p_json_i->>'precioSusMMBTU');		  

		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_exportaciones_ypfb
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_contingencia_exportacion_ypfb_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id, 
		descripcion, 
		cantidad,
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		--exportacion YPFB
		partida_arancelaria,
	  	energiammbtu,
	  	preciosusmmbtu
		
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_descripcion, 
		p_cantidad, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		--exportacion YPFB
		p_partida_arancelaria,
	  	p_energiammbtu,
	  	p_preciosusmmbtu
		
		) returning detalle_venta_contingencia_exportacion_ypfb_id into v_resultado;

		return v_resultado;	
		
		--add 31102019 eca
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
			then
			p_codigo_nandina := (p_json_i->>'codigoNandina');
			p_finos1 := (p_json_i->>'finos1');
			p_finos2 := (p_json_i->>'finos2');			
			p_unidad_medida1 := (p_json_i->>'unidadMedida1');
			p_unidad_medida2 := (p_json_i->>'unidadMedida2');
			p_leyes := (p_json_i->>'leyes');
			p_cotizacion := (p_json_i->>'cotizacion');

			insert into sre_recaudaciones.sre_fac_detalles_ventas_contingencias_exportaciones_mineras(
					usuario_registro_id, usuario_ultima_modificacion_id, venta_contingencia_exportacion_minera_id, actividad_economica_id,
					producto_sin_id, producto_id, codigo_nandina, descripcion, leyes, finos1, finos2, unidad_medida1, unidad_medida2,
					cotizacion, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)			
				values(
					p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_actividad_economica_id,
					p_producto_sin_id, p_producto_id, p_codigo_nandina, p_descripcion, p_leyes, p_finos1, p_finos2, p_unidad_medida1, p_unidad_medida2,
					p_cotizacion, p_precio_unitario, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id)
				returning detalle_venta_contingencia_exportacion_minera_id into v_resultado;
	
			return v_resultado;

		--add 31102019 eca	
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB CONTINGENCIAS
			then
			p_partida_arancelaria :=(p_json_i->>'partidaArancelaria');
	
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_contingencias_libres_consig_ypfb
				(usuario_registro_id, usuario_ultima_modificacion_id, venta_contingencia_libre_consig_ypfb_id, actividad_economica_id, 
				producto_sin_id, producto_id, partida_arancelaria, descripcion, cantidad, precio_unitario, unidad_medida, subtotal, 
				fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES 
				(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_actividad_economica_id, 
				p_producto_sin_id, p_producto_id, p_partida_arancelaria, p_descripcion, p_cantidad, p_precio_unitario, p_unidad_medida, p_subtotal, 
				p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id)
			returning detalle_venta_contingencia_libre_consig_ypfb_id into v_resultado;
			
			return v_resultado;
			
		else 
			return v_resultado;
		
		end case;
			
		return v_resultado;	
		
 EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_detalles_ventas_contingencia'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_detalles_ventas_dinamico(p_json_i json, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : FacturaciÃ³n
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajustes en registro de detalles para documento sector 25
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 01/10/2019
AUTOR DE LA MODIFICACION : Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajustes en apartado del sector 21 (if v_hay_errores_sub_detalle then) coordinado con vcg
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 19/11/2019
AUTOR DE LA MODIFICACION : Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
--*****estandares	
	p_usuario_registro_id bigint;
	p_usuario_ultima_modificacion_id bigint; 
	--p_venta_id bigint; 
	p_producto_id varchar; 
	p_producto_sin_id bigint:=0; 
	p_actividad_economica_id bigint:=0;
	p_numero_serie varchar; 
	p_descripcion varchar; 
	p_cantidad numeric(20,5); 
	p_precio_unitario numeric(20,5); 
	p_monto_descuento numeric(20,5);
	p_subtotal numeric(20,5);
	p_fecha_registro timestamp; 
	p_fecha_ultima_modificacion timestamp; 
	p_estado_id  varchar; 
	p_unidad_medida  varchar;
	p_numero_imei varchar;
	
--*****embotelladoras
	p_marca_ice varchar;
	p_alicuota_especifica numeric(20,5);
	p_alicuota_porcentual numeric(20,5);
	--add 20190514 rgt
	p_cantidad_litros numeric(20,5);

--*****exportaciones
p_codigo_nandina varchar(50); 

--*****hidrocarburos
p_porcentaje_iehd numeric(20,5);

--*****hospitales
	p_espcecialidad varchar(100); 
	p_especialidad_detalle varchar(200); 
	p_nro_quirofano_sala_operaciones int4; 
	p_especialidad_medico varchar(100); 
	p_nombre_apellido_medico varchar(100); 
	p_nit_documento_medico int8; 
	p_nro_matricula_medico varchar(50); 
	p_nro_factura_medico int8;

--*****hoteles
	p_codigo_tipo_habitacion int4; 
	p_cantidad_dias int4;

--*****turismos_receptivos
	p_pasaporte_documento varchar(20); 
	p_nacionalidad int4;
	--p_codigo_tipo_habitacion int4; 
	--p_cantidad_dias int4 ;

--*****CrÃ©dito DÃ©bito		
	p_tipo_detalle_transaccion int4;

--*****Exportaciones YPFB add 20190410 rgt
  	p_partida_arancelaria varchar;
  	p_energiammbtu numeric(20,5);
  	p_preciosusmmbtu numeric(20,5);
	
--*****Mineras internas
	p_leyes numeric(20,5);
	p_finos numeric(20,5);
	
	v_fecha_actual timestamp:=now();
	v_resultado bigint:=0;
--****Subdetalle
	v_tiene_sub_detalle bool:=false;
	v_resultado_sub_detalle bigint:=0;
	v_i json;
	
	v_detalle_venta_hotel_id int8:=0;
	v_pasaporte_documento_identificacion varchar(50):='-';
	v_nacionalidad int4:=0;
	v_hay_errores_sub_detalle bool:=false;
	
	v_nacionalidad_tursimo  varchar(50):='-';
	
	v_detalle varchar;
	
	--*****sre_fac_detalles_ventas_exportaciones_mineras -> sector 25
	p_finos1 numeric(20,5);
	p_finos2 numeric(20,5);
	p_unidad_medida1 varchar(50) := '';
	p_unidad_medida2 varchar(50) := '';
	p_cotizacion numeric(20,5);
	
begin	
--*****estandares	  
		p_usuario_registro_id :=1000;
		p_usuario_ultima_modificacion_id :=1000;
		p_producto_id :=(p_json_i->>'codigoProducto');
		p_producto_sin_id :=(p_json_i->>'codigoProductoSin');
		p_actividad_economica_id :=(p_json_i->>'actividadEconomica');
		p_numero_serie :=(p_json_i->>'numeroSerie');
		p_descripcion :=(p_json_i->>'descripcion');
		p_cantidad :=(p_json_i->>'cantidad');
		p_precio_unitario :=(p_json_i->>'precioUnitario');
		p_monto_descuento :=(p_json_i->>'montoDescuento');
		p_subtotal :=(p_json_i->>'subTotal');
		p_unidad_medida  :=(p_json_i->>'unidadMedida');
		p_numero_imei :=(p_json_i->>'numeroImei');
		p_fecha_registro :=v_fecha_actual; 
		p_fecha_ultima_modificacion :=v_fecha_actual; 
		p_estado_id  :='AC'; 		
		
--INSERT
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 										 
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_estandares
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_estandar_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		imei
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		p_numero_imei
		) returning detalle_venta_estandar_id into v_resultado;

		return v_resultado;
	    
		--add 20190410 vcg																											
		when p_tipo_documento_sector_id = 2  --Nota: FACTURA SECTORES EDUCATIVOS
			then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_colegios
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_colegio_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		) returning detalle_venta_colegio_id into v_resultado;

		return v_resultado;	
				
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			-- add 20190408 rgt
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_alquileres
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_alquiler_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida
			) returning detalle_venta_alquiler_id into v_resultado;
	
			return v_resultado;

		--add 20190408 jf
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_combustibles								   
			(usuario_registro_id, usuario_ultima_modificacion_id, venta_combustible_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)
	        VALUES(p_usuario_registro_id,  p_usuario_ultima_modificacion_id,  p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_precio_unitario, p_monto_descuento, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_unidad_medida)
	        returning detalle_venta_combustible_id into v_resultado;
			return v_resultado;

		when p_tipo_documento_sector_id = 5  --Nota: FACTURA DE SERVICIOS BASICOS
			then 
			--  add 20190408 rgt
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_servicios
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_servicio_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida
			) returning detalle_venta_servicio_id into v_resultado;
			
			return v_resultado;
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS 
			then 			
			-- add 20190408 rgt
			
			p_marca_ice :=(p_json_i->>'marcaIce');
			p_alicuota_especifica :=(p_json_i->>'alicuotaEspecifica');
			p_alicuota_porcentual :=(p_json_i->>'alicuotaPorcentual');
			p_cantidad_litros := (p_json_i->>'cantidadLitros'); --Nota: Pendiente por agregar en el XML
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_embotelladoras
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_embotelladora_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			marca_ice,
			alicuota_especifica,
			alicuota_porcentual,
			cantidad_litros
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida,
			p_marca_ice,
			p_alicuota_especifica,
			p_alicuota_porcentual,
			p_cantidad_litros
			) returning detalle_venta_embotelladora_id into v_resultado;	
			
			return v_resultado;
			
		--add 20190408 jf
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_bancos
			(usuario_registro_id, usuario_ultima_modificacion_id, venta_banco_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)				    
            VALUES(p_usuario_registro_id,  p_usuario_ultima_modificacion_id,  p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_precio_unitario, p_monto_descuento, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_unidad_medida)
        	returning detalle_venta_banco_id into v_resultado;    
			return v_resultado;	
		--add 20190408 vcg				
		
			when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then
			
			p_codigo_tipo_habitacion :=(p_json_i->>'codigoTipoHabitacion');
			p_cantidad_dias :=(p_json_i->>'cantidadDias');
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_hoteles
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_hotel_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			--numero_serie, 
			descripcion, 
			--cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			--campos hoteles
			codigo_tipo_habitacion, 
			cantidad_dias
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			--p_numero_serie,
			p_descripcion, 
			---p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida,	
			--campos hoteles
			p_codigo_tipo_habitacion, 
			p_cantidad_dias		
			) returning detalle_venta_hotel_id into v_resultado;
		
		
			--Nota: Registrar detalle de Documentos		
			v_detalle := (p_json_i->'detalleDocumentos')::varchar;	
			
			if(left(v_detalle, 1) = '[') 
			then
				v_tiene_sub_detalle := true;
			end if;
				
			if(v_tiene_sub_detalle) then
				for v_i in select * from json_array_elements(p_json_i->'detalleDocumentos')
					loop		
						v_pasaporte_documento_identificacion:=(v_i->>'pasaporteDocumentoIdentificacion');
						v_nacionalidad:=(v_i->>'codigoPais');
						
						v_resultado_sub_detalle:= sre_recaudaciones.sre_fac_crud_sub_detalle_hoteles(	
														v_resultado,
														v_pasaporte_documento_identificacion,
														v_nacionalidad
										   );	
						
						if(v_resultado_sub_detalle<0) then
							v_hay_errores_sub_detalle:=true;
						end if;
				end loop;							
			else
				v_pasaporte_documento_identificacion:=(p_json_i->'detalleDocumentos'->>'pasaporteDocumentoIdentificacion');
				v_nacionalidad:=(p_json_i->'detalleDocumentos'->>'codigoPais');
			
				v_resultado_sub_detalle:= sre_recaudaciones.sre_fac_crud_sub_detalle_hoteles(	
												v_resultado,
												v_pasaporte_documento_identificacion,
												v_nacionalidad
										  );
										  
				if(v_resultado_sub_detalle<0) then
					v_hay_errores_sub_detalle:=true;
				end if;						  
			end if;	
			
			if v_resultado_sub_detalle<0 then
				v_resultado:=-1;
			end if;
				
								
		return v_resultado;	
		--add 20190408 jf		
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 	
			--variables
			p_espcecialidad:=(p_json_i->>'especialidad');
			p_especialidad_detalle:=(p_json_i->>'especialidadDetalle');
			p_nro_quirofano_sala_operaciones:=(p_json_i->>'nroQuirofanoSalaOperaciones');
			p_especialidad_medico:=(p_json_i->>'especialidadMedico');
			p_nombre_apellido_medico:=(p_json_i->>'nombreApellidoMedico');
			p_nit_documento_medico:=(p_json_i->>'nitDocumentoMedico');
			p_nro_matricula_medico:=(p_json_i->>'nroMatriculaMedico');
			p_nro_factura_medico:=(p_json_i->>'nroFacturaMedico');
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_hospitales
			
			(usuario_registro_id, usuario_ultima_modificacion_id, venta_hospital_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, especialidad, especialidad_detalle, nro_quirofano_sala_operaciones, especialidad_medico, nombre_apellido_medico, nit_documento_medico, nro_matricula_medico, nro_factura_medico, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
			values (p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_precio_unitario, p_subtotal, p_espcecialidad, p_especialidad_detalle, p_nro_quirofano_sala_operaciones, p_especialidad_medico, p_nombre_apellido_medico, p_nit_documento_medico, p_nro_matricula_medico, p_nro_factura_medico, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_monto_descuento, p_unidad_medida)
			returning detalle_venta_hospital_id into v_resultado;
			return v_resultado;	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_juegos
			(usuario_registro_id, usuario_ultima_modificacion_id, venta_juego_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
			values(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_precio_unitario, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_monto_descuento, p_unidad_medida)
			returning detalle_venta_juego_id into v_resultado;
			return v_resultado;
			return v_resultado;	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 
			-- add 20190408 rgt
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_espectaculos
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_espectaculo_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida
			) returning detalle_venta_espectaculo_id into v_resultado;
			
			return v_resultado;	
				
		--add 20190409 jf
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 	
			p_codigo_nandina :=(p_json_i->>'codigoNandina');
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_exportaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, venta_exportacion_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida, codigo_nandina)
			values(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_monto_descuento, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_precio_unitario, p_unidad_medida, p_codigo_nandina)
			returning detalle_venta_exportacion_id into v_resultado;
			return v_resultado;	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÃ“N EN LIBRE CONSIGNACION
			then 			
			-- add 20190409 rgt
			p_codigo_nandina :=(p_json_i->>'codigoNandina');
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_libres_consignaciones
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_libre_consignacion_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			codigo_nandina
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida,
			p_codigo_nandina
			) returning detalle_venta_libre_consignacion_id into v_resultado;
			
			return v_resultado;
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14  --Nota: NOTA FISCAL DE ZONA FRANCA
			then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_zonas_francas
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_zona_franca_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida		
		)
		values
		(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida		
		) 
		returning detalle_venta_zona_franca_id into v_resultado;
					
		return v_resultado;	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_espectaculos_nacionales
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_espectaculo_nacional_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		)returning detalle_venta_espectaculo_nacional_id into v_resultado;
		
		return v_resultado;

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÃ“N DE ALIMENTOS â€“ SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then
			-- add 20190408 rgt
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_seguridades_alimentarias
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_seguridad_alimentaria_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida
			) returning detalle_venta_seguridad_alimentaria_id into v_resultado;
			
			return v_resultado;	
			
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_monedas_extranjeras
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_moneda_extranjera_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		)returning detalle_venta_moneda_extranjera_id into v_resultado;
			
		return v_resultado;	

		when p_tipo_documento_sector_id = 18  --Nota: NOTA DE CREDITO-DEBITO
			then
			p_tipo_detalle_transaccion :=(p_json_i->>'codigoDetalleTransaccion');			          
			INSERT INTO sre_recaudaciones.sre_fac_detalles_notas_creditos
			(usuario_registro_id, usuario_ultima_modificacion_id, nota_credito_debito_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida, tipo_detalle_transaccion)				    
        	VALUES(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_precio_unitario, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_unidad_medida, p_tipo_detalle_transaccion)
        	returning detalle_nota_credito_debito_id into v_resultado;
			return v_resultado;						
		
		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
		p_tipo_detalle_transaccion :=(p_json_i->>'codigoDetalleTransaccion');								
		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_notas_conciliaciones
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		nota_conciliacion_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
			--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
			--monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		--campos conciliaciones
		tipo_detalle_transaccion
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
			--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
			--p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		--campos conciliaciones
		p_tipo_detalle_transaccion
		) returning detalle_nota_conciliacion_id into v_resultado;

		return v_resultado;				

		
		
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO (No tiene detalle)
			then
		return v_resultado;			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then
		--*****turismos_receptivos
		p_pasaporte_documento :=(p_json_i->'detalleDocumentos'->>'pasaporteDocumentoIdentificacion');--* modificar puede que el turista tenga varios documnentos 
		p_nacionalidad :=(p_json_i->'detalleDocumentos'->>'codigoPais');--* modificar puede que el turista tenga varios documnentos
		p_codigo_tipo_habitacion :=(p_json_i->>'codigoTipoHabitacion');
		p_cantidad_dias :=(p_json_i->>'cantidadDias');	
						
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_turismos_receptivos
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_turismo_receptivo_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		--cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		--campos turismo
		pasaporte_documento, 
		nacionalidad,
		codigo_tipo_habitacion, 
		cantidad_dias
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		--p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		--campos turismo
		p_pasaporte_documento, 
		p_nacionalidad,
		p_codigo_tipo_habitacion, 
		p_cantidad_dias
		)returning detalle_venta_turismo_receptivo_id into v_resultado;

		--Nota: Registrar detalle de Documentos		
		v_detalle := (p_json_i->'detalleDocumentos')::varchar;	
			
		if(left(v_detalle, 1) = '[') 
		then
			v_tiene_sub_detalle := true;
		end if;
				
		if(v_tiene_sub_detalle) then
			for v_i in select * from json_array_elements(p_json_i->'detalleDocumentos')
			loop		
					v_pasaporte_documento_identificacion:=(v_i->>'pasaporteDocumentoIdentificacion');
					v_nacionalidad_tursimo:=(v_i->>'codigoPais');
					
					v_resultado_sub_detalle:= sre_recaudaciones.sre_fac_crud_sub_detalle_turismo(	
													v_resultado,
													v_pasaporte_documento_identificacion,
													v_nacionalidad_tursimo
		 		   );	
							
 				if(v_resultado_sub_detalle<0) then
					v_hay_errores_sub_detalle:=true;
				end if;
			end loop;							
		else
				v_pasaporte_documento_identificacion:=(p_json_i->'detalleDocumentos'->>'pasaporteDocumentoIdentificacion');
				v_nacionalidad_tursimo:=(p_json_i->'detalleDocumentos'->>'codigoPais');
				
				v_resultado_sub_detalle:= sre_recaudaciones.sre_fac_crud_sub_detalle_turismo(	
												v_resultado,
												v_pasaporte_documento_identificacion,
												v_nacionalidad_tursimo
										  );
										  
				if(v_resultado_sub_detalle<0) then
					v_hay_errores_sub_detalle:=true;
				end if;						  
		end if;	
			
		if v_hay_errores_sub_detalle then
			v_resultado:=-1;
		end if;		
		

		return v_resultado;	

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_tasas_ceros
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_tasa_cero_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
		--numero_serie, 
		descripcion, 
		cantidad,
		precio_unitario, 
		monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
		--p_numero_serie,
		p_descripcion, 
		p_cantidad, 
		p_precio_unitario, 
		p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida
		) returning detalle_venta_tasa_cero_id into v_resultado;	
		
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			-- add 20190409 rgt
			p_porcentaje_iehd := (p_json_i->>'porcentajeIehd');
			
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_hidrocarburos
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_hidrocarburo_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			porcentaje_iehd
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida,
			p_porcentaje_iehd
			) returning detalle_venta_hidrocarburo_id into v_resultado;
	
			return v_resultado;	
			
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÃ“N YPFB
			then
			-- add 20190410 rgt
			p_partida_arancelaria := (p_json_i->>'partidaArancelaria');
		  	p_energiammbtu  := (p_json_i->>'energiaMMBTU');
		  	p_preciosusmmbtu  := (p_json_i->>'precioSusMMBTU');		  

			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_exportaciones_ypfb
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_exportacion_ypfb_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id, 
			descripcion, 
			cantidad,
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			--exportacion YPFB
			partida_arancelaria,
		  	energiammbtu,
		  	preciosusmmbtu
			
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_descripcion, 
			p_cantidad, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida,
			--exportacion YPFB
			p_partida_arancelaria,
		  	p_energiammbtu,
		  	p_preciosusmmbtu
			
			) returning detalle_venta_exportacion_ypfb_id into v_resultado;
	
			return v_resultado;	
		
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÃ“N DE MINERALES
			then
			p_codigo_nandina := (p_json_i->>'codigoNandina');
			p_finos1 := (p_json_i->>'finos1');
			p_finos2 := (p_json_i->>'finos2');			
			p_unidad_medida1 := (p_json_i->>'unidadMedida1');
			p_unidad_medida2 := (p_json_i->>'unidadMedida2');
			p_leyes := (p_json_i->>'leyes');
			p_cotizacion := (p_json_i->>'cotizacion');
			
			insert	into sre_recaudaciones.sre_fac_detalles_ventas_exportaciones_mineras(
					usuario_registro_id,
					usuario_ultima_modificacion_id,
					venta_exportacion_minera_id,
					actividad_economica_id,
					producto_sin_id,
					producto_id,
					codigo_nandina,
					descripcion,
					leyes,
					finos1,
					finos2,
					unidad_medida1,
					unidad_medida2,
					cotizacion,
					precio_unitario,
					subtotal,
					fecha_registro,
					fecha_ultima_modificacion,
					estado_id)			
				values(
					p_usuario_registro_id,
					p_usuario_ultima_modificacion_id, 
					p_venta_id,
					p_actividad_economica_id,
					p_producto_sin_id,
					p_producto_id,
					p_codigo_nandina,
					p_descripcion,
					p_leyes,
					p_finos1,
					p_finos2,
					p_unidad_medida1,
					p_unidad_medida2,
					p_cotizacion,
					p_precio_unitario,
					p_subtotal,
					p_fecha_registro,
					p_fecha_ultima_modificacion,
					p_estado_id)
				returning detalle_venta_exportacion_minera_id into v_resultado;
	
			return v_resultado;
		    
			
		--add 20190410 jf	
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÃ“N YPFB
			then
			p_partida_arancelaria :=(p_json_i->>'partidaArancelaria');
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_libres_consignaciones_ypfb
			(usuario_registro_id, usuario_ultima_modificacion_id, venta_libre_consignacion_ypfb_id, actividad_economica_id, producto_sin_id, producto_id, partida_arancelaria, descripcion, cantidad, precio_unitario, unidad_medida, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES 
			(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_actividad_economica_id, p_producto_sin_id, p_producto_id, p_partida_arancelaria, p_descripcion, p_cantidad, p_precio_unitario, p_unidad_medida, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id)
			returning detalle_venta_libre_consignacion_ypfb_id into v_resultado;
			return v_resultado;
		
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then				 				
		--*****Mineras internas
		p_leyes :=(p_json_i->>'leyes');
		p_finos :=(p_json_i->>'finos');

		
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_mineras_internas
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		venta_minera_interna_id, 
		producto_id,
		producto_sin_id, 
		actividad_economica_id,
			--numero_serie, 
		descripcion, 
			--cantidad,
		precio_unitario, 
			--monto_descuento, 
		subtotal, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		unidad_medida,
		--campos mineras internas
		leyes,
		finos		
		)
		VALUES(
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id, 
		p_venta_id,
		p_producto_id, 
		p_producto_sin_id, 
		p_actividad_economica_id,
			--p_numero_serie,
		p_descripcion, 
			--p_cantidad, 
		p_precio_unitario, 
			--p_monto_descuento, 
		p_subtotal,
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_unidad_medida,
		--campos mineras internas
		p_leyes,
		p_finos
		) returning detalle_venta_minera_interna_id into v_resultado;

		return v_resultado;			
								
			
		--add 20190409 jf	
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then	
			INSERT INTO sre_recaudaciones.sre_fac_detalles_prevaloradas
			(usuario_registro_id, usuario_ultima_modificacion_id, prevalorada_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)
			values
			(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_venta_id, p_producto_id, p_producto_sin_id, p_actividad_economica_id, p_descripcion, p_cantidad, p_precio_unitario, p_monto_descuento, p_subtotal, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id)
			returning detalle_prevalorada_id into v_resultado;
			return v_resultado;		

		--add 20190723 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then 										 
			INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_telecomunicaciones
			(
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_telecomunicacion_id, 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			imei
			)
			VALUES(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id, 
			p_venta_id,
			p_producto_id, 
			p_producto_sin_id, 
			p_actividad_economica_id,
			p_numero_serie,
			p_descripcion, 
			p_cantidad, 
			p_precio_unitario, 
			p_monto_descuento, 
			p_subtotal,
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id, 
			p_unidad_medida,
			p_numero_imei
			) returning detalle_venta_telecomunicacion_id into v_resultado;
	
			return v_resultado;	
			
			when p_tipo_documento_sector_id = 30  --Nota: NOTA DE CREDITO-DEBITO SFV 20190725
			then
			p_tipo_detalle_transaccion :=(p_json_i->>'codigoDetalleTransaccion');			          
			INSERT INTO sre_recaudaciones.sre_fac_detalles_notas_creditos_sfv
			(usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			nota_credito_debito_sfv_id,
			descripcion, 
			cantidad,
			precio_unitario, 
			subtotal, 
			fecha_registro,
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida, 
			tipo_detalle_transaccion)				    
        	VALUES(p_usuario_registro_id, 
        	p_usuario_ultima_modificacion_id, 
        	p_venta_id, 
        	p_descripcion,
        	p_cantidad, 
        	p_precio_unitario, 
        	p_subtotal, 
        	p_fecha_registro, 
        	p_fecha_ultima_modificacion, 
        	p_estado_id, 
        	p_unidad_medida, 
        	p_tipo_detalle_transaccion)
        	returning detalle_nota_credito_debito_sfv_id into v_resultado;
			return v_resultado;	
			
		else 
			return v_resultado;

	end case;
		
	
		return v_resultado;	
	
	
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_detalles_ventas_dinamico'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_detalles_ventas_estandares(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_venta_estandar_id bigint, p_producto_id character varying, p_producto_sin_id bigint, p_actividad_economica_id bigint, p_numero_serie character varying, p_descripcion character varying, p_cantidad numeric, p_precio_unitario numeric, p_monto_descuento numeric, p_subtotal numeric, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_unidad_medida character varying, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
begin
  
   if (p_tipo_crud='C')then  	
		INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_estandares
		(usuario_registro_id, usuario_ultima_modificacion_id, venta_estandar_id, producto_id, producto_sin_id, actividad_economica_id, numero_serie, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)
		VALUES(
		p_usuario_registro_id ,
		p_usuario_ultima_modificacion_id ,
		p_venta_estandar_id ,
		p_producto_id ,
		p_producto_sin_id ,
		p_actividad_economica_id ,
		p_numero_serie ,
		p_descripcion ,
		p_cantidad ,
		p_precio_unitario ,
		p_monto_descuento ,
		p_subtotal ,
		p_fecha_registro ,
		p_fecha_ultima_modificacion ,
		p_estado_id ,
		p_unidad_medida 		
		) returning detalle_venta_estandar_id into v_ultimo_registro;    
  		
		return v_ultimo_registro;
  	else
	  	return v_ultimo_registro;  	
    end if;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_detalles_ventas_estandares'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_documentos_fiscales_observados(p_documento_fiscal_observada_id bigint, p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_persona_contribuyente_emisor_id bigint, p_persona_contribuyente_beneficiario_id bigint, p_tipo_motivo_observacion_id integer, p_tipo_modalidad_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_tipo_origen_documento_id integer, p_tipo_documento_identidad_id integer, p_estado_inicial_documento_fiscal_id integer, p_estado_documento_fiscal_observado_id integer, p_sucursal_emisor_id integer, p_nit_emisor bigint, p_codigo_actividad_id integer, p_numero_documento_fiscal bigint, p_recepcion_documento_id bigint, p_descripcion_motivo character varying, p_cuf character varying, p_cufd character varying, p_caed character varying, p_cuis character varying, p_numero_documento_beneficiario character varying, p_nombre_razon_social_beneficiario character varying, p_monto_total numeric, p_fecha_emision timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint;
begin
	INSERT INTO sre_recaudaciones.sre_fac_documentos_fiscales_observados
	(
	usuario_registro_id, usuario_ultima_modificacion_id, persona_contribuyente_emisor_id, persona_contribuyente_beneficiario_id, tipo_motivo_observacion_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_sector_id, tipo_origen_documento_id, tipo_documento_identidad_id, estado_inicial_documento_fiscal_id, estado_documento_fiscal_observado_id, sucursal_emisor_id, nit_emisor, codigo_actividad_id, numero_documento_fiscal, recepcion_documento_id, descripcion_motivo, cuf, cufd, caed, cuis, numero_documento_beneficiario, nombre_razon_social_beneficiario, monto_total, fecha_emision, fecha_registro, fecha_ultima_modificacion, 
	estado_id)
VALUES(
	p_usuario_registro_id,
	p_usuario_ultima_modificacion_id,
	p_persona_contribuyente_emisor_id,
	p_persona_contribuyente_beneficiario_id,
	p_tipo_motivo_observacion_id,
	p_tipo_modalidad_id ,
	p_tipo_documento_fiscal_id ,
	p_tipo_documento_sector_id ,
	p_tipo_origen_documento_id ,
	p_tipo_documento_identidad_id ,
	p_estado_inicial_documento_fiscal_id ,
	p_estado_documento_fiscal_observado_id ,
	p_sucursal_emisor_id ,
	p_nit_emisor ,
	p_codigo_actividad_id ,
	p_numero_documento_fiscal ,
	p_recepcion_documento_id , 
	p_descripcion_motivo ,
	p_cuf ,
	p_cufd ,
	p_caed ,
	p_cuis ,
	p_numero_documento_beneficiario ,
	p_nombre_razon_social_beneficiario ,
	p_monto_total ,
	p_fecha_emision ,
	p_fecha_registro ,
	p_fecha_ultima_modificacion ,
	p_estado_id 
) returning documento_fiscal_observada_id into v_resultado;

	return v_resultado;
	
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_documentos_fiscales_observados'));
      
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_mensajes_servicios(p_mensaje_servicio_id bigint, p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_descripcion character varying, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_ultimo_registro bigint:=0;
begin  
	   if (p_tipo_crud='C') then
	   
	   INSERT INTO sre_recaudaciones.sre_fac_mensajes_servicios
		(mensaje_servicio_id,usuario_registro_id, usuario_ultima_modificacion_id, descripcion, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES(
				p_mensaje_servicio_id,
				p_mensaje_servicio_id,
				p_usuario_registro_id ,
				p_usuario_ultima_modificacion_id ,
				p_descripcion ,
				p_fecha_registro ,
				p_fecha_ultima_modificacion ,
				p_estado_id 		
			) returning mensaje_servicio_id into v_ultimo_registro;
	   
		return v_ultimo_registro;
  	else
		return v_ultimo_registro;  	
    end if;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_mensajes_servicios'));

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepcion_anulados_facturacion_manual(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_persona_contribuyente_id bigint, p_sucursal_contribuyemte_id bigint, p_actividad_economica_id integer, p_recepcion_paquete_anulado_id bigint, p_modalidad_facturacion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_estado_recepcion_anulado_id integer, p_codigo_actividad character varying, p_numero_sucursal integer, p_numero_documento_fiscal bigint, p_fecha_emision_anulacion timestamp without time zone, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta INSERT y la ejecuta con los parametros enviados almacenando el resultado en una variable bigint para ser devuelta hacia la funcion que llamo a esta funcion.
PARAMETROS INGRESO
p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_persona_contribuyente_id, p_sucursal_contribuyemte_id, p_actividad_economica_id, p_recepcion_paquete_anulado_id, p_modalidad_facturacion_id, 
p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_estado_recepcion_anulado_id, p_codigo_actividad, p_numero_sucursal, p_numero_documento_fiscal, p_fecha_emision_anulacion, p_fecha_envio, 
p_fecha_recepcion, p_fecha_consolidacion, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id
PARAMETROS SALIDA
Valor de  recepcion_anulado_id si se realizo el registro correctamente y -1 si fallo
SUBSISTEMA : Facturación
FECHA CREACION : 04/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
		
	 	v_sql:='INSERT INTO sre_recaudaciones.sre_fman_recepciones_anuladas
			   (usuario_registro_id, usuario_ultima_modificacion_id, persona_contribuyente_id,
				sucursal_contribuyente_id, actividad_economica_id, recepcion_paquete_anuladas_id,
				modalidad_facturacion_id, tipo_documento_sector_id, tipo_documento_fiscal_id, estado_recepcion_anulado_manual_id,
				codigo_actividad_economica, numero_sucursal, numero_documento_fiscal,
				fecha_emision_anulacion, fecha_envio, fecha_recepcion, fecha_consolidacion,
				fecha_registro, fecha_utlima_modificacion, estado_id)
			  VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning recepcion_anulado_id';
	    	
	  execute v_sql  
	    using 
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_persona_contribuyente_id,
				p_sucursal_contribuyemte_id,
				p_actividad_economica_id,
				p_recepcion_paquete_anulado_id,
				p_modalidad_facturacion_id,
				p_tipo_documento_fiscal_id,
				p_tipo_documento_sector_id,
				p_estado_recepcion_anulado_id,
				p_codigo_actividad,
				p_numero_sucursal,
				p_numero_documento_fiscal,
				p_fecha_emision_anulacion,
				p_fecha_envio,
				p_fecha_recepcion,
				p_fecha_consolidacion,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id
				
	    into v_ultimo_registro;
	
	  	return v_ultimo_registro; 
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepcion_anulados_facturacion_manual'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepcion_correcta_dinamico_facturacion_manual(p_json json, p_recepcion_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos de JSON y los prepara para ser enviados al CRUD de recepciones correctas
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
id de la recepcion 
PARAMETROS SALIDA
id de recepcion correcta
SUBSISTEMA : Facturación
FECHA CREACION : 03/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='';		
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_persona_contribuyente_id bigint;
	p_sucursal_id bigint;        --verificar los tipos de campos no son iguales en las tablas
	p_tipo_modalidad_id integer;                                                                                                                                                
	p_tipo_documento_sector_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_numero_sucursal integer;
	p_numero_factura bigint; --numero_documento_fiscal
	p_actividad_economica_id bigint;
	p_caed character varying(100);
	p_motivo_anulacion varchar(300);
	p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
	p_fecha_envio timestamp without time zone; 
	p_fecha_anulacion timestamp without time zone; 
	p_fecha_consolidacion timestamp without time zone; 
	p_fecha_registro timestamp without time zone;
	p_fecha_ultima_modificacion timestamp without time zone; 
	p_estado_id varchar; 
	p_estado_recepcion_documento_fiscal_id integer;	
	
	p_codigo_actividad integer;
	
	p_fecha_emision timestamp without time zone;
	p_fecha_recepcion timestamp without time zone;
	p_tipo_crud varchar;			
	v_fecha_actual timestamp:=now();	
	v_resultado bigint:=0;
	
begin
	
	---------------DATOS DE LA TABLA: RecepcionesCorrectas---------------	 
	
	p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
	p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
	--p_recepcion_paquete_id :=(p_json->'xmlRecepcionGenerica'->>'p_recepcion_paquete_id');	
	p_persona_contribuyente_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
	p_sucursal_id:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');	
	p_tipo_modalidad_id:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');	
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_numero_sucursal :=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');
	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	
	p_fecha_envio := (p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion := v_fecha_actual;
	p_fecha_consolidacion := v_fecha_actual;
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;
	p_estado_id :='AC';
	p_actividad_economica_id := (p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
	p_codigo_actividad := (p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 
	p_estado_recepcion_documento_fiscal_id:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion ='RECEPCIONADO CORRECTO');
	--Nota: Funcion para armar la sentencia, segun documentos sector.
	v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_recepcion_facturacion_manual_etapa_2(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));

	execute v_sql  
	    using 
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			--p_recepcion_paquete_id,
			p_recepcion_id,
			p_persona_contribuyente_id,
			p_sucursal_id,
			p_tipo_modalidad_id,
			p_tipo_documento_sector_id,
			p_tipo_documento_fiscal_id,
			p_numero_sucursal,
			p_caed,
			p_numero_factura,
			
			p_fecha_envio,
			p_fecha_recepcion,
			p_fecha_consolidacion,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_actividad_economica_id,
			p_codigo_actividad,
			p_fecha_emision,
			p_estado_recepcion_documento_fiscal_id
	 into v_resultado;
	
	return v_resultado;	
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepcion_correcta_dinamico_facturacion_manual'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepcion_correctas_anulados_facturacion_manual(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_resultado_recepcion bigint, p_persona_contribuyente_id bigint, p_sucursal_contribuyemte_id bigint, p_actividad_economica_id integer, p_modalidad_facturacion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_estado_recepcion_anulado_id integer, p_codigo_actividad character varying, p_numero_sucursal integer, p_numero_documento_fiscal bigint, p_caed character varying, p_fecha_emision_anulacion timestamp without time zone, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe las variables con la informacion de la factura anuladas y ejecuta la consulta INSERT en la respectiva tabla de recepciones correctas
PARAMETROS INGRESO
p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_resultado_recepcion, p_persona_contribuyente_id, p_sucursal_contribuyemte_id, p_actividad_economica_id, p_modalidad_facturacion_id, 
p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_estado_recepcion_anulado_id, p_codigo_actividad, p_numero_sucursal, p_numero_documento_fiscal, p_caed, p_fecha_emision_anulacion, 
p_fecha_envio, p_fecha_recepcion, p_fecha_consolidacion, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id 
PARAMETROS SALIDA
Valor del id de recepcion correcta si se registro sin inconveniente en la tabla.
SUBSISTEMA : Facturación
FECHA CREACION : 06/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	
	 	v_sql:='INSERT INTO sre_recaudaciones.sre_fman_recepciones_correctas_anuladas
			   (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_anulado_id, persona_contribuyente_id, sucursal_contribuyente_id, actividad_economica_id, 
			   modalidad_facturacion_id, tipo_documento_sector_id, tipo_documento_fiscal_id, estado_recepcion_anulado_manual_id, codigo_actividad_economica, 
			   numero_sucursal, numero_documento_fiscal, caed, fecha_emision_anulacion, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, 
			   fecha_ultima_modificacion, estado_id)
			  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_correcta_anulada_id';
	    	
	  execute v_sql  
	    using 
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_resultado_recepcion,
				p_persona_contribuyente_id,
				p_sucursal_contribuyemte_id,
				p_actividad_economica_id,
				p_modalidad_facturacion_id,
				p_tipo_documento_fiscal_id,
				p_tipo_documento_sector_id,
				p_estado_recepcion_anulado_id,
				p_codigo_actividad,
				p_numero_sucursal,
				p_numero_documento_fiscal,
				p_caed,
				p_fecha_emision_anulacion,
				p_fecha_envio,
				p_fecha_recepcion,
				p_fecha_consolidacion,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id
				
	    into v_ultimo_registro;
	 
	  	return v_ultimo_registro; 
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepcion_correctas_anulados_facturacion_manual'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepcion_dinamico_facturacion_manual_etapa_1(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_recepcion_paquete_id bigint, p_persona_contribuyente_id bigint, p_tipo_modalidad_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_estado_recepcion_documento_fiscal_id integer, p_sucursal_id bigint, p_numero_sucursal integer, p_numero_documento_fiscal bigint, p_caed character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_actividad_economica_id integer, p_codigo_actividad integer, p_fecha_emision timestamp without time zone, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe las variables con la informacion de la factura y las envia al CRUD dinamico, tomando en cuenta que cada sector tiene su respectiva tabla de recepciones
PARAMETROS INGRESO
Datos de la factura
PARAMETROS SALIDA
Valor del id de recepcion si se registro sin inconveniente en las tablas de recepciones.
SUBSISTEMA : Facturación
FECHA CREACION : 28/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_consulta_recepcion_facturacion_manual_etapa_1(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));

	    execute v_sql  
	    using 
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_recepcion_paquete_id,
				p_persona_contribuyente_id,
				p_tipo_modalidad_id,
				p_tipo_documento_fiscal_id,
				p_tipo_documento_sector_id,
				p_estado_recepcion_documento_fiscal_id,
				p_sucursal_id,
				p_numero_sucursal,
				p_numero_documento_fiscal,
				p_caed,
				p_fecha_envio,
				p_fecha_recepcion,
				p_fecha_consolidacion,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id,
				p_actividad_economica_id,
				p_codigo_actividad,
				p_fecha_emision
				
	    into v_ultimo_registro;
	 end if;
	  	return v_ultimo_registro; 
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_dinamico_manual_etapa_1'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_compras_etapa_1(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_sistema_id bigint, p_persona_contribuyente_id bigint, p_recepcion_paquete_id bigint, p_punto_venta_id integer, p_oficina_id integer, p_sucursal_id integer, p_tipo_modalidad_id integer, p_estado_recepcion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cufd character varying, p_cuis character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_compras
(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_compra_id, punto_venta_id, sucursal_id, estado_recepcion_id, tipo_documento_fiscal_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17) returning recepcion_compra_id';
    
	    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_sistema_id,
			p_persona_contribuyente_id,
			p_recepcion_paquete_id,
			p_punto_venta_id,			
			p_sucursal_id,			
			p_estado_recepcion_id,
			p_tipo_documento_fiscal_id,
			p_cufd,
			p_cuis,
			p_fecha_envio,
			p_fecha_recepcion, 
			p_fecha_consolidacion, 
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id
	    into v_ultimo_registro;	    
	  	return v_ultimo_registro;			
	  else
	  	return v_ultimo_registro;	  	
	  end if;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_compras_etapa_1'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_correctas_compras(p_json json, p_id_archivos_xml_validos bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='';
		
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_archivo_xml_valido_id bigint;
	p_recepcion_id bigint;
	p_recepcion_paquete_id bigint; 
	p_tipo_documento_sector_id integer; 
	p_cuf varchar; 
	p_numero_factura bigint; 
	p_cufd varchar; 
	p_cuis varchar; 
	p_nombre_archivo varchar; 
	p_fecha_envio timestamp; 
	p_fecha_recepcion timestamp; 
	p_fecha_consolidacion timestamp; 
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp; 
	p_estado_id varchar; 
	p_tipo_emision_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_tipo_crud varchar;
		
	v_fecha_actual timestamp:=now();
	
	v_resultado bigint:=0;
	
begin
	
	---------------DATOS DE LA TABLA: RecepcionesCorrectas---------------	 
	p_usuario_registro_id :=1000;
	p_usuario_ultima_modificacion_id :=1000;
	p_archivo_xml_valido_id :=p_id_archivos_xml_validos; --ID	
	p_recepcion_id :=(sre_recaudaciones.sre_fac_ope_obtener_recepcionid(p_json)); --add: 20190404 Modificar la funcion de esta fila
	p_recepcion_paquete_id :=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_cufd :=(p_json->'xmlRecepcionGenerica'->>'p_cufd');
	p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
	p_nombre_archivo :='Nombre Archivo';
	p_fecha_envio := (p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion := v_fecha_actual;
	p_fecha_consolidacion := v_fecha_actual;
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;
	p_estado_id :='AC';
	p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	if(p_tipo_documento_sector_id=28) then--Por verificar
		p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufp');
		p_cuis :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuape');
	end if;
	

	--Nota: Funcion para armar la sentencia, segun documentos sector.
	
	v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_compras
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_compra_valido_id, recepcion_compra_id, recepcion_paquete_compra_id, tipo_documento_sector_id, tipo_documento_fiscal_id, 
cuf, caed, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
 returning recepcion_correcta_compra_id';

    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_archivo_xml_valido_id,
			p_recepcion_id,
			p_recepcion_paquete_id,
			p_tipo_documento_sector_id ,
			p_tipo_documento_fiscal_id,
			p_cuf ,
			null ,
			p_numero_factura,
			p_cufd ,
			p_cuis ,
			p_nombre_archivo ,
			p_fecha_envio ,
			p_fecha_recepcion ,
			p_fecha_consolidacion ,
			p_fecha_registro ,
			p_fecha_ultima_modificacion ,
			p_estado_id 			 			 
	    into v_resultado;
	
	return v_resultado;
	
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_correctas_dinamico'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_correctas_dinamico(p_json json, p_id_archivos_xml_validos bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Para el sector 28-PREVALORADO se modifico la obtencion de los datos: cufp y cuap 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<08/10/2019>
AUTOR DE LA MODIFICACION : :<Victor Cruz Gomez>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='';
		
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_archivo_xml_valido_id bigint;
	p_recepcion_id bigint;
	p_recepcion_paquete_id bigint; 
	p_tipo_documento_sector_id integer; 
	p_cuf varchar; 
	p_numero_factura bigint; 
	p_cufd varchar; 
	p_cuis varchar; 
	p_nombre_archivo varchar; 
	p_fecha_envio timestamp; 
	p_fecha_recepcion timestamp; 
	p_fecha_consolidacion timestamp; 
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp; 
	p_estado_id varchar; 
	p_tipo_emision_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_tipo_crud varchar;

	p_cufp varchar;
	p_cuape varchar;
		
	v_fecha_actual timestamp:=now();
	
	v_resultado bigint:=0;
	
begin
	
	---------------DATOS DE LA TABLA: RecepcionesCorrectas---------------	 
	p_usuario_registro_id :=1000;
	p_usuario_ultima_modificacion_id :=1000;
	p_archivo_xml_valido_id :=p_id_archivos_xml_validos; --ID	
	p_recepcion_id :=(sre_recaudaciones.sre_fac_ope_obtener_recepcionid(p_json)); --add: 20190404 Modificar la funcion de esta fila
	p_recepcion_paquete_id :=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_cufd :=(p_json->'xmlRecepcionGenerica'->>'p_cufd');
	p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
	p_nombre_archivo :='Nombre Archivo';
	p_fecha_envio := (p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion := v_fecha_actual;
	p_fecha_consolidacion := v_fecha_actual;
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;
	p_estado_id :='AC';
	p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	if(p_tipo_documento_sector_id=28) then--Modificado vcg 20191008
		p_cufp :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufp');
		p_cuape :=(p_json->'xmlRecepcionGenerica'->>'p_cuape');
	end if;
	
	--Nota: Funcion para armar la sentencia, segun documentos sector.
	 v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));

	
	if(p_tipo_documento_sector_id=28) then --Modificado vcg 20191008
		execute v_sql  
		    using 
		    	p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_archivo_xml_valido_id,
				p_recepcion_id,
				p_recepcion_paquete_id,
				p_tipo_documento_sector_id ,
				p_cufp ,
				p_numero_factura,
				p_cuape ,
				p_cuis ,
				p_nombre_archivo ,
				p_fecha_envio ,
				p_fecha_recepcion ,
				p_fecha_consolidacion,
				p_fecha_registro ,
				p_fecha_ultima_modificacion ,
				p_estado_id ,
				p_tipo_emision_id ,
				p_tipo_documento_fiscal_id 
		    into v_resultado;
		return v_resultado;		
	else
		execute v_sql  
		    using 
		    	p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_archivo_xml_valido_id,
				p_recepcion_id,
				p_recepcion_paquete_id,
				p_tipo_documento_sector_id ,
				p_cuf ,
				p_numero_factura,
				p_cufd ,
				p_cuis ,
				p_nombre_archivo ,
				p_fecha_envio ,
				p_fecha_recepcion ,
				p_fecha_consolidacion ,
				p_fecha_registro ,
				p_fecha_ultima_modificacion ,
				p_estado_id ,
				p_tipo_emision_id ,
				p_tipo_documento_fiscal_id 
		    into v_resultado;
		return v_resultado;		
	end if;
	     
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_correctas_dinamico'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_correctas_dinamico_contingencia(p_json json, p_id_archivos_xml_validos bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <10/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='';
		
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_archivo_xml_valido_id bigint;
	p_recepcion_id bigint;
	p_recepcion_paquete_id bigint; 
	p_tipo_documento_sector_id integer; 
	p_cuf varchar; 
	p_numero_factura bigint; 
	p_cufd varchar; 
	p_cuis varchar; 
	p_nombre_archivo varchar; 
	p_fecha_envio timestamp; 
	p_fecha_recepcion timestamp; 
	p_fecha_consolidacion timestamp; 
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp; 
	p_estado_id varchar; 
	p_tipo_emision_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_tipo_crud varchar;
		
	v_fecha_actual timestamp:=now();
	
	v_resultado bigint:=0;
	
begin
	
	---------------DATOS DE LA TABLA: RecepcionesCorrectas---------------
	p_usuario_registro_id :=1000;
	p_usuario_ultima_modificacion_id :=1000;
	p_archivo_xml_valido_id :=p_id_archivos_xml_validos; --ID	
	p_recepcion_id :=(sre_recaudaciones.sre_fac_ope_obtener_recepcionid_contingencia(p_json)); --add: 20190404 Modificar la funcion de esta fila
	p_recepcion_paquete_id :=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_cufd :=(p_json->'xmlRecepcionGenerica'->>'p_cufd');
	p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
	p_nombre_archivo :='Nombre Archivo';
	p_fecha_envio := (p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion := v_fecha_actual;
	p_fecha_consolidacion := v_fecha_actual;
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;
	p_estado_id :='AC';
	p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	if(p_tipo_documento_sector_id=28) then--Por verificar
		p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufp');
	end if;
	
	--Nota: Funcion para armar la sentencia, segun documentos sector.
	 v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_contingencia(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));-- factura contingencia

	 --raise notice 'la consulta es ::::%', v_sql;
	 
    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_archivo_xml_valido_id,
			p_recepcion_id,
			p_recepcion_paquete_id,
			p_tipo_documento_sector_id ,
			p_cuf ,
			p_numero_factura,
			p_cufd ,
			p_cuis ,
			p_nombre_archivo ,
			p_fecha_envio ,
			p_fecha_recepcion ,
			p_fecha_consolidacion ,
			p_fecha_registro ,
			p_fecha_ultima_modificacion ,
			p_estado_id ,
			p_tipo_emision_id ,
			p_tipo_documento_fiscal_id 
	    into v_resultado;

	return v_resultado;	
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_correctas_dinamico_contingencia'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_correctas_estandares(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_archivo_xml_valido_id bigint, p_recepcion_estandar_id bigint, p_recepcion_paquete_estandar_id bigint, p_tipo_documento_sector_id integer, p_cuf character varying, p_numero_factura bigint, p_cufd character varying, p_cuis character varying, p_nombre_archivo character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_documento_fiscal_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;	
begin
    if (p_tipo_crud='C')then
  
	INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_estandares
	(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_estandar_id, recepcion_paquete_estandar_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, 	nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
	VALUES(
	p_usuario_registro_id,
	p_usuario_ultima_modificacion_id,
	p_archivo_xml_valido_id,
	p_recepcion_estandar_id,
	p_recepcion_paquete_estandar_id,
	p_tipo_documento_sector_id ,
	p_cuf ,
	p_numero_factura,
	p_cufd ,
	p_cuis ,
	p_nombre_archivo ,
	p_fecha_envio ,
	p_fecha_recepcion ,
	p_fecha_consolidacion ,
	p_fecha_registro ,
	p_fecha_ultima_modificacion ,
	p_estado_id ,
	p_tipo_emision_id ,
	p_tipo_documento_fiscal_id
) returning recepcion_correcta_estandar_id into v_ultimo_registro;
  
  	return v_ultimo_registro;
  else
  	return v_ultimo_registro;
  end if;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_correctas_estandares'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_correctas_estandares_detalles(p_archivo bytea, p_extesion character varying, p_mime character varying, p_estado_id character varying, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_ultimo_registro bigint:=0;
begin
  
    if (p_tipo_crud='C')then  	
    	--falta el insert    
  		return v_ultimo_registro;
  	else
		return v_ultimo_registro;  	
    end if;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_correctas_estandares_detalles'));

	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_correctas_etapa_2(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_archivo_xml_valido_id bigint, p_recepcion_estandar_id bigint, p_recepcion_paquete_estandar_id bigint, p_tipo_documento_sector_id integer, p_cuf character varying, p_numero_factura bigint, p_cufd character varying, p_cuis character varying, p_nombre_archivo character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_documento_fiscal_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
		v_sql:=(select sre_recaudaciones.sre_fac_ope_obtener_consulta_recepciones_correctas(p_tipo_documento_sector_id));

	    
	    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_archivo_xml_valido_id,
			p_recepcion_estandar_id,
			p_recepcion_paquete_estandar_id,
			p_tipo_documento_sector_id,
			p_cuf,
			p_numero_factura,
			p_cufd,
			p_cuis,
			p_nombre_archivo,
			p_fecha_envio,
			p_fecha_recepcion,
			p_fecha_consolidacion,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_tipo_emision_id,
			p_tipo_documento_fiscal_id
	    into v_ultimo_registro;
	    
	  	return v_ultimo_registro;
	  else
	  	return v_ultimo_registro;
	  end if;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_correctas_etapa_2'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_dinamico_etapa_1(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_sistema_id bigint, p_persona_contribuyente_id bigint, p_recepcion_paquete_id bigint, p_punto_venta_id integer, p_oficina_id integer, p_sucursal_id integer, p_tipo_modalidad_id integer, p_estado_recepcion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cufd character varying, p_cuis character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_etapa_1(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_sistema_id,
			p_persona_contribuyente_id,
			p_recepcion_paquete_id,
			p_punto_venta_id,
			p_oficina_id,
			p_sucursal_id,
			p_tipo_modalidad_id,
			p_estado_recepcion_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_sector_id,
			p_cufd,
			p_cuis,
			p_fecha_envio,
			p_fecha_recepcion, 
			p_fecha_consolidacion, 
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id,
			p_tipo_emision_id
	    into v_ultimo_registro;
	    
	  	return v_ultimo_registro;
	  else
	  	return v_ultimo_registro;
	  end if;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_dinamico_etapa_1'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_dinamico_etapa_1_contingencia(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_sistema_id bigint, p_persona_contribuyente_id bigint, p_recepcion_paquete_id bigint, p_punto_venta_id integer, p_oficina_id integer, p_sucursal_id integer, p_tipo_modalidad_id integer, p_estado_recepcion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cufd character varying, p_cuis character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Funcion que permite enviar los campos de recepcion de factura de contingencia a la fu
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_etapa_1_contingencia(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_sistema_id,
			p_persona_contribuyente_id,
			p_recepcion_paquete_id,
			p_punto_venta_id,
			p_oficina_id,
			p_sucursal_id,
			p_tipo_modalidad_id,
			p_estado_recepcion_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_sector_id,
			p_cufd,
			p_cuis,
			p_fecha_envio,
			p_fecha_recepcion, 
			p_fecha_consolidacion, 
			p_fecha_registro, 
			p_fecha_ultima_modificacion, 
			p_estado_id,
			p_tipo_emision_id
	    into v_ultimo_registro;
	    
	  	return v_ultimo_registro;
	  else
	  	return v_ultimo_registro;
	  end if;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_dinamico_etapa_1_contingencia'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_errores(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_archivo_xml_invalido_id bigint, p_recepcion_id bigint, p_recepcion_paquete_id bigint, p_numero_factura bigint, p_tipo_documento_sector_id integer, p_cuf character varying, p_cufd character varying, p_cuis character varying, p_nombre_archivo character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_ultimo_registro bigint:=0;
begin
      
		INSERT INTO sre_recaudaciones.sre_fac_recepciones_errores
		(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_invalido_id, recepcion_id, recepcion_paquete_id, numero_factura, tipo_documento_sector_id, cuf, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
		VALUES(
		p_usuario_registro_id ,
		p_usuario_ultima_modificacion_id ,
		p_archivo_xml_invalido_id ,
		p_recepcion_id ,
		p_recepcion_paquete_id ,
		p_numero_factura ,
		p_tipo_documento_sector_id ,
		p_cuf ,
		p_cufd ,
		p_cuis ,
		p_nombre_archivo ,
		p_fecha_envio ,
		p_fecha_recepcion ,
		p_fecha_consolidacion ,
		p_fecha_registro ,
		p_fecha_ultima_modificacion ,
		p_estado_id
		
		) returning recepcion_error_id into v_ultimo_registro;
  		
		return v_ultimo_registro;
    
    
  EXCEPTION
  when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;

      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_errores'));

	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_errores_detalles(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_recepcion_error_id bigint, p_codigo_error_id integer, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_ultimo_registro bigint:=0;
begin
    
		INSERT INTO sre_recaudaciones.sre_fac_recepciones_errores_detalles
		(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_error_id, codigo_error_id, fecha_registro, fecha_ultima_modificacion, estado_id)
		VALUES(
			p_usuario_registro_id ,
			p_usuario_ultima_modificacion_id ,
			p_recepcion_error_id ,
			p_codigo_error_id ,
			p_fecha_registro ,
			p_fecha_ultima_modificacion ,
			p_estado_id 
		) returning recepcion_error_detalle_id into v_ultimo_registro;
  		
		return v_ultimo_registro;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_errores_detalles'));

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_errores_detalles_facturacion_manual(p_id_recepciones_errores bigint, p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_codigo_error_id integer, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_crud_crear character varying, p_tipo_documento_sector_id integer, p_tipo_documento_fiscal_id integer)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos de detalles de errores, llama a la funcion que arma la consulta INSERT y la ejecuta con los datos.
PARAMETROS INGRESO
datos para registro en las tablas de detalles errores
PARAMETROS SALIDA
id de registro de detalles errores
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_ultimo_registro bigint:=0;
v_sql CHARACTER VARYING;
v_resultado bigint :=0;
begin
  v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_errores_detalles_facturacion_manual(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id, p_tipo_crud_crear));
	execute v_sql  
	    using 
				p_id_recepciones_errores,
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_codigo_error_id,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id
	 into v_resultado;
	
	return v_resultado;
  
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_errores_detalles_facturacion_manual'));

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_errores_facturacion_manual(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_recepcion_id bigint, p_sucursal_contribuyente_id bigint, p_persona_contribuyente_id bigint, p_actividad_economica_id integer, p_tipo_modalidad_id integer, p_tipo_documento_sector_id integer, p_tipo_documento_fiscal_id integer, p_estado_recepcion_documento_fiscal_id integer, p_codigo_actividad integer, p_numero_sucursal bigint, p_numero_factura bigint, p_caed character varying, p_fecha_emision timestamp without time zone, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_crud_crear character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Llama a la funcion que arma la consulta INSERT y la ejecuta, enviando los datos para el registro de errores
PARAMETROS INGRESO
Datos necesarios para registro de errores tomando en cuenta que las tablas son similares.
PARAMETROS SALIDA
id de registro de error
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_ultimo_registro bigint:=0;
v_resultado bigint:=0;
v_sql varchar:='0';	
begin
	 v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_errores_facturacion_manual_etapa_2(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id, p_tipo_crud_crear));
	execute v_sql  
	    using 
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_recepcion_id,
				p_sucursal_contribuyente_id,
				p_persona_contribuyente_id,
				p_actividad_economica_id,
				p_tipo_modalidad_id,
				p_tipo_documento_sector_id,
				p_tipo_documento_fiscal_id,
				p_estado_recepcion_documento_fiscal_id,
				p_codigo_actividad,
				p_numero_sucursal,
				p_numero_factura,
				p_caed,
				p_fecha_emision,
				p_fecha_envio,
				p_fecha_recepcion,
				p_fecha_consolidacion,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id			
	 into v_resultado;
	
	return v_resultado;
  EXCEPTION
  when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_errores_facturacion_manual'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_paquete_compra_etapa_1(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_sistema_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_oficina_id integer, p_sucursal_id integer, p_tipo_modalidad_id integer, p_estado_recepcion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cufd character varying, p_cuis character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	--v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1(p_tipo_documento_sector_id));
	 
		v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_compras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, sucursal_id, estado_recepcion_id, tipo_documento_fiscal_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning  recepcion_paquete_turismo_receptivo_id';

	    
	    execute v_sql  
	    using 
	    p_usuario_registro_id,
		p_usuario_ultima_modificacion_id,
		p_sistema_id,
		p_persona_contribuyente_id,
		p_punto_venta_id,
		p_sucursal_id,
		p_tipo_modalidad_id,
		p_estado_recepcion_id,
		p_tipo_documento_fiscal_id,
		p_cufd,
		p_cuis,
		p_fecha_envio,
		p_fecha_recepcion,
		p_fecha_consolidacion,
		p_fecha_registro,
		p_fecha_ultima_modificacion,
		p_estado_id
	    into v_ultimo_registro;
	    	  	
	  end if;
	  
	  return v_ultimo_registro;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_paquete_compra_etapa_1'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_paquete_dinamico_etapa_1(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_sistema_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_oficina_id integer, p_sucursal_id integer, p_tipo_modalidad_id integer, p_estado_recepcion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cufd character varying, p_cuis character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1(p_tipo_documento_sector_id));

	    
	    execute v_sql  
	    using 
	    p_usuario_registro_id,
		p_usuario_ultima_modificacion_id,
		p_sistema_id,
		p_persona_contribuyente_id,
		p_punto_venta_id,
		p_oficina_id,
		p_sucursal_id,
		p_tipo_modalidad_id,
		p_estado_recepcion_id,
		p_tipo_documento_fiscal_id,
		p_tipo_documento_sector_id,
		p_cufd,
		p_cuis,
		p_fecha_envio,
		p_fecha_recepcion,
		p_fecha_consolidacion,
		p_fecha_registro,
		p_fecha_ultima_modificacion,
		p_estado_id,
		p_tipo_emision_id
	    into v_ultimo_registro;
	    	  	
	  end if;
	  
	  return v_ultimo_registro;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_paquete_dinamico_etapa_1'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_recepciones_paquete_dinamico_etapa_1_contingencia(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_sistema_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_oficina_id integer, p_sucursal_id integer, p_tipo_modalidad_id integer, p_estado_recepcion_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cufd character varying, p_cuis character varying, p_fecha_envio timestamp without time zone, p_fecha_recepcion timestamp without time zone, p_fecha_consolidacion timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_emision_id integer, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1_cnt(p_tipo_documento_sector_id));

	    
	    execute v_sql  
	    using 
	    p_usuario_registro_id,
		p_usuario_ultima_modificacion_id,
		p_sistema_id,
		p_persona_contribuyente_id,
		p_punto_venta_id,
		p_oficina_id,
		p_sucursal_id,
		p_tipo_modalidad_id,
		p_estado_recepcion_id,
		p_tipo_documento_fiscal_id,
		p_tipo_documento_sector_id,
		p_cufd,
		p_cuis,
		p_fecha_envio,
		p_fecha_recepcion,
		p_fecha_consolidacion,
		p_fecha_registro,
		p_fecha_ultima_modificacion,
		p_estado_id,
		p_tipo_emision_id
	    into v_ultimo_registro;
	    	  	
	  end if;
	  
	  return v_ultimo_registro;
	  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_recepciones_paquete_dinamico_etapa_1_contingencia'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_registro_compras_dinamico(p_json json, p_id_recepciones_correctas bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
--*****sre_fac_ventas_estandares
	cadena varchar;
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_recepcion_correcta_id bigint; 
	p_persona_contribuyente_id bigint; 
	p_persona_vendedor_id bigint;
	p_punto_venta_id integer; 
	p_venta_estandar_id bigint;
	p_sucursal_id integer; 
	p_tipo_departamento_id integer; 
	p_tipo_ambiente_id integer; 
	p_tipo_emision_id integer; 
	p_tipo_modalidad_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_tipo_documento_identidad_id integer; 
	p_tipo_documento_sector_id integer; 
	p_tipo_registro_id integer;
	p_estado_factura_id integer; 
	p_metodo_pago_id integer; 
	p_numero_tarjeta bigint; 
	p_nit_emisor bigint; 
	p_codigo_cliente varchar; 
	p_numero_factura bigint; 
	p_cuf varchar; 
	p_caed varchar; 
	p_cufd varchar;
	p_cuis varchar;
	p_direccion varchar; 
	p_usuario varchar; 
	p_numero_documento varchar;
	p_complemento varchar; 
	p_nombre_razon_social varchar;
	p_monto_total numeric(25,5); 
	p_monto_descuento numeric(25,5);
	p_leyenda varchar; 
	p_fecha_emision timestamp;
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp;
	p_estado_id varchar;
	p_tipo_moneda_id integer;	
	p_tipo_cambio numeric(25,5);
	p_monto_total_moneda numeric(25,5);
		
--*****sre_fac_ventas_alquileres
	p_periodo_facturado_alq varchar;

--*****sre_fac_ventas_bancos
	p_monto_total_arrendamiento numeric(25,5);

--*****sre_fac_ventas_colegios	
	p_periodo_facturado_col varchar;
	p_nombre_estudiante varchar;

--*****sre_fac_ventas_monedas_extranjeras
	p_monto_diferencia_tipo_cambio numeric(25,5);
	p_tipo_operacion_id int4;
	p_tipo_cambio_oficial numeric(20,5);
	
--*****sre_fac_ventas_combustibles
	p_codigo_pais_id int4;
	p_placa_vehiculo varchar;
	p_tipo_envase varchar;
	p_monto_ley317 numeric(25,5);
	p_monto_total_sujeto_iva numeric(25,5);

--*****sre_fac_ventas_embotelladoras
	p_monto_ice numeric(20,5);
	p_monto_total_sujeto_iva_ice numeric(20,5);

--*****sre_fac_ventas_espectaculos_nacionales
--	sre_fac_ventas_espectaculos
	p_tipo_evento varchar;
	p_lugar_evento varchar;
	p_artista_evento varchar;
	p_nit_salon_evento int8;
	p_direccion_salon_evento varchar;
	p_fecha_evento timestamp;
	

--*****sre_fac_ventas_espectaculos
	p_tipo_evento_ae varchar;
	p_lugar_evento_ae varchar;
	p_artista_evento_ae varchar;
	p_nit_salon_evento_ae int8;
	p_direccion_salon_evento_ae varchar;
	p_fecha_evento_ae timestamp;

--*****sre_fac_ventas_exportaciones
	p_otros_montos numeric(25,5);
	p_monto_total_puerto numeric(25,5);
	p_precio_valor_bruto numeric(25,5);
	p_gastos_transporte_frontera numeric(25,5);
	p_gastos_seguro_frontera numeric(25,5);
	p_total_fob_frontera numeric(25,5);
	p_monto_transporte_frontera numeric(25,5);
	p_monto_seguro_internacional numeric(25,5);
	p_incoterm varchar;
	p_lugar_destino varchar;
	p_puerto_destino varchar;
	p_tipo_pais_id int4;
	p_direccion_comprador varchar;

--*****sre_fac_ventas_hidrocarburos
	p_ciudad_hid varchar;
	p_nombre_propietario_hid varchar;
	p_nombre_representante_legal_hid varchar;
	p_condicion_pago_hid varchar;
	p_periodo_entrega_hid varchar;
	p_monto_iehd_hid numeric(20,5);
						 

--*****sre_fac_ventas_hospitales
	p_modalidad_servicio varchar;

--*****sre_fac_ventas_hoteles
	p_cantidad_huespedes int4;
	p_cantidad_habitaciones int4;
	p_cantidad_mayores int4;
	p_cantidad_menores int4;
	p_fecha_ingreso_hospedaje timestamp;

--*****sre_fac_ventas_juegos
	p_monto_total_sujeto_ipj numeric(25,5);
	p_monto_total_ij numeric(25,5);

--*****sre_fac_ventas_libres_consignaciones
	p_remitente_lc varchar;
	p_consignatario_lc varchar;
	p_tipo_pais_id_lc int4;
	p_lugar_destino_lc varchar;
	p_lugar_acopio_puerto_lc varchar;

--*****sre_fac_ventas_turismos_receptivos
	p_nit_operador_turismo varchar;
	p_razon_social_operador varchar;
	
--*****sre_fac_ventas_seguridades_alimentarias

	
--*****sre_fac_ventas_servicios
	p_numero_medidor varchar;
	p_ciudad_servicios varchar;
	p_zona varchar;
	p_gestion int4;
	p_mes varchar;
	p_domicilio_comprador varchar;
	p_consumo_kwh numeric(20,5);
	p_consumo_metros_cubicos numeric(20,5);
	p_monto_descuento_ley1886 numeric(20,5);
	p_tasa_aseo numeric(20,5);
	p_tasa_alumbrado numeric(20,5);
	p_monto_total_sujeto_iva_servicios numeric(20,5);
	-- add 20190514 rgt
	p_descuento_sin_afectacion numeric(20,5); 

--*****sre_fac_ventas_tasas_ceros
	
	

--*****sre_fac_ventas_zonas_francas
	p_numero_parte_recepcion varchar;
		
--*****sre_fac_notas_creditos_debitos	
	p_estado_notadc_id int4;
	p_numero_notadc int8; 
    p_monto_total_original numeric(20,5);
    p_monto_total_devuelto numeric(20,5);
    p_monto_efectivo_credito_debito numeric(20,5);     
    p_numero_autorizacion_cuf varchar(200);
    p_fecha_emision_factura timestamp;
	
--*****sre_fac_prevaloradas   
    p_cufp  varchar(100);
    p_cuape varchar(20);
    
--*****sre_fac_notas_conciliaciones    	
	p_monto_total_conciliado numeric(20,5);										
	p_estado_nota_conciliacion_id int4;
	p_numero_nota_conciliacion int8;	
	
--*****sre_fac_ventas_exportaciones_ypfb add rgt 20190410
	p_mes_facturacion varchar;
	p_direccion_destinatario varchar;
	p_otros_montos_ypfb numeric(20,5);
	p_monto_total_puerto_ypfb numeric(20,5);
	p_precio_valor_bruto_ypyb numeric(20,5);
	p_gastos_transporte_frontera_ypfb numeric(20,5);
	p_gastos_seguro_frontera_ypfb numeric(20,5);
	p_total_fob_frontera_ypfb numeric(20,5);
	p_monto_transporte_frontera_ypfb numeric(20,5);
	p_monto_seguro_internacional_ypfb numeric(20,5);
	p_monto_total_cpt numeric(20,5);
	p_incoterm_ypfb varchar;
	p_lugar_destino_ypfb varchar;
	p_puerto_destino_ypfb varchar;
	p_tipo_pais_id_ypfb int4;
    
--*****sre_fac_ventas_mineras_internas	
	p_concentrado_granel varchar;
	p_origen varchar;
	p_numero_lote varchar;
	p_toneladas_metricas_humedas numeric(20,5);
	p_merma numeric(20,5);
	p_kilos_netos_secos numeric(20,5);
	p_sub_total numeric(20,5);
	p_gastos_realizacion numeric(20,5);
	p_iva numeric(20,5);
	p_liquidacion_preliminar numeric(20,5);								
	p_subtotal numeric(20,5);
	p_tipo_cambio_anb numeric(20,5);
	
--*****sre_fac_ventas_exportaciones_mineras		
	p_direccion_comprador_em varchar(300);
	p_concentrado_granel_em varchar(100);
	p_origen_em varchar(100);
	p_puerto_transito_em varchar(100);
	p_puerto_destino_em varchar(100);
	p_pais_destino_em int4;
	p_incoterm_em varchar(100);
	p_numero_lote_em varchar(100);
	p_partida_arancelaria_em varchar(100);
	p_toneladas_metricas_humedas_em numeric(20,5);
	p_merma_em numeric(20,5);
	p_kilos_netos_secos_em numeric(20,5);
	p_sub_total_em numeric(20,5);
	p_gastos_realizacion_em numeric(20,5);
	p_iva_em numeric(20,5);
	p_liquidacion_preliminar_em numeric(20,5);
	p_tipo_cambio_anb_em numeric(20,5);

--*****sre_fac_ventas_libres_consignaciones_ypfb   
    p_direccion_consignatario varchar(300);	
	p_atencion_consignatario varchar(100);	
	p_destinatario varchar(200);	
	p_atencion_destinatario varchar(100);	
	p_fax_exportador varchar(50);	
	p_numero_contrato varchar(100);	
	p_contacto_exportador varchar(100);	
	p_telefono_exportador varchar(50);	
	p_banco_pago varchar(100);	
	p_numero_cuenta_pago varchar(100);	
	p_nombre_cuenta_pago varchar(100);	
	p_codigo_swift_pago varchar(100);	
	p_codigo_fedwire_pago varchar(100);	
	p_codigo_chips_pago varchar(100);	
	p_plaza_pago varchar(100);	
	p_direccion_pago varchar(300);	
	p_modalidad_pago varchar(100);	
	p_termino_pago varchar(100);	
	p_movimiento varchar(100);	
	p_pais_origen int4;
	p_pais_destino int4;
	p_exportador varchar(100);	
	p_embarque varchar(100);
	p_consignatario varchar(200);
	
--*****sre_fac_ventas_boletos_aereos   	
	p_numero_boleto_aereo int8;
	p_numero_documento_beneficiario varchar;
	p_nombre_razon_social_emisor varchar(200);
	p_nombre_razon_social_beneficiario varchar(200);
	p_nombre_pasajero varchar(300);
	p_numero_documento_pasajero varchar;
	p_codigo_iata_linea_aerea int4;
	p_codigo_iata_agencia int4;
	p_nit_agente_viaje int8;
	p_codigo_origen_servicio varchar(50);
	p_monto_tarifa numeric(20,5);
	p_monto_total_boleto numeric (20,5);
	p_monto_sujeto_iva numeric (20,5);
	p_codigo_transaccion varchar;

--*****sre_fac_ventas_telecomunicaciones
	p_nit_cojunto  int8;
	
--*****sre_fac_notas_creditos_debitos_sfv	
	p_numero_autorizacion varchar(100); ---reemplaza al cuf
	p_codigo_control varchar(50);      ---nuevo campo

	v_fecha_actual timestamp:=now();
	v_resultado bigint:=0;
begin
--Realizar llamada al método sre_fac_ope_armar_consulta_registro_ventas
	---------------DATOS DE LA TABLA: Ventas---------------
	--***** Datos Compra
	p_usuario_registro_id :=1000;
	p_usuario_ultima_modificacion_id :=1000;
	p_recepcion_correcta_id :=p_id_recepciones_correctas; --ID	
	p_persona_contribuyente_id :=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint);
	p_persona_vendedor_id :=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((p_json->'XmlFactura'->'registroCompraFacturacion'->>'nitVendedor')::bigint);
	cadena := replace((p_json->'XmlFactura'->'registroCompraFacturacion'->>'codigoPuntoVenta'),' ','');
	cadena := replace(replace(regexp_replace(cadena, E'[\\n\\r]+', ' ', 'g' ),' ',''),'{"xsi:nil":true}',null);
	p_punto_venta_id := cadena::integer; -- sre_recaudaciones.sre_fac_ope_limpiar_objeto_json((p_json->'XmlFactura'->'registroCompraFacturacion'->>'codigoPuntoVenta'));
	-- funcionalidad para verificar el id de la factura (manual o electronica)
	p_venta_estandar_id := 1;
	--p_sucursal_id :=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');--mod 20190520
	p_sucursal_id :=(p_json->'XmlFactura'->'registroCompraFacturacion' ->>'codigoSucursal');
	p_tipo_departamento_id := 1; --sre_recaudaciones.sre_fac_ope_obtener_departamento_id((p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint); --add:20190328
	p_tipo_ambiente_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	-- funcionalidad para verificar el tipo documento sector de la compra
	p_tipo_documento_sector_id := 1;
	p_estado_factura_id :=3112; --Estado de registro de la compra
	p_nit_emisor :=(p_json->'XmlFactura'->'registroCompraFacturacion'->>'nitVendedor');
	p_numero_factura :=(p_json->'XmlFactura'->'registroCompraFacturacion' ->>'numeroFactura');
	p_cuf :=(p_json->'XmlFactura'->'registroCompraFacturacion' ->>'cuf');
	cadena := replace((p_json->'XmlFactura'->'registroCompraFacturacion' ->>'caed'),' ','');
	cadena := replace(replace(regexp_replace(cadena, E'[\\n\\r]+', ' ', 'g' ),' ',''),'{"xsi:nil":true}',null);
	p_caed :=cadena::integer;
	p_monto_total :=(p_json->'XmlFactura'->'registroCompraFacturacion' ->>'montoTotal');
	cadena := replace((p_json->'XmlFactura'->'registroCompraFacturacion' ->>'montoDescuento'),' ','');
	cadena := replace(replace(regexp_replace(cadena, E'[\\n\\r]+', ' ', 'g' ),' ',''),'{"xsi:nil":true}',null);
	p_monto_descuento := cadena::integer;
	p_fecha_emision :=(p_json->'XmlFactura'->'registroCompraFacturacion' ->>'fechaEmision');
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;
	p_estado_id :='AC';
	p_tipo_registro_id := (p_json->'XmlFactura'->'registroCompraFacturacion' ->>'tipoRegistro');
	--INSERT
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 										 
		INSERT INTO sre_recaudaciones.sre_fac_compras_estandares
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_correcta_compra_estandar_id, 
		persona_compra_id, 
		persona_venta_id, 
		venta_estandar_id, 
		punto_venta_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_sector_id, 
		estado_compra_id, 
		nit_emisor, 
		numero_factura, 
		cuf, 
		monto_total_credito_fiscal, 
		monto_descuento, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_registro_compra_id)		
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  
		p_persona_contribuyente_id, 
		p_persona_vendedor_id,
		p_punto_venta_id,
		p_venta_estandar_id,
		p_sucursal_id,
		p_tipo_departamento_id,
		p_tipo_ambiente_id,
		p_tipo_documento_fiscal_id,
		p_tipo_documento_sector_id,
		p_estado_factura_id,
		p_nit_emisor,
		p_numero_factura,
		p_cuf,
		p_monto_total,
		p_monto_descuento,
		p_fecha_emision,
		p_fecha_registro,
		p_fecha_ultima_modificacion,
		p_estado_id,
		p_tipo_registro_id
		) returning compra_estandar_id into v_resultado;
		return v_resultado;
	end case;
			
		return v_resultado;
  
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_registro_ventas_dinamico'));	

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_registro_ventas_dinamico(p_json json, p_id_recepciones_correctas bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Para el sector 28-PREVALORADO se modifico la obtencion de los datos: cufp y cuap 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<08/10/2019>
AUTOR DE LA MODIFICACION : :<Victor Cruz Gomez>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste tamaño p_cuape varchar(100) prevalorada sector 28 
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 15/11/2019
AUTOR DE LA MODIFICACION : Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare   
--*****sre_fac_ventas_estandares
     p_usuario_registro_id bigint; 
     p_usuario_ultima_modificacion_id bigint; 
     p_recepcion_correcta_id bigint; 
     p_persona_contribuyente_id bigint; 
     p_punto_venta_id integer; 
     p_sucursal_id integer; 
     p_tipo_departamento_id integer; 
     p_tipo_ambiente_id integer; 
     p_tipo_emision_id integer; 
     p_tipo_modalidad_id integer; 
     p_tipo_documento_fiscal_id integer; 
     p_tipo_documento_identidad_id integer; 
     p_tipo_documento_sector_id integer; 
     p_estado_factura_id integer; 
     p_metodo_pago_id integer; 
     p_numero_tarjeta bigint; 
     p_nit_emisor bigint; 
     p_codigo_cliente varchar; 
     p_numero_factura bigint; 
     p_cuf varchar; 
     p_cufd varchar;
     p_cuis varchar;
     p_direccion varchar; 
     p_usuario varchar; 
     p_numero_documento varchar;
     p_complemento varchar; 
     p_nombre_razon_social varchar;
     p_monto_total numeric(25,5); 
     p_monto_descuento numeric(25,5);
     p_leyenda varchar; 
     p_fecha_emision timestamp;
     p_fecha_registro timestamp;
     p_fecha_ultima_modificacion timestamp;
     p_estado_id varchar;
     p_tipo_moneda_id integer;     
     p_tipo_cambio numeric(25,5);
     p_monto_total_moneda numeric(25,5);
          
--*****sre_fac_ventas_alquileres
     p_periodo_facturado_alq varchar;

--*****sre_fac_ventas_bancos
     p_monto_total_arrendamiento numeric(25,5);

--*****sre_fac_ventas_colegios     
     p_periodo_facturado_col varchar;
     p_nombre_estudiante varchar;

--*****sre_fac_ventas_monedas_extranjeras
     p_monto_diferencia_tipo_cambio numeric(25,5);
     p_tipo_operacion_id int4;
     p_tipo_cambio_oficial numeric(20,5);
     
--*****sre_fac_ventas_combustibles
     p_codigo_pais_id int4;
     p_placa_vehiculo varchar;
     p_tipo_envase varchar;
     p_monto_ley317 numeric(25,5);
     p_monto_total_sujeto_iva numeric(25,5);

--*****sre_fac_ventas_embotelladoras
     p_monto_ice numeric(20,5);
     p_monto_total_sujeto_iva_ice numeric(20,5);

--*****sre_fac_ventas_espectaculos_nacionales
--   sre_fac_ventas_espectaculos
     p_tipo_evento varchar;
     p_lugar_evento varchar;
     p_artista_evento varchar;
     p_nit_salon_evento int8;
     p_direccion_salon_evento varchar;
     p_fecha_evento timestamp;
     

--*****sre_fac_ventas_espectaculos
     p_tipo_evento_ae varchar;
     p_lugar_evento_ae varchar;
     p_artista_evento_ae varchar;
     p_nit_salon_evento_ae int8;
     p_direccion_salon_evento_ae varchar;
     p_fecha_evento_ae timestamp;

--*****sre_fac_ventas_exportaciones
     p_otros_montos numeric(25,5);
     p_monto_total_puerto numeric(25,5);
     p_precio_valor_bruto numeric(25,5);
     p_gastos_transporte_frontera numeric(25,5);
     p_gastos_seguro_frontera numeric(25,5);
     p_total_fob_frontera numeric(25,5);
     p_monto_transporte_frontera numeric(25,5);
     p_monto_seguro_internacional numeric(25,5);
     p_incoterm varchar;
     p_lugar_destino varchar;
     p_puerto_destino varchar;
     p_tipo_pais_id int4;
     p_direccion_comprador varchar;

--*****sre_fac_ventas_hidrocarburos
     p_ciudad_hid varchar;
     p_nombre_propietario_hid varchar;
     p_nombre_representante_legal_hid varchar;
     p_condicion_pago_hid varchar;
     p_periodo_entrega_hid varchar;
     p_monto_iehd_hid numeric(20,5);
                               

--*****sre_fac_ventas_hospitales
     p_modalidad_servicio varchar;

--*****sre_fac_ventas_hoteles
     p_cantidad_huespedes int4;
     p_cantidad_habitaciones int4;
     p_cantidad_mayores int4;
     p_cantidad_menores int4;
     p_fecha_ingreso_hospedaje timestamp;

--*****sre_fac_ventas_juegos
     p_monto_total_sujeto_ipj numeric(25,5);
     p_monto_total_ij numeric(25,5);

--*****sre_fac_ventas_libres_consignaciones
     p_remitente_lc varchar;
     p_consignatario_lc varchar;
     p_tipo_pais_id_lc int4;
     p_lugar_destino_lc varchar;
     p_lugar_acopio_puerto_lc varchar;

--*****sre_fac_ventas_turismos_receptivos
     --p_cantidad_huespedes int4;
     --p_cantidad_habitaciones int4;
     --p_cantidad_mayores int4;
     --p_cantidad_menores int4;
     --p_fecha_ingreso_hospedaje timestamp;
     p_nit_operador_turismo varchar;
     p_razon_social_operador varchar;

     
--*****sre_fac_ventas_servicios
     p_numero_medidor varchar;
     p_ciudad_servicios varchar;
     p_zona varchar;
     p_gestion int4;
     p_mes varchar;
     p_domicilio_comprador varchar;
     p_consumo_kwh numeric(20,5);
     p_consumo_metros_cubicos numeric(20,5);
     p_monto_descuento_ley1886 numeric(20,5);
     p_tasa_aseo numeric(20,5);
     p_tasa_alumbrado numeric(20,5);
     p_monto_total_sujeto_iva_servicios numeric(20,5);
     -- add 20190514 rgt
     p_descuento_sin_afectacion numeric(20,5); 

--*****sre_fac_ventas_zonas_francas
     p_numero_parte_recepcion varchar;
          
--*****sre_fac_notas_creditos_debitos   
     p_estado_notadc_id int4;
     p_numero_notadc int8; 
    p_monto_total_original numeric(20,5);
    p_monto_total_devuelto numeric(20,5);
    p_monto_efectivo_credito_debito numeric(20,5);     
    p_numero_autorizacion_cuf varchar(200);
    p_fecha_emision_factura timestamp;
     
--*****sre_fac_prevaloradas   
    p_cufp  varchar(100);
    p_cuape varchar(100);
    
--*****sre_fac_notas_conciliaciones    
     --p_monto_total_original numeric(20,5);                                                                      
     p_monto_total_conciliado numeric(20,5);                                                
     --p_monto_efectivo_credito_debito numeric(20,5);       
     p_estado_nota_conciliacion_id int4;
     p_numero_nota_conciliacion int8;   
     --p_numero_autorizacion_cuf varchar;
     --p_fecha_emision_factura timestamp;
     
--*****sre_fac_ventas_exportaciones_ypfb add rgt 20190410
     p_mes_facturacion varchar;
     p_direccion_destinatario varchar;
     p_otros_montos_ypfb numeric(20,5);
     p_monto_total_puerto_ypfb numeric(20,5);
     p_precio_valor_bruto_ypyb numeric(20,5);
     p_gastos_transporte_frontera_ypfb numeric(20,5);
     p_gastos_seguro_frontera_ypfb numeric(20,5);
     p_total_fob_frontera_ypfb numeric(20,5);
     p_monto_transporte_frontera_ypfb numeric(20,5);
     p_monto_seguro_internacional_ypfb numeric(20,5);
     p_monto_total_cpt numeric(20,5);
     p_incoterm_ypfb varchar;
     p_lugar_destino_ypfb varchar;
     p_puerto_destino_ypfb varchar;
     p_tipo_pais_id_ypfb int4;
    
--*****sre_fac_ventas_mineras_internas  
     --p_direccion_comprador varchar;
     p_concentrado_granel varchar;
     p_origen varchar;
     p_numero_lote varchar;
     p_toneladas_metricas_humedas numeric(20,5);
     p_merma numeric(20,5);
     p_kilos_netos_secos numeric(20,5);
     p_sub_total numeric(20,5);
     p_gastos_realizacion numeric(20,5);
     p_iva numeric(20,5);
     p_liquidacion_preliminar numeric(20,5);                                     
     p_subtotal numeric(20,5);
     p_tipo_cambio_anb numeric(20,5);
     
--*****sre_fac_ventas_exportaciones_mineras -> sector 25         
     p_direccion_comprador_em varchar(300);
     p_concentrado_granel_em varchar(100);
     p_origen_em varchar(100);
     p_puerto_transito_em varchar(100);
     p_puerto_destino_em varchar(100);
     p_pais_destino_em int4;
     p_incoterm_em varchar(100);
     p_numero_lote_em varchar(100);
     p_partida_arancelaria_em varchar(100);
     p_toneladas_metricas_humedas_em numeric(20,5);
     p_merma_em numeric(20,5);
     p_kilos_netos_secos_em numeric(20,5);
     p_sub_total_em numeric(20,5);
     p_gastos_realizacion_em numeric(20,5);
     p_iva_em numeric(20,5);
     p_liquidacion_preliminar_em numeric(20,5);
     p_tipo_cambio_anb_em numeric(20,5);

     p_kilos_netos_humedos numeric(20,5);
     p_humedad_porcentaje numeric(20,5);
     p_humedad_valor numeric(20,5);
     p_merma_porcentaje numeric(20,5);
     p_merma_valor numeric(20,5);

--*****sre_fac_ventas_libres_consignaciones_ypfb   
    p_direccion_consignatario varchar(300);  
     p_atencion_consignatario varchar(100);  
     p_destinatario varchar(200);  
     --p_direccion_destinatario varchar(300);     
     p_atencion_destinatario varchar(100);   
     p_fax_exportador varchar(50); 
     p_numero_contrato varchar(100);    
     p_contacto_exportador varchar(100);     
     p_telefono_exportador varchar(50); 
     p_banco_pago varchar(100);    
     p_numero_cuenta_pago varchar(100); 
     p_nombre_cuenta_pago varchar(100); 
     p_codigo_swift_pago varchar(100);  
     p_codigo_fedwire_pago varchar(100);     
     p_codigo_chips_pago varchar(100);  
     p_plaza_pago varchar(100);    
     p_direccion_pago varchar(300);     
     p_modalidad_pago varchar(100);     
     p_termino_pago varchar(100);  
     p_movimiento varchar(100);    
     p_pais_origen int4;
     p_pais_destino int4;
     p_exportador varchar(100);    
     p_embarque varchar(100);
     p_consignatario varchar(200);
     
--*****sre_fac_ventas_boletos_aereos   
     p_numero_boleto_aereo int8;
     p_numero_documento_beneficiario varchar;
     p_nombre_razon_social_emisor varchar(200);
     p_nombre_razon_social_beneficiario varchar(200);
     p_nombre_pasajero varchar(300);
     p_numero_documento_pasajero varchar;
     p_codigo_iata_linea_aerea int4;
     p_codigo_iata_agencia int4;
     p_nit_agente_viaje int8;
     p_codigo_origen_servicio varchar(50);
     p_monto_tarifa numeric(20,5);
     p_monto_total_boleto numeric (20,5);
     p_monto_sujeto_iva numeric (20,5);
     p_codigo_transaccion varchar;

--*****sre_fac_ventas_telecomunicaciones
     p_nit_cojunto  int8;
     
--*****sre_fac_notas_creditos_debitos_sfv    
     p_numero_autorizacion varchar(100); ---reemplaza al cuf
     p_codigo_control varchar(50);      ---nuevo campo

     v_fecha_actual timestamp:=now();
     v_resultado bigint:=0;
begin
--Realizar llamada al método sre_fac_ope_armar_consulta_registro_ventas

     ---------------DATOS DE LA TABLA: Ventas---------------
     --***** Datos Estandar
     p_usuario_registro_id :=1000;
     p_usuario_ultima_modificacion_id :=1000;
     p_recepcion_correcta_id :=p_id_recepciones_correctas; --ID
     p_persona_contribuyente_id :=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint);
     p_punto_venta_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta');
     --p_sucursal_id :=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');--mod 20190520
     p_sucursal_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
     p_tipo_departamento_id :=sre_recaudaciones.sre_fac_ope_obtener_departamento_id((p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint); --add:20190328
     p_tipo_ambiente_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
     p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
     p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');
     p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
     p_tipo_documento_identidad_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
     --p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); --mod 20190520
     p_tipo_documento_sector_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector');
     p_estado_factura_id :=1495; --Estado de registro
     p_metodo_pago_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago');
     p_numero_tarjeta :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroTarjeta');
     p_nit_emisor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
     p_codigo_cliente :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoCliente');
     p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
     p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
     p_cufd :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
     p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
     p_direccion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccion');
     p_usuario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'usuario');
     p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
     p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'complemento');
     p_nombre_razon_social :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
     p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
     p_monto_descuento :=0;
     p_leyenda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'leyenda');
     p_fecha_emision :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
     p_fecha_registro :=v_fecha_actual;
     p_fecha_ultima_modificacion :=v_fecha_actual;
     p_estado_id :='AC';
     p_tipo_moneda_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda');
     p_tipo_cambio :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio');
     p_monto_total_moneda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda');
     
     --***** Datos sre_fac_ventas_bancos
     p_monto_total_arrendamiento:=10.5; 
     
     --***** Datos sre_fac_ventas_combustibles
     p_codigo_pais_id:=10;
     p_placa_vehiculo:='-';
     p_tipo_envase:='-';
     p_monto_ley317:=10.5;
     p_monto_total_sujeto_iva:=10.5;

     --***** Datos sre_fac_ventas_embotelladoras
     p_monto_ice:=10.5;


     --***** Datos sre_fac_ventas_exportaciones
     p_otros_montos:=0.0;
     p_monto_total_puerto:=0.0;
     p_precio_valor_bruto:=0.0;
     p_gastos_transporte_frontera:=0.0;
     p_gastos_seguro_frontera:=0.0;
     p_total_fob_frontera:=0.0;
     p_monto_transporte_frontera:=0.0;
     p_monto_seguro_internacional:=0.0;
     p_incoterm:='-';
     p_lugar_destino:='-';
     p_puerto_destino:='-';
     p_tipo_pais_id:=10;
     p_direccion_comprador:='-';


     --***** Datos sre_fac_ventas_juegos
     p_monto_total_sujeto_ipj:=0.0;
     p_monto_total_ij:=0.0;

     case
          when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
                then                                                      
          INSERT INTO sre_recaudaciones.sre_fac_ventas_estandares
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_estandar_id, --*
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda
          ) returning venta_estandar_id into v_resultado;

          return v_resultado;
                                                                         
          --add 20190409 vcg
          when p_tipo_documento_sector_id = 2  --Nota: FACTURA SECTORES EDUCATIVOS
                then
          --***** Datos sre_fac_ventas_colegios   
          p_periodo_facturado_col:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'periodoFacturado');
          p_nombre_estudiante:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreEstudiante');
                
          INSERT INTO sre_recaudaciones.sre_fac_ventas_colegios
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_colegio_id, --*
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda,
          --campos colegios,
          periodo_facturado,
          nombre_estudiante
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda,
          --campos colegios
          p_periodo_facturado_col,
          p_nombre_estudiante      
          ) returning venta_colegio_id into v_resultado;

          return v_resultado; 
                     
          when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
                then                                           
                -- rgt 08/04/2019
                
                p_periodo_facturado_alq :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'periodoFacturado');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_alquileres
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_alquiler_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                --alquiler
                periodo_facturado
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                --alquiler
                p_periodo_facturado_alq
                ) returning venta_alquiler_id into v_resultado;
     
                return v_resultado;
          --add 20190408 jf   
          when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
                then                 
                INSERT INTO sre_recaudaciones.sre_fac_ventas_combustibles                   
             (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_combustible_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda, placa_vehiculo, tipo_envase, monto_ley317, monto_total_sujeto_iva, codigo_pais_id)
                VALUES(p_usuario_registro_id,  p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id,   p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id,  p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id,  p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion,  p_usuario, p_numero_documento,  p_complemento, p_nombre_razon_social,  p_monto_total, p_monto_descuento, p_leyenda, p_fecha_emision,  p_fecha_registro, p_fecha_ultima_modificacion,  p_estado_id, p_tipo_moneda_id, p_tipo_cambio, p_monto_total_moneda, p_placa_vehiculo, p_tipo_envase, p_monto_ley317, p_monto_total_sujeto_iva, p_codigo_pais_id)                 
                returning venta_combustible_id into v_resultado;
                return v_resultado; 

          when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
                then      
                -- rgt 08/04/2019

                p_numero_medidor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroMedidor');
                p_ciudad_servicios :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'ciudad');
                p_zona  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'zona');
                p_gestion  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gestion');
                p_mes :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'mes');
                p_domicilio_comprador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'domicilioComprador');
                p_consumo_kwh  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consumoKwh');
                p_consumo_metros_cubicos  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consumoMetrosCubicos');
                p_monto_descuento_ley1886  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuentoLey1886');
                p_tasa_aseo :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAseo');
                p_tasa_alumbrado :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAlumbrado');
                p_monto_total_sujeto_iva_servicios :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva');
                p_descuento_sin_afectacion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'descuentoSinAfectacion');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_servicios
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_servicio_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                -- servicios
                numero_medidor,
              ciudad,
                zona,
              gestion,
                mes,
                domicilio_comprador,
                consumo_kwh,
                consumo_metros_cubicos,
                monto_descuento_ley1886,
                tasa_aseo,
                tasa_alumbrado,
                monto_total_sujeto_iva,
                descuento_sin_afectacion
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                -- servicios
                p_numero_medidor,
              p_ciudad_servicios,
                p_zona,
              p_gestion,
                p_mes,
                p_domicilio_comprador,
                p_consumo_kwh,
                p_consumo_metros_cubicos,
                p_monto_descuento_ley1886,
                p_tasa_aseo,
                p_tasa_alumbrado,
                p_monto_total_sujeto_iva_servicios,
                p_descuento_sin_afectacion
                ) returning venta_servicio_id into v_resultado;

                return v_resultado;
                     
          when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
                then                 
                -- rgt 08/04/2019
                
                p_monto_ice :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce');
                p_monto_total_sujeto_iva_ice :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_embotelladoras
                (
               usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_embotelladora_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                -- embotelladora
                monto_ice,
                monto_total_sujeto_iva
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                -- embotelladora
                p_monto_ice,
                p_monto_total_sujeto_iva_ice
                ) returning venta_embotelladora_id into v_resultado;

                return v_resultado;

          when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
                then                  
                p_monto_total_arrendamiento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalArendamiento');
                INSERT INTO sre_recaudaciones.sre_fac_ventas_bancos
                (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_banco_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_arrendamiento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda)
                values
                (p_usuario_registro_id,  p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id,   p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id,  p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id,  p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion,  p_usuario, p_numero_documento,  p_complemento, p_nombre_razon_social,  p_monto_total, p_monto_total_arrendamiento, p_leyenda, p_fecha_emision,  p_fecha_registro, p_fecha_ultima_modificacion,  p_estado_id, p_monto_descuento, p_tipo_moneda_id, p_tipo_cambio, p_monto_total_moneda)
                returning venta_banco_id into v_resultado;
                return v_resultado;
          --add 20190408 vcg                  
          when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
                then
                --***** Datos sre_fac_ventas_hoteles
          p_cantidad_huespedes:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHuespedes');
          p_cantidad_habitaciones:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHabitaciones');
          p_cantidad_mayores:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMayores');
          p_cantidad_menores:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMenores');
          p_fecha_ingreso_hospedaje:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje');
                
          INSERT INTO sre_recaudaciones.sre_fac_ventas_hoteles
                (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_hotel_id, 
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda,
          --campos hoteles
          cantidad_huespedes,
          cantidad_habitaciones,
          cantidad_mayores,
          cantidad_menores,
          fecha_ingreso_hospedaje       
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda,
          --campos hoteles
          p_cantidad_huespedes,
          p_cantidad_habitaciones,
          p_cantidad_mayores,
          p_cantidad_menores,
          p_fecha_ingreso_hospedaje
          ) returning venta_hotel_id into v_resultado;

          return v_resultado; 
          --add 20190408 jf   
          when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS      
                then
                p_modalidad_servicio:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'modalidadServicio');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_hospitales
                (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_hospital_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, complemento, modalidad_servicio, nombre_razon_social, monto_total, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda, numero_documento)
                VALUES (p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_complemento, p_modalidad_servicio, p_nombre_razon_social, p_monto_total, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_monto_descuento, p_tipo_moneda_id, p_tipo_cambio, p_monto_total_moneda, p_numero_documento)
                returning venta_hospital_id into v_resultado;
                return v_resultado; 
          --add 20190409 jf
          when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
                then      
                p_monto_total_sujeto_ipj:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIpj');
                p_monto_total_ij:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalIj');
                INSERT INTO sre_recaudaciones.sre_fac_ventas_juegos
                (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_juego_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, leyenda, monto_total_sujeto_ipj, monto_total_ij, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, monto_total_moneda, tipo_cambio)
                values(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_nombre_razon_social, p_monto_total, p_leyenda, p_monto_total_sujeto_ipj, p_monto_total_ij, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_monto_descuento, p_tipo_moneda_id, p_monto_total_moneda, p_tipo_cambio)
                returning venta_juego_id into v_resultado;
                return v_resultado; 
          return v_resultado; 

          when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
                then
                -- rgt 08/04/2019
                     
                p_tipo_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEvento');
                p_lugar_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarEvento');
                p_artista_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'artistaEvento');
                p_nit_salon_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitSalon');
                p_direccion_salon_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionSalon');
                p_fecha_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEvento');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_espectaculos
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_espectaculo_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                -- espectaculos
                tipo_evento,
                lugar_evento,
                artista_evento,
                nit_salon,
                direccion_salon,
                fecha_evento        
                )
               VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                -- espectaculos
                p_tipo_evento_ae,
                p_lugar_evento_ae,
                p_artista_evento_ae,
                p_nit_salon_evento_ae,
                p_direccion_salon_evento_ae,
                p_fecha_evento_ae
                ) returning venta_espectaculo_id into v_resultado;
     
          return v_resultado; 

          --add 20190409 jf        
          when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
                then                 
                p_incoterm:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
                p_lugar_destino:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
                p_puerto_destino:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
                p_tipo_pais_id:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
                p_direccion_comprador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
                --Agregando campos de la tabla que fueron creados despues de concluir el servicios
                p_monto_total_puerto:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalPuerto');
                p_precio_valor_bruto:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');
                p_gastos_transporte_frontera:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera');
                p_gastos_seguro_frontera:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera');
                p_total_fob_frontera:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera');                                                                              
          p_monto_transporte_frontera:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera');
         p_monto_seguro_internacional:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional');
         p_monto_descuento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento');
                p_otros_montos:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos');

                INSERT INTO sre_recaudaciones.sre_fac_ventas_exportaciones
                (usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_exportacion_id,
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id,
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_moneda_id, 
                tipo_documento_sector_id,
                estado_factura_id, 
                metodo_pago_id,
                numero_tarjeta, 
                nit_emisor,
                codigo_cliente,
                numero_factura, 
                cuf, 
                cufd, 
                cuis,
                direccion,
                usuario,
                numero_documento, 
                complemento, 
                nombre_razon_social,
                otros_montos, 
                monto_total, 
                monto_total_moneda,
                monto_total_puerto, 
                precio_valor_bruto,
                gastos_transporte_frontera, 
                gastos_seguro_frontera, 
                total_fob_frontera, 
                monto_transporte_frontera, 
                monto_seguro_internacional, 
                monto_descuento, 
                tipo_cambio, 
                incoterm, 
                lugar_destino, 
                puerto_destino,
                tipo_pais_id,
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                direccion_comprador)
                values(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, p_tipo_moneda_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_nombre_razon_social, p_otros_montos, p_monto_total, p_monto_total_moneda, p_monto_total_puerto, p_precio_valor_bruto, p_gastos_transporte_frontera, p_gastos_seguro_frontera, p_total_fob_frontera, p_monto_transporte_frontera, p_monto_seguro_internacional, p_monto_descuento, p_tipo_cambio, p_incoterm, p_lugar_destino, p_puerto_destino, p_tipo_pais_id, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_direccion_comprador)
                returning venta_exportacion_id into v_resultado;
                return v_resultado;      

          when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
                then                 
                -- add 20190409 rgt
                
                p_remitente_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'remitente');
                p_consignatario_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consignatario');
                p_tipo_pais_id_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
                p_lugar_destino_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');               
                p_lugar_acopio_puerto_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarAcopioPuerto');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_libres_consignaciones
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_libre_consignacion_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                -- libre consignacion
                remitente,
                consignatario,
                tipo_pais_id,
                lugar_destino,
                lugar_acopio_puerto           
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                -- libre consignacion
                p_remitente_lc,
                p_consignatario_lc,
                p_tipo_pais_id_lc,
                p_lugar_destino_lc,
                p_lugar_acopio_puerto_lc
                
                ) returning venta_libre_consignacion_id into v_resultado;
     
                return v_resultado;
          --add 20190408 vcg
          when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
                then
          
          --***** Datos sre_fac_ventas_zonas_francas
          p_numero_parte_recepcion:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroParteRecepcion');
          
          INSERT INTO sre_recaudaciones.sre_fac_ventas_zonas_francas
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_zona_franca_id, 
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda,
          --campos zonas francas
          numero_parte_recepcion
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda,         
          --campos zonas francas
          p_numero_parte_recepcion
          ) returning venta_zona_franca_id into v_resultado;
                
          return v_resultado; 
          --add 20190408 vcg
          when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES 
                then           
          --***** Datos sre_fac_ventas_espectaculos_nacionales
          p_tipo_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEvento');
          p_lugar_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarEvento');
          p_artista_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'artistaEvento');
          p_nit_salon_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitSalon');
          p_direccion_salon_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionSalon');
          p_fecha_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEvento');
                     
          INSERT INTO sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_espectaculo_nacional_id, 
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda,
          --campos espectaculos nacionales
          tipo_evento,
          lugar_evento,
          fecha_evento,
          artista_evento,
          nit_salon,
          direccion_salon
          
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda,
          --campos espectaculos nacionales
          p_tipo_evento,
          p_lugar_evento,
          p_fecha_evento,
          p_artista_evento,
          p_nit_salon_evento,
          p_direccion_salon_evento      
          ) returning venta_espectaculo_nacional_id into v_resultado;
                
          return v_resultado;

          when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
                then                 
                -- rgt 08/04/2019
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_seguridad_alimentaria_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda
                ) returning venta_seguridad_alimentaria_id into v_resultado;
          
                return v_resultado; 
          --add 20190408 jf   
          when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
                then
                --***** Datos sre_fac_ventas_monedas_extranjeras
                p_monto_diferencia_tipo_cambio:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'ingresoDiferenciaCambio');
                --add 20190514 rgt
                p_tipo_operacion_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoOperacion');
                p_tipo_cambio_oficial :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial');
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_monedas_extranjeras
                (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_moneda_extranjera_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_diferencia_tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda, tipo_operacion_id, tipo_cambio_oficial)
                VALUES(p_usuario_registro_id,  p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id,   p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id,  p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id,  p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_nombre_razon_social, p_monto_total, p_monto_diferencia_tipo_cambio, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_monto_descuento, p_tipo_moneda_id, p_tipo_cambio, p_monto_total_moneda, p_tipo_operacion_id, p_tipo_cambio_oficial)
                returning venta_moneda_extranjera_id into v_resultado;
                return v_resultado; 

          when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
                then
                p_estado_notadc_id :=1495;
                p_numero_notadc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroNotaCreditoDebito');
              p_monto_total_original :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal');
              p_monto_total_devuelto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalDevuelto');
              p_monto_efectivo_credito_debito :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoEfectivoCreditoDebito');     
              p_numero_autorizacion_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroAutorizacionCuf');
              p_fecha_emision_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmisionFactura');
                INSERT INTO sre_recaudaciones.sre_fac_notas_creditos_debitos
          (usuario_registro_id,usuario_ultima_modificacion_id,recepcion_correcta_nota_credito_debito_id,persona_contribuyente_id,punto_venta_id,sucursal_id,tipo_departamento_id,tipo_ambiente_id,tipo_emision_id,tipo_modalidad_id,tipo_documento_fiscal_id,tipo_documento_identidad_id,tipo_documento_sector_id,estado_notadc_id,nit_emisor,codigo_cliente,numero_notadc,cuf,cufd,cuis,direccion,usuario,numero_documento,complemento,nombre_razon_social,monto_total_original,monto_total_devuelto,monto_efectivo_credito_debito,numero_factura,numero_autorizacion_cuf,leyenda,fecha_emision,fecha_emision_factura,fecha_registro,fecha_ultima_modificacion,estado_id)
                VALUES(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_notadc_id, p_nit_emisor, p_codigo_cliente, p_numero_notadc, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_nombre_razon_social, p_monto_total_original, p_monto_total_devuelto, p_monto_efectivo_credito_debito, p_numero_factura, p_numero_autorizacion_cuf, p_leyenda, p_fecha_emision, p_fecha_emision_factura, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id)
                returning nota_credito_debito_id into v_resultado;     
                return v_resultado;      
                     
          --add 20190410 vcg            
          when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
                then
          --*****sre_fac_notas_conciliaciones    
          p_monto_total_original :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal');
          p_monto_total_conciliado :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalConciliado');
          p_monto_efectivo_credito_debito :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoEfectivoCreditoDebito');          
          p_estado_nota_conciliacion_id :=p_estado_factura_id;
          p_numero_nota_conciliacion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroNotaConciliacion');
          p_numero_autorizacion_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroAutorizacionCuf');
          p_fecha_emision_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmisionFactura');
          
          
          INSERT INTO sre_recaudaciones.sre_fac_notas_conciliaciones
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_nota_conciliacion_id, --*
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
                --estado_factura_id, 
                --metodo_pago_id, 
                --numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
                --monto_total, 
                --monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
                --tipo_moneda_id, 
                --tipo_cambio, 
                --monto_total_moneda,
          --campos notas conciliaciones
          monto_total_original,                                                                        
          monto_total_conciliado,                                                 
          monto_efectivo_credito_debito,          
          estado_nota_conciliacion_id,
          numero_nota_conciliacion,     
          numero_autorizacion_cuf,
          fecha_emision_factura                    
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
                --p_estado_factura_id, 
                --p_metodo_pago_id, 
                --p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
                --p_monto_total, 
                --p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
                --p_tipo_moneda_id, 
                --p_tipo_cambio, 
                --p_monto_total_moneda,
          --campos notas conciliaciones
          p_monto_total_original,                                                                     
          p_monto_total_conciliado,                                                    
          p_monto_efectivo_credito_debito,        
          p_estado_nota_conciliacion_id,
          p_numero_nota_conciliacion,   
          p_numero_autorizacion_cuf,
          p_fecha_emision_factura                  
          
          ) returning nota_conciliacion_id into v_resultado;

          return v_resultado;
          
          --add 20190513 rgt
          when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
          then
          --*****sre_fac_ventas_boletos_aereos    
          p_numero_boleto_aereo :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroBoleto');
          p_numero_documento_beneficiario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumentoBeneficiarioCreditoFiscal');
          p_nombre_razon_social_emisor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocialEmisor');
          p_nombre_razon_social_beneficiario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocialBeneficiarioCreditoFiscal');
          p_nombre_pasajero :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombrePasajero');
          p_numero_documento_pasajero :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumentoPasajero');
          p_codigo_iata_linea_aerea :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoIataLineaAerea');
          p_codigo_iata_agencia :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoIataAgenteViajes');
          p_nit_agente_viaje :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitAgenteViajes');
          p_codigo_origen_servicio :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'CodigoOrigenServicio');
          p_monto_tarifa :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTarifa');
          p_monto_total_boleto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalBoleto');
          p_monto_sujeto_iva :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSujetoIva');
          p_codigo_transaccion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoTransaccion');
          
          INSERT INTO sre_recaudaciones.sre_fac_ventas_boletos_aereos
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_boleto_aereo_id, --*
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          --tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          --metodo_pago_id, 
          --numero_tarjeta, 
          nit_emisor,
          --codigo_cliente, 
          --numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          --direccion, 
          --usuario, 
          --numero_documento, 
          --complemento, 
          --nombre_razon_social, 
          --monto_total, 
          --monto_descuento, 
          --leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          --monto_total_moneda
          --campos boleto aereo
          numero_boleto_aereo,
          numero_documento_beneficiario,
          nombre_razon_social_emisor,
          nombre_razon_social_beneficiario,
          nombre_pasajero,
          numero_documento_pasajero,
          codigo_iata_linea_aerea,
          codigo_iata_agencia,
          nit_agente_viaje,
          codigo_origen_servicio,
          monto_tarifa,
          monto_total_boleto, 
          monto_sujeto_iva,
          codigo_transaccion
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id, --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          --p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          --p_metodo_pago_id, 
          --p_numero_tarjeta, 
          p_nit_emisor,
          --p_codigo_cliente, 
          --p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          --p_direccion, 
          --p_usuario, 
          --p_numero_documento, 
          --p_complemento, 
          --p_nombre_razon_social, 
          --p_monto_total, 
          --p_monto_descuento, 
          --p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          --p_monto_total_moneda
          --p_campos boleto aereo
          p_numero_boleto_aereo,
          p_numero_documento_beneficiario,
          p_nombre_razon_social_emisor,
          p_nombre_razon_social_beneficiario,
          p_nombre_pasajero,
          p_numero_documento_pasajero,
          p_codigo_iata_linea_aerea,
          p_codigo_iata_agencia,
          p_nit_agente_viaje,
          p_codigo_origen_servicio,
          p_monto_tarifa,
          p_monto_total_boleto, 
          p_monto_sujeto_iva,
          p_codigo_transaccion
          ) returning venta_boleto_aereo_id into v_resultado;

          return v_resultado; 
          
          --add 20190408 vcg            
          when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
                then
     --***** Datos sre_fac_ventas_turismos_receptivos
     p_cantidad_huespedes :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHuespedes');
     p_cantidad_habitaciones :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHabitaciones');
     p_cantidad_mayores :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMayores');
     p_cantidad_menores :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMenores');
     p_fecha_ingreso_hospedaje :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje');
     p_nit_operador_turismo:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitOperadorTurismo');
     p_razon_social_operador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'razonsocialOperadorTurismo');           
                
          INSERT INTO sre_recaudaciones.sre_fac_ventas_turismos_receptivos
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_turismo_receptivo_id, 
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda,
          --campos turismos receptivos
          cantidad_huespedes,
          cantidad_habitaciones,
          cantidad_mayores,
          cantidad_menores,
          fecha_ingreso_hospedaje,
          nit_operador_turismo,
          razon_social_operador         
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda,
          --campos turismos receptivos
          p_cantidad_huespedes,
          p_cantidad_habitaciones,
          p_cantidad_mayores,
          p_cantidad_menores,
          p_fecha_ingreso_hospedaje,
          p_nit_operador_turismo,
          p_razon_social_operador
                     
          ) returning venta_turismo_receptivo_id into v_resultado;
                
          return v_resultado; 

          --add 201904010 vcg
          when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
                then
          
          INSERT INTO sre_recaudaciones.sre_fac_ventas_tasas_ceros
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_tasa_cero_id, --*
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda          
          ) returning venta_tasa_cero_id into v_resultado;

          return v_resultado;      
                     
          when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS 
                then                 
                -- add 20190409 rgt
                                               
                p_ciudad_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'ciudad');
                p_nombre_propietario_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombrePropietario');
                p_nombre_representante_legal_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRepresentanteLegal');
                p_condicion_pago_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'condicionPago');
                p_periodo_entrega_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'periodoEntrega');
                p_monto_iehd_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIehd'); --montoIedh 21082019
                
                INSERT INTO sre_recaudaciones.sre_fac_ventas_hidrocarburos
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_hidrocarburo_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                --hidrocarburo
                ciudad, 
                nombre_propietario,
                nombre_representante_legal,
                condicion_pago,
                periodo_entrega,
                monto_iehd
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                -- hidrocarburo                
                p_ciudad_hid,
                p_nombre_propietario_hid,
                p_nombre_representante_legal_hid,
                p_condicion_pago_hid,
                p_periodo_entrega_hid,
                p_monto_iehd_hid
                ) returning venta_hidrocarburo_id into v_resultado;

                return v_resultado; 
                
          when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
                then
                --- add 20190410 rgt
                
                p_mes_facturacion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'mesFacturacion');
                p_direccion_destinatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionDestinatario');
                p_otros_montos_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos');
                p_monto_total_puerto_ypfb := 0.1;
                p_precio_valor_bruto_ypyb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');
                p_gastos_transporte_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera');
                p_gastos_seguro_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera');
                p_total_fob_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera');
                p_monto_transporte_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera');
                p_monto_seguro_internacional_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional');
                p_monto_total_cpt :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalCPT');
                p_incoterm_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
                p_lugar_destino_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
                p_puerto_destino_ypfb := '-';
                p_tipo_pais_id_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
                p_nombre_razon_social := 'factura exportacion YPFB'; -- add

                INSERT INTO sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_exportacion_ypfb_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                -- exportacion ypfb
                mes_facturacion,
                direccion_destinatario,
                otros_montos,
                monto_total_puerto,
                precio_valor_bruto,
                gastos_transporte_frontera,
                gastos_seguro_frontera,
                total_fob_frontera,
                monto_transporte_frontera,
                monto_seguro_internacional,
                monto_total_cpt,
                incoterm,
                lugar_destino,
                puerto_destino,
                tipo_pais_id
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                ---exportacion ypfb
                p_mes_facturacion,
                p_direccion_destinatario,
                p_otros_montos_ypfb,
                p_monto_total_puerto_ypfb,
                p_precio_valor_bruto_ypyb,
                p_gastos_transporte_frontera_ypfb,
                p_gastos_seguro_frontera_ypfb,
                p_total_fob_frontera_ypfb,
                p_monto_transporte_frontera_ypfb,
                p_monto_seguro_internacional_ypfb,
                p_monto_total_cpt,
                p_incoterm_ypfb,
                p_lugar_destino_ypfb,
                p_puerto_destino_ypfb,
                p_tipo_pais_id_ypfb
                ) returning venta_exportacion_ypfb_id into v_resultado;
     
                return v_resultado; 
          
          -- actualizacion 20191001 eca
          when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
                then      
                p_nit_emisor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
                p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
                p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
                p_cufd :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
                p_sucursal_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
                p_direccion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccion');
                p_punto_venta_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta');
                p_fecha_emision :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
                p_nombre_razon_social :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
                p_direccion_comprador_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
                p_tipo_documento_identidad_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
                p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
                p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'complemento');
                p_concentrado_granel_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'concentradoGranel');
               p_origen_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'origen');
                p_puerto_transito_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoTransito');
                p_puerto_destino_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
                p_pais_destino_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'paisDestino');
                p_incoterm_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');         
                p_codigo_cliente :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoCliente');
               p_partida_arancelaria_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'partidaArancelaria');
                p_tipo_moneda_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda');
                p_tipo_cambio_oficial :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial'); --tipoCambioOficial
                p_tipo_cambio_anb_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioANB');  
                p_numero_lote_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroLote');
                p_kilos_netos_humedos := (p_json->'XmlFactura'->'factura'->'cabecera'->>'kilosNetosHumedos');
                p_humedad_porcentaje := (p_json->'XmlFactura'->'factura'->'cabecera'->>'humedadPorcentaje');
                p_humedad_valor := (p_json->'XmlFactura'->'factura'->'cabecera'->>'humedadValor');
                p_merma_porcentaje := (p_json->'XmlFactura'->'factura'->'cabecera'->>'mermaPorcentaje');
                p_merma_valor := (p_json->'XmlFactura'->'factura'->'cabecera'->>'mermaValor');                  
                p_kilos_netos_secos_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'kilosNetosSecos');
                p_metodo_pago_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago');
                p_numero_tarjeta :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroTarjeta');
                p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
                p_monto_total_moneda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda');
                p_sub_total_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'subTotal');
                p_gastos_realizacion_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosRealizacion');
                p_liquidacion_preliminar_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'liquidacionPreliminar');
                p_leyenda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'leyenda');
                p_usuario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'usuario');
                p_tipo_documento_sector_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector');
                p_iva_em := null; --no existe en xml/xsd, pero se lo mantiene en bd (null)
                
                insert    into
                     sre_recaudaciones.sre_fac_ventas_exportaciones_mineras(
                     usuario_registro_id,
                     usuario_ultima_modificacion_id,
                     recepcion_correcta_exportacion_minera_id,
                     persona_contribuyente_id,
                     punto_venta_id,
                     sucursal_id,
                     tipo_departamento_id,
                     tipo_ambiente_id,
                     tipo_emision_id,
                     tipo_modalidad_id,
                     tipo_documento_fiscal_id,
                     tipo_documento_identidad_id,
                     tipo_documento_sector_id,
                     tipo_moneda_id,
                     estado_factura_id,
                     metodo_pago_id,
                     numero_tarjeta,
                     nit_emisor,
                     codigo_cliente,
                     numero_factura,
                     cuf,
                     cufd,
                     cuis,
                     direccion,
                     usuario,
                     numero_documento,
                     complemento,
                     nombre_razon_social,
                     direccion_comprador,
                     concentrado_granel,
                     origen,
                     puerto_transito,
                     puerto_destino,
                     pais_destino,
                     incoterm,
                     numero_lote,
                     partida_arancelaria,
                     toneladas_metricas_humedas,
                     merma_valor,
                     merma_porcentaje,
                     kilos_netos_secos,
                     kilos_netos_humedos,
                     humedad_porcentaje,
                     humedad_valor,
                     sub_total,
                     gastos_realizacion,
                     iva,
                     liquidacion_preliminar,
                     monto_total,
                     monto_total_moneda,
                     tipo_cambio,
                     tipo_cambio_anb,
                     leyenda,
                     fecha_emision,
                     fecha_registro,
                     fecha_ultima_modificacion,
                     estado_id)
                values(p_usuario_registro_id, 
                     p_usuario_ultima_modificacion_id, 
                     p_id_recepciones_correctas, --parametro recibido en funcion
                     p_persona_contribuyente_id, -- obtenida a partir del nit
                     p_punto_venta_id, 
                     p_sucursal_id, 
                     p_tipo_departamento_id, -- obtenida por funcion
                     p_tipo_ambiente_id, 
                     p_tipo_emision_id, 
                     p_tipo_modalidad_id, 
                     p_tipo_documento_fiscal_id, 
                     p_tipo_documento_identidad_id, 
                     p_tipo_documento_sector_id, 
                     p_tipo_moneda_id,
                     p_estado_factura_id,               
                     p_metodo_pago_id, 
                     p_numero_tarjeta, 
                     p_nit_emisor, 
                     p_codigo_cliente, 
                     p_numero_factura, 
                     p_cuf, 
                     p_cufd, 
                     p_cuis, 
                     p_direccion, 
                     p_usuario, 
                     p_numero_documento, 
                     p_complemento, 
                     p_nombre_razon_social, 
                     p_direccion_comprador_em,
                     p_concentrado_granel_em,
                     p_origen_em,
                     p_puerto_transito_em,
                     p_puerto_destino_em,
                     p_pais_destino_em,
                     p_incoterm_em,
                     p_numero_lote_em,
                     p_partida_arancelaria_em,
                     p_toneladas_metricas_humedas_em,
                     p_merma_valor,
                     p_merma_porcentaje,
                     p_kilos_netos_secos_em,
                     p_kilos_netos_humedos,
                     p_humedad_porcentaje,
                     p_humedad_valor,
                     p_sub_total_em,
                     p_gastos_realizacion_em,
                     p_iva_em,
                     p_liquidacion_preliminar_em,
                     p_monto_total, 
                     p_monto_total_moneda,
                     p_tipo_cambio_oficial, 
                     p_tipo_cambio_anb_em,
                     p_leyenda, 
                     p_fecha_emision, 
                     p_fecha_registro, 
                     p_fecha_ultima_modificacion, 
                     p_estado_id)   
                     returning venta_exportacion_minera_id into v_resultado;

                return v_resultado;                 
                
          --add 20190410 jf
          when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
                then
              p_direccion_consignatario:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionConsignatario');
                p_atencion_consignatario:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'atencionConsignatario'); 
                p_destinatario:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'destinatario');     
                p_direccion_destinatario:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'atencionConsignatario');
                p_atencion_destinatario:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'atencionDestinatario');  
                p_fax_exportador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'faxExportador');
                p_numero_contrato:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroContrato');
                p_contacto_exportador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'contactoExportador');
                p_telefono_exportador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'telefonoExportador');
                p_banco_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'bancoPago');
                p_numero_cuenta_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroCuentaPago');
                p_nombre_cuenta_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreCuentaPago');
                p_codigo_swift_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSwiftPago');
                p_codigo_fedwire_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'CodigoFedwirePago');
                p_codigo_chips_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoChipsPago');
                p_plaza_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'plazaPago');
                p_direccion_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionPago');
                p_modalidad_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'modalidadPago');
                p_termino_pago:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'terminosPago');
                p_movimiento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'movimiento');
                p_pais_origen:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'paisOrigen');
                p_pais_destino:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'paisDestino');           
                p_exportador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'exportador');
                p_embarque:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'embarque');
                p_consignatario:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consignatario');
          
                INSERT INTO sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb
                (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_libre_consignacion_ypfb_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, tipo_moneda_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, consignatario, direccion_consignatario, atencion_consignatario, destinatario, direccion_destinatario, atencion_destinatario, fax_exportador, numero_contrato, contacto_exportador, telefono_exportador, banco_pago, numero_cuenta_pago, nombre_cuenta_pago, codigo_swift_pago, codigo_fedwire_pago, codigo_chips_pago, plaza_pago, direccion_pago, incoterm, modalidad_pago, termino_pago, movimiento, pais_origen, pais_destino, exportador, embarque, monto_total, monto_total_moneda, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id)
                values
                (p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_tipo_moneda_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_consignatario, p_direccion_consignatario, p_atencion_consignatario, p_destinatario, p_direccion_destinatario, p_atencion_destinatario, p_fax_exportador, p_numero_contrato, p_contacto_exportador, p_telefono_exportador, p_banco_pago, p_numero_cuenta_pago, p_nombre_cuenta_pago, p_codigo_swift_pago, p_codigo_fedwire_pago, p_codigo_chips_pago, p_plaza_pago, p_direccion_pago, p_incoterm, p_modalidad_pago, p_termino_pago, p_movimiento, p_pais_origen, p_pais_destino, p_exportador, p_embarque, p_monto_total, p_monto_total_moneda, p_tipo_cambio, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id)
                returning venta_libre_consignacion_ypfb_id into v_resultado;
                return v_resultado;
                
     --add 20190410 vcg       
          when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
                then                 
          p_direccion_comprador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
          p_concentrado_granel:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'concentradoGranel');
          p_origen:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'origen');
          p_numero_lote:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroLote');
          p_toneladas_metricas_humedas:=(p_json->'XmlFactura'->'factura'->'toneladasMetricasHumedas'->>'embarque');
          p_merma:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'merma');
          p_kilos_netos_secos:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'kilosNetosSecos');
          p_sub_total:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'subTotal');
          p_gastos_realizacion:=(p_json->'XmlFactura'->'factura'->'gastosRealizacion'->>'embarque');
          p_iva:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'impuestoValorAgregado');
          p_liquidacion_preliminar:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'liquidacionPreliminar');
          p_tipo_cambio_anb:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioANB');

          
          INSERT INTO sre_recaudaciones.sre_fac_ventas_mineras_internas
          (
          usuario_registro_id, 
          usuario_ultima_modificacion_id, 
          recepcion_correcta_minera_interna_id, --*
          persona_contribuyente_id, 
          punto_venta_id, 
          sucursal_id, 
          tipo_departamento_id, 
          tipo_ambiente_id, 
          tipo_emision_id, 
          tipo_modalidad_id, 
          tipo_documento_fiscal_id, 
          tipo_documento_identidad_id, 
          tipo_documento_sector_id, 
          estado_factura_id, 
          metodo_pago_id, 
          numero_tarjeta, 
          nit_emisor, 
          codigo_cliente, 
          numero_factura, 
          cuf, 
          cufd, 
          cuis, 
          direccion, 
          usuario, 
          numero_documento, 
          complemento, 
          nombre_razon_social, 
          monto_total, 
          --monto_descuento, 
          leyenda, 
          fecha_emision, 
          fecha_registro, 
          fecha_ultima_modificacion, 
          estado_id, 
          tipo_moneda_id, 
          tipo_cambio, 
          monto_total_moneda,
          --campos mineras internas
          direccion_comprador,
          concentrado_granel,
          origen,
          numero_lote,
          toneladas_metricas_humedas,
          merma,
          kilos_netos_secos,
          subtotal,
          gastos_realizacion,
          iva,
          liquidacion_preliminar,
          tipo_cambio_anb          
          )
          VALUES(
          p_usuario_registro_id, 
          p_usuario_ultima_modificacion_id, 
          p_recepcion_correcta_id,  --*
          p_persona_contribuyente_id, 
          p_punto_venta_id, 
          p_sucursal_id, 
          p_tipo_departamento_id, 
          p_tipo_ambiente_id, 
          p_tipo_emision_id, 
          p_tipo_modalidad_id, 
          p_tipo_documento_fiscal_id, 
          p_tipo_documento_identidad_id, 
          p_tipo_documento_sector_id, 
          p_estado_factura_id, 
          p_metodo_pago_id, 
          p_numero_tarjeta, 
          p_nit_emisor, 
          p_codigo_cliente, 
          p_numero_factura, 
          p_cuf, 
          p_cufd, 
          p_cuis, 
          p_direccion, 
          p_usuario, 
          p_numero_documento, 
          p_complemento, 
          p_nombre_razon_social, 
          p_monto_total, 
          --p_monto_descuento, 
          p_leyenda, 
          p_fecha_emision, 
          p_fecha_registro, 
          p_fecha_ultima_modificacion, 
          p_estado_id, 
          p_tipo_moneda_id, 
          p_tipo_cambio, 
          p_monto_total_moneda,
          --campos mineras internas                          
          p_direccion_comprador,
          p_concentrado_granel,
          p_origen,
          p_numero_lote,
          p_toneladas_metricas_humedas,
          p_merma,
          p_kilos_netos_secos,
          p_sub_total,
          p_gastos_realizacion,
          p_iva,
          p_liquidacion_preliminar,
          p_tipo_cambio_anb                                                                               
          ) returning venta_minera_interna_id into v_resultado;

          return v_resultado;           
                          
          --add 20190409 jf   
          when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
                then
                p_cufp:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufp');
                p_cuape:=(p_json->'xmlRecepcionGenerica'->>'p_cuape');
          
                INSERT INTO sre_recaudaciones.sre_fac_prevaloradas
                (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_prevalorada_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, numero_factura, cufp, cufd, cuape, direccion, usuario, monto_total, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, monto_descuento, monto_total_moneda, tipo_cambio)
                VALUES
                (p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_numero_factura, p_cufp, p_cufd, p_cuape, p_direccion, p_usuario, p_monto_total, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_tipo_moneda_id, p_monto_descuento, p_monto_total_moneda, p_tipo_cambio)
                returning prevalorada_id into v_resultado;
                return v_resultado; 
                
          when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
                then                                                      
                p_nit_cojunto := (p_json->'XmlFactura'->'factura'->'cabecera'->>'nitConsolidado ');--verificar xml nitConjunto
                INSERT INTO sre_recaudaciones.sre_fac_ventas_telecomunicaciones
                (
                usuario_registro_id, 
                usuario_ultima_modificacion_id, 
                recepcion_correcta_telecomunicacion_id, --*
                persona_contribuyente_id, 
                punto_venta_id, 
                sucursal_id, 
                tipo_departamento_id, 
                tipo_ambiente_id, 
                tipo_emision_id, 
                tipo_modalidad_id, 
                tipo_documento_fiscal_id, 
                tipo_documento_identidad_id, 
                tipo_documento_sector_id, 
                estado_factura_id, 
                metodo_pago_id, 
                numero_tarjeta, 
                nit_emisor, 
                codigo_cliente, 
                numero_factura, 
                cuf, 
                cufd, 
                cuis, 
                direccion, 
                usuario, 
                numero_documento, 
                complemento, 
                nombre_razon_social, 
                monto_total, 
                monto_descuento, 
                leyenda, 
                fecha_emision, 
                fecha_registro, 
                fecha_ultima_modificacion, 
                estado_id, 
                tipo_moneda_id, 
                tipo_cambio, 
                monto_total_moneda,
                nit_cojunto
                )
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,  --*
                p_persona_contribuyente_id, 
                p_punto_venta_id, 
                p_sucursal_id, 
                p_tipo_departamento_id, 
                p_tipo_ambiente_id, 
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id, 
                p_tipo_documento_sector_id, 
                p_estado_factura_id, 
                p_metodo_pago_id, 
                p_numero_tarjeta, 
                p_nit_emisor, 
                p_codigo_cliente, 
                p_numero_factura, 
                p_cuf, 
                p_cufd, 
                p_cuis, 
                p_direccion, 
                p_usuario, 
                p_numero_documento, 
                p_complemento, 
                p_nombre_razon_social, 
                p_monto_total, 
                p_monto_descuento, 
                p_leyenda, 
                p_fecha_emision, 
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id, 
                p_tipo_moneda_id, 
                p_tipo_cambio, 
                p_monto_total_moneda,
                p_nit_cojunto
                ) returning venta_telecomunicacion_id into v_resultado;
     
                return v_resultado;
                
          when p_tipo_documento_sector_id = 30 --Nota: NOTA DE CREDITO DEBITO SFV
                then
                p_estado_notadc_id :=1495;
                p_numero_notadc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroNotaCreditoDebito');
              p_monto_total_original :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal');
              p_monto_total_devuelto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalDevuelto');
              p_monto_efectivo_credito_debito :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoEfectivoCreditoDebito');     
              p_fecha_emision_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmisionFactura');
              ---sfv
              p_numero_autorizacion := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroAutorizacion');
                p_codigo_control :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoControl');
                
                
                INSERT INTO sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv
                (usuario_registro_id,
                usuario_ultima_modificacion_id,
                recepcion_correcta_nota_credito_debito_sfv_id,
                persona_contribuyente_id,
                punto_venta_id,
                sucursal_id,
                tipo_departamento_id,
                tipo_ambiente_id,
                tipo_emision_id,
                tipo_modalidad_id,
                tipo_documento_fiscal_id,
                tipo_documento_identidad_id,
                tipo_documento_sector_id,
                estado_notadc_id,
                nit_emisor,
                codigo_cliente,
                numero_notadc,
                cuf,
                cufd,
                cuis,
                direccion,
                usuario,
                numero_documento,
                complemento,
                nombre_razon_social,
                monto_total_original,
                monto_total_devuelto,
                monto_efectivo_credito_debito_sfv,
                numero_factura,
                numero_autorizacion, ---reemplaza al cuf
                codigo_control,      ---nuevo campo
                leyenda,
                fecha_emision,
                fecha_emision_factura,
                fecha_registro,
                fecha_ultima_modificacion,
                estado_id)
                VALUES(
                p_usuario_registro_id, 
                p_usuario_ultima_modificacion_id, 
                p_recepcion_correcta_id,
                p_persona_contribuyente_id,
                p_punto_venta_id,
                p_sucursal_id,
                p_tipo_departamento_id, 
                p_tipo_ambiente_id,
                p_tipo_emision_id, 
                p_tipo_modalidad_id, 
                p_tipo_documento_fiscal_id, 
                p_tipo_documento_identidad_id,
                p_tipo_documento_sector_id, 
                p_estado_notadc_id,
                p_nit_emisor,
                p_codigo_cliente, 
                p_numero_notadc,
                p_cuf, 
                p_cufd,
                p_cuis, 
                p_direccion, 
                p_usuario,
                p_numero_documento,
                p_complemento, 
                p_nombre_razon_social,
                p_monto_total_original,
                p_monto_total_devuelto,
                p_monto_efectivo_credito_debito, 
                p_numero_factura, 
                p_numero_autorizacion, ---reemplaza al cuf
                p_codigo_control,      ---nuevo campo
                p_leyenda,
                p_fecha_emision, 
                p_fecha_emision_factura,
                p_fecha_registro, 
                p_fecha_ultima_modificacion, 
                p_estado_id)
                returning nota_credito_debito_sfv_id into v_resultado; 
                return v_resultado;      
                                                    
          else 
          return v_resultado;
          
     end case;
                
          return v_resultado;
  
  EXCEPTION
  when others
    then
       return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_registro_ventas_dinamico'));   

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_registro_ventas_dinamico_contingencia(p_json json, p_id_recepciones_correctas bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <10/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla 
				sre_fac_ventas_contingencias_exportaciones_mineras - 25, sre_fac_ventas_contingencias_libres_consignaciones_ypfb - 26
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 31/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones - 13
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 15/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas - 14
NUMERO SECUENCIAL : 3
FECHA DE MODIFICACION : 15/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla sre_fac_ventas_contingencias_exportaciones_mineras - 25
NUMERO SECUENCIAL : 4
FECHA DE MODIFICACION : 21/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/

declare	
--*****sre_fac_ventas_estandares
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_recepcion_correcta_id bigint; 
	p_persona_contribuyente_id bigint; 
	p_punto_venta_id integer; 
	p_sucursal_id integer; 
	p_tipo_departamento_id integer; 
	p_tipo_ambiente_id integer; 
	p_tipo_emision_id integer; 
	p_tipo_modalidad_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_tipo_documento_identidad_id integer; 
	p_tipo_documento_sector_id integer; 
	p_estado_factura_id integer; 
	p_metodo_pago_id integer; 
	p_numero_tarjeta bigint; 
	p_nit_emisor bigint; 
	p_codigo_cliente varchar; 
	p_numero_factura bigint; 
	p_cuf varchar; 
	p_cufd varchar;
	p_cuis varchar;
	p_direccion varchar; 
	p_usuario varchar; 
	p_numero_documento varchar;
	p_complemento varchar; 
	p_nombre_razon_social varchar;
	p_monto_total numeric(25,5); 
	p_monto_descuento numeric(25,5);
	p_leyenda varchar; 
	p_fecha_emision timestamp;
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp;
	p_estado_id varchar;
	p_tipo_moneda_id integer;	
	p_tipo_cambio numeric(25,5);
	p_monto_total_moneda numeric(25,5);
	---nuevo campo factura de contingencia
	p_caed varchar;
		
	--*****sre_fac_ventas_colegios	
	p_periodo_facturado_col varchar;
	p_nombre_estudiante varchar;
	
	--*****sre_fac_ventas_alquileres
	p_periodo_facturado_alq varchar;
	
	--*****sre_fac_ventas_combustibles
	p_codigo_pais_id int4;
	p_placa_vehiculo varchar;
	p_tipo_envase varchar;
	p_monto_ley317 numeric(25,5);
	p_monto_total_sujeto_iva numeric(25,5);
	
	--*****sre_fac_ventas_servicios
	p_numero_medidor varchar;
	p_ciudad_servicios varchar;
	p_zona varchar;
	p_gestion int4;
	p_mes varchar;
	p_domicilio_comprador varchar;
	p_consumo_kwh numeric(20,5);
	p_consumo_metros_cubicos numeric(20,5);
	p_monto_descuento_ley1886 numeric(20,5);
	p_tasa_aseo numeric(20,5);
	p_tasa_alumbrado numeric(20,5);
	p_monto_total_sujeto_iva_servicios numeric(20,5);
	-- add 20190514 rgt
	p_descuento_sin_afectacion numeric(20,5); 
	
	--*****sre_fac_ventas_embotelladoras
	p_monto_ice numeric(20,5);
	p_monto_total_sujeto_iva_ice numeric(20,5);
	
	--*****sre_fac_ventas_bancos
	p_monto_total_arrendamiento numeric(25,5);
	
	--*****sre_fac_ventas_hoteles
	p_cantidad_huespedes int4;
	p_cantidad_habitaciones int4;
	p_cantidad_mayores int4;
	p_cantidad_menores int4;
	p_fecha_ingreso_hospedaje timestamp;
	
	--*****sre_fac_ventas_hospitales
	p_modalidad_servicio varchar;
	
	--*****sre_fac_ventas_juegos
	p_monto_total_sujeto_ipj numeric(25,5);
	p_monto_total_ij numeric(25,5);
	
	--*****sre_fac_ventas_espectaculos
	p_tipo_evento_ae varchar;
	p_lugar_evento_ae varchar;
	p_artista_evento_ae varchar;
	p_nit_salon_evento_ae int8;
	p_direccion_salon_evento_ae varchar;
	p_fecha_evento_ae timestamp;

	--*****sre_fac_ventas_exportaciones
	p_otros_montos numeric(25,5);
	p_monto_total_puerto numeric(25,5);
	p_precio_valor_bruto numeric(25,5);
	p_gastos_transporte_frontera numeric(25,5);
	p_gastos_seguro_frontera numeric(25,5);
	p_total_fob_frontera numeric(25,5);
	p_monto_transporte_frontera numeric(25,5);
	p_monto_seguro_internacional numeric(25,5);
	p_incoterm varchar;
	p_lugar_destino varchar;
	p_puerto_destino varchar;
	p_tipo_pais_id int4;
	p_direccion_comprador varchar;
	
	--*****sre_fac_ventas_libres_consignaciones
	p_remitente_lc varchar;
	p_consignatario_lc varchar;
	p_tipo_pais_id_lc int4;
	p_lugar_destino_lc varchar;
	p_lugar_acopio_puerto_lc varchar;
	
	
	--*****sre_fac_ventas_zonas_francas
	p_numero_parte_recepcion varchar;
	
	--*****sre_fac_ventas_espectaculos_nacionales
	--	sre_fac_ventas_espectaculos
	p_tipo_evento varchar;
	p_lugar_evento varchar;
	p_artista_evento varchar;
	p_nit_salon_evento int8;
	p_direccion_salon_evento varchar;
	p_fecha_evento timestamp;
	
	--*****sre_fac_ventas_monedas_extranjeras
	p_monto_diferencia_tipo_cambio numeric(25,5);
	p_tipo_operacion_id int4;
	p_tipo_cambio_oficial numeric(20,5);
	
	--*****sre_fac_ventas_turismos_receptivos
	--p_cantidad_huespedes int4;
	--p_cantidad_habitaciones int4;
	--p_cantidad_mayores int4;
	--p_cantidad_menores int4;
	--p_fecha_ingreso_hospedaje timestamp;
	p_nit_operador_turismo varchar;
	p_razon_social_operador varchar;
	
	--*****sre_fac_ventas_hidrocarburos
	p_ciudad_hid varchar;
	p_nombre_propietario_hid varchar;
	p_nombre_representante_legal_hid varchar;
	p_condicion_pago_hid varchar;
	p_periodo_entrega_hid varchar;
	p_monto_iehd_hid numeric(20,5);
	
	--*****sre_fac_ventas_exportaciones_ypfb add rgt 20190410
	p_mes_facturacion varchar;
	p_direccion_destinatario varchar;
	p_otros_montos_ypfb numeric(20,5);
	p_monto_total_puerto_ypfb numeric(20,5);
	p_precio_valor_bruto_ypyb numeric(20,5);
	p_gastos_transporte_frontera_ypfb numeric(20,5);
	p_gastos_seguro_frontera_ypfb numeric(20,5);
	p_total_fob_frontera_ypfb numeric(20,5);
	p_monto_transporte_frontera_ypfb numeric(20,5);
	p_monto_seguro_internacional_ypfb numeric(20,5);
	p_monto_total_cpt numeric(20,5);
	p_incoterm_ypfb varchar;
	p_lugar_destino_ypfb varchar;
	p_puerto_destino_ypfb varchar;
	p_tipo_pais_id_ypfb int4;
	
	--*****sre_fac_ventas_exportaciones_mineras -> sector 25 		
	p_direccion_comprador_em varchar(300);
	p_concentrado_granel_em varchar(100);
	p_origen_em varchar(100);
	p_puerto_transito_em varchar(100);
	p_puerto_destino_em varchar(100);
	p_pais_destino_em int4;
	p_incoterm_em varchar(100);
	p_numero_lote_em varchar(100);
	p_partida_arancelaria_em varchar(100);
	p_toneladas_metricas_humedas_em numeric(20,5);
	p_merma_em numeric(20,5);
	p_kilos_netos_secos_em numeric(20,5);
	p_sub_total_em numeric(20,5);
	p_gastos_realizacion_em numeric(20,5);
	p_iva_em numeric(20,5);
	p_liquidacion_preliminar_em numeric(20,5);
	p_tipo_cambio_anb_em numeric(20,5);

	p_kilos_netos_humedos numeric(20,5);
	p_humedad_porcentaje numeric(20,5);
	p_humedad_valor numeric(20,5);
	p_merma_porcentaje numeric(20,5);
	p_merma_valor numeric(20,5);

	
	--sre_fac_ventas_contingencias_libres_consignaciones_ypfb - sector 26
	--venta_contingencia_libre_consignacion_ypfb_id bigserial,
	--p_usuario_registro_id int8;
	--p_usuario_ultima_modificacion_id int8;
	p_recepcion_contingencia_correcta_libre_consignacion_ypfb_id int8;
	--p_persona_contribuyente_id int8;
	p_punto_venta_contingencia_id int4;
	--p_sucursal_id int4;
	--p_tipo_departamento_id int4;
	--p_tipo_ambiente_id int4;
	--p_tipo_emision_id int4;
	--p_tipo_modalidad_id int4;
	--p_tipo_documento_fiscal_id int4;
	--p_tipo_documento_identidad_id int4;
	--p_tipo_documento_sector_id int4;
	--p_tipo_moneda_id int4;
	--p_estado_factura_id int4;
	--p_metodo_pago_id int8;
	--p_numero_tarjeta int8;
	--p_nit_emisor int8;
	--p_codigo_cliente varchar(100);
	--p_numero_factura int8;
	--p_cuf varchar(100);
	--p_cufd varchar(100);
	--p_cuis varchar(20);
	--p_direccion varchar(300);
	--p_usuario varchar(100);
	--p_numero_documento varchar(20);
	--p_complemento varchar(5);
	p_consignatario varchar(200);
	p_direccion_consignatario varchar(300);
	p_atencion_consignatario varchar(100);
	p_destinatario varchar(200);
	--p_direccion_destinatario varchar(300);
	p_atencion_destinatario varchar(100);
	p_fax_exportador varchar(50);
	p_numero_contrato varchar(100);
	p_contacto_exportador varchar(100);
	p_telefono_exportador varchar(50);
	p_banco_pago varchar(100);
	p_numero_cuenta_pago varchar(100);
	p_nombre_cuenta_pago varchar(100);
	p_codigo_swift_pago varchar(100);
	p_codigo_fedwire_pago varchar(100);
	p_codigo_chips_pago varchar(100);
	p_plaza_pago varchar(100);
	p_direccion_pago varchar(300);
	--p_incoterm varchar(100);
	p_modalidad_pago varchar(100);
	p_termino_pago varchar(100);
	p_movimiento varchar(100);
	p_pais_origen int4;
	p_pais_destino int4;
	p_exportador varchar(100);
	p_embarque varchar(100);
	--p_monto_total numeric(25,5);
	--p_monto_total_moneda numeric(25,5);
	--p_tipo_cambio numeric(25,5);
	--p_leyenda varchar(200);
	--p_fecha_emision timestamp;
	--p_fecha_registro timestamp;
	--p_fecha_ultima_modificacion timestamp;
	--p_estado_id varchar(2);
	--p_caed varchar(100);
		
	v_fecha_actual timestamp:=now();
	v_resultado bigint:=0;
begin
--Realizar llamada al método sre_fac_ope_armar_consulta_registro_ventas

	---------------DATOS DE LA TABLA: Ventas---------------
	--***** Datos Estandar
	p_usuario_registro_id :=1000;
	p_usuario_ultima_modificacion_id :=1000;
	p_estado_factura_id :=1495; --Estado de registro
	p_monto_descuento :=0;
	p_estado_id :='AC';
	p_recepcion_correcta_id :=p_id_recepciones_correctas; --ID
	p_persona_contribuyente_id :=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint);
	p_punto_venta_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta');
	--p_sucursal_id :=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');--mod 20190520
	p_sucursal_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
	p_tipo_departamento_id :=sre_recaudaciones.sre_fac_ope_obtener_departamento_id((p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint); --add:20190328
	p_tipo_ambiente_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
	p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
	p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_tipo_documento_identidad_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
	--p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); --mod 20190520
	p_tipo_documento_sector_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector');	
	p_metodo_pago_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago');
	p_numero_tarjeta :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroTarjeta');
	p_nit_emisor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
	p_codigo_cliente :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoCliente');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
	p_cufd :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
	p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
	p_direccion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccion');
	p_usuario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'usuario');
	p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
	p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'complemento');
	p_nombre_razon_social :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
	p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');	
	p_leyenda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'leyenda');
	p_fecha_emision :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;	
	p_tipo_moneda_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda');
	p_tipo_cambio :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio');
	p_monto_total_moneda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda');
	--nuevo factura de contingencia
	p_caed := (p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	
						
	--INSERT
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
		then 										 
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_estandares
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_estandar_id, --diferente
		persona_contribuyente_id, 
		punto_venta_contingencia_id, --diferente
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--contingencia
		p_caed
		) returning venta_contingencia_estandar_id into v_resultado;

		return v_resultado;
		
		when p_tipo_documento_sector_id = 2  --Nota: FACTURA SECTORES EDUCATIVOS
		then
		--***** Datos sre_fac_ventas_colegios	
		p_periodo_facturado_col:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'periodoFacturado');
		p_nombre_estudiante:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreEstudiante');
			
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_colegios
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_colegio_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, --*
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--campos colegios,
		periodo_facturado,
		nombre_estudiante,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--campos colegios
		p_periodo_facturado_col,
		p_nombre_estudiante,
		--contingencia
		p_caed
		) returning venta_contingencia_colegio_id into v_resultado;

		return v_resultado;	
		
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
		then 								
		-- rgt 08/04/2019
		
		p_periodo_facturado_alq :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'periodoFacturado');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_alquileres
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_alquiler_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--alquiler
		periodo_facturado,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--alquiler
		p_periodo_facturado_alq,
		--contingencia
		p_caed
		) returning venta_contingencia_alquiler_id into v_resultado;

		return v_resultado;
		
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
		then 			

		p_codigo_pais_id := (p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
		p_placa_vehiculo := (p_json->'XmlFactura'->'factura'->'cabecera'->>'placaVehiculo');
		p_tipo_envase := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEnvase');
		p_monto_ley317 := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoLey317');
		p_monto_total_sujeto_iva := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_combustibles				
        (
        usuario_registro_id, 
        usuario_ultima_modificacion_id, 
        recepcion_contingencia_correcta_combustible_id, 
        persona_contribuyente_id, 
        punto_venta_contingencia_id, 
        sucursal_id, 
        tipo_departamento_id,
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social,
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id,
		tipo_cambio, 
		monto_total_moneda, 
		placa_vehiculo, 
		tipo_envase, 
		monto_ley317, 
		monto_total_sujeto_iva, 
		codigo_pais_id,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id,  
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id, 
		p_persona_contribuyente_id, 	
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id,  
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id,  
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion,  
		p_usuario, 
		p_numero_documento,  
		p_complemento, 
		p_nombre_razon_social,  
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision,  
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id,
		p_tipo_moneda_id,
		p_tipo_cambio, 
		p_monto_total_moneda, 
		p_placa_vehiculo, 
		p_tipo_envase, 
		p_monto_ley317, 
		p_monto_total_sujeto_iva,
		p_codigo_pais_id,
		--contingencia
		p_caed
		)				
		returning venta_contingencia_combustible_id into v_resultado;
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
		then 	
		-- rgt 17/06/2019

		p_numero_medidor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroMedidor');
		p_ciudad_servicios :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'ciudad');
		p_zona  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'zona');
		p_gestion  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gestion');
		p_mes :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'mes');
		p_domicilio_comprador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'domicilioComprador');
		p_consumo_kwh  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consumoKwh');
		p_consumo_metros_cubicos  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consumoMetrosCubicos');
		p_monto_descuento_ley1886  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuentoLey1886');
		p_tasa_aseo :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAseo');
		p_tasa_alumbrado :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAlumbrado');
		p_monto_total_sujeto_iva_servicios :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva');
		p_descuento_sin_afectacion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'descuentoSinAfectacion');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_servicios
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_servicio_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		-- servicios
		numero_medidor,
	    ciudad,
		zona,
	    gestion,
		mes,
		domicilio_comprador,
		consumo_kwh,
		consumo_metros_cubicos,
		monto_descuento_ley1886,
		tasa_aseo,
		tasa_alumbrado,
		monto_total_sujeto_iva,
		descuento_sin_afectacion,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		-- servicios
		p_numero_medidor,
	    p_ciudad_servicios,
		p_zona,
	    p_gestion,
		p_mes,
		p_domicilio_comprador,
		p_consumo_kwh,
		p_consumo_metros_cubicos,
		p_monto_descuento_ley1886,
		p_tasa_aseo,
		p_tasa_alumbrado,
		p_monto_total_sujeto_iva_servicios,
		p_descuento_sin_afectacion,
		--contingencia
		p_caed
		) returning venta_contingencia_servicio_id into v_resultado;

		return v_resultado;
		
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
		then 			
		-- rgt 08/04/2019
		
		p_monto_ice :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce');
		p_monto_total_sujeto_iva_ice :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_embotelladora_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		-- embotelladora
		monto_ice,
		monto_total_sujeto_iva,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		-- embotelladora
		p_monto_ice,
		p_monto_total_sujeto_iva_ice,
		--contingencia
		p_caed
		) returning venta_contingencia_embotelladora_id into v_resultado;

		return v_resultado;
		
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
		then 			 
		p_monto_total_arrendamiento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalArendamiento');
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_bancos
		(usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_banco_id, 
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id,
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente,
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_total_arrendamiento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		monto_descuento, 
		tipo_moneda_id,
		tipo_cambio, 
		monto_total_moneda,
		--contingencia
		caed)
		values
		(p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id,
		p_recepcion_correcta_id, 
		p_persona_contribuyente_id, 	
		p_punto_venta_id, p_sucursal_id,
		p_tipo_departamento_id,  
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id,  
		p_tipo_documento_identidad_id,
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id,
		p_numero_tarjeta, 
		p_nit_emisor,
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion,  
		p_usuario,
		p_numero_documento,  
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total,
		p_monto_total_arrendamiento, 
		p_leyenda, p_fecha_emision,  
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_monto_descuento, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--contingencia
		p_caed)
		returning venta_contingencia_banco_id into v_resultado;
		return v_resultado;
				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
		then
		--***** Datos sre_fac_ventas_hoteles
		p_cantidad_huespedes:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHuespedes');
		p_cantidad_habitaciones:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHabitaciones');
		p_cantidad_mayores:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMayores');
		p_cantidad_menores:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMenores');
		p_fecha_ingreso_hospedaje:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje');
			
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_hoteles
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_hotel_id, 
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--campos hoteles
		cantidad_huespedes,
		cantidad_habitaciones,
		cantidad_mayores,
		cantidad_menores,
		fecha_ingreso_hospedaje,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--campos hoteles
		p_cantidad_huespedes,
		p_cantidad_habitaciones,
		p_cantidad_mayores,
		p_cantidad_menores,
		p_fecha_ingreso_hospedaje,
		--contingencia
		p_caed
		) returning venta_contingencia_hotel_id into v_resultado;

		return v_resultado;	
		
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS		
		then
		p_modalidad_servicio:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'modalidadServicio');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_hospitales
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_hospital_id, 
		persona_contribuyente_id,
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id,
		tipo_ambiente_id,
		tipo_emision_id,
		tipo_modalidad_id, 
		tipo_documento_fiscal_id,
		tipo_documento_identidad_id,
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura,
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		complemento, 
		modalidad_servicio, 
		nombre_razon_social, 
		monto_total, 
		leyenda, 
		fecha_emision, 
		fecha_registro,
		fecha_ultima_modificacion,
		estado_id, 
		monto_descuento, 
		tipo_moneda_id,
		tipo_cambio, 
		monto_total_moneda, 
		numero_documento,
		--contingencia
		caed)
		VALUES (
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id,
		p_recepcion_correcta_id, 
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id,
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id,
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta,
		p_nit_emisor,
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis,
		p_direccion,
		p_usuario,
		p_complemento,
		p_modalidad_servicio, 
		p_nombre_razon_social,
		p_monto_total, 
		p_leyenda,
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_monto_descuento, 
		p_tipo_moneda_id,
		p_tipo_cambio, 
		p_monto_total_moneda, 
		p_numero_documento,
		--contingencia
		p_caed)
		returning venta_contingencia_hospital_id into v_resultado;
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
		then 
		p_monto_total_sujeto_ipj:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIpj');
		p_monto_total_ij:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalIj');
			
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_juegos
		(usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_juego_id, 
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id,
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		leyenda,
		monto_total_sujeto_ipj, 
		monto_total_ij, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		monto_descuento, 
		tipo_moneda_id,
		monto_total_moneda, 
		tipo_cambio,
		--contingencia
		caed)
		values(p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id, 
		p_persona_contribuyente_id,
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id,
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, p_cuf,
		p_cufd, p_cuis,
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_leyenda, 
		p_monto_total_sujeto_ipj,
		p_monto_total_ij, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id,
		p_monto_descuento,
		p_tipo_moneda_id, 
		p_monto_total_moneda,
		p_tipo_cambio,
		--contingencia
		p_caed)
		returning venta_contingencia_juego_id into v_resultado;	
		return v_resultado;
		
		when p_tipo_documento_sector_id = 11 then --Nota: FACTURA DE ESPECTACULOS INTERNACIONALES
		
		p_tipo_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEvento');
		p_lugar_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarEvento');
		p_artista_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'artistaEvento');
		p_nit_salon_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitSalon');
		p_direccion_salon_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionSalon');
		p_fecha_evento_ae :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEvento');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_espectaculo_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		-- espectaculos
		tipo_evento,
		lugar_evento,
		artista_evento,
		nit_salon,
		direccion_salon,
		fecha_evento,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		-- espectaculos
		p_tipo_evento_ae,
		p_lugar_evento_ae,
		p_artista_evento_ae,
		p_nit_salon_evento_ae,
		p_direccion_salon_evento_ae,
		p_fecha_evento_ae,
		--contingencia
		p_caed
		) returning venta_contingencia_espectaculo_id into v_resultado;
	
		return v_resultado;	
		
		--add 2019026 rgt		
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA CONTINGENCIA COMERCIAL DE EXPORTACION
		then 			
		/*p_incoterm:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
		p_lugar_destino:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
		p_puerto_destino:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
		p_tipo_pais_id:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
		p_direccion_comprador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
		p_monto_total_puerto := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalPuerto');
		p_precio_valor_bruto := (p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');*/	
		p_otros_montos :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos');
		p_monto_total_puerto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalPuerto');
		p_precio_valor_bruto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');
		p_gastos_transporte_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera');
		p_gastos_seguro_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera');
		p_total_fob_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera');
		p_monto_transporte_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera');
		p_monto_seguro_internacional :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional');
		p_incoterm :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
		p_lugar_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
		p_puerto_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
		p_tipo_pais_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
		p_direccion_comprador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones
		(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_contingencia_correcta_exportacion_id, persona_contribuyente_id, punto_venta_contingencia_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, otros_montos, monto_total, monto_total_moneda, monto_total_puerto, precio_valor_bruto, gastos_transporte_frontera, gastos_seguro_frontera, total_fob_frontera, monto_transporte_frontera, monto_seguro_internacional, monto_descuento, tipo_cambio, incoterm, lugar_destino, puerto_destino, tipo_pais_id, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, direccion_comprador, caed)
		values(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, p_tipo_moneda_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_nombre_razon_social, p_otros_montos, p_monto_total, p_monto_total_moneda, p_monto_total_puerto, p_precio_valor_bruto, p_gastos_transporte_frontera, p_gastos_seguro_frontera, p_total_fob_frontera, p_monto_transporte_frontera, p_monto_seguro_internacional, p_monto_descuento, p_tipo_cambio, p_incoterm, p_lugar_destino, p_puerto_destino, p_tipo_pais_id, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_direccion_comprador, p_caed)
		returning venta_contingencia_exportacion_id into v_resultado;
		return v_resultado;		

		-- add 20190726 rgt
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
		then 			
		
		p_remitente_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'remitente');
		p_consignatario_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consignatario');
		p_tipo_pais_id_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
		p_lugar_destino_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');			
		p_lugar_acopio_puerto_lc :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarAcopioPuerto');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_libre_consignacion_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		-- libre consignacion
		remitente,
		consignatario,
		tipo_pais_id,
		lugar_destino,
		lugar_acopio_puerto,
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		-- libre consignacion
		p_remitente_lc,
		p_consignatario_lc,
		p_tipo_pais_id_lc,
		p_lugar_destino_lc,
		p_lugar_acopio_puerto_lc,
		p_caed
		
		) returning venta_contingencia_libre_consignacion_id into v_resultado;

		return v_resultado;

		--add 20190726 rgt
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
		then
		
		--***** Datos sre_fac_ventas_zonas_francas
		p_numero_parte_recepcion:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroParteRecepcion');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_zona_franca_id, 
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--campos zonas francas
		numero_parte_recepcion,
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,		
		--campos zonas francas
		p_numero_parte_recepcion,
		p_caed
		) returning venta_contingencia_zona_franca_id into v_resultado;
			
		return v_resultado;
		
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES 
		then			
		--***** Datos sre_fac_ventas_espectaculos_nacionales
		p_tipo_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEvento');
		p_lugar_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarEvento');
		p_artista_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'artistaEvento');
		p_nit_salon_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitSalon');
		p_direccion_salon_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionSalon');
		p_fecha_evento:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEvento');
				
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_espectaculo_nacional_id, 
		persona_contribuyente_id, 
		punto_venta_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--campos espectaculos nacionales
		tipo_evento,
		lugar_evento,
		fecha_evento,
		artista_evento,
		nit_salon,
		direccion_salon,
		caed
		
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--campos espectaculos nacionales
		p_tipo_evento,
		p_lugar_evento,
		p_fecha_evento,
		p_artista_evento,
		p_nit_salon_evento,
		p_direccion_salon_evento,
		p_caed
		) returning venta_contingencia_espectaculo_nacional_id into v_resultado;
			
		return v_resultado;
		
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
		then 			
		-- rgt 08/04/2019
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_seguridad_alimentaria_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		p_caed
		) returning venta_contingencia_seguridad_alimentaria_id into v_resultado;
	
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
		then
		--***** Datos sre_fac_ventas_monedas_extranjeras
		p_monto_diferencia_tipo_cambio:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'ingresoDiferenciaCambio');
		--add 20190514 rgt
		p_tipo_operacion_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoOperacion');
		p_tipo_cambio_oficial :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras
		(usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_moneda_extranjera_id, 
		persona_contribuyente_id, 
		punto_venta_contingencia_id,
		sucursal_id, 
		tipo_departamento_id,
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento,
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_diferencia_tipo_cambio, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion,
		estado_id, 
		monto_descuento,
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda, 
		tipo_operacion_id, 
		tipo_cambio_oficial,
		---CONTINGENCIA
		caed
		)
		VALUES(p_usuario_registro_id,  p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, p_persona_contribuyente_id, 	p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id,  p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id,  p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento, p_nombre_razon_social, p_monto_total, p_monto_diferencia_tipo_cambio, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_monto_descuento, p_tipo_moneda_id, p_tipo_cambio, p_monto_total_moneda, p_tipo_operacion_id, p_tipo_cambio_oficial, p_caed)
		returning venta_contingencia_moneda_extranjera_id into v_resultado;
		
		return v_resultado;	
		
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
		then
		--***** Datos sre_fac_ventas_turismos_receptivos
		p_cantidad_huespedes :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHuespedes');
		p_cantidad_habitaciones :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHabitaciones');
		p_cantidad_mayores :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMayores');
		p_cantidad_menores :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMenores');
		p_fecha_ingreso_hospedaje :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje');
		p_nit_operador_turismo:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitOperadorTurismo');
		p_razon_social_operador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'razonsocialOperadorTurismo');			
			
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_turismo_receptivo_id, 
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		numero_tarjeta, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--campos turismos receptivos
		cantidad_huespedes,
		cantidad_habitaciones,
		cantidad_mayores,
		cantidad_menores,
		fecha_ingreso_hospedaje,
		nit_operador_turismo,
		razon_social_operador,	
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_numero_tarjeta, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		--campos turismos receptivos
		p_cantidad_huespedes,
		p_cantidad_habitaciones,
		p_cantidad_mayores,
		p_cantidad_menores,
		p_fecha_ingreso_hospedaje,
		p_nit_operador_turismo,
		p_razon_social_operador,
		p_caed
		) returning venta_contingencia_turismo_receptivo_id into v_resultado;
			
		return v_resultado;	
		
		--tasa cero
		
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS 
		then				 
								
		p_ciudad_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'ciudad');
		p_nombre_propietario_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombrePropietario');
		p_nombre_representante_legal_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRepresentanteLegal');
		p_condicion_pago_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'condicionPago');
		p_periodo_entrega_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'periodoEntrega');
		p_monto_iehd_hid :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIedh');
		
		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_hidrocarburo_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		metodo_pago_id, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		--hidrocarburo
		ciudad, 
		nombre_propietario,
		nombre_representante_legal,
		condicion_pago,
		periodo_entrega,
		monto_iehd,
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_metodo_pago_id, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		-- hidrocarburo			
		p_ciudad_hid,
		p_nombre_propietario_hid,
		p_nombre_representante_legal_hid,
		p_condicion_pago_hid,
		p_periodo_entrega_hid,
		p_monto_iehd_hid,
		p_caed
		) returning venta_contingencia_hidrocarburo_id into v_resultado;

		return v_resultado;	
		
	    when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
		then
		--- add 20190410 rgt
		
		p_mes_facturacion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'mesFacturacion');
		p_direccion_destinatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionDestinatario');
		p_otros_montos_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos');
		p_monto_total_puerto_ypfb := 0.1;
		p_precio_valor_bruto_ypyb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');
		p_gastos_transporte_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera');
		p_gastos_seguro_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera');
		p_total_fob_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera');
		p_monto_transporte_frontera_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera');
		p_monto_seguro_internacional_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional');
		p_monto_total_cpt :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalCPT');
		p_incoterm_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
		p_lugar_destino_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
		p_puerto_destino_ypfb := '-';
		p_tipo_pais_id_ypfb :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais');
		p_nombre_razon_social := 'factura exportacion YPFB'; -- add

		INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb
		(
		usuario_registro_id, 
		usuario_ultima_modificacion_id, 
		recepcion_contingencia_correcta_exportacion_ypfb_id, --*
		persona_contribuyente_id, 
		punto_venta_contingencia_id, 
		sucursal_id, 
		tipo_departamento_id, 
		tipo_ambiente_id, 
		tipo_emision_id, 
		tipo_modalidad_id, 
		tipo_documento_fiscal_id, 
		tipo_documento_identidad_id, 
		tipo_documento_sector_id, 
		estado_factura_id, 
		nit_emisor, 
		codigo_cliente, 
		numero_factura, 
		cuf, 
		cufd, 
		cuis, 
		direccion, 
		usuario, 
		numero_documento, 
		complemento, 
		nombre_razon_social, 
		monto_total, 
		monto_descuento, 
		leyenda, 
		fecha_emision, 
		fecha_registro, 
		fecha_ultima_modificacion, 
		estado_id, 
		tipo_moneda_id, 
		tipo_cambio, 
		monto_total_moneda,
		-- exportacion ypfb
		mes_facturacion,
		direccion_destinatario,
		otros_montos,
		monto_total_puerto,
		precio_valor_bruto,
		gastos_transporte_frontera,
		gastos_seguro_frontera,
		total_fob_frontera,
		monto_transporte_frontera,
		monto_seguro_internacional,
		monto_total_cpt,
		incoterm,
		lugar_destino,
		puerto_destino,
		tipo_pais_id,
		--contingencia
		caed
		)
		VALUES(
		p_usuario_registro_id, 
		p_usuario_ultima_modificacion_id, 
		p_recepcion_correcta_id,  --*
		p_persona_contribuyente_id, 
		p_punto_venta_id, 
		p_sucursal_id, 
		p_tipo_departamento_id, 
		p_tipo_ambiente_id, 
		p_tipo_emision_id, 
		p_tipo_modalidad_id, 
		p_tipo_documento_fiscal_id, 
		p_tipo_documento_identidad_id, 
		p_tipo_documento_sector_id, 
		p_estado_factura_id, 
		p_nit_emisor, 
		p_codigo_cliente, 
		p_numero_factura, 
		p_cuf, 
		p_cufd, 
		p_cuis, 
		p_direccion, 
		p_usuario, 
		p_numero_documento, 
		p_complemento, 
		p_nombre_razon_social, 
		p_monto_total, 
		p_monto_descuento, 
		p_leyenda, 
		p_fecha_emision, 
		p_fecha_registro, 
		p_fecha_ultima_modificacion, 
		p_estado_id, 
		p_tipo_moneda_id, 
		p_tipo_cambio, 
		p_monto_total_moneda,
		---exportacion ypfb
		p_mes_facturacion,
		p_direccion_destinatario,
		p_otros_montos_ypfb,
		p_monto_total_puerto_ypfb,
		p_precio_valor_bruto_ypyb,
		p_gastos_transporte_frontera_ypfb,
		p_gastos_seguro_frontera_ypfb,
		p_total_fob_frontera_ypfb,
		p_monto_transporte_frontera_ypfb,
		p_monto_seguro_internacional_ypfb,
		p_monto_total_cpt,
		p_incoterm_ypfb,
		p_lugar_destino_ypfb,
		p_puerto_destino_ypfb,
		p_tipo_pais_id_ypfb,
		--contingencia
		p_caed
		) returning venta_contingencia_exportacion_ypfb_id into v_resultado;

		return v_resultado; 

		-- add 31102019 eca
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES CONTINGENCIAS
			then 	
			p_nit_emisor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
			p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
			p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
			p_cufd :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
			p_sucursal_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
			p_direccion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccion');
			p_punto_venta_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta');
			p_fecha_emision :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
			p_nombre_razon_social :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
			p_direccion_comprador_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
			p_tipo_documento_identidad_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
			p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
			p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'complemento');
			p_concentrado_granel_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'concentradoGranel');
			p_origen_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'origen');
			p_puerto_transito_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoTransito');
			p_puerto_destino_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
			p_pais_destino_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'paisDestino');
			p_incoterm_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');		
			p_codigo_cliente :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoCliente');
			p_partida_arancelaria_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'partidaArancelaria');
			p_tipo_moneda_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda');
			p_tipo_cambio_oficial :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial'); --tipoCambioOficial
			p_tipo_cambio_anb_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioANB');  
			p_numero_lote_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroLote');
			p_kilos_netos_humedos := (p_json->'XmlFactura'->'factura'->'cabecera'->>'kilosNetosHumedos');
			p_humedad_porcentaje := (p_json->'XmlFactura'->'factura'->'cabecera'->>'humedadPorcentaje');
			p_humedad_valor := (p_json->'XmlFactura'->'factura'->'cabecera'->>'humedadValor');
			p_merma_porcentaje := (p_json->'XmlFactura'->'factura'->'cabecera'->>'mermaPorcentaje');
			p_merma_valor := (p_json->'XmlFactura'->'factura'->'cabecera'->>'mermaValor');				
			p_kilos_netos_secos_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'kilosNetosSecos');
			p_metodo_pago_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago');
			p_numero_tarjeta :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroTarjeta');
			p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
			p_monto_total_moneda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda');
			p_sub_total_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'subTotal');
			p_gastos_realizacion_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosRealizacion');
			p_liquidacion_preliminar_em := (p_json->'XmlFactura'->'factura'->'cabecera'->>'liquidacionPreliminar');
			p_leyenda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'leyenda');
			p_usuario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'usuario');
			p_tipo_documento_sector_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector');
			p_iva_em := null; --no existe en xml/xsd, pero se lo mantiene en bd (null)
			
			insert into	sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras(
				usuario_registro_id, usuario_ultima_modificacion_id, recepcion_contingencia_correcta_exportacion_minera_id, persona_contribuyente_id,
				punto_venta_contingencia_id,	sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id,
				tipo_documento_identidad_id, tipo_documento_sector_id,	tipo_moneda_id,	estado_factura_id,	metodo_pago_id,	numero_tarjeta,
				nit_emisor,	codigo_cliente,	numero_factura,	cuf, cufd,	cuis, direccion, usuario, numero_documento,	complemento, nombre_razon_social,
				direccion_comprador, concentrado_granel, origen, puerto_transito, puerto_destino, pais_destino,	incoterm, numero_lote, 
				partida_arancelaria, toneladas_metricas_humedas,	merma_valor, merma_porcentaje, kilos_netos_secos, kilos_netos_humedos, 
				humedad_porcentaje, humedad_valor, sub_total, gastos_realizacion, iva, liquidacion_preliminar, monto_total, monto_total_moneda, 
				tipo_cambio, tipo_cambio_anb, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, caed)
			values(
				p_usuario_registro_id,	p_usuario_ultima_modificacion_id, p_id_recepciones_correctas, p_persona_contribuyente_id,
				p_punto_venta_id, p_sucursal_id, p_tipo_departamento_id, p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, 
				p_tipo_documento_identidad_id, p_tipo_documento_sector_id, p_tipo_moneda_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, 
				p_nit_emisor, p_codigo_cliente,	p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, p_complemento,	p_nombre_razon_social, 
				p_direccion_comprador_em, p_concentrado_granel_em, p_origen_em, p_puerto_transito_em, p_puerto_destino_em, p_pais_destino_em, p_incoterm_em, p_numero_lote_em, 
				p_partida_arancelaria_em, p_toneladas_metricas_humedas_em, p_merma_valor, p_merma_porcentaje, p_kilos_netos_secos_em, p_kilos_netos_humedos, 
				p_humedad_porcentaje, p_humedad_valor, p_sub_total_em, p_gastos_realizacion_em, p_iva_em, p_liquidacion_preliminar_em, p_monto_total, p_monto_total_moneda, 
				p_tipo_cambio_oficial, p_tipo_cambio_anb_em, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, p_estado_id, p_caed)	
			returning venta_contingencia_exportacion_minera_id into v_resultado;

			return v_resultado;	
			
		-- add 31102019 eca
		when p_tipo_documento_sector_id = 26 --Nota: sre_fac_ventas_contingencias_libres_consignaciones_ypfb - sector 26
		then		
				--p_usuario_registro_id int8;
				--p_usuario_ultima_modificacion_id int8;
				--p_recepcion_contingencia_correcta_libre_consignacion_ypfb_id int8; (p_recepcion_correcta_id)
				--p_persona_contribuyente_id int8;
				p_punto_venta_contingencia_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta');
				p_sucursal_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
				--p_tipo_departamento_id int4;
				p_tipo_ambiente_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
				p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
				p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');
				p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
				p_tipo_documento_identidad_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
				p_tipo_documento_sector_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector');
				p_tipo_moneda_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda');
				--p_estado_factura_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'');
				p_metodo_pago_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago');
				p_numero_tarjeta :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroTarjeta');
				p_nit_emisor :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
				p_codigo_cliente :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoCliente');
				p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
				p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
				p_cufd :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
				p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
				p_direccion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccion');
				p_usuario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'usuario');
				p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
				--p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>''); (NO EXISTE EN XML)
				p_consignatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'consignatario');
				p_direccion_consignatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionConsignatario');
				p_atencion_consignatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'atencionConsignatario');
				p_destinatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'destinatario');
				p_direccion_destinatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionDestinatario');
				p_atencion_destinatario :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'atencionDestinatario');
				p_fax_exportador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'faxExportador');
				p_numero_contrato :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroContrato');
				p_contacto_exportador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'contactoExportador');
				p_telefono_exportador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'telefonoExportador');
				p_banco_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'bancoPago');
				p_numero_cuenta_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroCuentaPago');
				p_nombre_cuenta_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreCuentaPago');
				p_codigo_swift_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSwiftPago');
				p_codigo_fedwire_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'CodigoFedwirePago');
				p_codigo_chips_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoChipsPago');
				p_plaza_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'plazaPago');
				p_direccion_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionPago');
				p_incoterm :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
				p_modalidad_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'modalidadPago');
				p_termino_pago :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'terminosPago');
				p_movimiento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'movimiento');
				p_pais_origen :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'paisOrigen');
				p_pais_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'paisDestino');
				p_exportador :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'exportador');
				p_embarque :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'embarque');
				p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
				p_monto_total_moneda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda');
				p_tipo_cambio :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio');
				p_leyenda :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'leyenda');
				p_fecha_emision :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
				--p_fecha_registro :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'');
				--p_fecha_ultima_modificacion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'');
				--p_estado_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'');
				p_caed :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
				
				INSERT INTO sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb
					(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_contingencia_correcta_libre_consignacion_ypfb_id, 
					persona_contribuyente_id, punto_venta_contingencia_id, sucursal_id, tipo_departamento_id, 
					tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, 
					tipo_documento_sector_id, tipo_moneda_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, 
					codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, 
					consignatario, direccion_consignatario, atencion_consignatario, destinatario, direccion_destinatario, 
					atencion_destinatario, fax_exportador, numero_contrato, contacto_exportador, telefono_exportador, banco_pago, 
					numero_cuenta_pago, nombre_cuenta_pago, codigo_swift_pago, codigo_fedwire_pago, codigo_chips_pago, plaza_pago, 
					direccion_pago, incoterm, modalidad_pago, termino_pago, movimiento, pais_origen, pais_destino, exportador, 
					embarque, monto_total, monto_total_moneda, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, 
					estado_id, caed)
				VALUES(p_usuario_registro_id, p_usuario_ultima_modificacion_id, p_recepcion_correcta_id, 
					p_persona_contribuyente_id, p_punto_venta_contingencia_id, p_sucursal_id, p_tipo_departamento_id, 
					p_tipo_ambiente_id, p_tipo_emision_id, p_tipo_modalidad_id, p_tipo_documento_fiscal_id, p_tipo_documento_identidad_id, 
					p_tipo_documento_sector_id, p_tipo_moneda_id, p_estado_factura_id, p_metodo_pago_id, p_numero_tarjeta, p_nit_emisor, 
					p_codigo_cliente, p_numero_factura, p_cuf, p_cufd, p_cuis, p_direccion, p_usuario, p_numero_documento, null, 
					p_consignatario, p_direccion_consignatario, p_atencion_consignatario, p_destinatario, p_direccion_destinatario, 
					p_atencion_destinatario, p_fax_exportador, p_numero_contrato, p_contacto_exportador, p_telefono_exportador, p_banco_pago, 
					p_numero_cuenta_pago, p_nombre_cuenta_pago, p_codigo_swift_pago, p_codigo_fedwire_pago, p_codigo_chips_pago, p_plaza_pago, 
					p_direccion_pago, p_incoterm, p_modalidad_pago, p_termino_pago, p_movimiento, p_pais_origen, p_pais_destino, p_exportador, 
					p_embarque, p_monto_total, p_monto_total_moneda, p_tipo_cambio, p_leyenda, p_fecha_emision, p_fecha_registro, p_fecha_ultima_modificacion, 
					p_estado_id, p_caed
				) returning venta_contingencia_libre_consignacion_ypfb_id into v_resultado;
		return v_resultado; 
	else 
	return v_resultado;
		
	end case;
			
		return v_resultado;
  
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_registro_ventas_dinamico_contingencia'));	

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_reporte_seguimiento_certificacion(p_log_id bigint, p_sistema_id bigint, p_documento_fiscal_id integer, p_documento_sector_id integer, p_fecha_impresion timestamp without time zone, p_reporte bytea, p_estado_id character varying, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_usuario_registro_id bigint, p_usuario_ultima_modificacion bigint, p_tipo_crud character)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
declare
	v_resultado bigint:=1;	
begin
	case
		when p_tipo_crud ='C' --create
			then
				INSERT INTO sre_recaudaciones.sre_fac_reporte_seguimiento_certificacion
				(sistema_id, documento_fiscal_id, documento_sector_id, fecha_impresion, reporte, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
				VALUES(
				p_sistema_id,
				p_documento_fiscal_id,
				p_documento_sector_id,
				p_fecha_impresion,
				p_reporte,
				p_estado_id,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_usuario_registro_id,
				p_usuario_ultima_modificacion						
				) returning log_id into v_resultado;

				return v_resultado;
								
		when p_tipo_crud ='U' --update
			then 
				UPDATE sre_recaudaciones.sre_fac_reporte_seguimiento_certificacion
				SET 
					sistema_id=p_sistema_id,
					documento_fiscal_id=p_documento_fiscal_id,
					documento_sector_id=p_documento_sector_id,
					fecha_impresion=p_fecha_impresion,
					reporte=p_reporte,
					estado_id=p_estado_id,
					fecha_registro=p_fecha_registro,
					fecha_ultima_modificacion=p_fecha_ultima_modificacion,
					usuario_registro_id=p_usuario_registro_id,
					usuario_ultima_modificacion=p_usuario_ultima_modificacion
				WHERE 
					log_id=p_log_id;
					
				return v_resultado;
				
		when p_tipo_crud ='D' --delete
			then 
				UPDATE sre_recaudaciones.sre_fac_reporte_seguimiento_certificacion
				SET 
					estado_id='AN'
				WHERE 
					log_id=p_log_id;
				
				return v_resultado;
		else
			return 0;			
	end case;
	
	
  	EXCEPTION
  	when others
	    then
    	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_reporte_seguimiento_certificacion'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_sub_detalle_hoteles(p_detalle_venta_hotel_id bigint, p_pasaporte_documento_identificacion character varying, p_nacionalidad integer)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_usuario_registro_id int8:=1000;
	v_usuario_ultima_modificacion_id int8:=1000;
	v_estado_id varchar(2):='AC';
	v_fecha_actual timestamp:=now();	
	v_resultado bigint:=0;
	
begin
	
	INSERT INTO sre_recaudaciones.sre_fac_detalles_documentos_huespedes
	(usuario_registro_id, usuario_ultima_modificacion_id, detalle_venta_hotel_id, pasaporte_documento_identificacion, nacionalidad, fecha_registro, fecha_ultima_modificacion, estado_id)
	VALUES(v_usuario_registro_id, v_usuario_ultima_modificacion_id, p_detalle_venta_hotel_id, p_pasaporte_documento_identificacion, p_nacionalidad, v_fecha_actual, v_fecha_actual, v_estado_id)  returning detalle_documento_huesped_id into v_resultado;
	 		
	return v_resultado;	
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_sub_detalle_hoteles'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_sub_detalle_turismo(p_detalle_venta_turismo_receptivo_id bigint, p_pasaporte_documento_identificacion character varying, p_nacionalidad character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_usuario_registro_id int8:=1000;
	v_usuario_ultima_modificacion_id int8:=1000;
	v_estado_id varchar(2):='AC';
	v_fecha_actual timestamp:=now();	
	v_resultado bigint:=0;
	
begin			
	INSERT INTO sre_recaudaciones.sre_fac_detalles_docs_huespedes_notas
	(usuario_registro_id, usuario_ultima_modificacion_id, detalle_venta_turismo_receptivo_id, pasaporte_documento_identificac, nacionalidad, fecha_registro, fecha_ultima_modificacion, estado_id)
	VALUES(v_usuario_registro_id, v_usuario_ultima_modificacion_id, p_detalle_venta_turismo_receptivo_id, p_pasaporte_documento_identificacion, p_nacionalidad, v_fecha_actual, v_fecha_actual, v_estado_id)  returning detalle_doc_huesped_nota_id into v_resultado;	
	
	return v_resultado;	
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_sub_detalle_turismo'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_sub_detalle_turismo_contingencia(p_detalle_venta_contingencia_turismo_receptivo_id bigint, p_pasaporte_documento_identificacion character varying, p_nacionalidad character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Registro en tabla sre_fac_detalles_contingencias_docs_huespedes_notas para subdetalle del sector 21
PARAMETROS INGRESO
    p_detalle_venta_contingencia_turismo_receptivo_id -> identificador del detalle de la nota fiscal
    p_pasaporte_documento_identificacion ->
    p_nacionalidad ->
    
PARAMETROS SALIDA
    v_resultado - identificador sre_fac_detalles_contingencias_docs_huespedes_notas
SUBSISTEMA : Facturación
FECHA CREACION : 19/11/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : <Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_usuario_registro_id int8:=1000;
	v_usuario_ultima_modificacion_id int8:=1000;
	v_estado_id varchar(2):='AC';
	v_fecha_actual timestamp:=now();	
	v_resultado bigint:=0;
	
begin			
	INSERT INTO sre_recaudaciones.sre_fac_detalles_contingencias_docs_huespedes_notas
	(usuario_registro_id, usuario_ultima_modificacion_id, detalle_venta_contingencia_turismo_receptivo_id, pasaporte_documento_identificac, nacionalidad, fecha_registro, fecha_ultima_modificacion, estado_id)
	VALUES(v_usuario_registro_id, v_usuario_ultima_modificacion_id, p_detalle_venta_contingencia_turismo_receptivo_id, p_pasaporte_documento_identificacion, p_nacionalidad, v_fecha_actual, v_fecha_actual, v_estado_id)  
	returning detalle_contingencia_doc_huespede_nota_id into v_resultado;	
	
	return v_resultado;	
  
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_sub_detalle_turismo_contingencia'));		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_ventas_dinamico(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_sucursal_id integer, p_tipo_departamento_id integer, p_tipo_ambiente_id integer, p_tipo_emision_id integer, p_tipo_modalidad_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_identidad_id integer, p_tipo_documento_sector_id integer, p_estado_factura_id integer, p_metodo_pago_id integer, p_nit_emisor bigint, p_codigo_cliente character varying, p_numero_factura bigint, p_cuf character varying, p_cufd character varying, p_cuis character varying, p_direccion character varying, p_usuario character varying, p_numero_documento character varying, p_complemento character varying, p_nombre_razon_social character varying, p_monto_total numeric, p_monto_descuento numeric, p_leyenda character varying, p_fecha_emision timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_moneda_id integer, p_tipo_cambio numeric, p_monto_total_moneda numeric, p_recepcion_correcta_estandar_id bigint, p_numero_tarjeta bigint, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_ventas(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));
		
	    
	    execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_persona_contribuyente_id,
			p_punto_venta_id,
			p_sucursal_id,
			p_tipo_departamento_id,
			p_tipo_ambiente_id,
			p_tipo_emision_id,
			p_tipo_modalidad_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_identidad_id,
			p_tipo_documento_sector_id,
			p_estado_factura_id,
			p_metodo_pago_id,
			p_nit_emisor,
			p_codigo_cliente,
			p_numero_factura,
			p_cuf,
			p_cufd,
			p_cuis,
			p_direccion,
			p_usuario,
			p_numero_documento,
			p_complemento,
			p_nombre_razon_social,
			p_monto_total,
			p_monto_descuento,
			p_leyenda,
			p_fecha_emision,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_tipo_moneda_id,
			p_tipo_cambio,
			p_monto_total_moneda,
			--campos adicionales a estandar
			p_recepcion_correcta_estandar_id,
			p_numero_tarjeta
	    into v_ultimo_registro;
	    
	  	return v_ultimo_registro;
	  else
	  	return v_ultimo_registro;
	  end if;
  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_ventas_dinamico'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_ventas_dinamico_etapa_2(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_recepcion_correcta_factura_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_sucursal_id integer, p_tipo_departamento_id integer, p_tipo_ambiente_id integer, p_tipo_emision_id integer, p_tipo_modalidad_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_identidad_id integer, p_tipo_documento_sector_id integer, p_estado_factura_id integer, p_metodo_pago_id integer, p_numero_tarjeta bigint, p_nit_emisor bigint, p_codigo_cliente character varying, p_numero_factura bigint, p_cuf character varying, p_cufd character varying, p_cuis character varying, p_direccion character varying, p_usuario character varying, p_numero_documento character varying, p_complemento character varying, p_nombre_razon_social character varying, p_monto_total numeric, p_monto_descuento numeric, p_leyenda character varying, p_fecha_emision timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_moneda_id integer, p_tipo_cambio numeric, p_monto_total_moneda numeric, p_tipo_crud character varying, p_periodo_facturado character varying, p_nombre_estudiante character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
	v_sql varchar:='';	
begin
	if (p_tipo_crud='C')then
	  
	 	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_etapa_2(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));
		
	    
	    if p_tipo_documento_sector_id = 1
	    then
	    	execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_recepcion_correcta_factura_id,
			p_persona_contribuyente_id,
			p_punto_venta_id,
			p_sucursal_id,
			p_tipo_departamento_id,
			p_tipo_ambiente_id,
			p_tipo_emision_id,
			p_tipo_modalidad_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_identidad_id,
			p_tipo_documento_sector_id,
			p_estado_factura_id,
			p_metodo_pago_id,
			p_numero_tarjeta,
			p_nit_emisor,
			p_codigo_cliente,
			p_numero_factura,
			p_cuf,
			p_cufd,
			p_cuis,
			p_direccion,
			p_usuario,
			p_numero_documento,
			p_complemento,
			p_nombre_razon_social,
			p_monto_total,
			p_monto_descuento,
			p_leyenda,
			p_fecha_emision,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_tipo_moneda_id,
			p_tipo_cambio,
			p_monto_total_moneda	
	    	into v_ultimo_registro;
	    end if;
	    
	    if p_tipo_documento_sector_id = 2
	    then
	    	execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_recepcion_correcta_factura_id,
			p_persona_contribuyente_id,
			p_punto_venta_id,
			p_sucursal_id,
			p_tipo_departamento_id,
			p_tipo_ambiente_id,
			p_tipo_emision_id,
			p_tipo_modalidad_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_identidad_id,
			p_tipo_documento_sector_id,
			p_estado_factura_id,
			p_metodo_pago_id,
			p_numero_tarjeta,
			p_nit_emisor,
			p_codigo_cliente,
			p_numero_factura,
			p_cuf,
			p_cufd,
			p_cuis,
			p_direccion,
			p_usuario,
			p_numero_documento,
			p_complemento,
			p_nombre_razon_social,
			p_monto_total,
			p_monto_descuento,
			p_periodo_facturado, 
			p_nombre_estudiante, 
			p_leyenda,
			p_fecha_emision,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_tipo_moneda_id,
			p_tipo_cambio,
			p_monto_total_moneda	
	    	into v_ultimo_registro;
	    end if;
	    
	    if p_tipo_documento_sector_id = 3
	    then
	    	execute v_sql  
	    using 
	    	p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_recepcion_correcta_factura_id,
			p_persona_contribuyente_id,
			p_punto_venta_id,
			p_sucursal_id,
			p_tipo_departamento_id,
			p_tipo_ambiente_id,
			p_tipo_emision_id,
			p_tipo_modalidad_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_identidad_id,
			p_tipo_moneda_id,
			p_tipo_documento_sector_id,
			p_estado_factura_id,
			p_metodo_pago_id,
			p_numero_tarjeta,
			p_nit_emisor,
			p_codigo_cliente,
			p_numero_factura,
			p_cuf,
			p_cufd,
			p_cuis,
			p_direccion,
			p_usuario,
			p_numero_documento,
			p_complemento,
			p_nombre_razon_social,
			p_monto_total,
			p_monto_total_moneda,			
			p_tipo_cambio,
			p_periodo_facturado, 
			p_leyenda,
			p_fecha_emision,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_monto_descuento		
	    	into v_ultimo_registro;
	    end if;
	        
	  	return v_ultimo_registro;
	  else
	  	return v_ultimo_registro;
	  end if;

  
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_ventas_dinamico_etapa_2'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_ventas_dinamico_facturacion_manual(p_json json, p_id_recepciones_correctas bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del JSON y los prepara para ser enviados en la ejecucion de la consulta INSERT de ventas,
Identificacion de ventas existente para procesar modificacion o rectificados
Llama al servicio de registro de observados
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
id de la recepcion correcta
PARAMETROS SALIDA
id de venta registrada
SUBSISTEMA : Facturación
FECHA CREACION : 03/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
--*****sre_fac_ventas_estandares
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_persona_contribuyente_emisor_id bigint;
	p_persona_contribuyente_beneficiario_id bigint; 
	p_sucursal_contribuyente_id bigint;	
	p_tipo_documento_identidad_id integer; 
	p_tipo_departamento_id integer; 
	p_tipo_modalidad_id integer; 
	p_tipo_documento_fiscal_id integer; 	
	p_tipo_documento_sector_id integer; 
	p_estado_venta_manual_documento_fiscal_id integer; 
	p_gestion integer;
	p_periodo_facturado integer;
	p_numero_sucursal integer; 
	p_nit_emisor bigint; 
	p_numero_factura bigint; 
	p_caed varchar;
	p_direccion varchar; 
	p_numero_documento varchar;
	p_complemento varchar; 
	p_nombre_razon_social varchar;
	p_descripcion varchar;
	p_monto_total numeric(20,5); 
	p_leyenda varchar; 
	p_fecha_emision timestamp without time zone;
	p_fecha_registro timestamp without time zone;
	p_fecha_ultima_modificacion timestamp without time zone;
	p_estado_id varchar;
	
	p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
	p_fecha_ingreso_hospedaje_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje' as character varying));   
	p_fecha_emision_factura_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmisionFactura' as character varying));   
	p_fecha_envio timestamp without time zone;
	
	p_actividad_economica_id integer;
	p_codigo_actividad integer;
	p_oficina_emisor_id bigint;
	p_estado_plazo_documento_fiscal_id integer;
	p_cantidad integer :=null;
	p_monto_descuento_total numeric(20,5) :=null;
	v_sql varchar:='0';	
	v_fecha_actual timestamp:=now();
	v_venta_id bigint ;	
	v_tipo_crud varchar :='C';
	v_resultado bigint:=0;
	p_resultado_historico bigint:= 0;
	p_resultado_rectificada bigint:= 0;
	--alcanzada ice
	p_monto_ice numeric(20,5); 
	--exportaciones
	   p_direccion_comprador varchar(300) ;
	   p_incoterm varchar(100);
	   p_puerto_destino varchar(100);
	   p_lugar_destino varchar(100);
	   p_codigo_pais integer;
	   p_monto_total_puerto numeric(20,5);
	   p_precio_valor_bruto numeric(20,5);
	   p_gastos_transporte_frontera numeric(20,5);
	   p_gastos_seguro_frontera numeric(20,5);
	   p_total_fob_frontera numeric(20,5);
	   p_monto_transporte_frontera numeric(20,5);
	   p_monto_seguro_internacional numeric(20,5);
	   p_otros_montos numeric(20,5);
	   p_pais_texto varchar(250);
	   ----libre consignacion	  	
		p_remitente varchar(100);
		p_consignatario varchar(100);
		p_lugar_acopio_puerto varchar(100);
		--hidrocarburos
	p_placa_vehiculo varchar(12) ;
	p_tipo_envase varchar(50);
	p_monto_ley_317 numeric(20,5) ;
	p_monto_total_sujeto_iva numeric(20,5);
	--hopitales
	p_modalidad_servicio varchar(100);
	p_medico varchar(200) ;
	p_paciente varchar(200) ;
	p_especialidad varchar(100) ;
	--hoteles
	p_cantidad_huespedes integer;
	p_cantidad_habitaciones integer;
	p_cantidad_mayores integer;
	p_cantidad_menores integer;
	p_fecha_ingreso_hospedaje timestamp ;
	--nota credito
	p_numero_factura_nota_credito bigint;
	p_numero_autorizacion_caed varchar(100);
	p_fecha_emision_factura timestamp;
	p_monto_total_original numeric(20,5) ;
	p_monto_total_devuelto numeric(20,5) ;
	p_monto_efectivo_credito_debito numeric(20,5) ;
	--nota moneda extranjera
	p_tipo_cambio_oficial numeric(20,5);
	p_tipo_cambio numeric(20,5);
 
begin
--Realizar llamada al método sre_fac_ope_armar_consulta_registro_ventas
	---------------DATOS DE LA TABLA: Ventas---------------
	--***** Datos Estandar
	p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
	p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
	p_persona_contribuyente_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_emisor_id');
	p_persona_contribuyente_beneficiario_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_beneficiario_id');
	p_sucursal_contribuyente_id:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');		
	p_tipo_documento_identidad_id:=(select sre_recaudaciones.sre_fac_ope_obtener_tipo_documento_facturacion_manual(p_json));
	p_tipo_departamento_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_departamento_id');
	p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');		
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	
	p_gestion:=(p_json->'xmlRecepcionGenerica'->>'p_gestion');
	p_periodo_facturado:=(p_json->'xmlRecepcionGenerica'->>'p_periodo_facturado');
	p_numero_sucursal:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');
	p_nit_emisor :=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_direccion :=(p_json->'xmlRecepcionGenerica'->>'p_direccion');
	p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
	p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'complemento');
	p_nombre_razon_social :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
	p_descripcion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'descripcion');
	p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
	p_leyenda :=(p_json->'xmlRecepcionGenerica'->>'p_leyenda');
	p_fecha_emision:=(select CASE WHEN p_fecha_emision_texto <> '' THEN to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY') ELSE NULL END); 
	p_fecha_registro :=v_fecha_actual;
	p_fecha_ultima_modificacion :=v_fecha_actual;
	p_estado_id :='AC';

	p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));  	
	p_oficina_emisor_id := (p_json->'xmlRecepcionGenerica'->>'v_oficinaId');
	p_actividad_economica_id := (p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
	p_codigo_actividad := (p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');

	p_estado_plazo_documento_fiscal_id	:= (select sre_recaudaciones.sre_ope_obtener_estado_plazo_factura_manual(p_json));
	p_estado_venta_manual_documento_fiscal_id:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_venta_manual_documento_fiscal_id' and  descripcion ='VALIDO');

	p_monto_ice :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce');
	--exportaciones
	p_direccion_comprador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
	p_incoterm :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
	p_puerto_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
	p_lugar_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
	p_pais_texto:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'pais');

	p_codigo_pais := (select sre_recaudaciones.sre_ope_obtener_codigo_pais_factura_manual(p_pais_texto));
	p_monto_total_puerto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalPuerto');
	p_precio_valor_bruto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');
	p_gastos_transporte_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera');
	p_gastos_seguro_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera');
	p_total_fob_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera');
	p_monto_transporte_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera');
	p_monto_seguro_internacional :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional');
	p_otros_montos :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos');
	--libre consignacion
	p_remitente := (p_json->'XmlFactura'->'factura'->'cabecera'->>'remitente');
	p_consignatario := (p_json->'XmlFactura'->'factura'->'cabecera'->>'consignatario');
	p_lugar_acopio_puerto := (p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarAcopioPuerto');
	--hidrocarburos
	p_placa_vehiculo := (p_json->'XmlFactura'->'factura'->'cabecera'->>'placaVehiculo');
	p_tipo_envase := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEnvase');
	p_monto_ley_317 := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoLey317');
	p_monto_total_sujeto_iva := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSujetoIva');
	--hospitales
	p_modalidad_servicio := (p_json->'XmlFactura'->'factura'->'cabecera'->>'modalidadServicio');
	p_medico := (p_json->'XmlFactura'->'factura'->'cabecera'->>'medico');
	p_paciente := (p_json->'XmlFactura'->'factura'->'cabecera'->>'paciente');
	p_especialidad := (p_json->'XmlFactura'->'factura'->'cabecera'->>'especialidad');
	---hoteles
	p_cantidad_huespedes := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHuespedes');
	p_cantidad_habitaciones := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHabitaciones');
	p_cantidad_mayores := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMayores');
	p_cantidad_menores := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMenores');
	p_fecha_ingreso_hospedaje := (select CASE WHEN p_fecha_ingreso_hospedaje_texto <> '' THEN to_timestamp(p_fecha_ingreso_hospedaje_texto,'DD/MM/YYYY') ELSE NULL END); 
							
	--nota debito credito
	--p_numero_factura_nota_credito  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFacturaNotaCredito');
	p_numero_factura_nota_credito  := p_numero_factura;
	p_numero_autorizacion_caed  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroAutorizacionCaed');
	p_fecha_emision_factura  := (select CASE WHEN p_fecha_emision_factura_texto <> '' THEN to_timestamp(p_fecha_emision_factura_texto,'DD/MM/YYYY') ELSE NULL END); 
	                                            
	p_monto_total_original  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal');
	p_monto_total_devuelto  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalDevuelto');
	p_monto_efectivo_credito_debito  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoEfectivoCreditoDebito');
	--nota monedas
        p_tipo_cambio_oficial := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial');
	p_tipo_cambio := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio');
	
	v_venta_id := (select sre_recaudaciones.sre_fac_ope_verificar_existe_ventas_factura_manual(p_json));		
	if(v_venta_id<=0 or v_venta_id is null) then
		v_tipo_crud:='C';
	else
		v_tipo_crud:='U';
		
		p_resultado_historico:= (select sre_recaudaciones.sre_ope_registrar_historico_facturacion_manual(v_venta_id, p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_usuario_ultima_modificacion_id, p_fecha_envio));
		---LLENAR EL HISTORICO
		--LENAR SI ES RECTIFICADO	
		p_resultado_rectificada:= (select sre_recaudaciones.sre_ope_registrar_rectificados_facturacion_manual(p_json, v_venta_id));
		if(p_resultado_rectificada<0 or p_resultado_historico<0) then
		ROLLBACK;
		end if;
	end if;
	
				
		v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_registro_ventas_facturacion_manual(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id, v_tipo_crud));
			execute v_sql  
			using 
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_id_recepciones_correctas,
			p_persona_contribuyente_emisor_id,
			p_persona_contribuyente_beneficiario_id,
			p_sucursal_contribuyente_id,
			p_tipo_documento_identidad_id,
			p_tipo_departamento_id,
			p_tipo_modalidad_id,
			p_tipo_documento_fiscal_id,
			p_tipo_documento_sector_id,
			p_estado_venta_manual_documento_fiscal_id,
			p_gestion,
			p_periodo_facturado,
			p_numero_sucursal,
			p_nit_emisor,
			p_numero_factura,
			p_caed,
			p_direccion,
			p_numero_documento,
			p_complemento,
			p_nombre_razon_social,
			p_descripcion,
			p_monto_total,
			p_leyenda,
			p_fecha_emision,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_oficina_emisor_id,
			p_actividad_economica_id,
			p_codigo_actividad,
			p_estado_plazo_documento_fiscal_id,
			p_cantidad,
			p_monto_descuento_total		, 	
			v_venta_id,
			--alcanzada ice
			p_monto_ice,	
				--exportaciones 38
				p_direccion_comprador,
			      p_incoterm,
			      p_puerto_destino,
			      p_lugar_destino,
			      p_codigo_pais,
			      p_monto_total_puerto,
			      p_precio_valor_bruto,
			      p_gastos_transporte_frontera,
			      p_gastos_seguro_frontera,
			      p_total_fob_frontera,
			      p_monto_transporte_frontera,
			      p_monto_seguro_internacional,
			      p_otros_montos,
			      --libre consignacion 51
			        p_remitente,
				p_consignatario,
				p_lugar_acopio_puerto,
				--hidrocarburos 54
	p_placa_vehiculo,
	p_tipo_envase,
	p_monto_ley_317,
	p_monto_total_sujeto_iva,
	--hospitales 58
	p_modalidad_servicio,
	p_medico,
	p_paciente,
	p_especialidad,
	--hoteles 62
	p_cantidad_huespedes,
	p_cantidad_habitaciones,
	p_cantidad_mayores,
	p_cantidad_menores,
	p_fecha_ingreso_hospedaje,
	--nota debito credito 67
	p_numero_factura_nota_credito,
	p_numero_autorizacion_caed,
	p_fecha_emision_factura,
	p_monto_total_original,
	p_monto_total_devuelto,
	p_monto_efectivo_credito_debito,
	--nota moneda extranjera 73
	p_tipo_cambio_oficial,
	p_tipo_cambio
	
	into v_resultado;
       
	return v_resultado;	
		
	EXCEPTION
  when others
    then
    	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_ventas_dinamico_facturacion_manual'));	
 
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_crud_ventas_estandares(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_recepcion_correcta_estandar_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_sucursal_id integer, p_tipo_departamento_id integer, p_tipo_ambiente_id integer, p_tipo_emision_id integer, p_tipo_modalidad_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_identidad_id integer, p_tipo_documento_sector_id integer, p_estado_factura_id integer, p_metodo_pago_id integer, p_numero_tarjeta bigint, p_nit_emisor bigint, p_codigo_cliente character varying, p_numero_factura bigint, p_cuf character varying, p_cufd character varying, p_cuis character varying, p_direccion character varying, p_usuario character varying, p_numero_documento character varying, p_complemento character varying, p_nombre_razon_social character varying, p_monto_total numeric, p_monto_descuento numeric, p_leyenda character varying, p_fecha_emision timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_moneda_id integer, p_tipo_cambio numeric, p_monto_total_moneda numeric, p_tipo_crud character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_ultimo_registro bigint:=0;
begin

	if (p_tipo_crud='C')then  	
    	INSERT INTO sre_recaudaciones.sre_fac_ventas_estandares
		(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_estandar_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
		VALUES(
		p_usuario_registro_id ,
		p_usuario_ultima_modificacion_id ,
		p_recepcion_correcta_estandar_id ,
		p_persona_contribuyente_id ,
		p_punto_venta_id ,
		p_sucursal_id ,
		p_tipo_departamento_id ,
		p_tipo_ambiente_id ,
		p_tipo_emision_id ,
		p_tipo_modalidad_id ,
		p_tipo_documento_fiscal_id ,
		p_tipo_documento_identidad_id , 
		p_tipo_documento_sector_id ,
		p_estado_factura_id ,
		p_metodo_pago_id ,
		p_numero_tarjeta ,
		p_nit_emisor ,
		p_codigo_cliente ,
		p_numero_factura ,
		p_cuf ,
		p_cufd ,
		p_cuis ,
		p_direccion ,
		p_usuario ,
		p_numero_documento ,
		p_complemento ,
		p_nombre_razon_social ,
		p_monto_total ,
		p_monto_descuento ,
		p_leyenda ,
		p_fecha_emision ,
		p_fecha_registro ,
		p_fecha_ultima_modificacion ,
		p_estado_id ,
		p_tipo_moneda_id ,
		p_tipo_cambio ,
		p_monto_total_moneda
		)returning venta_estandar_id into v_ultimo_registro;  
    end if;
    
    return v_ultimo_registro;
  
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_crud_ventas_estandares'));	

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_detalle_casos_pruebas_etapa_0(p_sistema_id bigint, p_nit bigint, p_etapa_certificacion_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de las combinaciones de generacion de CUF correspondiente 
                al sistema.
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación
FECHA CREACION : <29/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se realizó la optimización de la función aproximadamente 4 veces mas eficiente
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/10/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_cantidad_esperada integer := 0;
	v_cantidad_posibles_respuestas integer := 2;---2 : porque solo existe 1) correctos y 2) incorrectos

begin	
	
	  --Nota: Recuperamos las combinaciones generadas para el CUF
	  drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA_0;
	  create temp table TEMPORAL_CASOS_PRUEBA_ETAPA_0 as
													  select *
													  from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id, p_nit);
											  
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual

			  									 select fecha_fin_prueba, fecha_inicio_prueba 
			  									 into v_fecha_fin_prueba, v_fecha_inicio_prueba
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';

	  v_fecha_fin_prueba:=case when v_fecha_fin_prueba is null then now() else v_fecha_fin_prueba end;
	  --Nota: Agrupamos los logs de acuerdo a la etapa, fecha de inicio y fin de pruebas
	  drop table if exists TEMPORAL_LOGS;
	  create temp table TEMPORAL_LOGS as (
										  select count(1) cantidad_log,LOGS.hash, LOGS.estado_match
										  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
										  where LOGS.sistema_id = p_sistema_id  
										  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
										  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
										  and   LOGS.estado_id = 'AC'
										  group by LOGS.hash, LOGS.estado_match
										 );
										 
	  
	  --Nota: Agrupamos los Logs para obtener la fecha de prueba realizada
	  drop table if exists TEMPORAL_LOGS_FECHA;
	  create temp table TEMPORAL_LOGS_FECHA as (
												  select LOGS.hash, LOGS.estado_match, LOGS.fecha_prueba
												  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
												  where LOGS.sistema_id = p_sistema_id 
												  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
												  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
												  and   LOGS.estado_id = 'AC'
												  group by LOGS.hash, LOGS.estado_match, LOGS.fecha_prueba
												); 
	  	  
	  --Nota: Se realiza el match entre los casos de pruebas y el registro de Logs
	  drop table if exists TEMPORAL_DETALLE;
	  create temp table TEMPORAL_DETALLE as
	  select PRUEBAS.nit as nit, 
		     PRUEBAS.sucursal as sucursal, 
		     PRUEBAS.modalidad as modalidad, 
	         PRUEBAS.emision as emision, 
	         PRUEBAS.documento_fiscal as documento_fiscal, 
		     PRUEBAS.sector as sector,
		     PRUEBAS.pos as punto_venta,	    
			 (select coalesce(LOGS.cantidad_log,0)
			  from  TEMPORAL_LOGS as LOGS
			  where LOGS.estado_match = 1
			  and   LOGS.hash = PRUEBAS.hash) as cantidad_casos_correctos,
			 (select coalesce(LOGS.cantidad_log,0)
			  from  TEMPORAL_LOGS as LOGS
			  where LOGS.estado_match = 0
			  and   LOGS.hash = PRUEBAS.hash) as cantidad_casos_incorrectos,
		 coalesce(
		 (select TO_CHAR (LOGS.fecha_prueba, 'dd-mm-yyyy')
			  from  TEMPORAL_LOGS_FECHA as LOGS
			  where LOGS.hash = PRUEBAS.hash
			  ORDER BY LOGS.fecha_prueba DESC
 			  FETCH FIRST 1 ROWS ONLY), '') as fecha_registro       
		 from TEMPORAL_CASOS_PRUEBA_ETAPA_0 as PRUEBAS
		     left join
	  		 (
	  		   select distinct LOGS.hash as hash
	  		   from  TEMPORAL_LOGS as LOGS	  		   		
	  		 ) as LOGS 
	    on PRUEBAS.hash = LOGS.hash;
	    
		update TEMPORAL_DETALLE 
	   	set  cantidad_casos_correctos = COALESCE(cantidad_casos_correctos,0),
		     cantidad_casos_incorrectos = COALESCE(cantidad_casos_incorrectos,0);	
	  
	  v_cantidad_esperada := 2;
	  			
	  --Nota: Retornamos el query del detalle de la etapa 0
	  return query
	  (select row_to_json(tbl) :: varchar
	  from (	  
	  		select DETALLE.nit,
	  			   DETALLE.sucursal,
	  			   DETALLE.modalidad,
	  			   DETALLE.emision,
	  			   DETALLE.documento_fiscal,
	  			   DETALLE.sector,
	  			   DETALLE.punto_venta,
	  			   v_cantidad_esperada as cantidad_casos_esperados,
	  			   DETALLE.cantidad_casos_correctos,
	  			   DETALLE.cantidad_casos_incorrectos,
	  			   DETALLE.fecha_registro,
	  			   'yyyyMMddHHmmssSSS' as fecha_emision, --add 20190712
	  			   'su número de factura' as numero_factura,        			  --add 20190712
	  			   sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(DETALLE.cantidad_casos_correctos::integer,DETALLE.cantidad_casos_incorrectos::integer,v_cantidad_esperada,v_cantidad_posibles_respuestas) as porcentaje_avance,
	  			   coalesce((select true where sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(DETALLE.cantidad_casos_correctos::integer,DETALLE.cantidad_casos_incorrectos::integer,v_cantidad_esperada,v_cantidad_posibles_respuestas) >= 100), false) as satisfactorio
	   	    from   TEMPORAL_DETALLE as DETALLE
	       ) tbl);									        									   		 
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_detalle_casos_pruebas_etapa_0_20191001(p_sistema_id bigint, p_nit bigint, p_etapa_certificacion_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de las combinaciones de generacion de CUF correspondiente 
                al sistema.
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación 
FECHA CREACION : <29/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>  
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_cantidad_esperada integer := 0;
	v_cantidad_posibles_respuestas integer := 2;---2 : porque solo existe 1) correctos y 2) incorrectos
	v_cantidad integer := 0;

begin	
	
	  --Nota: Recuperamos las combinaciones generadas para el CUF
	  drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA_0;
	  create temp table TEMPORAL_CASOS_PRUEBA_ETAPA_0 as
													  select *
													  from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id, p_nit);
											  
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	  create temp table TEMPORAL_PRUEBA_SISTEMA as 
			  									 select PRUEBA_SISTEMA.*
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';
													  
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA
									    ), now()
									  );
	
	  v_fecha_inicio_prueba := (
	  							select fecha_inicio_prueba
	  							from TEMPORAL_PRUEBA_SISTEMA
	  							);
	  

	  --Nota: Agrupamos los logs de acuerdo a la etapa, fecha de inicio y fin de pruebas
	  drop table if exists TEMPORAL_LOGS;
	  create temp table TEMPORAL_LOGS as (
										  select LOGS.hash, LOGS.estado_match, COUNT(LOGS.*) as total_logs
										  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
										  where LOGS.sistema_id = p_sistema_id  
										  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
										  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
										  and   LOGS.estado_id = 'AC'
										  group by LOGS.hash, LOGS.estado_match
										 );
										 
	  
	  --Nota: Agrupamos los Logs para obtener la fecha de prueba realizada
	  drop table if exists TEMPORAL_LOGS_FECHA;
	  create temp table TEMPORAL_LOGS_FECHA as (
												  select  distinct (LOGS.hash), max (LOGS.fecha_prueba::date) as fecha_prueba
												  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
												  where LOGS.sistema_id = p_sistema_id 
												  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
												  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
												  and   LOGS.estado_id = 'AC'
												  group by LOGS.hash, LOGS.fecha_prueba 
												); 
	  	  
	--Nota: Creamos la tabla temporal donde se almacenara el detalle de los casos de prueba
	drop table if exists TEMPORAL_DETALLE;
	  create temp table TEMPORAL_DETALLE as
	  select PRUEBAS.nit as nit, 
		     PRUEBAS.sucursal as sucursal, 
		     PRUEBAS.modalidad as modalidad, 
	         PRUEBAS.emision as emision, 
	         PRUEBAS.documento_fiscal as documento_fiscal, 
		     PRUEBAS.sector as sector,
		     PRUEBAS.pos as punto_venta,	    
			 0::integer  as cantidad_casos_correctos,
			 0::integer  as cantidad_casos_incorrectos,
			 0::integer as porcentaje_avance,
			 '-'::varchar as fecha_registro,
			 PRUEBAS.hash as hash,
			 false::bool as satisfactorio
		 from TEMPORAL_CASOS_PRUEBA_ETAPA_0 as PRUEBAS;
		 
	--Nota: Se actualiza la cantidad de casos correctos e incorrectos de la tabla DETALLE
    update TEMPORAL_DETALLE
    set 
	 	cantidad_casos_correctos = coalesce (
											  (select LOGS.total_logs
											  from  TEMPORAL_LOGS as LOGS
											  where LOGS.estado_match = 1
											  and TEMPORAL_DETALLE.hash = LOGS.hash	), 0								  
								  			 ),
	   cantidad_casos_incorrectos = coalesce( 
			    							  (select LOGS.total_logs
											  from  TEMPORAL_LOGS as LOGS
											  where LOGS.estado_match = 0
											  and TEMPORAL_DETALLE.hash = LOGS.hash), 0
	  										 ); 
	  										 
	 --Nota: Se actualiza la fecha de registro							   
	  update TEMPORAL_DETALLE
      set fecha_registro = coalesce(
									 (select TO_CHAR (LOGS.fecha_prueba, 'dd-mm-yyyy')
									  from  TEMPORAL_LOGS_FECHA as LOGS
									  where LOGS.hash = TEMPORAL_DETALLE.hash
									  ORDER BY LOGS.fecha_prueba DESC
						 			  limit 1), '');
		
	  --Nota: Obtener cantidad de casos esperados
						 			  
	  v_cantidad_esperada := 2;				 			  
	
	  --Nota: Se actualiza el porcentaje de avance de los casos de prueba
	   update TEMPORAL_DETALLE
	      set porcentaje_avance = sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(TEMPORAL_DETALLE.cantidad_casos_correctos,
	      TEMPORAL_DETALLE.cantidad_casos_incorrectos,v_cantidad_esperada,v_cantidad_posibles_respuestas);	
	      
	  --Nota: Se actualiza el campo satisfactorio
	  update TEMPORAL_DETALLE
	      set satisfactorio = coalesce ((select true where TEMPORAL_DETALLE.porcentaje_avance >= 100), false);
	       
	  			
	  --Nota: Retornamos el query del detalle de la etapa 0
	  return query
	  (select row_to_json(tbl) :: varchar
	  from (	  
	  		select DETALLE.nit,
	  			   DETALLE.sucursal,
	  			   DETALLE.modalidad,
	  			   DETALLE.emision,
	  			   DETALLE.documento_fiscal,
	  			   DETALLE.sector,
	  			   DETALLE.punto_venta,
	  			   v_cantidad_esperada as cantidad_casos_esperados,
	  			   DETALLE.cantidad_casos_correctos,
	  			   DETALLE.cantidad_casos_incorrectos,
	  			   DETALLE.fecha_registro,
	  			   'yyyyMMddHHmmssSSS' as fecha_emision, 
	  			   'su número de factura' as numero_factura,       
	  			   DETALLE.porcentaje_avance,
	  			   DETALLE.satisfactorio
	   	    from   TEMPORAL_DETALLE as DETALLE
	       ) tbl);
									        									   		 
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_dividir_cadena(p_texto character varying, p_cantidad integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$

declare
	v_resultado varchar;
	i integer;
	n integer;
	posicion integer;
begin
	v_resultado:='';
	i:=0;
	posicion:=0;
	
	n=round(LENGTH(p_texto)/p_cantidad::decimal);	
	case 
		when LENGTH(p_texto)>p_cantidad then		
			while i <= n loop								
				v_resultado:= concat(v_resultado,substring(p_texto,posicion,p_cantidad),' ');				
				posicion:=posicion+p_cantidad;
				i:=i+1;					
			end loop;
			return v_resultado;
		else
			return p_texto;
	end case;
	
	return v_resultado;
	
eXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_dividir_cadena');
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_finalizar_autorizaciones_alimentarias()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
 

/**************************************************************************************************************************************************
FUNCIONALIDAD : Función Job para actualizar el estado de las solicitudes de autorización de seguridad alimentaria, cambiando el estado de las que
su fecha de finalizacion sea igual o menor a la fecha actual
PARAMETROS INGRESO

PARAMETROS SALIDA

SUBSISTEMA : Facturacion
FECHA CREACION : 25/06/2019
AUTOR : Juan Fernando Yañez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripción>
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/
declare
begin

update sre_recaudaciones.sre_fac_solicitudes_autorizaciones_alimentarias set estado_solicitud_alimentaria_id = 2298, fecha_ultima_modificacion = now(), usuario_ultima_modificacion_id = 1000
where fecha_fin_autorizacion <= now() and estado_solicitud_alimentaria_id = 2297;
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_funcion_prueba_bach(p_etapa character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$

declare
   
begin
		
		 case
				when p_etapa = '0' --Validacion de la Recepcion
					then 
					update 	sre_recaudaciones.sre_fman_archivos set extension = 'xlsx1' where archivo_id= 1	;								
					return '1';--ideal

				when p_etapa = '1' --Validacion de la Recepcion
					then 
					update 	sre_recaudaciones.sre_fman_archivos set extension = 'xlsx2' where archivo_id= 2	;								
					return '2';--ideal
									
				when p_etapa = '2' --Validacion de la Factura
					then 		
					update 	sre_recaudaciones.sre_fman_archivos set extension = 'xlsx3' where archivo_id= 3	;
					return '3';--ideal
				else 				
					return '3'; --Etapa inexistente
		end case;		
	EXCEPTION
		  when others
		    then
		      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_funcion_prueba_bach'));
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_fweb_asignar_rol_alquiler(p_rol bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare

	cur_contribuyentes cursor for
		select usuario_id from sau_usuarios.sau_adm_usuarios where persona_id in 
			(
				select persona_contribuyente_id 
				from scn_contribuyentes.scn_emp_ciius_contribuyentes 
				where codigo_ciiu_id = 71002 and persona_contribuyente_id IN
					(	
						select persona_contribuyente_id
						from sre_recaudaciones.sre_fac_contribuyentes_modalidades 
						where modalidad_facturacion_id = 1244 and estado_id = 'AC'
					)
			)	
		and estado_usuario_id = 565
		;

	v_asignacion	record;

	BEGIN
		for v_rec_usu in cur_contribuyentes loop
			--<asignar rol a usuario>
			select ok, error, rol_usuario_id into v_asignacion
			from sre_recaudaciones.sre_fac_fweb_asignar_rol_usuario(p_rol::int8, v_rec_usu.usuario_id::int8)
			as (ok boolean, error varchar, rol_usuario_id int8);
			if	v_asignacion.ok then 
				raise notice 'Usuario = (%) rol_usuario_id (%)', v_rec_usu.usuario_id, v_asignacion.rol_usuario_id;																									   
			else
				raise notice 'Usuario = (%) error: % ', v_rec_usu.usuario_id, v_asignacion.error;																					 
			end if;				
    	end loop;
		return 'EXITO';
	END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_fweb_asignar_rol_solicitud(p_rol bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare

	cur_contribuyentes cursor for
		select usuario_id from sau_usuarios.sau_adm_usuarios where persona_id in 
			(
				select persona_contribuyente_id 
				from sre_recaudaciones.sre_fac_contribuyentes_modalidades 
				where modalidad_facturacion_id in (602,1244) and estado_id = 'AC'
			)	
		and estado_usuario_id = 565
		;

	v_asignacion	record;

	BEGIN
		for v_rec_usu in cur_contribuyentes loop
			--<asignar rol a usuario>
			select ok, error, rol_usuario_id into v_asignacion
			from sre_recaudaciones.sre_fac_fweb_asignar_rol_usuario(p_rol::int8, v_rec_usu.usuario_id::int8)
			as (ok boolean, error varchar, rol_usuario_id int8);
			if	v_asignacion.ok then 
				raise notice 'Usuario = (%) rol_usuario_id (%)', v_rec_usu.usuario_id, v_asignacion.rol_usuario_id;																									   
			else
				raise notice 'Usuario = (%) error: % ', v_rec_usu.usuario_id, v_asignacion.error;																					 
			end if;				
    	end loop;
		return 'EXITO';
	END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_fweb_asignar_rol_todos(v_rol bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare

	cur_contribuyentes cursor for
		select usuario_id from sau_usuarios.sau_adm_usuarios where persona_id in 
			(
				select persona_contribuyente_id from sre_recaudaciones.sre_fac_contribuyentes_modalidades where modalidad_facturacion_id = 1244 and estado_id = 'AC'
			)	
		and estado_usuario_id = 565
		;

	v_asignacion	record;

	BEGIN
		for v_rec_usu in cur_contribuyentes loop
			--<asignar rol a usuario>
			select ok, error, rol_usuario_id into v_asignacion
			from sre_recaudaciones.sre_fac_fweb_asignar_rol_usuario(v_rol::int8, v_rec_usu.usuario_id::int8)
			as (ok boolean, error varchar, rol_usuario_id int8);
			if	v_asignacion.ok then 
				raise notice 'Usuario = (%) rol_usuario_id (%)', v_rec_usu.usuario_id, v_asignacion.rol_usuario_id;																									   
			else
				raise notice 'Usuario = (%) error: % ', v_rec_usu.usuario_id, v_asignacion.error;																					 
			end if;				
    	end loop;
		return 'EXITO';
	END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_fweb_asignar_rol_usuario(p_rol bigint, p_usuario_id bigint)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
	v_resultado			record;
	v_rol_usuario_id	bigint;
begin
	select false::boolean as ok, null::varchar as error, null::int8 as rol_usuario_id into v_resultado;
	
	--<verificar si el usuario tiene asignado el rol>
	begin
		select usuario_rol_id into strict v_rol_usuario_id 
		from sau_usuarios.sau_rol_usuarios_roles
		where usuario_id = p_usuario_id
		and rol_id = p_rol
		and estado_usuario_rol_id = 1197
		and estado_id = 'AC';
		v_resultado.error := 'El usuario ya tiene asignado el rol. '; 
		return v_resultado;
	exception
		when TOO_MANY_ROWS then 
			v_resultado.error := 'El usuario tiene asignado varias asignaciones del rol. '; 
			return v_resultado;
		when NO_DATA_FOUND then 
			v_resultado.error := 'Asinacion nueva para el usuario. '; 
	end;
	
	insert into sau_usuarios.sau_rol_usuarios_roles(
		usuario_registro_id, usuario_ultima_modificacion_id, usuario_id, rol_id, estado_usuario_rol_id, 
		fecha_registro, fecha_ultima_modificacion, estado_id)
		values (
		1001, 1001, p_usuario_id, p_rol, 1197,
		current_timestamp, current_timestamp, 'AC'
		) returning usuario_rol_id into v_resultado.rol_usuario_id;
	
	
	return v_resultado;

END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_generador_hash_caso_prueba(p_agrupador_hash character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene la codificación md5
PARAMETROS INGRESO
    Cadena de texto a encriptar
PARAMETROS SALIDA
   Hash codificado
SUBSISTEMA : Facturación
FECHA CREACION : <20/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado character varying;
begin		
	
	v_resultado := (SELECT md5(p_agrupador_hash));				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_generador_hash_caso_prueba'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_lec_compras_individual(p_documento_sector integer, p_cuf character varying, p_numero_factura bigint, p_numero_documento character varying, p_codigo_sistema character varying, p_cufd character varying, p_cuis character varying, p_codigo_sucursal integer, p_codigo_punto_venta integer, p_codigo_ambiente integer)
 RETURNS TABLE(fecha_emision_res character varying, modalidad_res character varying, numero_factura_res bigint, cuf_res character varying, nit_emisor_res bigint, numero_documento_res character varying, tipo_documento_identidad_res character varying, monto_total_res numeric, estado_factura_res character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	
	case
		--ESTANDAR
		when p_documento_sector = 1 then
		return QUERY
		(
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_estandares VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento
		);	
		
		--SECTORES EDUCATIVOS
		when p_documento_sector = 2 then
		return QUERY
		(
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_colegios VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 
		);		
		--ALQUILES DE BIENES INMUBLES
		when p_documento_sector = 3 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_alquileres VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);		
		--COMERCIONALIZACION DE HIDROCARBUROS
		when p_documento_sector = 4 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_hidrocarburos VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento
		);			
		--SERVICIOS BASICOS
		when p_documento_sector = 5 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_servicios VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 
		);			
		--FACTURA EMBOTELLADORAS
		when p_documento_sector = 6 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_embotelladoras VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);				
		--ENTIDADES FINANCIERAS
		when p_documento_sector = 7 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_bancos VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);		
		--HOTELES
		when p_documento_sector = 8 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_hoteles VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);		
		--HOSPITALES/CLINICAS
		when p_documento_sector = 9 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_hospitales VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);		
		--JUEGOS DE AZAR
		when p_documento_sector = 10 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_juegos VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 
		);			
		--ARTISTAS INTERNACIONALES
		when p_documento_sector = 11 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_espectaculos VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);		
		--COMERCIAL DE EXPORTACION
		when p_documento_sector = 12 then
		
		--COMERCIAL DE EXPORTACION EN LIBRE CONSIGNACION
		when p_documento_sector = 13 then
		
		--ZONA FRANCA
		when p_documento_sector = 14 then
		
		--ARTISTAS NACIONALES
		when p_documento_sector = 15 then
		
		--NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
		when p_documento_sector = 16 then
		
		--NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
		when p_documento_sector = 17 then
		
		--NOTA DE CREDITO-DEBITO
		when p_documento_sector = 18 then
		
		--NOTA DE CONCILIACION
		when p_documento_sector = 19 then
		
		--BOLETO AEREO
		when p_documento_sector = 20 then
 		
		--NOTA FISCAL TURISMO RECEPTIVO
		when p_documento_sector = 21 then

		--NOTA FISCAL TASA CERO
		when p_documento_sector = 22 then
		
		--FACTURA HIDROCARBUROS
		when p_documento_sector = 23 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_combustibles VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 		
		);		
		--FACTURA COMERCIAL DE EXPORTACIÓN YPFB
		when p_documento_sector = 24 then
		
		--FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
		when p_documento_sector = 25 then
		
		--FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
		when p_documento_sector = 26 then
		
		--FACTURA VENTA INTERNA MINERALES
		when p_documento_sector = 27 then
		return QUERY
		(		
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_mineras_internas VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento 
		);				
		--FACTURA PREVALORADA DIGITAL
		when p_documento_sector = 28 then

		
		--FACTURA TELECOMUNICACIONES
		when p_documento_sector = 29 then
		
		--NOTA DE CREDITO DEBITO SFV
		when p_documento_sector = 30 then
			
		else		
			
	end case;
	
	
	  
  EXCEPTION
  when others
    then
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_sel_compras_por_dia_electronica');
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_lec_compras_por_dia_electronica(p_fecha_inicio timestamp without time zone, p_fecha_fin timestamp without time zone, p_numero_documento character varying, p_codigo_sistema character varying, p_cufd character varying, p_cuis character varying, p_codigo_sucursal integer, p_codigo_punto_venta integer, p_codigo_ambiente integer)
 RETURNS TABLE(fecha_emision_res character varying, modalidad_res character varying, numero_factura_res bigint, cuf_res character varying, nit_emisor_res bigint, numero_documento_res character varying, tipo_documento_identidad_res character varying, monto_total_res numeric, estado_factura_res character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
				
	return QUERY
		(			
			select 
			tbl.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=tbl.tipo_modalidad_id)::varchar,
			tbl.numero_factura::int8,
			tbl.cuf::varchar,
			tbl.nit_emisor::int8,
			tbl.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=tbl.tipo_documento_identidad_id)::varchar,
			tbl.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=tbl.estado_factura_id)::varchar
			from
			(
			--ALQUILERES
			select 
			VENTAS.fecha_emision, 
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_alquileres VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--BANCOS
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_bancos VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
	
			--BOLETOS AEREOS
			union all
			
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_boleto_aereo, --numero_factura
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento_beneficiario,--numero_documento, 
			4 as codigo_clasificador, 
			VENTAS.monto_total_boleto, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_boletos_aereos VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento_beneficiario=p_numero_documento

			--COLEGIOS
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_colegios VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--COMBUSTIBLE
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_combustibles VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--EMBOTELLADORAS
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_embotelladoras VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--ESPECTACULOS
			union all
			select 
			VENTAS.fecha_emision, 
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_espectaculos VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--ESTANDARES
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_estandares VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--HIDROCARBUROS
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_hidrocarburos VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--HOSPITALES
			union all
			select 
			VENTAS.fecha_emision, 
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_hospitales VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--HOTELES
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_hoteles VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--JUEGOS
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_juegos VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--MINERAS INTERNAS
			union all
			select 
			VENTAS.fecha_emision, 
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_mineras_internas VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--SERVICIOS
			union all
			select 
			VENTAS.fecha_emision,  
			VENTAS.tipo_modalidad_id, 
			VENTAS.numero_factura, 
			VENTAS.cuf, 
			VENTAS.nit_emisor, 
			VENTAS.numero_documento, 
			VENTAS.tipo_documento_identidad_id, 
			VENTAS.monto_total, 
			VENTAS.estado_factura_id
			from sre_recaudaciones.sre_fac_ventas_servicios VENTAS
			where 
			(to_char(VENTAS.fecha_emision,'DD/MM/YYYY') between to_char(p_fecha_inicio,'DD/MM/YYYY') and to_char(p_fecha_fin,'DD/MM/YYYY')) and
			VENTAS.numero_documento=p_numero_documento
			--PREVALORADAS

			) as tbl
		);	 	
	  
  EXCEPTION
  when others
    then
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_sel_compras_por_dia_electronica');
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_lec_obtener_ventas(p_documento_sector integer, p_cuf character varying, p_numero_factura bigint, p_numero_documento character varying, p_codigo_sistema character varying, p_cufd character varying, p_cuis character varying, p_codigo_sucursal integer, p_codigo_punto_venta integer, p_codigo_ambiente integer)
 RETURNS TABLE(fecha_emision_res character varying, modalidad_res character varying, numero_factura_res bigint, cuf_res character varying, nit_emisor_res bigint, numero_documento_res character varying, tipo_documento_identidad_res character varying, monto_total_res numeric, estado_factura_res character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	
	case
		--ESTANDAR
		when p_documento_sector = 1 then
		return QUERY
		(
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_estandares VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento
		);	
	end case;
	
	
	  
  EXCEPTION
  when others
    then
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_lec_obtener_ventas_electronica');
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_lec_obtener_ventas(p_documento_sector integer, p_cuf character varying, p_numero_factura bigint, p_codigo_punto_venta integer, p_codigo_ambiente integer, p_nit bigint)
 RETURNS TABLE(fecha_emision_res character varying, numero_factura_res bigint, cuf_res character varying, monto_total_res numeric)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	
	case
		--ESTANDAR
		when p_documento_sector = 1 then
		return QUERY
		(
			select 
			VENTAS.fecha_emision::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO MODALIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.tipo_modalidad_id)::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.nit_emisor::int8,
			VENTAS.numero_documento::varchar,
			(select CLASIFICADOR.descripcion from sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR where CLASIFICADOR.agrupador = 'TIPO DOCUMENTO IDENTIDAD' and CLASIFICADOR.codigo_clasificador=VENTAS.estado_factura_id)::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_estandares VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento
		);	
	end case;
	
	
	  
  EXCEPTION
  when others
    then
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_lec_obtener_ventas_electronica');
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_lec_obtener_ventas(p_documento_sector integer, p_cuf character varying, p_numero_factura bigint, p_numero_documento character varying)
 RETURNS TABLE(fecha_emision_res character varying, numero_factura_res bigint, cuf_res character varying, monto_total_res numeric, estado_factura_res character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	
	case
		--ESTANDAR
		when p_documento_sector = 1 then
		return QUERY
		(
			select 
			VENTAS.fecha_emision::varchar,
			VENTAS.numero_factura::int8,
			VENTAS.cuf::varchar,
			VENTAS.monto_total::numeric(20,5),
			(select CLASIFICADOR.descripcion from str_transversales.str_cps_clasificadores CLASIFICADOR where CLASIFICADOR.tipo_clasificador='estado_factura_id' and CLASIFICADOR.clasificador_id=VENTAS.estado_factura_id)::varchar
			from sre_recaudaciones.sre_fac_ventas_estandares VENTAS
			where 			
			VENTAS.cuf=p_cuf and
			VENTAS.numero_factura=p_numero_factura and
			VENTAS.numero_documento=p_numero_documento
		);	
	end case;
	
	
	  
  EXCEPTION
  when others
    then
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_lec_obtener_ventas_electronica');
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_man_actualiza_tabla_resumen_ventas_contribuyente()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función para actualizar la tabla de Resumen de Ventas de un Contribuyente. Bajo el siguiente criterio: 

				- primero, realiza un conteo de los diferentes tipos de documentos fiscales definidos en la grilla para una gestión, agrupándolos por
                  nit, gestión y periodo en un Cursor (cada tipo de factura tiene su propia tabla)				
				- segundo, recorre el cursor y por cada registro intenta hacer un UPDATE, si el registro NO EXISTE hace un INSERT  

	
PARAMETROS SALIDA

SUBSISTEMA : Recaudaciones
FECHA CREACION :11/07/2019
AUTOR : Vladimir Czerniewicz Párraga
VERSION : 1.0.0.0
EAD : 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
DECLARE
 
	 v_fecha_registro_aux 	timestamp:=now();
	 v_gestion_inicial      bigint := 2018;	 
	 v_gestion_final       	bigint DEFAULT 0;
     v_mes_actual           bigint DEFAULT 0;
     v_dia_actual           bigint DEFAULT 0;
	 

    regf          RECORD;
    regn          RECORD;
    regd          RECORD;

	--CURSOR PARA FACTURAS
   CUR_CONTEO_FACTURAS CURSOR(p_gestion bigint) FOR
   SELECT A.idEmisor, A.nitEmisor, A.anio, A.mes, SUM(A.facturas) totalfacturas, SUM(A.totalvalidas) totalfacturasvalidas, SUM(A.totalanuladas) totalfacturasanuladas FROM
   (
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  ---FACTURA ESTANDAR
	 WHERE	 
        gestion = p_gestion  --2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id

     UNION ALL		 

     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares   --- ***FACTURA SECTORES EDUCATIVOS (FALTA DEFINIR LA TABLA)
	 WHERE	 
        gestion = p_gestion  --2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id

     UNION ALL

     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares    --- ***FACTURA DE ALQUILER DE BIENES INMUEBLES (FALTA DEFINIR LA TABLA)
	 WHERE	 
        gestion = p_gestion  --2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id 
		 ) A
     GROUP BY
         A.idEmisor,A.nitEmisor,A.anio,A.mes	 
     ORDER BY 
         A.idEmisor,A.nitEmisor,A.anio,A.mes;
	

	--CURSOR PARA NOTAS DE CREDITO/DEBITO
    CUR_CONTEO_NOTAS CURSOR(p_gestion bigint) FOR
    SELECT A.idEmisor,A.nitEmisor,A.anio,A.mes,SUM(A.notas) totalnotas,SUM(A.totalvalidas) totalnotasvalidas,SUM(A.totalanuladas) totalnotasanuladas FROM
    (
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS notas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  ---NOTA DE CREDITO-DEBITO
	 WHERE	 
        gestion = p_gestion   --2014
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
		 ) A
     GROUP BY
         A.idEmisor,A.nitEmisor,A.anio,A.mes	 
     ORDER BY 
         A.idEmisor,A.nitEmisor,A.anio,A.mes;

	--CURSOR PARA DOCUMENTOS EQUIVALENTES
	CUR_CONTEO_EQUIVALENTES CURSOR(p_gestion bigint) FOR
    SELECT A.idEmisor,A.nitEmisor,A.anio,A.mes,SUM(A.equivalentes) totalequivalentes,SUM(A.totalvalidos) totalequivalentesvalidos,SUM(A.totalanulados) totalequivalentesanulados FROM
    (
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS equivalentes,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidos,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanulados		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  ---DOCUMENTOS EQUIVALENTES
	 WHERE	 
        gestion = p_gestion  --2015
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
		 ) A
     GROUP BY
         A.idEmisor,A.nitEmisor,A.anio,A.mes	 
     ORDER BY 
         A.idEmisor,A.nitEmisor,A.anio,A.mes;	
	
						 
BEGIN

  -- Año de la Gestión actual, hasta donde se correrá el JOB
   SELECT date_part('year',current_date) into v_gestion_final;
   SELECT date_part('month',current_date) into v_mes_actual;   
   SELECT date_part('day',current_date) into v_dia_actual;      
 
    -- ACTUALIZA O INSERTA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE FACTURAS POR GESTIÓN Y POR MES PARA CADA NÚMERO DE NIT 
     FOR i IN v_gestion_inicial..v_gestion_final LOOP
	 
         OPEN CUR_CONTEO_FACTURAS(i);
		   LOOP
             FETCH CUR_CONTEO_FACTURAS INTO regf;
			 EXIT WHEN NOT FOUND;

			 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
                   SET cantidad_facturas                = regf.totalfacturasvalidas,
                       cantidad_anulados                = regf.totalfacturasanuladas,
                       fecha_ultima_modificacion        = v_fecha_registro_aux					   
                   WHERE
                       persona_contribuyente_id = regf.idEmisor
                       AND gestion              = regf.anio
                       AND mes                  = regf.mes;
			 IF not (FOUND) THEN
			 BEGIN
			 INSERT INTO sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales 
                  (resumen_venta_documento_fiscal,usuario_registro_id,usuario_ultima_modificacion_id,persona_contribuyente_id,estado_venta_resumen_manual_id,tipo_documento_id,numero_documento,codigo_complementario,numero_sucursal,gestion,mes,cantidad_facturas,cantidad_notas,cantidad_documentos_equivalente,cantidad_dui,cantidad_anulados,fecha_registro,fecha_ultima_modificacion,estado_id)
			      VALUES (NEXTVAL('sre_recaudaciones.sre_fman_resumen_ventas_docum_resumen_venta_documento_fisca_seq'),1001,1001,regf.A.idEmisor,2694,44,2310700,'VCP',10,regf.anio,regf.mes,regf.totalfacturasvalidas,0,0,0,regf.totalfacturasanuladas,v_fecha_registro_aux,v_fecha_registro_aux,'AC');			 
             EXCEPTION WHEN unique_violation THEN				  
			 END;
			 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_FACTURAS;	 
     END LOOP;

    -- ACTUALIZA EL ESTADO (estado_venta_resumen_manual_id) DE LOS REGISTROS DEL RESUMEN QUE SE MANTIENE ACTIVOS O FUERA DE PLAZO	 
	 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
        SET estado_venta_resumen_manual_id   = 2693,
            fecha_ultima_modificacion        = v_fecha_registro_aux					   
      WHERE
            gestion  = v_gestion_final
        AND mes      = v_mes_actual ;

     IF v_dia_actual < 9 THEN
		 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
            SET estado_venta_resumen_manual_id   = 2693,
                fecha_ultima_modificacion        = v_fecha_registro_aux					   
          WHERE
                gestion  = v_gestion_final
            AND mes = v_mes_actual-1;
		ELSE
		 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
            SET estado_venta_resumen_manual_id   = 2694,
                fecha_ultima_modificacion        = v_fecha_registro_aux					   
          WHERE
                gestion  = v_gestion_final
            AND mes = v_mes_actual-1;
		
      END IF;

    -- ACTUALIZA O INSERTA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE NOTAS DE DEBITO/CREDITO POR GESTIÓN Y POR MES PARA CADA NÚMERO DE NIT	 
     FOR i IN v_gestion_inicial..v_gestion_final LOOP
	 
         OPEN CUR_CONTEO_NOTAS(i);
		   LOOP
             FETCH CUR_CONTEO_NOTAS INTO regn;
			 EXIT WHEN NOT FOUND;

			 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
                   SET cantidad_notas                   = regn.totalnotasvalidas,
                       cantidad_anulados                = regn.totalnotasanuladas,
					   fecha_ultima_modificacion        = v_fecha_registro_aux
                   WHERE
                       persona_contribuyente_id = regn.idEmisor
                       AND gestion              = regn.anio
                       AND mes                  = regn.mes;
			 IF not (FOUND) THEN
			 BEGIN
			 INSERT INTO sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales 
                  (resumen_venta_documento_fiscal,usuario_registro_id,usuario_ultima_modificacion_id,persona_contribuyente_id,estado_venta_resumen_manual_id,tipo_documento_id,numero_documento,codigo_complementario,numero_sucursal,gestion,mes,cantidad_facturas,cantidad_notas,cantidad_documentos_equivalente,cantidad_dui,cantidad_anulados,fecha_registro,fecha_ultima_modificacion,estado_id)
			      VALUES (NEXTVAL('sre_recaudaciones.sre_fman_resumen_ventas_docum_resumen_venta_documento_fisca_seq'),1001,1001,regn.A.idEmisor,2694,44,2310800,'VCP',11,regn.anio,regn.mes,0,regn.totalnotasvalidas,0,0,regn.totalnotasanuladas,v_fecha_registro_aux,v_fecha_registro_aux,'AC');
             EXCEPTION WHEN unique_violation THEN				  
			 END;
			 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_NOTAS;
	 END LOOP;
	 
    -- ACTUALIZA O INSERTA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE DOCUMENTOS EQUIVALENTES POR GESTIÓN Y POR MES PARA CADA NÚMERO DE NIT	 
     FOR i IN v_gestion_inicial..v_gestion_final LOOP
	 
         OPEN CUR_CONTEO_EQUIVALENTES(i);
		   LOOP 
             FETCH CUR_CONTEO_EQUIVALENTES INTO regd;
			 EXIT WHEN NOT FOUND;

			 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
                   SET cantidad_documentos_equivalente  = regd.totalequivalentesvalidos,
                       cantidad_anulados                = regd.totalequivalentesanulados,
					   fecha_ultima_modificacion        = v_fecha_registro_aux
                   WHERE
                       persona_contribuyente_id = regd.idEmisor
                       AND gestion              = regd.anio
                       AND mes                  = regd.mes;
			 IF not (FOUND) THEN
			 BEGIN
			          INSERT INTO sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales 
                  (resumen_venta_documento_fiscal,usuario_registro_id,usuario_ultima_modificacion_id,persona_contribuyente_id,estado_venta_resumen_manual_id,tipo_documento_id,numero_documento,codigo_complementario,numero_sucursal,gestion,mes,cantidad_facturas,cantidad_notas,cantidad_documentos_equivalente,cantidad_dui,cantidad_anulados,fecha_registro,fecha_ultima_modificacion,estado_id)
			      VALUES (nextval(sre_recaudaciones.sre_fman_resumen_ventas_docum_resumen_venta_documento_fisca_seq),1001,1001,regd.A.idEmisor,2694,44,2310900,'VCP',12,regd.anio,regd.mes,0,0,regd.totalequivalentesvalidos,0,regd.totalequivalentesanulados,v_fecha_registro_aux,v_fecha_registro_aux,'AC');
             EXCEPTION WHEN unique_violation THEN				  
			 END;
			 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_EQUIVALENTES;	 	 
	 
     END LOOP;


  EXCEPTION
    when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;
end;

$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_man_obtener_facturas_compras_por_nit(p_persona_id bigint)
 RETURNS TABLE(persona bigint, estado integer, documento integer)
 LANGUAGE plpgsql
AS $function$
    BEGIN
	RETURN QUERY
      SELECT persona_contribuyente_id persona, estado_compra_resumen_id estado, tipo_documento_id documento
        from sre_recaudaciones.sre_fman_resumen_compras_documentos_fiscales
       where persona_contribuyente_id = p_persona_id
       union
      SELECT persona_contribuyente_id persona, estado_venta_resumen_manual_id estado, tipo_documento_id documento
        from sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
        where persona_contribuyente_id = p_persona_id;
    END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa(p_sistema_id bigint, p_etapa_prueba_certificacion_id integer, p_nit bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que devuelve el detalle de la etapa VII
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <14/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  c_funciones_validacion       refcursor;
  r_funciones                  record; 
  v_cantidad integer;
  p_log integer;
  p_casos integer;
  v_agrupador_consulta_like character varying;

begin
	
	if(p_etapa_prueba_certificacion_id=2850) then
		return query select sre_recaudaciones.sre_fac_detalle_casos_pruebas_etapa_0(p_sistema_id,p_nit,p_etapa_prueba_certificacion_id);	
	elseif (p_etapa_prueba_certificacion_id=3016) then		
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_obtencion_cufd(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=2851) then		
		return query select sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_1(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=2853) then		
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_3(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=2854) then		
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_4(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=2857) then		
		return query select sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_7(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=2855) then --add rgt 20190624
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_5(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=3053) then --envio masivo
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_10(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=3052) then
	if(p_nit=0) then
	
		return query select sre_recaudaciones.sre_fac_obtener_nits_asignados_etapa_9(p_sistema_id);
	else
		return query (select row_to_json(tbl) :: varchar
					  from (
							 select * 
							 from sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_9(p_sistema_id,p_nit) 
						   ) tbl);
	end if;
	elseif (p_etapa_prueba_certificacion_id=3069) then 
		return query (select row_to_json(tbl) :: varchar
					  from (
							 select * 
							 from sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_8(p_sistema_id) 
						   ) tbl);	
	elseif (p_etapa_prueba_certificacion_id=2856) then 
		return query (select row_to_json(tbl) :: varchar
					  from (
							 select * 
							 from sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_6(p_sistema_id) 
						   ) tbl);						   
	elseif (p_etapa_prueba_certificacion_id=3141) then --XI Anulaciones
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_11(p_sistema_id,p_etapa_prueba_certificacion_id);
	elseif (p_etapa_prueba_certificacion_id=3142) then --XII Reportes
		return query select sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_12(p_sistema_id,p_etapa_prueba_certificacion_id);
	else
		return query select '{}':: character varying;
	end if;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		     	return query select cast('error sre_fac_match_log_caso_pruebas_por_etapa' as varchar), cast(-1 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_1(p_sistema_id bigint, p_etapa_prueba_certificacion_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que devuelve el detalle de la etapa I
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <14/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;

begin


	v_inicio_registro_prueba:=(coalesce((select fecha_inicio_prueba 
								from  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
							    inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
							    on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
							    where a.sistema_id=p_sistema_id 
							    and a.estado_id='AC' 
							    and b.etapa_certificacion_sistemas_id=p_etapa_prueba_certificacion_id),now())
							  );
							
	v_fin_registro_prueba:=(coalesce((select fecha_fin_prueba 
							 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
							 inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
							 on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
							 where a.sistema_id=p_sistema_id 
							 and a.estado_id='AC' 
							 and b.etapa_certificacion_sistemas_id=p_etapa_prueba_certificacion_id),now())
						   );

	drop table if exists TEMPORAL_CASO_PRUEBA_1;
  	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1 AS
	select fecha_registro,caso_prueba_id,caso_prueba,estado_id,documento_sector_id,total_pruebas 
	from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
	where estado_id='AC' 
	and documento_sector_id in ( select b.codigo_clasificador 
 							     from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
							     inner join sre_recaudaciones.sre_fac_clasificadores b
							     on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
							     where sistema_id=p_sistema_id
							     and a.estado_tipo_documento_sistema_id = 1380
							     and a.estado_id='AC'
							   );
	   
	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=( select replace(caso_prueba,' EXITOSO','') 
													from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
													where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id
												  )
	where caso_prueba like'%EXITOSO';
		
	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=(select replace(caso_prueba,' ERRONEO','') 
												   from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
												   where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id
												  )
	where caso_prueba like'%ERRONEO';

	drop table if exists TEMPORAL_CASO_PRUEBA_1_DISTINCT;
	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1_DISTINCT AS
	select distinct  caso_prueba,estado_id,documento_sector_id, 0 total_pruebas 
	from TEMPORAL_CASO_PRUEBA_1 
	group by caso_prueba,estado_id,documento_sector_id, total_pruebas 
	order by documento_sector_id, caso_prueba desc;

	update TEMPORAL_CASO_PRUEBA_1_DISTINCT set total_pruebas=( select sum (total_pruebas) 
															   from TEMPORAL_CASO_PRUEBA_1 
															   where caso_prueba=TEMPORAL_CASO_PRUEBA_1_DISTINCT.caso_prueba 
															   and documento_sector_id=TEMPORAL_CASO_PRUEBA_1_DISTINCT.documento_sector_id 
															   group by caso_prueba 
															 );	
	alter table TEMPORAL_CASO_PRUEBA_1_DISTINCT
	add column cantidad_casos_correctos integer;

	alter table TEMPORAL_CASO_PRUEBA_1_DISTINCT
	add column cantidad_casos_incorrectos integer;

	drop table if exists TEMPORAL_CASO_PRUEBA_1_EX_ERR;
	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1_EX_ERR AS
	select * from TEMPORAL_CASO_PRUEBA_1_DISTINCT;

	drop table if exists TEMPORAL_CASO_PRUEBA_1;
  	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1 AS
	select fecha_registro,caso_prueba_id,caso_prueba,estado_id,documento_sector_id,total_pruebas 
	from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
	where estado_id='AC' 
	and documento_sector_id in ( select b.codigo_clasificador 
 							     from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
							     inner join sre_recaudaciones.sre_fac_clasificadores b
							     on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
							     where sistema_id=p_sistema_id
							     and a.estado_tipo_documento_sistema_id = 1380
							     and a.estado_id='AC'
							   );
		
	drop table if exists TEMPORAL_CASO_PRUEBA_1_DISTINCT;
 	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1_DISTINCT AS
	select TEMPORAL_CASO_PRUEBA_1.estado_match, TEMPORAL_CASO_PRUEBA_1.estado_id, TEMPORAL_CASO_PRUEBA_1.fecha_registro, TEMPORAL_CASO_PRUEBA_1.caso_prueba_id from ( 
	select distinct b.estado_match, a.estado_id,b.fecha_registro,a.caso_prueba_id
					from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio a
					inner join sre_recaudaciones.sre_fac_log_1_consumo_servicio b
					on a.caso_prueba_id=b.caso_prueba_id 
					and sistema_id=p_sistema_id 
					and b.fecha_registro>=v_inicio_registro_prueba
					and b.fecha_registro <=v_fin_registro_prueba
					and a.estado_id='AC'
					and b.estado_id='AC'
				  ) TEMPORAL_CASO_PRUEBA_1 where TEMPORAL_CASO_PRUEBA_1.estado_id='AC';
				 
	alter table TEMPORAL_CASO_PRUEBA_1 add column satisfactorio boolean;
				 
	update  TEMPORAL_CASO_PRUEBA_1 set satisfactorio = false;

	update  TEMPORAL_CASO_PRUEBA_1 set satisfactorio = true
	where caso_prueba_id in(select distinct caso_prueba_id 
							from TEMPORAL_CASO_PRUEBA_1_DISTINCT 
							where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id
						   );

	update  TEMPORAL_CASO_PRUEBA_1 set fecha_registro = (select fecha_registro 
														 from TEMPORAL_CASO_PRUEBA_1_DISTINCT 
														 where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id 
														 order by fecha_registro 
														 desc limit 1
														);

	alter table TEMPORAL_CASO_PRUEBA_1
	add column cantidad_casos_correctos integer;

	alter table TEMPORAL_CASO_PRUEBA_1
	add column cantidad_casos_incorrectos integer;

	
    update TEMPORAL_CASO_PRUEBA_1 set cantidad_casos_correctos=(select count(1) 
															    from sre_recaudaciones.sre_fac_log_1_consumo_servicio 
															    where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id 
															    and fecha_registro>=v_inicio_registro_prueba 
															    and fecha_registro <= v_fin_registro_prueba
															    and sistema_id=p_sistema_id
															    and estado_id='AC'
															   )		
																where caso_prueba 
																like'%EXITOSO%';

	update TEMPORAL_CASO_PRUEBA_1 set cantidad_casos_incorrectos =( select count(1) 
																	from sre_recaudaciones.sre_fac_log_1_consumo_servicio 
																	where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id 
																	and fecha_registro>=v_inicio_registro_prueba 
																	and fecha_registro <= v_fin_registro_prueba
																	and sistema_id=p_sistema_id
																	and estado_id='AC'
																  )
																   where caso_prueba like'%ERRONEO%';

	
	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=(select replace(caso_prueba,' EXITOSO','') from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id)
	where caso_prueba like'%EXITOSO';

	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=(select replace(caso_prueba,' ERRONEO','') from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id)
	where caso_prueba like'%ERRONEO';

	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set cantidad_casos_correctos=(select cantidad_casos_correctos from TEMPORAL_CASO_PRUEBA_1 where caso_prueba=TEMPORAL_CASO_PRUEBA_1_EX_ERR.caso_prueba and TEMPORAL_CASO_PRUEBA_1_EX_ERR.documento_sector_id=documento_sector_id and cantidad_casos_correctos is not null);	
	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set cantidad_casos_incorrectos=(select cantidad_casos_incorrectos from TEMPORAL_CASO_PRUEBA_1 where caso_prueba=TEMPORAL_CASO_PRUEBA_1_EX_ERR.caso_prueba and TEMPORAL_CASO_PRUEBA_1_EX_ERR.documento_sector_id=documento_sector_id and cantidad_casos_incorrectos is not null);

	alter table TEMPORAL_CASO_PRUEBA_1_EX_ERR
	add column satisfactorio boolean;

	alter table TEMPORAL_CASO_PRUEBA_1_EX_ERR
	add column porcentaje_avance integer;

	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set porcentaje_avance =(select sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(cantidad_casos_correctos,cantidad_casos_incorrectos,total_pruebas,2));
	
	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set satisfactorio =(case when porcentaje_avance=100 then true else false end);
	
	alter table TEMPORAL_CASO_PRUEBA_1_EX_ERR
	add column descripcion_sector varchar;

	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set descripcion_sector =(select descripcion from sre_recaudaciones.sre_fac_clasificadores where agrupador='TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_CASO_PRUEBA_1_EX_ERR.documento_sector_id);

	alter table TEMPORAL_CASO_PRUEBA_1_EX_ERR
	add column fecha_registro timestamp;
	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set fecha_registro =(select fecha_registro from TEMPORAL_CASO_PRUEBA_1 where caso_prueba=TEMPORAL_CASO_PRUEBA_1.caso_prueba and documento_sector_id=TEMPORAL_CASO_PRUEBA_1_EX_ERR.documento_sector_id and fecha_registro!='1800-01-01 00:00:00' limit 1);
	
    return query
    select row_to_json(tbl4) :: character varying			 
--      			 from ( select to_char(fecha_registro,'DD-MM-YYYY') fecha_registro,descripcion_sector,satisfactorio, total_pruebas cantidad_casos_esperados,caso_prueba descripcion_prueba_evento,documento_sector_id,cantidad_casos_correctos,cantidad_casos_incorrectos,case when total_pruebas = 0 then 0 else round(cantidad_casos_correctos/total_pruebas::numeric*100, 0 ) end porcentaje_avance from TEMPORAL_CASO_PRUEBA_1_EX_ERR order by documento_sector_id, caso_prueba desc
      			 from ( select to_char(fecha_registro,'DD-MM-YYYY') fecha_registro,descripcion_sector,satisfactorio, total_pruebas cantidad_casos_esperados,caso_prueba descripcion_prueba_evento,documento_sector_id,cantidad_casos_correctos,cantidad_casos_incorrectos, porcentaje_avance from TEMPORAL_CASO_PRUEBA_1_EX_ERR order by documento_sector_id, caso_prueba desc
      			      ) tbl4;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		     	return query select cast('error sre_fac_match_log_caso_pruebas_por_etapa_1' as varchar), cast(-1 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_7(psistemaid bigint, p_etapa_prueba_certificacion_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que devuelve el detalle de la etapa VII
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <14/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  c_funciones_validacion       refcursor;
  r_funciones                  record; 
  v_cantidad integer;
  p_log integer;
  p_casos integer;
  v_fecha_inicio_prueba timestamp;
  v_fecha_fin_prueba timestamp;
  v_agrupador_consulta_like character varying;

begin


	v_fecha_inicio_prueba:=( select fecha_inicio_prueba 
						     from  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
						     inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
						     on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
						     where a.sistema_id=psistemaid 
						     and a.estado_id='AC' 
						     and b.etapa_certificacion_sistemas_id=p_etapa_prueba_certificacion_id
						   );
							
	v_fecha_fin_prueba:=( select fecha_fin_prueba 
						  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
						  inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
						  on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
						  where a.sistema_id=psistemaid 
						  and a.estado_id='AC' 
						  and b.etapa_certificacion_sistemas_id=p_etapa_prueba_certificacion_id
						);
						
	drop table if exists temporal_caso_prueba_7;
  	CREATE TEMP TABLE temporal_caso_prueba_7 AS
	select fecha_registro,caso_prueba_id,caso_prueba,estado_id,opcional,hash,hash_descripcion
	from sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital 
	where estado_id='AC';

	drop table if exists temporal_log_prueba_7;
 	CREATE TEMP TABLE temporal_log_prueba_7 AS
	select temporal_caso_prueba_7.estado_match, temporal_caso_prueba_7.estado_id, temporal_caso_prueba_7.fecha_registro, temporal_caso_prueba_7.caso_prueba_id from ( 
																						select distinct b.estado_match, a.estado_id,b.fecha_registro,a.caso_prueba_id
																						from sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital a
																						inner join sre_recaudaciones.sre_fac_log_7_firma_digital b
																						on a.caso_prueba_id=b.caso_prueba_id 
																						and sistema_id=psistemaid 
																						and b.fecha_registro>=v_fecha_inicio_prueba																						
																				        ) temporal_caso_prueba_7 where temporal_caso_prueba_7.estado_id='AC';
	if v_fecha_fin_prueba is not null then																				   
		delete from temporal_log_prueba_7 where fecha_registro>v_fecha_fin_prueba;
	end if;

	alter table temporal_caso_prueba_7 add column satisfactorio boolean;

	alter table temporal_caso_prueba_7 add column porcentaje_avance integer;

				 
	update  temporal_caso_prueba_7 set satisfactorio = false;

	update  temporal_caso_prueba_7 set satisfactorio = true
	where caso_prueba_id in ( select distinct caso_prueba_id 
							  from temporal_log_prueba_7 
							  where caso_prueba_id=temporal_caso_prueba_7.caso_prueba_id
							);
	
	update  temporal_caso_prueba_7 set porcentaje_avance = 0;
					
	update  temporal_caso_prueba_7 set porcentaje_avance = 100
	where caso_prueba_id in ( select distinct caso_prueba_id 
							  from temporal_log_prueba_7 
							  where caso_prueba_id=temporal_caso_prueba_7.caso_prueba_id
							);

	update  temporal_caso_prueba_7 set fecha_registro = ( select fecha_registro 
														  from temporal_log_prueba_7 
														  where caso_prueba_id=temporal_caso_prueba_7.caso_prueba_id 
														  order by fecha_registro 
														  desc limit 1
														);
	
	update temporal_caso_prueba_7
	set 
	caso_prueba=(select row_to_json(temporal_caso_prueba_72) 
      			 from (SELECT a[1] tipo_prueba,a[2] nombre_archivo_xml,a[3] nombre_archivo_xml_firmado,a[4] nombre_archivo_xml_firmado_base64,a[5] nombre_archivo_xml_firmado_base64_envio, hash,(case when temporal_caso_prueba_7.satisfactorio=true then to_char(temporal_caso_prueba_7.fecha_registro,'DD-MM-YYYY') else null end) fecha_registro,temporal_caso_prueba_7.satisfactorio,porcentaje_avance, opcional, hash_descripcion
 
						FROM (SELECT regexp_split_to_array(temporal_caso_prueba_7.caso_prueba, ',')) AS dt(a)
					  )temporal_caso_prueba_72 
			    );
 	
	return query select cast (caso_prueba as character varying) from  temporal_caso_prueba_7 order by caso_prueba_id;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		     	return query select cast('error sre_fac_match_log_caso_pruebas_por_etapa_7' as varchar), cast(-1 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_detalle_1(p_sistema_id bigint, p_etapa_prueba_certificacion_id integer)
 RETURNS TABLE(resultado boolean, porcentaje_avance integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que devuelve el detalle de la etapa I
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <14/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;

begin


	v_inicio_registro_prueba:=(coalesce((select fecha_inicio_prueba 
								from  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
							    inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
							    on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
							    where a.sistema_id=p_sistema_id 
							    and a.estado_id='AC' 
							    and b.etapa_certificacion_sistemas_id=p_etapa_prueba_certificacion_id),now())
							  );
							
	v_fin_registro_prueba:=(coalesce((select fecha_fin_prueba 
							 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
							 inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
							 on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
							 where a.sistema_id=p_sistema_id 
							 and a.estado_id='AC' 
							 and b.etapa_certificacion_sistemas_id=p_etapa_prueba_certificacion_id),now())
						   );

	drop table if exists TEMPORAL_CASO_PRUEBA_1;
  	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1 AS
	select fecha_registro,caso_prueba_id,caso_prueba,estado_id,documento_sector_id,total_pruebas 
	from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
	where estado_id='AC' 
	and documento_sector_id in ( select b.codigo_clasificador 
 							     from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
							     inner join sre_recaudaciones.sre_fac_clasificadores b
							     on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
							     where sistema_id=p_sistema_id
							     and a.estado_tipo_documento_sistema_id = 1380
							     and a.estado_id='AC'
							   );
	   
	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=( select replace(caso_prueba,' EXITOSO','') 
													from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
													where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id
												  )
	where caso_prueba like'%EXITOSO';
		
	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=(select replace(caso_prueba,' ERRONEO','') 
												   from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
												   where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id
												  )
	where caso_prueba like'%ERRONEO';

	drop table if exists TEMPORAL_CASO_PRUEBA_1_DISTINCT;
	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1_DISTINCT AS
	select distinct  caso_prueba,estado_id,documento_sector_id, 0 total_pruebas 
	from TEMPORAL_CASO_PRUEBA_1 
	group by caso_prueba,estado_id,documento_sector_id, total_pruebas 
	order by documento_sector_id, caso_prueba desc;

	update TEMPORAL_CASO_PRUEBA_1_DISTINCT set total_pruebas=( select sum (total_pruebas) 
															   from TEMPORAL_CASO_PRUEBA_1 
															   where caso_prueba=TEMPORAL_CASO_PRUEBA_1_DISTINCT.caso_prueba 
															   and documento_sector_id=TEMPORAL_CASO_PRUEBA_1_DISTINCT.documento_sector_id 
															   group by caso_prueba 
															 );	
	alter table TEMPORAL_CASO_PRUEBA_1_DISTINCT
	add column cantidad_casos_correctos integer;

	alter table TEMPORAL_CASO_PRUEBA_1_DISTINCT
	add column cantidad_casos_incorrectos integer;

	drop table if exists TEMPORAL_CASO_PRUEBA_1_EX_ERR;
	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1_EX_ERR AS
	select * from TEMPORAL_CASO_PRUEBA_1_DISTINCT;

	drop table if exists TEMPORAL_CASO_PRUEBA_1;
  	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1 AS
	select fecha_registro,caso_prueba_id,caso_prueba,estado_id,documento_sector_id,total_pruebas 
	from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio 
	where estado_id='AC' 
	and documento_sector_id in ( select b.codigo_clasificador 
 							     from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
							     inner join sre_recaudaciones.sre_fac_clasificadores b
							     on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
							     where sistema_id=p_sistema_id
							     and a.estado_tipo_documento_sistema_id = 1380
							     and a.estado_id='AC'
							   );
		
	drop table if exists TEMPORAL_CASO_PRUEBA_1_DISTINCT;
 	CREATE TEMP TABLE TEMPORAL_CASO_PRUEBA_1_DISTINCT AS
	select TEMPORAL_CASO_PRUEBA_1.estado_match, TEMPORAL_CASO_PRUEBA_1.estado_id, TEMPORAL_CASO_PRUEBA_1.fecha_registro, TEMPORAL_CASO_PRUEBA_1.caso_prueba_id from ( 
	select distinct b.estado_match, a.estado_id,b.fecha_registro,a.caso_prueba_id
					from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio a
					inner join sre_recaudaciones.sre_fac_log_1_consumo_servicio b
					on a.caso_prueba_id=b.caso_prueba_id 
					and sistema_id=p_sistema_id 
					and b.fecha_registro>=v_inicio_registro_prueba
					and b.fecha_registro <=v_fin_registro_prueba
					and b.estado_id='AC'
				  ) TEMPORAL_CASO_PRUEBA_1 where TEMPORAL_CASO_PRUEBA_1.estado_id='AC';
				 
	alter table TEMPORAL_CASO_PRUEBA_1 add column satisfactorio boolean;
				 
	update  TEMPORAL_CASO_PRUEBA_1 set satisfactorio = false;

	update  TEMPORAL_CASO_PRUEBA_1 set satisfactorio = true
	where caso_prueba_id in(select distinct caso_prueba_id 
							from TEMPORAL_CASO_PRUEBA_1_DISTINCT 
							where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id
						   );

	update  TEMPORAL_CASO_PRUEBA_1 set fecha_registro = (select fecha_registro 
														 from TEMPORAL_CASO_PRUEBA_1_DISTINCT 
														 where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id 
														 order by fecha_registro 
														 desc limit 1
														);

	alter table TEMPORAL_CASO_PRUEBA_1
	add column cantidad_casos_correctos integer;

	alter table TEMPORAL_CASO_PRUEBA_1
	add column cantidad_casos_incorrectos integer;

	
    update TEMPORAL_CASO_PRUEBA_1 set cantidad_casos_correctos=(select count(1) 
															    from sre_recaudaciones.sre_fac_log_1_consumo_servicio 
															    where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id 
															    and fecha_registro>=v_inicio_registro_prueba 
															    and fecha_registro <= v_fin_registro_prueba
															    and sistema_id=p_sistema_id
															    and estado_id='AC'
															   )		
																where caso_prueba 
																like'%EXITOSO%';

	update TEMPORAL_CASO_PRUEBA_1 set cantidad_casos_incorrectos =( select count(1) 
																	from sre_recaudaciones.sre_fac_log_1_consumo_servicio 
																	where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id 
																	and fecha_registro>=v_inicio_registro_prueba 
																	and fecha_registro <= v_fin_registro_prueba
																	and sistema_id=p_sistema_id
																	and estado_id='AC'
																  )
																   where caso_prueba like'%ERRONEO%';

	
	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=(select replace(caso_prueba,' EXITOSO','') from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id)
	where caso_prueba like'%EXITOSO';

	update TEMPORAL_CASO_PRUEBA_1 set caso_prueba=(select replace(caso_prueba,' ERRONEO','') from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio where caso_prueba_id=TEMPORAL_CASO_PRUEBA_1.caso_prueba_id)
	where caso_prueba like'%ERRONEO';

	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set cantidad_casos_correctos=(select cantidad_casos_correctos from TEMPORAL_CASO_PRUEBA_1 where caso_prueba=TEMPORAL_CASO_PRUEBA_1_EX_ERR.caso_prueba and TEMPORAL_CASO_PRUEBA_1_EX_ERR.documento_sector_id=documento_sector_id and cantidad_casos_correctos is not null);	
	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set cantidad_casos_incorrectos=(select cantidad_casos_incorrectos from TEMPORAL_CASO_PRUEBA_1 where caso_prueba=TEMPORAL_CASO_PRUEBA_1_EX_ERR.caso_prueba and TEMPORAL_CASO_PRUEBA_1_EX_ERR.documento_sector_id=documento_sector_id and cantidad_casos_incorrectos is not null);

	alter table TEMPORAL_CASO_PRUEBA_1_EX_ERR
	add column satisfactorio boolean;

	alter table TEMPORAL_CASO_PRUEBA_1_EX_ERR
	add column porcentaje integer;

	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set porcentaje =(select sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(cantidad_casos_correctos,cantidad_casos_incorrectos,total_pruebas,2));

	update TEMPORAL_CASO_PRUEBA_1_EX_ERR set satisfactorio =(case when porcentaje=100 then true else false end);

    return query
     select satisfactorio, porcentaje from TEMPORAL_CASO_PRUEBA_1_EX_ERR;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		     	return query select cast('error sre_fac_match_log_caso_pruebas_por_etapa_1' as varchar), cast(-1 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_casos_prueba_etapa_10(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD :  Esta funcion permite realizar el match entre la tabla de logs y los casos de pruebas de la etapa 10 (envio masivo)
			     donde se actualiza el campo estado_match a 1, en caso de existir coinncidencias
PARAMETROS INGRESO
    p_sistema_id 
PARAMETROS SALIDA
    v_resultado 
SUBSISTEMA : Facturación
FECHA CREACION : 05/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint := 0;
begin
	
	update sre_recaudaciones.sre_fac_log_10_envio_masivos 
	set
	estado_match = 1,
	caso_prueba_id = pruebas.caso_prueba_id,
	fecha_ultima_modificacion = now()
	from sre_recaudaciones.sre_fac_log_10_envio_masivos as logs  
		 inner join 
		 sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as pruebas
	on logs.hash = pruebas.hash
	where
	logs.sistema_id = p_sistema_id and
	logs.estado_match = 0 and
	pruebas.estado_id = 'AC' and
	logs.estado_id = 'AC' and
	sre_recaudaciones.sre_fac_log_10_envio_masivos.log_id = logs.log_id;

	v_resultado := 1000;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_match_log_casos_prueba_etapa_10');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_match_log_casos_prueba_etapa_10'));	
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_casos_prueba_etapa_5(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD :  Esta funcion permite realizar el match entre la tabla de logs y los casos de pruebas de la etapa 5 (eventos significativos)
			     donde se acturaliza el campo estado_match a 1, en caso de existir coinncidencias
PARAMETROS INGRESO
    p_sistema_id 
PARAMETROS SALIDA
    v_resultado 
SUBSISTEMA : Facturación
FECHA CREACION : 19/06/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint := 0;
begin
	
	update sre_recaudaciones.sre_fac_log_5_eventos_significativos 
	set
	estado_match = 1,
	caso_prueba_id = pruebas.caso_prueba_id,
	fecha_ultima_modificacion = now()
	from sre_recaudaciones.sre_fac_log_5_eventos_significativos as logs  
		 inner join 
		 sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as pruebas
	on logs.hash = pruebas.hash
	where
	logs.sistema_id = p_sistema_id and
	logs.estado_match = 0 and
	pruebas.estado_id = 'AC' and
	logs.estado_id = 'AC' and
	sre_recaudaciones.sre_fac_log_5_eventos_significativos.log_id = logs.log_id;

	v_resultado := 1000;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_match_log_casos_prueba_etapa_5');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_match_log_casos_prueba_etapa_5'));	
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_match_log_casos_pruebas_etapa_0(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(caso_prueba character varying, cantidad_casos_correctos integer, cantidad_casos_incorrectos integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Prueba unitaria de validacion del punto de venta para la recepcion
PARAMETROS SALIDA
    Resultado de la prueba unitaria por cada caso
SUBSISTEMA : Facturación
FECHA CREACION : <03/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_tabla_casos_prueba_cursor refcursor;
	v_item_caso_prueba            record;

	v_nro_casos_prueba_punto_venta integer := 0;
	v_cantidad integer := 0;
	v_cantidad_log_correctos integer :=0;
	v_cantidad_log_incorrectos integer :=0;

	--los parametros entrada deben ser
	/**
	 * 1. sistema id / codigo de sistema
	 * 2. contribuyente_id / nit
	 * 3. 
	 */
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);

begin
	
	
	---1 COMBINACIONES PARA SUCURSALES
	--====================================
	/*
	 * CUANDO SE GENERA EL CUF POR SUCURSAL EL PUNTO DE VENTA VA POR DEFECTO CON 0 (CERO)
	 * 
	 * */
	drop table if exists tabla1; --tabla1 casos de prueba CUF de sucursales
	create temp table tabla1 as
	select nit_emisor as nit, sucursales.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, pos as pos,
	       md5(nit_emisor||'|'||sucursales.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||pos) as hash
	from
	(
	select b.contribuyente_id, a.sistema_id, c.codigo_clasificador as codigo_sector, e.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes b
	on a.sistema_id=b.sistema_id
	inner join sre_recaudaciones.sre_fac_clasificadores c
	on tipo_documento_factura_id = c.codigo_clasificador_equivalente and c.agrupador = 'TIPO DOCUMENTO SECTOR'
	inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores d
	on tipo_documento_factura_id = d.tipo_documento_sector_id
	inner join sre_recaudaciones.sre_fac_clasificadores e
	on d.tipo_documento_fiscal_id = e.codigo_clasificador_equivalente and e.agrupador = 'TIPO DOCUMENTO FISCAL'
	) as sectores -- tipo documento sector  y documento fiscal
	cross join 
	(
	select persona_contribuyente_id as contribuyente_id, numero_sucursal 
	from scn_contribuyentes.scn_emp_sucursales_contribuyentes
	) as  sucursales -- sucursales
	cross join
	(
	select a.contribuyente_id, a.sistema_id, b.codigo_clasificador as codigo_modalidad
	from sre_recaudaciones.sre_fac_sistemas_contribuyentes a, sre_recaudaciones.sre_fac_clasificadores b
	where b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION'
	) as emision -- emision
	cross join unnest
	(
	ARRAY[0]
	) as pos  -- punto de venta por defecto 0 para todas las sucursales
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id = 17  
	sectores.sistema_id = p_sistema_id and
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	sucursales.contribuyente_id = p_contribuyente_id;


	---2 COMBINACIONES PARA PUNTOS DE VENTA
	--=====================================
	/**
	 * CUANDO SE TIENE PUNTOS DE VENTA
	 * 
	 * EN LA GENERACION DEL CUF VA EL PUNTO DE VENTA Y LA SUCURSAL CON LA CUAL SE CREO EL PUNTO DE VENTA 
	 * 
	 */

	drop table if exists tabla2; --casos de prueba con puntos de venta
	create temp table tabla2 as
	select nit_emisor as nit, punto_venta.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta.numero_pos as pos,
	   md5(nit_emisor||'|'||punto_venta.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta.numero_pos) as hash
	from
	(
	select b.contribuyente_id, a.sistema_id, c.codigo_clasificador as codigo_sector, e.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes b
	on a.sistema_id=b.sistema_id
	inner join sre_recaudaciones.sre_fac_clasificadores c
	on tipo_documento_factura_id = c.codigo_clasificador_equivalente and c.agrupador = 'TIPO DOCUMENTO SECTOR'
	inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores d
	on tipo_documento_factura_id = d.tipo_documento_sector_id
	inner join sre_recaudaciones.sre_fac_clasificadores e
	on d.tipo_documento_fiscal_id = e.codigo_clasificador_equivalente and e.agrupador = 'TIPO DOCUMENTO FISCAL'
	) as sectores -- tipo documento sector y documento fiscal
	cross join  
	(
	select contribuyente_id as contribuyente_id, sucursal_id as numero_sucursal, numero_pos 
	from sre_recaudaciones.sre_fac_puntos_ventas
	) as  punto_venta -- puntos de venta
	cross join
	(
	select a.contribuyente_id, a.sistema_id, b.codigo_clasificador as codigo_modalidad
	from sre_recaudaciones.sre_fac_sistemas_contribuyentes a, sre_recaudaciones.sre_fac_clasificadores b
	where b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION'
	) as emision -- emision 
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id prueba  17
	sectores.sistema_id = p_sistema_id and  --sistema_id prueba  17
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	punto_venta.contribuyente_id = p_contribuyente_id;
	
	---Nota: Se obtiene el nro de tabla2 (si se tiene puntos de venta )
	v_nro_casos_prueba_punto_venta := (select count(*) from tabla2);
	

	---Nota: Se debe unir las tablas de casos de pruebas: tabla1(sucursales) y tabla2(sucursales y punto de venta) - en caso de que se tengan puntos de venta
	---      caso contrario se mantiene los casos de prueba de la tabla1(sucursales)
	drop table if exists casos_prueba_etapa0; 
	if(v_nro_casos_prueba_punto_venta > 0)then	
	
	    create temp table casos_prueba_etapa0 as
		select *
		from tabla1
		union all
		select *
		from tabla2;
	else
		create temp table casos_prueba_etapa0 as
		select *
		from tabla1;
	end if;
	
	
	
	open v_tabla_casos_prueba_cursor for (select * from casos_prueba_etapa0); -- tabla con casos de prueba
	
	--creacion de tabla
	
	--nit_emisor, sucursales.numero_sucursal, sistemas.codigo_modalidad, emision.codigo_emision, sectores.codigo_sector, pos,
	drop table if exists tabla3;
	create temp table tabla3(caso_prueba varchar, cantidad_casos_correctos int4 , cantidad_casos_incorrectos int4);
	

	loop
		fetch v_tabla_casos_prueba_cursor into v_item_caso_prueba;
		exit when not found;
		
		v_cantidad_log_correctos := (
									  select count (*)
									  from sre_recaudaciones.sre_fac_log_0_cuf as a
									  where a.hash = v_item_caso_prueba.hash and a.estado_match = 1
									 );
		
		v_cantidad_log_incorrectos := (
								       select count (*)
									   from sre_recaudaciones.sre_fac_log_0_cuf as a
									   where a.hash = v_item_caso_prueba.hash and a.estado_match = 0
									  );							 
		
		
		--v_cantidad := (select count(1) from sre_recaudaciones.sre_fac_log_0_cuf as a where a.hash = v_item_caso_prueba.hash );
		v_cantidad := 1;
		insert into tabla3 values(v_item_caso_prueba.nit||'|'||
								  v_item_caso_prueba.sucursal||'|'||
								  v_item_caso_prueba.modalidad||'|'||
								  v_item_caso_prueba.emision||'|'||
								  v_item_caso_prueba.documento_fiscal||'|'||
								  v_item_caso_prueba.sector||'|'||
								  v_item_caso_prueba.pos, 
								  v_cantidad_log_correctos,
								  v_cantidad_log_incorrectos);
				
	end loop;
	
	return query select * from tabla3;

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_casos_prueba_sugeridos_etapa_0(p_sistema_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO

PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : 10/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/


declare
	v_etapa_cuf integer := 2850;
	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;

begin
	
		--Nota: Control de casos de prueba declarados registrados add 20190918
		  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
		  create temp table TEMPORAL_PRUEBA_SISTEMA as 
				  									 select PRUEBA_SISTEMA.*
													 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
													        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
													 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_cuf and
													 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
													        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
													        PRUEBA_SISTEMA.estado_id = 'AC';
														  
		  v_fecha_fin_prueba := coalesce (
										    (
										     select fecha_fin_prueba
											 from   TEMPORAL_PRUEBA_SISTEMA
										    ), now()
										  );
		
		  v_fecha_inicio_prueba := (
		  							select fecha_inicio_prueba
		  							from TEMPORAL_PRUEBA_SISTEMA
		  							);
		  							
	  
       --Nota: Creamos la tabla de casos de pruebas sugeridas registrado en los LOGS
       drop table if exists TEMPORAL_LOGS;
       create temp table TEMPORAL_LOGS as select distinct LOGS.hash, LOGS.caso_prueba_id--LOGS.*
                                                                from sre_recaudaciones.sre_fac_casos_prueba_0_cuf as CASOS_PRUEBAS,
                                                                       sre_recaudaciones.sre_fac_log_0_cuf as LOGS
                                                                where CASOS_PRUEBAS.hash in (LOGS.hash)
                                                                and CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id
                                                                and LOGS.sistema_id = p_sistema_id
                                                                and LOGS.fecha_prueba >= v_fecha_inicio_prueba
																and LOGS.fecha_prueba <= v_fecha_fin_prueba
																and LOGS.estado_id = 'AC';
                                                                   
       --TABLE(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, cantidad_esperada integer)
       drop table if exists tbl_casos_prueba;
       create temp table tbl_casos_prueba as 
       select caso_prueba_id,
                split_part(caso_prueba,'|',1) as nit,
                split_part(caso_prueba,'|',2) as fecha_emision,
                split_part(caso_prueba,'|',3) as sucursal,
                split_part(caso_prueba,'|',4) as modalidad,
                split_part(caso_prueba,'|',5) as emision,
                split_part(caso_prueba,'|',6) as documento_fiscal,
                cast (split_part(caso_prueba,'|',7) as integer) as sector,
                split_part(caso_prueba,'|',8) as numero_factura,
                split_part(caso_prueba,'|',9) as punto_venta,
                total_pruebas as cantidad_casos_esperados,
                hash,
                hash_descripcion,                
                opcional
       from sre_recaudaciones.sre_fac_casos_prueba_0_cuf
       where opcional = 1; --1 es una prueba sugerida
       

       --Nota: Se debe retornar los casos de prueba correspondientes a los sectores del sistema
       return query  
	            (select row_to_json(tbl) :: varchar
	             from (
	                            select CASOS_PRUEBA.*,
	                                   coalesce((select true from TEMPORAL_LOGS where TEMPORAL_LOGS.caso_prueba_id = CASOS_PRUEBA.caso_prueba_id and  TEMPORAL_LOGS.hash = CASOS_PRUEBA.hash), false) as es_caso_prueba_registrada
	                            from tbl_casos_prueba CASOS_PRUEBA,
	                                    (     select CLASIFICADORES.codigo_clasificador as sector
	                                          from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
	                                          inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
	                                          on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
	                                          where  DOCUMENTOS_SISTEMAS.sistema_id = p_sistema_id
	                                          and    DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = 1380
	                                   ) as DOCUMNETOS_SISTEMAS
	                          where CASOS_PRUEBA.sector = DOCUMNETOS_SISTEMAS.sector
	                          order by CASOS_PRUEBA.sector asc
	                        ) tbl
	               );           
	 
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_casos_prueba_sugeridos_etapa_0_v1(p_sistema_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO

PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : 10/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Adicion de validacion para obtener los casos de prueba ssugeridos adicionados 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/07/2019
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/


declare
	v_etapa_cuf integer := 2850;
	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;

begin
	
	
		--Nota: Control de casos de prueba declarados registrados add 20190918
		  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
		  create temp table TEMPORAL_PRUEBA_SISTEMA as 
				  									 select PRUEBA_SISTEMA.*
													 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
													        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
													 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_cuf and
													 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
													        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
													        PRUEBA_SISTEMA.estado_id = 'AC';
														  
		  v_fecha_fin_prueba := coalesce (
										    (
										     select fecha_fin_prueba
											 from   TEMPORAL_PRUEBA_SISTEMA
										    ), now()
										  );
		
		  v_fecha_inicio_prueba := (
		  							select fecha_inicio_prueba
		  							from TEMPORAL_PRUEBA_SISTEMA
		  							);
		  							
	  
       --Nota: Creamos la tabla de casos de pruebas sugeridas registrado en los LOGS
       drop table if exists TEMPORAL_LOGS;
       create temp table TEMPORAL_LOGS as select distinct LOGS.hash, LOGS.caso_prueba_id--LOGS.*
                                                                from sre_recaudaciones.sre_fac_casos_prueba_0_cuf as CASOS_PRUEBAS,
                                                                       sre_recaudaciones.sre_fac_log_0_cuf as LOGS
                                                                where CASOS_PRUEBAS.hash in (LOGS.hash)
                                                                and CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id
                                                                and LOGS.sistema_id = p_sistema_id
                                                                and LOGS.fecha_prueba >= v_fecha_inicio_prueba
																and LOGS.fecha_prueba <= v_fecha_fin_prueba
																and LOGS.estado_id = 'AC';
                                                                   
       --TABLE(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, cantidad_esperada integer)
       drop table if exists tbl_casos_prueba;
       create temp table tbl_casos_prueba as 
       select caso_prueba_id,
                split_part(caso_prueba,'|',1) as nit,
                split_part(caso_prueba,'|',2) as fecha_emision,
                split_part(caso_prueba,'|',3) as sucursal,
                split_part(caso_prueba,'|',4) as modalidad,
                split_part(caso_prueba,'|',5) as emision,
                split_part(caso_prueba,'|',6) as documento_fiscal,
                cast (split_part(caso_prueba,'|',7) as integer) as sector,
                split_part(caso_prueba,'|',8) as numero_factura,
                split_part(caso_prueba,'|',9) as punto_venta,
                total_pruebas as cantidad_casos_esperados,
                hash,
                hash_descripcion,                
                opcional
       from sre_recaudaciones.sre_fac_casos_prueba_0_cuf
       where opcional = 1; --1 es una prueba sugerida
       

       --Nota: Se debe retornar los casos de prueba correspondientes a los sectores del sistema
       return query  
                        (select row_to_json(tbl) :: varchar
                         from (
                                        select CASOS_PRUEBA.*,
                                               coalesce((select true from TEMPORAL_LOGS where TEMPORAL_LOGS.caso_prueba_id = CASOS_PRUEBA.caso_prueba_id and  TEMPORAL_LOGS.hash = CASOS_PRUEBA.hash), false) as es_caso_prueba_registrada
                                        from tbl_casos_prueba CASOS_PRUEBA,
                                                (     select CLASIFICADORES.codigo_clasificador as sector
                                                      from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
                                                      inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
                                                      on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
                                                      where  DOCUMENTOS_SISTEMAS.sistema_id = p_sistema_id
                                                      and    DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = 1380
                                               ) as DOCUMNETOS_SISTEMAS
                                      where CASOS_PRUEBA.sector = DOCUMNETOS_SISTEMAS.sector
                                      order by CASOS_PRUEBA.sector asc
                                    ) tbl
                           );           
             
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, hash character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar las combinaciones de generacion de cuf a partir de los 
                parametros de entrada  
PARAMETROS INGRESO
    		p_sistema_id
    		p_nit
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se realizaron ajustes en el sector de obtencion de  sucursales, se agrego el filtro fecha_hasta
                 y distinct ya que el numero de sucursal se repite (no debe existir duplicados)
                 Por otra parte se adiciono el control, de puntos de ventas vigentes filtrando por el estado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :01/07/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell <junior.flores>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_nro_casos_prueba integer :=0;
	--add 20190905 rgt
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
	v_etapa integer := 2850; --Etapa de cuf
begin
	
	--obtener fecha de prueba add 20190905 rgt
	v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'I');
	v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'F');

	
	---1 COMBINACIONES PARA SUCURSALES
	--====================================
	/*
	 * CUANDO SE GENERA EL CUF POR SUCURSAL EL PUNTO DE VENTA VA POR DEFECTO CON 0 (CERO)
	 * 
	 * */
	drop table if exists TEMPORAL_CUF_SUCURSALES; --tabla1 casos de prueba CUF de sucursales
	create temp table TEMPORAL_CUF_SUCURSALES as
	select nit_emisor as nit, sucursales.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta::bigint as pos,
	       md5(nit_emisor||'|'||sucursales.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta)::varchar as hash
	from
	(
	select distinct CONT_SISTEMA.contribuyente_id, DOCUMENTOS_SISTEMAS.sistema_id, CLASIFICADORES.codigo_clasificador as codigo_sector, CLASIFICADOR.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
	     inner join 
	     sre_recaudaciones.sre_fac_sistemas_contribuyentes CONT_SISTEMA
	on DOCUMENTOS_SISTEMAS.sistema_id = CONT_SISTEMA.sistema_id and CONT_SISTEMA.estado_id = 'AC'
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
		 inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores DOC_SECTOR
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = DOC_SECTOR.tipo_documento_sector_id
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR
	on DOC_SECTOR.tipo_documento_fiscal_id = CLASIFICADOR.codigo_clasificador_equivalente and CLASIFICADOR.agrupador = 'TIPO DOCUMENTO FISCAL'
	     inner join str_transversales.str_cps_clasificadores STR_CLASIFICADOR
	on DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = STR_CLASIFICADOR.clasificador_id 
	   and STR_CLASIFICADOR.tipo_clasificador = 'estado_tipo_documento_sistema_id' 
	   and STR_CLASIFICADOR.descripcion = 'VALIDO'
	where DOCUMENTOS_SISTEMAS.fecha_registro < v_fecha_fin_etapa and DOCUMENTOS_SISTEMAS.estado_id = 'AC' --add 20190906 rgt
	and CLASIFICADORES.codigo_clasificador <> 28 --prevalorada
	) as sectores -- tipo documento sector  y documento fiscal
	cross join 
	(
	select distinct numero_sucursal, persona_contribuyente_id as contribuyente_id 
	from scn_contribuyentes.scn_emp_sucursales_contribuyentes
	where estado_id = 'AC'
	and fechas_hasta_vigencia is null 
	and fecha_registro < v_fecha_fin_etapa --add 20190905 rgt
	) as  sucursales -- sucursales
	cross join
	(
	select distinct b.codigo_clasificador as codigo_modalidad, a.sistema_id, c.contribuyente_id
	from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones a, sre_recaudaciones.sre_fac_clasificadores b, sre_recaudaciones.sre_fac_sistemas_contribuyentes c
	where a.sistema_id = c.sistema_id and  a.estado_id = 'AC' and b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	and a.fecha_registro < v_fecha_fin_etapa --add 20190906 rgt
	and  b.codigo_clasificador >= 1 and b.codigo_clasificador <= 2--add 20191008
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION' 
	and codigo_clasificador >= 1 and codigo_clasificador <= 2
	and fecha_registro < v_fecha_fin_etapa
	) as emision -- emision
	cross join unnest
	(
	ARRAY[0]
	) as punto_venta  -- punto de venta por defecto 0 para todas las sucursales
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id = 17  
	sectores.sistema_id = p_sistema_id and
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	sucursales.contribuyente_id = p_contribuyente_id
	order by sucursales.numero_sucursal asc, emision.codigo_emision  asc, sectores.codigo_sector asc;


	---2 COMBINACIONES PARA PUNTOS DE VENTA
	--=====================================
	/**
	 * CUANDO SE TIENE PUNTOS DE VENTA
	 * 
	 * EN LA GENERACION DEL CUF VA EL PUNTO DE VENTA Y LA SUCURSAL CON LA CUAL SE CREO EL PUNTO DE VENTA 
	 * 
	 */

	drop table if exists TEMPORAL_CUF_PUNTO_VENTA; --casos de prueba con puntos de venta
	create temp table TEMPORAL_CUF_PUNTO_VENTA as
	select nit_emisor as nit, punto_venta.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta.numero_pos::bigint as pos,
	   md5(nit_emisor||'|'||punto_venta.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta.numero_pos)::varchar as hash
	from
	(
	select distinct CONT_SISTEMA.contribuyente_id, DOCUMENTOS_SISTEMAS.sistema_id, CLASIFICADORES.codigo_clasificador as codigo_sector, CLASIFICADOR.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
	     inner join 
	     sre_recaudaciones.sre_fac_sistemas_contribuyentes CONT_SISTEMA
	on DOCUMENTOS_SISTEMAS.sistema_id = CONT_SISTEMA.sistema_id and CONT_SISTEMA.estado_id = 'AC'
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
		 inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores DOC_SECTOR
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = DOC_SECTOR.tipo_documento_sector_id
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR
	on DOC_SECTOR.tipo_documento_fiscal_id = CLASIFICADOR.codigo_clasificador_equivalente and CLASIFICADOR.agrupador = 'TIPO DOCUMENTO FISCAL'
	     inner join str_transversales.str_cps_clasificadores STR_CLASIFICADOR
	on DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = STR_CLASIFICADOR.clasificador_id 
	   and STR_CLASIFICADOR.tipo_clasificador = 'estado_tipo_documento_sistema_id' 
	   and STR_CLASIFICADOR.descripcion = 'VALIDO'
	where DOCUMENTOS_SISTEMAS.fecha_registro < v_fecha_fin_etapa and DOCUMENTOS_SISTEMAS.estado_id = 'AC' --add 20190906 rgt
	and CLASIFICADORES.codigo_clasificador <> 28 --prevalorada
	) as sectores -- tipo documento sector y documento fiscal
	cross join  
	(
	select PUNTO_VENTA.contribuyente_id, PUNTO_VENTA.sucursal_id as numero_sucursal, PUNTO_VENTA.numero_pos 
	from sre_recaudaciones.sre_fac_puntos_ventas as PUNTO_VENTA, str_transversales.str_cps_clasificadores as CLASIFICADORES
	where CLASIFICADORES.tipo_clasificador = 'estado_punto_venta_id'
	and  PUNTO_VENTA.estado_punto_venta_id = CLASIFICADORES.clasificador_id
	and CLASIFICADORES.descripcion = 'VIGENTE'--punto de venta vigente
	and PUNTO_VENTA.fecha_registro < v_fecha_fin_etapa
	and PUNTO_VENTA.estado_id='AC'--add 09102019 jf
	) as  punto_venta -- puntos de venta
	cross join
	(
	select distinct b.codigo_clasificador as codigo_modalidad, a.sistema_id, c.contribuyente_id
	from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones a, sre_recaudaciones.sre_fac_clasificadores b, sre_recaudaciones.sre_fac_sistemas_contribuyentes c
	where a.sistema_id = c.sistema_id and  a.estado_id = 'AC' and b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	and a.fecha_registro < v_fecha_fin_etapa --add 20190906 rgt
	and  b.codigo_clasificador >= 1 and b.codigo_clasificador <= 2--add 20191008
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION' 
	and codigo_clasificador >= 1 and codigo_clasificador <= 2
	and fecha_registro < v_fecha_fin_etapa
	) as emision -- emision 
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id prueba  17
	sectores.sistema_id = p_sistema_id and  --sistema_id prueba  17
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	punto_venta.contribuyente_id = p_contribuyente_id
	order by punto_venta.numero_sucursal asc, emision.codigo_emision asc, sectores.codigo_sector asc;
	
	---Nota: Se obtiene el nro de registros  de la  tabla2 (si se tiene puntos de venta )
	v_nro_casos_prueba_punto_venta := (select count(*) from TEMPORAL_CUF_PUNTO_VENTA);
	
	drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA0; 
	create temp table TEMPORAL_CASOS_PRUEBA_ETAPA0(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, hash varchar) ;
	
	---Nota: Se debe unir las tablas de casos de pruebas: tabla1(sucursales) y tabla2(sucursales y punto de venta) - en caso de que se tengan puntos de venta
	---caso contrario se mantiene los casos de prueba de la tabla1(sucursales) 
	if(v_nro_casos_prueba_punto_venta > 0)then	
	    insert into TEMPORAL_CASOS_PRUEBA_ETAPA0
		select *
		from TEMPORAL_CUF_SUCURSALES
		union all
		select *
		from TEMPORAL_CUF_PUNTO_VENTA;
	else
		insert into TEMPORAL_CASOS_PRUEBA_ETAPA0
		select *
		from TEMPORAL_CUF_SUCURSALES;
	end if;
 
	--Consulta para el documento sector de prevalorada add 09102019
	if( select true 
		from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones 
		where sistema_id=p_sistema_id 
		and estado_id='AC' 
		and modalidad_facturacion_id in(select clasificador_id 
									    from str_transversales.str_cps_clasificadores 
									    where tipo_clasificador='modalidad_facturacion_id' 									  
									    and (descripcion='PREVALORADA COMPUTARIZADA' OR descripcion='PREVALORADA ELECTRONICA')  
									    and estado_id='AC'
									   ) limit 1) then									   
		insert into TEMPORAL_CASOS_PRUEBA_ETAPA0
		select * from  sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0_prevalorada(p_sistema_id,p_nit);
	end if;
		
	return query select * from  TEMPORAL_CASOS_PRUEBA_ETAPA0;


end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0_prevalorada(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, hash character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar las combinaciones de generacion de cuf a partir de los 
                parametros de entrada  
PARAMETROS INGRESO
    		p_sistema_id
    		p_nit
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <09/10/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se realizaron ajustes en el sector de obtencion de  sucursales, se agrego el filtro fecha_hasta
                 y distinct ya que el numero de sucursal se repite (no debe existir duplicados)
                 Por otra parte se adiciono el control, de puntos de ventas vigentes filtrando por el estado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :01/07/2019
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_nro_casos_prueba integer :=0;
	--add 20190905 rgt
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
	v_etapa integer := 2850; --Etapa de cuf
begin
	
	--obtener fecha de prueba add 20190905 rgt
	v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'I');
	v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'F');

	
	---1 COMBINACIONES PARA SUCURSALES
	--====================================
	/*
	 * CUANDO SE GENERA EL CUF POR SUCURSAL EL PUNTO DE VENTA VA POR DEFECTO CON 0 (CERO)
	 * 
	 * */
	drop table if exists TEMPORAL_CUF_SUCURSALES_PREVALORADA; --tabla1 casos de prueba CUF de sucursales
	create temp table TEMPORAL_CUF_SUCURSALES_PREVALORADA as
	select nit_emisor as nit, sucursales.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta::bigint as pos,
	       md5(nit_emisor||'|'||sucursales.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta)::varchar as hash
	from
	(
	select distinct CONT_SISTEMA.contribuyente_id, DOCUMENTOS_SISTEMAS.sistema_id, CLASIFICADORES.codigo_clasificador as codigo_sector, CLASIFICADOR.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
	     inner join 
	     sre_recaudaciones.sre_fac_sistemas_contribuyentes CONT_SISTEMA
	on DOCUMENTOS_SISTEMAS.sistema_id = CONT_SISTEMA.sistema_id and CONT_SISTEMA.estado_id = 'AC'
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
		 inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores DOC_SECTOR
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = DOC_SECTOR.tipo_documento_sector_id
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR
	on DOC_SECTOR.tipo_documento_fiscal_id = CLASIFICADOR.codigo_clasificador_equivalente and CLASIFICADOR.agrupador = 'TIPO DOCUMENTO FISCAL'
	     inner join str_transversales.str_cps_clasificadores STR_CLASIFICADOR
	on DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = STR_CLASIFICADOR.clasificador_id 
	   and STR_CLASIFICADOR.tipo_clasificador = 'estado_tipo_documento_sistema_id' 
	   and STR_CLASIFICADOR.descripcion = 'VALIDO'
	where DOCUMENTOS_SISTEMAS.fecha_registro < v_fecha_fin_etapa and DOCUMENTOS_SISTEMAS.estado_id = 'AC' --add 20190906 rgt
	and CLASIFICADORES.codigo_clasificador = 28 --prevalorada
	) as sectores -- tipo documento sector  y documento fiscal
	cross join 
	(
	select distinct numero_sucursal, persona_contribuyente_id as contribuyente_id 
	from scn_contribuyentes.scn_emp_sucursales_contribuyentes
	where estado_id = 'AC'
	and fechas_hasta_vigencia is null 
	and fecha_registro < v_fecha_fin_etapa --add 20190905 rgt
	) as  sucursales -- sucursales
	cross join
	(
	select distinct b.codigo_clasificador as codigo_modalidad, a.sistema_id, c.contribuyente_id
	from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones a, sre_recaudaciones.sre_fac_clasificadores b, sre_recaudaciones.sre_fac_sistemas_contribuyentes c
	where a.sistema_id = c.sistema_id and  a.estado_id = 'AC' and b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	and a.fecha_registro < v_fecha_fin_etapa --add 20190906 rgt
	and  (b.codigo_clasificador = 4 or b.codigo_clasificador = 5)--add 09102019
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION' 
	and codigo_clasificador >= 1 and codigo_clasificador <= 2
	and fecha_registro < v_fecha_fin_etapa
	) as emision -- emision
	cross join unnest
	(
	ARRAY[0]
	) as punto_venta  -- punto de venta por defecto 0 para todas las sucursales
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id = 17  
	sectores.sistema_id = p_sistema_id and
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	sucursales.contribuyente_id = p_contribuyente_id
	order by sucursales.numero_sucursal asc, emision.codigo_emision  asc, sectores.codigo_sector asc;


	---2 COMBINACIONES PARA PUNTOS DE VENTA
	--=====================================
	/**
	 * CUANDO SE TIENE PUNTOS DE VENTA
	 * 
	 * EN LA GENERACION DEL CUF VA EL PUNTO DE VENTA Y LA SUCURSAL CON LA CUAL SE CREO EL PUNTO DE VENTA 
	 * 
	 */

	drop table if exists TEMPORAL_CUF_PUNTO_VENTA_PREVALORADA; --casos de prueba con puntos de venta
	create temp table TEMPORAL_CUF_PUNTO_VENTA_PREVALORADA as
	select nit_emisor as nit, punto_venta.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta.numero_pos::bigint as pos,
	   md5(nit_emisor||'|'||punto_venta.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta.numero_pos)::varchar as hash
	from
	(
	select distinct CONT_SISTEMA.contribuyente_id, DOCUMENTOS_SISTEMAS.sistema_id, CLASIFICADORES.codigo_clasificador as codigo_sector, CLASIFICADOR.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
	     inner join 
	     sre_recaudaciones.sre_fac_sistemas_contribuyentes CONT_SISTEMA
	on DOCUMENTOS_SISTEMAS.sistema_id = CONT_SISTEMA.sistema_id and CONT_SISTEMA.estado_id = 'AC'
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
		 inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores DOC_SECTOR
	on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = DOC_SECTOR.tipo_documento_sector_id
		 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADOR
	on DOC_SECTOR.tipo_documento_fiscal_id = CLASIFICADOR.codigo_clasificador_equivalente and CLASIFICADOR.agrupador = 'TIPO DOCUMENTO FISCAL'
	     inner join str_transversales.str_cps_clasificadores STR_CLASIFICADOR
	on DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = STR_CLASIFICADOR.clasificador_id 
	   and STR_CLASIFICADOR.tipo_clasificador = 'estado_tipo_documento_sistema_id' 
	   and STR_CLASIFICADOR.descripcion = 'VALIDO'
	where DOCUMENTOS_SISTEMAS.fecha_registro < v_fecha_fin_etapa and DOCUMENTOS_SISTEMAS.estado_id = 'AC' --add 20190906 rgt
	and CLASIFICADORES.codigo_clasificador = 28 --prevalorada
	) as sectores -- tipo documento sector y documento fiscal
	cross join  
	(
	select PUNTO_VENTA.contribuyente_id, PUNTO_VENTA.sucursal_id as numero_sucursal, PUNTO_VENTA.numero_pos 
	from sre_recaudaciones.sre_fac_puntos_ventas as PUNTO_VENTA, str_transversales.str_cps_clasificadores as CLASIFICADORES
	where CLASIFICADORES.tipo_clasificador = 'estado_punto_venta_id'
	and  PUNTO_VENTA.estado_punto_venta_id = CLASIFICADORES.clasificador_id
	and CLASIFICADORES.descripcion = 'VIGENTE'--punto de venta vigente
	and PUNTO_VENTA.fecha_registro < v_fecha_fin_etapa
	and PUNTO_VENTA.estado_id='AC'--add 09102019
	) as  punto_venta -- puntos de venta
	cross join
	(
	select distinct b.codigo_clasificador as codigo_modalidad, a.sistema_id, c.contribuyente_id
	from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones a, sre_recaudaciones.sre_fac_clasificadores b, sre_recaudaciones.sre_fac_sistemas_contribuyentes c
	where a.sistema_id = c.sistema_id and  a.estado_id = 'AC' and b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	and a.fecha_registro < v_fecha_fin_etapa --add 20190906 rgt
	and  (b.codigo_clasificador = 4 or b.codigo_clasificador = 5)--add 09102019
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION' 
	and codigo_clasificador >= 1 and codigo_clasificador <= 2
	and fecha_registro < v_fecha_fin_etapa
	) as emision -- emision 
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id prueba  17
	sectores.sistema_id = p_sistema_id and  --sistema_id prueba  17
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	punto_venta.contribuyente_id = p_contribuyente_id
	order by punto_venta.numero_sucursal asc, emision.codigo_emision asc, sectores.codigo_sector asc;
	
	---Nota: Se obtiene el nro de registros  de la  tabla2 (si se tiene puntos de venta )
	v_nro_casos_prueba_punto_venta := (select count(*) from TEMPORAL_CUF_PUNTO_VENTA_PREVALORADA);
	

	---Nota: Se debe unir las tablas de casos de pruebas: tabla1(sucursales) y tabla2(sucursales y punto de venta) - en caso de que se tengan puntos de venta
	---      caso contrario se mantiene los casos de prueba de la tabla1(sucursales)
	drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA; 
	if(v_nro_casos_prueba_punto_venta > 0)then	
	 
	    create temp table TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA as
		select *
		from TEMPORAL_CUF_SUCURSALES_PREVALORADA
		union all
		select *
		from TEMPORAL_CUF_PUNTO_VENTA_PREVALORADA; 
	else
		create temp table TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA as
		select *
		from TEMPORAL_CUF_SUCURSALES_PREVALORADA;
	end if;
	
	--Nota: Obtenemos el numero de registros de casos de prueba
	v_nro_casos_prueba := (select count(*) from TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA);
	
	--Nota: Consultamos si el numero de casos de prueba es mayor a 0
	if (v_nro_casos_prueba > 0)then	
		return query select * from  TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA;
	else 
		drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA; 
	    create temp table TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, hash varchar) ;
		return query select * from  TEMPORAL_CASOS_PRUEBA_ETAPA0_PREVALORADA;
	end if;

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_10(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 10
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	--p_etapa_certificacion_sistemas_id integer := 2854;
	--p_sistema_id bigint := 217;

	v_fecha_fin_prueba timestamp;
	v_porcentaje numeric(20,2) := 0;	
	
begin

	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_10_D;
	  create temp table TEMPORAL_LOGS_ETAPA_10_D as (
		  select LOGS.hash, logs.fecha_prueba fecha
		  from  sre_recaudaciones.sre_fac_log_10_envio_masivos as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_10_D;
	  create temp table TEMPORAL_DETALLE_ETAPA_10_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional, y.agrupador,
	  	         y.hash,
		         y.hash_descripcion
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional, x.agrupador,
			         x.hash,
			         x.hash_descripcion
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash) cant,
				         casos.opcional, casos.agrupador,
				         casos.hash,
				         casos.hash_descripcion
				    from sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as casos
				   where casos.estado_id = 'AC'
				     and exists (select 1 from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, y.opcional, y.agrupador, y.hash, y.hash_descripcion
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 0 incorrectos, 0 avance, casos.opcional, agrupador, hash, hash_descripcion
		    from sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash)
		   order by 1
	  );
	  
	drop table if exists tbl_detalle_casos_prueba_etapa_10_d;
	create temp table tbl_detalle_casos_prueba_etapa_10_d as
	(
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
			   split_part(caso_prueba,'|',1)::Integer as nro,
			   split_part(caso_prueba,'|',2) as tipo_prueba,
			   split_part(caso_prueba,'|',3) as codigo_sistema,
			   split_part(caso_prueba,'|',4) as codigo_ambiente,
			   split_part(caso_prueba,'|',5) as codigo_emision,
			   split_part(caso_prueba,'|',6) as codigo_modalidad,
			   split_part(caso_prueba,'|',7) as nit_requerimiento, 
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',8), 17) as cuis,
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',9), 17) as cufd,			   
			   split_part(caso_prueba,'|',10) as documento_fiscal_paquete,
			   split_part(caso_prueba,'|',11) as documento_sector,
			   split_part(caso_prueba,'|',12) as sucursal_requerimiento,
			   split_part(caso_prueba,'|',13) as codigo_punto_venta,
			   split_part(caso_prueba,'|',14) as fecha_envio,
			   split_part(caso_prueba,'|',15) as archivo,			   
			   split_part(caso_prueba,'|',16) as resultado_esperado,			   			  
			   split_part(caso_prueba,'|',17) as solucion,
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional,
			   agrupador,
			   caso_prueba_id,
			   hash,
			   hash_descripcion
		  from TEMPORAL_DETALLE_ETAPA_10_D order by nro 
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_etapa_10_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_10_(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 3
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <26/07/2019>
AUTOR : Ivan Salas
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_resultado_match integer := 0;	
	
begin
	
	if((select count(1) 
		from sre_recaudaciones.sre_fac_log_10_envio_masivos 
		where sistema_id=p_sistema_id 
		and caso_prueba_id is null and estado_id='AC') > 0 ) then
			v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_3_sincronizacion_catalogos(p_sistema_id) ;
	end if;							  
	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_10_D;
	  create temp table TEMPORAL_LOGS_ETAPA_10_D as (
		  select LOGS.hash, logs.fecha_prueba fecha, logs.agrupador
		  from  sre_recaudaciones.sre_fac_log_10_envio_masivos as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_10_D;
	  create temp table TEMPORAL_DETALLE_ETAPA_10_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional, y.agrupador
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional, x.agrupador
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador) cant,
				         casos.opcional, casos.agrupador
				    from sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as casos
				   where casos.estado_id = 'AC'
				     and exists (select 1 from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, 
		            y.caso_prueba, y.correctos, y.incorrectos, y.opcional, y.agrupador
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 
		          0 incorrectos, 0 avance, casos.opcional, casos.agrupador
		    from sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_10_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
		   order by 1
	  );
	  
	drop table if exists tbl_detalle_casos_prueba_etapa_10_d;
	create temp table tbl_detalle_casos_prueba_etapa_10_d as
	(
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
   			   split_part(caso_prueba,'|',1) as nro,
			   split_part(caso_prueba,'|',2) as tipo_prueba,
			   split_part(caso_prueba,'|',3) as codigo_ambiente,
			   split_part(caso_prueba,'|',4) as codigo_sistema,
			   split_part(caso_prueba,'|',5) as nit_requerimiento,
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',6), 17) as cuis,
			   split_part(caso_prueba,'|',7) as sucursal_requerimiento,
			   split_part(caso_prueba,'|',8) as codigo_punto_venta,
			   split_part(caso_prueba,'|',9) as codigo_autorizacion,
			   split_part(caso_prueba,'|',10) as tipo_validacion,
			   split_part(caso_prueba,'|',11) as requisito_prueba,
			   split_part(caso_prueba,'|',12) as descripcion_prueba,
			   split_part(caso_prueba,'|',13) as resultado_esperado,
			   split_part(caso_prueba,'|',14) as solucion,
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional as opcional,
			   agrupador
		  from TEMPORAL_DETALLE_ETAPA_10_D order by agrupador, caso_prueba_id
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_etapa_10_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_11(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 11
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <20/08/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_porcentaje numeric(20,2) := 0;	
	
begin

	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_11_D;
	  create temp table TEMPORAL_LOGS_ETAPA_11_D as (
		  select LOGS.hash, logs.fecha_prueba fecha
		  from  sre_recaudaciones.sre_fac_log_11_anulaciones as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_11_D;
	  create temp table TEMPORAL_DETALLE_ETAPA_11_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional,y.documento_sector_id,y.hash,y.hash_descripcion
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional,x.documento_sector_id,x.hash,x.hash_descripcion
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_ETAPA_11_D as logs where logs.hash = casos.hash) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_ETAPA_11_D as logs where logs.hash = casos.hash) cant,
				         casos.opcional,casos.documento_sector_id,casos.hash,casos.hash_descripcion
				    from sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones as casos
				    where casos.estado_id = 'AC'
				    and documento_sector_id in ( select b.codigo_clasificador 
				 							     from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
											     inner join sre_recaudaciones.sre_fac_clasificadores b
											     on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
											     where sistema_id=p_sistema_id
											     and a.estado_tipo_documento_sistema_id = 1380
							     				 and a.estado_id='AC'
											   )
				     and exists (select 1 from TEMPORAL_LOGS_ETAPA_11_D as logs where logs.hash = casos.hash)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, y.opcional,y.documento_sector_id,y.hash,y.hash_descripcion	 
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 0 incorrectos, 0 avance, casos.opcional,casos.documento_sector_id,casos.hash,casos.hash_descripcion
		    from sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones as casos
		   where casos.estado_id = 'AC'
		   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_11_D as logs where logs.hash = casos.hash)
		   and documento_sector_id in ( select b.codigo_clasificador 
		 							     from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
									     inner join sre_recaudaciones.sre_fac_clasificadores b
									     on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
									     where sistema_id=p_sistema_id
									     and a.estado_tipo_documento_sistema_id = 1380
							     		 and a.estado_id='AC'
									   )
		   order by 1
	  );
	  
	 alter table TEMPORAL_DETALLE_ETAPA_11_D
	 add column descripcion_sector character varying;
	 update TEMPORAL_DETALLE_ETAPA_11_D 
	 set descripcion_sector =(select descripcion from sre_recaudaciones.sre_fac_clasificadores where agrupador='TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_DETALLE_ETAPA_11_D.documento_sector_id);
	 drop table if exists tbl_detalle_casos_prueba_etapa_11_d;
	 create temp table tbl_detalle_casos_prueba_etapa_11_d as
	 (
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
			   split_part(caso_prueba,'|',1) as nro,
			   split_part(caso_prueba,'|',2) as tipo_prueba,
			   split_part(caso_prueba,'|',3) as codigo_ambiente,
			   split_part(caso_prueba,'|',4) as documento_fiscal_paquete,
			   split_part(caso_prueba,'|',5) as documento_sector,			   
			   split_part(caso_prueba,'|',6) as codigo_emision,
			   split_part(caso_prueba,'|',7) as codigo_modalidad,
			   split_part(caso_prueba,'|',8) as motivo_evento,
			   split_part(caso_prueba,'|',9) as codigo_punto_venta,
			   split_part(caso_prueba,'|',10) as codigo_sistema,
			   split_part(caso_prueba,'|',11) as sucursal_requerimiento,
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',12), 15) as cuf,			   
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',13), 9) as cufd,			   
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',14), 9) as cuis,
			   split_part(caso_prueba,'|',15) as nit_requerimiento,
			   split_part(caso_prueba,'|',16) as numero_documento_fiscal,
			   split_part(caso_prueba,'|',17) as resultado_esperado,
			   split_part(caso_prueba,'|',18) as solucion,
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional as opcional,
			   hash,
			   hash_descripcion,
			   documento_sector_id sector,
			   descripcion_sector
		  from TEMPORAL_DETALLE_ETAPA_11_D order by caso_prueba_id 
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_etapa_11_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_12(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 12
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <20/08/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_porcentaje numeric(20,2) := 0;	
	
begin

	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_12_D;
	  create temp table TEMPORAL_LOGS_ETAPA_12_D as (
		  select LOGS.hash, logs.fecha_prueba fecha
		  from  sre_recaudaciones.sre_fac_log_12_reportes as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_12_D;
	  create temp table TEMPORAL_DETALLE_ETAPA_12_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional,y.documento_sector_id,y.hash,y.hash_descripcion
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional,x.documento_sector_id,x.hash,x.hash_descripcion
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_ETAPA_12_D as logs where logs.hash = casos.hash) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_ETAPA_12_D as logs where logs.hash = casos.hash) cant,
				         casos.opcional,casos.documento_sector_id,casos.hash,casos.hash_descripcion
				    from sre_recaudaciones.sre_fac_casos_prueba_12_reportes as casos
				    where casos.estado_id = 'AC'
				     and exists (select 1 from TEMPORAL_LOGS_ETAPA_12_D as logs where logs.hash = casos.hash)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, y.opcional,y.documento_sector_id,y.hash,y.hash_descripcion	 
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 0 incorrectos, 0 avance, casos.opcional,casos.documento_sector_id,casos.hash,casos.hash_descripcion
		    from sre_recaudaciones.sre_fac_casos_prueba_12_reportes as casos
		   where casos.estado_id = 'AC'
		   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_12_D as logs where logs.hash = casos.hash)
		   order by 1
	  );
	  
	 alter table TEMPORAL_DETALLE_ETAPA_12_D
	 add column descripcion_sector character varying;
	 update TEMPORAL_DETALLE_ETAPA_12_D 
	 set descripcion_sector =(select descripcion from sre_recaudaciones.sre_fac_clasificadores where agrupador='TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_DETALLE_ETAPA_12_D.documento_sector_id);
	 drop table if exists tbl_detalle_casos_prueba_etapa_12_d;
	 create temp table tbl_detalle_casos_prueba_etapa_12_d as
	 (
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
			   split_part(caso_prueba,'|',1) as nro,
			   split_part(caso_prueba,'|',2) as tipo_prueba,
			   split_part(caso_prueba,'|',3) as fecha_inicio_prueba,
			   split_part(caso_prueba,'|',4) as fecha_fin_prueba,
			   split_part(caso_prueba,'|',5) as codigo_sistema,			   
			   split_part(caso_prueba,'|',6) as nombre_sistema,
			   split_part(caso_prueba,'|',7) as version,
			   split_part(caso_prueba,'|',8) as sucursal_requerimiento,
			   split_part(caso_prueba,'|',9) as resultado_esperado,			 
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional as opcional,
			   hash,
			   hash_descripcion,
			   documento_sector_id sector,
			   descripcion_sector
		  from TEMPORAL_DETALLE_ETAPA_12_D order by caso_prueba_id 
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_etapa_12_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_3(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 3
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <26/07/2019>
AUTOR : Ivan Salas
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_resultado_match integer := 0;	
	
begin
	
	if((select count(1) 
		from sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo 
		where sistema_id=p_sistema_id 
		and caso_prueba_id is null and estado_id='AC') > 0 ) then
			v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_3_sincronizacion_catalogos(p_sistema_id) ;
	end if;							  
	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_3_D;
	  create temp table TEMPORAL_LOGS_ETAPA_3_D as (
		  select LOGS.hash, logs.fecha_prueba fecha, logs.agrupador
		  from  sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_3_D;
	  create temp table TEMPORAL_DETALLE_ETAPA_3_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional, y.agrupador, y.hash, y.hash_descripcion
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional, x.agrupador, x.hash, x.hash_descripcion
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_ETAPA_3_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_ETAPA_3_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador) cant,
				         casos.opcional, casos.agrupador, casos.hash, casos.hash_descripcion
				    from sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos as casos
				   where casos.estado_id = 'AC'
				     and exists (select 1 from TEMPORAL_LOGS_ETAPA_3_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, 
		            y.caso_prueba, y.correctos, y.incorrectos, y.opcional, y.agrupador, y.hash, y.hash_descripcion
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 
		          0 incorrectos, 0 avance, casos.opcional, casos.agrupador, casos.hash, casos.hash_descripcion
		    from sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_3_D as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
		   order by 1
	  );
	  
	drop table if exists tbl_detalle_casos_prueba_etapa_3_d;
	create temp table tbl_detalle_casos_prueba_etapa_3_d as
	(
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
   			   split_part(caso_prueba,'|',1) as nro,
			   split_part(caso_prueba,'|',2) as tipo_prueba,
			   split_part(caso_prueba,'|',3) as codigo_ambiente,
			   split_part(caso_prueba,'|',4) as codigo_sistema,
			   split_part(caso_prueba,'|',5) as nit_requerimiento,
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',6), 17) as cuis,
			   split_part(caso_prueba,'|',7) as sucursal_requerimiento,
			   split_part(caso_prueba,'|',8) as codigo_punto_venta,
			   split_part(caso_prueba,'|',9) as codigo_autorizacion,
			   split_part(caso_prueba,'|',10) as tipo_validacion,
			   split_part(caso_prueba,'|',11) as requisito_prueba,
			   split_part(caso_prueba,'|',12) as descripcion_prueba,
			   split_part(caso_prueba,'|',13) as resultado_esperado,
			   split_part(caso_prueba,'|',14) as solucion,
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional as opcional,
			   agrupador,
			   hash,
			   hash_descripcion
		  from TEMPORAL_DETALLE_ETAPA_3_D order by agrupador, caso_prueba_id
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_etapa_3_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_4(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 4
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	--p_etapa_certificacion_sistemas_id integer := 2854;
	--p_sistema_id bigint := 217;

	v_fecha_fin_prueba timestamp;
	v_porcentaje numeric(20,2) := 0;	
	
begin

	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_4_D;
	  create temp table TEMPORAL_LOGS_etapa_4_D as (
		  select LOGS.hash, logs.fecha_prueba fecha
		  from  sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_4_D;
	  create temp table TEMPORAL_DETALLE_ETAPA_4_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional, y.hash, y.hash_descripcion
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional, x.hash, x.hash_descripcion
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_ETAPA_4_D as logs where logs.hash = casos.hash) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_ETAPA_4_D as logs where logs.hash = casos.hash) cant,
				         casos.opcional, casos.hash, casos.hash_descripcion
				    from sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora as casos
				   where casos.estado_id = 'AC'
				     and exists (select 1 from TEMPORAL_LOGS_ETAPA_4_D as logs where logs.hash = casos.hash)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, y.opcional, y.hash, y.hash_descripcion
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 0 incorrectos, 0 avance, casos.opcional, casos.hash, casos.hash_descripcion
		    from sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_4_D as logs where logs.hash = casos.hash)
		   order by 1
	  );
	  
	drop table if exists tbl_detalle_casos_prueba_etapa_4_d;
	create temp table tbl_detalle_casos_prueba_etapa_4_d as
	(
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
			   split_part(caso_prueba,'|',1) as tipo_prueba,
			   split_part(caso_prueba,'|',2) as codigo_ambiente,
			   split_part(caso_prueba,'|',3) as codigo_sistema,
			   split_part(caso_prueba,'|',4) as nit_requerimiento,			   
			   sre_recaudaciones.sre_fac_dividir_cadena(split_part(caso_prueba,'|',5), 17) as cuis,
			   split_part(caso_prueba,'|',6) as sucursal_requerimiento,
			   split_part(caso_prueba,'|',7) as codigo_punto_venta,
			   split_part(caso_prueba,'|',8) as tipo_validacion,
			   split_part(caso_prueba,'|',9) as resultado_esperado,
			   split_part(caso_prueba,'|',10) as solucion,
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional as opcional,
			   hash,
			   hash_descripcion
		  from TEMPORAL_DETALLE_ETAPA_4_D order by caso_prueba_id 
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_etapa_4_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_5(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 5
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad integer :=0;
	v_cantidad_casos_incorrectos smallint := 0;
	
begin
	drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.*
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';
	
	
	v_fecha_fin_prueba := coalesce (
									(select fecha_fin_prueba
									 from   TEMPORAL_PRUEBA_SISTEMA
								    ), now()
								   );
								   
	v_fecha_inicio_prueba := (select fecha_inicio_prueba
							  from   TEMPORAL_PRUEBA_SISTEMA);							   
								   								   
	
	 --Nota: Creamos la tabla temporal de LOGS, de la correspondiente etapa donde se agrupa a los Logs con estado match igual a 1				   
	 drop table if exists TEMPORAL_LOGS;
	 
	 create temp table TEMPORAL_LOGS as
	 select distinct TBL_LOGS.caso_prueba_id, TBL_LOGS.hash as hash, count(*) as total_casos_realizados, 
	 	    sre_recaudaciones.sre_fac_obtener_fecha_caso_prueba_etapa_5(TBL_LOGS.hash, TBL_PRUEBAS_SISTEMAS.fecha_inicio_prueba, v_fecha_fin_prueba) as fecha_prueba
	 from TEMPORAL_PRUEBA_SISTEMA as TBL_PRUEBAS_SISTEMAS,
	 (  
		select LOGS.caso_prueba_id, LOGS.hash
		from   sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
		       inner join 
		       sre_recaudaciones.sre_fac_log_5_eventos_significativos as LOGS
		on  CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id and CASOS_PRUEBAS.hash = logs.hash
		where  LOGS.sistema_id = p_sistema_id
		and    LOGS.estado_match = 1
		and    CASOS_PRUEBAS.estado_id = 'AC'
		and    LOGS.fecha_prueba >= v_fecha_inicio_prueba 
		and    LOGS.fecha_prueba <= v_fecha_fin_prueba	
	 ) as TBL_LOGS
	 group by TBL_LOGS.caso_prueba_id, TBL_LOGS.hash, sre_recaudaciones.sre_fac_obtener_fecha_caso_prueba_etapa_5(TBL_LOGS.hash, TBL_PRUEBAS_SISTEMAS.fecha_inicio_prueba, v_fecha_fin_prueba);
	 
	select count(*) into v_cantidad
	from TEMPORAL_LOGS;
	
	--NOTA: Obtenemos los casos de pruebas realizados y los que falta
	drop table if  exists TEMPORAL_DETALLE;
	
	create temp table TEMPORAL_DETALLE  as
	( 
	   select CASOS_PRUEBAS.caso_prueba_id, 
	   		  CASOS_PRUEBAS.caso_prueba, 
	   		  CASOS_PRUEBAS.hash, 
	   		  CASOS_PRUEBAS.total_pruebas, 
	   		  CASOS_PRUEBAS.opcional, 
	   		  LOGS.total_casos_realizados,
	   		  LOGS.fecha_prueba
	   from   sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
		      left join
		   	  TEMPORAL_LOGS as LOGS	
	   on     CASOS_PRUEBAS.hash = LOGS.hash
	);
		
	--Nota: Para obtener el detalle de las pruebas de la etapa 5, cramos la tabla tbl_detalle_casos_prueba_detalle_etapa5
	drop table if exists TEMPORAL_DETALLE_ETAPA5;
	
	create temp table TEMPORAL_DETALLE_ETAPA5 as
	(
		select coalesce((TO_CHAR(DETALLE.fecha_prueba,'dd-mm-yyyy')), '') as fecha_prueba,
			   DETALLE.hash as hash,
			   CASOS_PRUEBAS.hash_descripcion as hash_descripcion,
			   DETALLE.caso_prueba_id, 
		       split_part(DETALLE.caso_prueba,'|',2) as tipo_evento,
			   split_part(DETALLE.caso_prueba,'|',3) as motivo_evento,
			   split_part(DETALLE.caso_prueba,'|',4) as procedimiento_evento,
			   split_part(DETALLE.caso_prueba,'|',5) as descripcion_prueba_evento,
			   split_part(DETALLE.caso_prueba,'|',6) as parametro_evento,
			   split_part(DETALLE.caso_prueba,'|',7) as resultado_evento,
			   split_part(DETALLE.caso_prueba,'|',8) as accion_evento,
			   split_part(DETALLE.caso_prueba,'|',9) as nro,
			   coalesce (DETALLE.total_casos_realizados, 0) as cantidad_casos_correctos,
			   v_cantidad_casos_incorrectos as cantidad_casos_incorrectos,
			   DETALLE.total_pruebas as cantidad_casos_esperados,
			   DETALLE.opcional,
			   sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(DETALLE.total_casos_realizados::integer, CASOS_PRUEBAS.total_pruebas) as porcentaje_avance,
			   coalesce((select true where sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(DETALLE.total_casos_realizados::integer, CASOS_PRUEBAS.total_pruebas) >= 100), false) as satisfactorio
		from   TEMPORAL_DETALLE as DETALLE
			 inner join
			 sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
	    on   DETALLE.caso_prueba_id = CASOS_PRUEBAS.caso_prueba_id
	    
	);
															   														   
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from TEMPORAL_DETALLE_ETAPA5
		  		order by nro::int4 asc
		  	   ) tbl);	  		  			 
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_etapa_9(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 9
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;
	v_total_log_sistema_id integer:=0;
	v_ha_finalizado bool:=false;
	v_etapa_certificacion_sistemas_id integer:=3052;
begin	
		perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_9(p_sistema_id);	
	
		--Nota: Tabla temporal para almacenar los CASOS DE PRUEBA asignados al sistema 
		drop table if exists TEMPORAL_PRUEBAS;
		
		create temp table TEMPORAL_PRUEBAS
		as
		(
							
--**********XML XSD
						select 
						coalesce(pruebas.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						pruebas.hash as hash,
						pruebas.hash_descripcion as hash_descripcion,
						pruebas.opcional as opcional,
						pruebas.total_pruebas as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						PRUEBAS.documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						split_part(pruebas.caso_prueba, '|',10)::varchar as documento_sector,						
						--split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_emision,
						split_part(pruebas.caso_prueba, '|',9)::varchar as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						'' as codigo_punto_venta,
						'' codigo_sistema,
						'' as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,
						'' as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,						
						'' as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						split_part(pruebas.caso_prueba, '|',3)::varchar as parametro_evento,
						split_part(pruebas.caso_prueba, '|',6)::varchar as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',7)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',8)::varchar as solucion,
						--split_part(pruebas.caso_prueba, '|',6)::varchar as tipo_validacion,
						split_part(pruebas.caso_prueba, '|',5)::varchar as tipo_validacion,						
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						split_part(pruebas.caso_prueba, '|',4)::varchar as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
						from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
						where pruebas.agrupador='VALIDACION XML-XSD' and
						  pruebas.estado_id='AC'  and 
						  pruebas.documento_sector_id in (select CLA.codigo_clasificador 
														  from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOC inner join sre_recaudaciones.sre_fac_clasificadores CLA 
															on DOC.tipo_documento_factura_id=CLA.codigo_clasificador_equivalente			
															where 
															DOC.sistema_id=p_sistema_id and
															DOC.estado_id='AC' and 
															CLA.estado_id='AC'
														  )
			 );

		    v_ha_finalizado:=sre_recaudaciones.sre_fac_pru_comprobar_etapa_2('ha_finalizado', p_sistema_id, v_etapa_certificacion_sistemas_id);
		    		    		    
		    --Nota: Obtiene los registros LOGS 
		    drop table if exists TEMPORAL_LOGS;
		
			create temp table TEMPORAL_LOGS
			as	 
			select DISTINCT 
			LOGS.log_id, 
			LOGS.sistema_id,
			LOGS.nit_cliente,
			LOGS.hash,
			LOGS.hash_descripcion,
			LOGS.caso_prueba_id, 
			LOGS.documento_sector_id, 
			LOGS.id_recepcion, 
			LOGS.fecha_prueba, 
			LOGS.estado_match 
			from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS 
			where 
			LOGS.sistema_id=p_sistema_id and
			LOGS.nit_cliente=p_nit and --TODO: renombra el campo persona_contribuyente_id a nit_cliente
			LOGS.estado_id='AC' and		
			LOGS.fecha_prueba between sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_sistema_id, 'I', v_etapa_certificacion_sistemas_id) and sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_sistema_id, 'F', v_etapa_certificacion_sistemas_id) and			                          
			v_ha_finalizado=false
			;	 													  
						
			--Nota: Calcular el total de pruebas correctas e incorrectas por cada caso de prueba.	
			update TEMPORAL_PRUEBAS 
			set 
			cantidad_casos_correctos=(
				select count(TEMPORAL_LOGS.*)
				from TEMPORAL_LOGS
				where 
				TEMPORAL_LOGS.caso_prueba_id = TEMPORAL_PRUEBAS.caso_prueba_id and
				TEMPORAL_PRUEBAS.estado_match=1 and
				TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash --and
				--TEMPORAL_LOGS.documento_sector_id=TEMPORAL_PRUEBAS.documento_sector_id
			),
			cantidad_casos_incorrectos=0,
			estado_match=(
				select TEMPORAL_LOGS.estado_match
				from TEMPORAL_LOGS
				where 
				TEMPORAL_LOGS.caso_prueba_id = TEMPORAL_PRUEBAS.caso_prueba_id and
				TEMPORAL_PRUEBAS.estado_match=1 and
				TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash --and
				--TEMPORAL_LOGS.documento_sector_id=TEMPORAL_PRUEBAS.documento_sector_id
				limit 1
			);
			 											
			--Nota: Calcular el porcentaje de prueba OBLIGATORIO		  		
			update TEMPORAL_PRUEBAS 
			set 
				porcentaje_avance=  ((				
				case 
					when (TEMPORAL_PRUEBAS.cantidad_casos_correctos-TEMPORAL_PRUEBAS.cantidad_casos_incorrectos)<0 then 0
					else (TEMPORAL_PRUEBAS.cantidad_casos_correctos-TEMPORAL_PRUEBAS.cantidad_casos_incorrectos)
				end					
				)*100)/TEMPORAL_PRUEBAS.cantidad_casos_esperados
			where TEMPORAL_PRUEBAS.opcional=0;
			
			update TEMPORAL_PRUEBAS
			set documento_sector =(select descripcion from sre_recaudaciones.sre_fac_clasificadores where agrupador='TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_PRUEBAS.documento_sector_id);
			
		
			return query  
				      (select row_to_json(tbl) :: varchar
					  from (
						
					  select 	
					  	caso_prueba_id,
						sistema_id,
						estado_match,
						fecha_descripcion_prueba,
						hash,
						hash_descripcion,
						opcional,
						cantidad_casos_esperados,
						cantidad_casos_correctos,
						cantidad_casos_incorrectos,
						porcentaje_avance,
						satisfactorio,
						
						archivo,
						codigo_ambiente,
						codigo_autorizacion,
						documento_fiscal_paquete,
						documento_sector,
						codigo_emision,
						codigo_modalidad,
						motivo_evento,
						codigo_punto_venta,
						codigo_sistema,
						sucursal_requerimiento,
						cuf,
						cufd,
						cuis,
						descripcion_descripcion_prueba,
						direccion,						
						fecha_envio,
						nit_requerimiento,
						nro,
						numero_documento_fiscal,
						parametro_evento,
						descripcion_prueba,
						requisito_prueba,
						resultado_esperado,
						solucion,
						tipo_validacion,						
						tipo_prueba,
						valor_parametro,
						prueba,
						agrupador
						from TEMPORAL_PRUEBAS
						
					  	   ) tbl);											 								
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_obtener_detalle_casos_prueba_etapa_9');
			return;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_prueba_obtencion_cufd(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de obtencion cufd
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <18/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;			
	v_resultado_match  integer := 0;
	
begin
	
	if((select count(1) 
		from sre_recaudaciones.sre_fac_log_obtencion_cufd 
		where sistema_id=p_sistema_id 
		and caso_prueba_id is null and estado_id='AC') > 0 ) then
			v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_obtencion_cufd(p_sistema_id) ;
	end if;
	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_CUFD_D;
	  create temp table TEMPORAL_LOGS_CUFD_D as (
		  select LOGS.hash, logs.fecha_prueba fecha
		  from  sre_recaudaciones.sre_fac_log_obtencion_cufd as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_CUFD_D;
	  create temp table TEMPORAL_DETALLE_CUFD_D as (
	  	  select y.caso_prueba_id,y.fecha, (case when y.total_pruebas > y.correctos then false else true end) concluido,
	  	         y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, sum(y.correctos)/sum(y.total_pruebas)*100 avance,
	  	         y.opcional, y.hash, y.hash_descripcion
	  	    from (
			  select x.caso_prueba_id, x.fecha, x.caso_prueba, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) correctos, 
			         0 incorrectos, x.opcional, x.hash, x.hash_descripcion
			    from (
				  select casos.caso_prueba_id, 
				         (select max(fecha) fecha from TEMPORAL_LOGS_CUFD_D as logs where logs.hash = casos.hash) fecha, 
				         casos.caso_prueba, 
				         casos.total_pruebas, 
				         (select count(*) cant from TEMPORAL_LOGS_CUFD_D as logs where logs.hash = casos.hash) cant,
				         casos.opcional, casos.hash, casos.hash_descripcion
				    from sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd as casos
				   where casos.estado_id = 'AC'
				     and exists (select 1 from TEMPORAL_LOGS_CUFD_D as logs where logs.hash = casos.hash)
			   ) x
		   ) y	   
		   group by y.caso_prueba_id, y.fecha, (case when y.total_pruebas > y.correctos then false else true end), y.total_pruebas, y.caso_prueba, y.correctos, y.incorrectos, y.opcional, y.hash, y.hash_descripcion
		   union
		   select casos.caso_prueba_id, null fecha, false concluido, casos.total_pruebas, casos.caso_prueba, 0 correctos, 0 incorrectos, 0 avance, casos.opcional, casos.hash, casos.hash_descripcion
		    from sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_CUFD_D as logs where logs.hash = casos.hash)
		   order by 1
	  );
	  
	drop table if exists tbl_detalle_casos_prueba_obtencion_cufd_d;
	create temp table tbl_detalle_casos_prueba_obtencion_cufd_d as
	(
		select to_char(fecha,'DD-MM-YYYY') as fecha_registro,
		   	   concluido as satisfactorio,
			   total_pruebas as cantidad_casos_esperados,
			   split_part(caso_prueba,'|',1) as tipo_prueba,
			   split_part(caso_prueba,'|',2) as codigo_sistema,
			   split_part(caso_prueba,'|',3) as modalidad_requerimiento,
			   split_part(caso_prueba,'|',4) as nit_requerimiento,
			   split_part(caso_prueba,'|',5) as cuis,
			   split_part(caso_prueba,'|',6) as sucursal_requerimiento,
			   split_part(caso_prueba,'|',7) as codigo_punto_venta,
			   split_part(caso_prueba,'|',8) as resultado_esperado,
			   split_part(caso_prueba,'|',9) as solucion,
			   correctos as cantidad_casos_correctos,
			   incorrectos as cantidad_casos_incorrectos,
			   round(avance,0) as porcentaje_avance,
			   opcional as opcional,
			   hash,
			   hash_descripcion
		  from TEMPORAL_DETALLE_CUFD_D order by caso_prueba_id 
	);
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select * 
		  		from tbl_detalle_casos_prueba_obtencion_cufd_d
		  	   ) tbl);

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_casos_pruebas_etapa_10(p_sistema_id bigint, p_etapa_certificacion_id integer)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de casos de prueba de la etapa 10 - envio masivo
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación
FECHA CREACION : <29/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_cantidad_esperada integer := 0;
	v_cantidad_posibles_respuestas integer := 2;---2 : porque solo existe 1) correctos y 2) incorrectos
	v_cantidad integer := 0;

begin	
	
												  
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	  create temp table TEMPORAL_PRUEBA_SISTEMA as 
			  									 select PRUEBA_SISTEMA.*
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';
													  
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA
									    ), now()
									  );
	
	  v_fecha_inicio_prueba := (
	  							select fecha_inicio_prueba
	  							from TEMPORAL_PRUEBA_SISTEMA
	  							);
	  

	
	--exception 
	--when others
		--then
		 --raise info 'Error Name:%', SQLERRM;
		 --raise info 'Error State:%', SQLSTATE;
		 
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_detalle_factura_ventas(p_factura_id bigint, p_tipo_documento_sector_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función permite la búsqueda de la información de la factura a travez del número de documento y el rango de 
				fechas inicio - fin y el tipo de documento fiscal para los siguientes documentos fiscales:
				
				FACTURA:
					- FACTURA ESTANDAR
					- FACTURA SECTORES EDUCATIVOS
					- FACTURA HIDROCARBUROS
					- FACTURA DE ALQUILER DE BIENES INMUEBLES	
					- FACTURA DE SERVICIOS BASICOS	
					- FACTURA DE ENTIDADES FINANCIERAS
					- FACTURA DE HOTELES
					- FACTURAS DE HOSPITALES/CLINICAS
					- FACTURA DE JUEGOS DE AZAR
					- FACTURA DE ARTISTAS INTERNACIONALES
					- FACTURA PREVALORADA DIGITAL
					- FACTURA PRODUCTOS ALCANZADOS POR EL ICE
					- FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
					
				NOTA FISCAL:
					- FACTURA COMERCIAL DE EXPORTACION	
					- FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION				
					- NOTA FISCAL DE ZONA FRANCA
					- NOTA FISCAL DE ARTISTAS NACIONALES
					- NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD 
					- NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA 
					- NOTA FISCAL DE EXPORTACIÓN DE SERVICIO TURÍSTICO Y HOSPEDAJE
					- NOTA FISCAL TASA CERO
					- FACTURA COMERCIAL DE EXPORTACIÓN YPFB
					- FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
					- FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
					- FACTURA VENTA INTERNA MINERALES
					
				DOCUMENTO EQUIVALENTE:	
					--NOTA DE CREDITO-DEBITO
					--NOTA DE CONCILIACION
					--BOLETO AEREO
PARAMETROS INGRESO
    		p_numero_documento
    		p_fecha_emision_inicio
    		p_fecha_emision_fin
    		p_tipo_documento_fiscal_id
    		
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <25/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se agregó los documentos sectores de Telecomunicaciones y Debito Credito SFV
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<29/12/2019>
AUTOR DE LA MODIFICACION : :<junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	v_nro_casos_prueba integer :=0;
	v_resultado bigint:=0;	
	v_sql varchar;
begin
	drop table if exists temporal_detalle_facturas_ventas;
	CREATE TEMPORARY TABLE temporal_detalle_facturas_ventas
	(
		usuario_registro_id bigint,
		usuario_ultima_modificacion_id bigint,
		"facturaId" bigint,
		producto_id character varying,
		producto_sin_id bigint,
		actividad_economica_id bigint,
	   	numero_serie character varying, 
		descripcion character varying,
		cantidad numeric,
		precio_unitario numeric, 
		monto_descuento numeric, 
		subtotal numeric, 
		fecha_registro timestamp,
		fecha_ultima_modificacion timestamp,
		estado_id character varying,
		unidad_medida character varying,
		imei character varying
	) ;
  
	case
		when p_tipo_documento_sector_id = 1 then--Nota: FACTURA ESTANDAR
			 										 			
			insert into temporal_detalle_facturas_ventas
	 		select		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_estandar_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			imei
			from sre_recaudaciones.sre_fac_detalles_ventas_estandares 
			where venta_estandar_id=p_factura_id;
     
		when p_tipo_documento_sector_id = 2  then--Nota: FACTURA SECTORES EDUCATIVOS
			
			insert into temporal_detalle_facturas_ventas
			SELECT 		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_colegio_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_colegios
			where venta_colegio_id=p_factura_id;		
				
		when p_tipo_documento_sector_id = 3 then--Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			 								
			insert into temporal_detalle_facturas_ventas
			select
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_alquiler_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_alquileres
			where venta_alquiler_id=p_factura_id;
		
		when p_tipo_documento_sector_id = 4 then--Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			 			
			insert into temporal_detalle_facturas_ventas
			SELECT 							   		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_combustible_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
	        from sre_recaudaciones.sre_fac_detalles_ventas_combustibles
			where venta_combustible_id=p_factura_id;

		when p_tipo_documento_sector_id = 5  then--Nota: FACTURA DE SERVICIOS BASICOS
			 
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_servicio_id "facturaId",  
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie,
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_servicios
			where venta_servicio_id=p_factura_id;
				
		when p_tipo_documento_sector_id = 6 then--Nota: FACTURA DE EMBOTELLADORAS 
			 			
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_embotelladora_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_embotelladoras
			where venta_embotelladora_id=p_factura_id;
					
		when p_tipo_documento_sector_id = 7 then--Nota: FACTURA DE ENTIDADES FINANCIERAS
			 	
				insert into temporal_detalle_facturas_ventas
				select		
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 
				venta_banco_id "facturaId", 
				producto_id,
				producto_sin_id, 
				actividad_economica_id,
				'' numero_serie, 
				descripcion, 
				cantidad,
				precio_unitario, 
				monto_descuento, 
				subtotal, 
				fecha_registro, 
				fecha_ultima_modificacion,
				estado_id, 
				unidad_medida,
				'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_bancos				
			where venta_banco_id=p_factura_id;				    
							
		when p_tipo_documento_sector_id = 8 then--Nota: FACTURA DE HOTELES			
		
			insert into temporal_detalle_facturas_ventas
			SELECT 		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_hotel_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			0 cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_hoteles
			where venta_hotel_id=p_factura_id;
			
		when p_tipo_documento_sector_id = 9 then--Nota: FACTURAS DE HOSPITALES/CLINICAS			 
 
			insert into temporal_detalle_facturas_ventas
	 		select		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_hospital_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_hospitales 
			where venta_hospital_id =p_factura_id;
		
		when p_tipo_documento_sector_id = 10 then--Nota: FACTURA DE JUEGOS DE AZAR			

			insert into temporal_detalle_facturas_ventas
			SELECT 			
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_juego_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_juegos
			where venta_juego_id =p_factura_id;
		
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 

			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_espectaculo_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_espectaculos
			where venta_espectaculo_id =p_factura_id;
				
				
		--add 20190409 jf
		when p_tipo_documento_sector_id = 12 then--Nota: FACTURA COMERCIAL DE EXPORTACION			 

			insert into temporal_detalle_facturas_ventas
			SELECT 			
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_exportacion_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_exportaciones
			where venta_exportacion_id =p_factura_id;	

		when p_tipo_documento_sector_id = 13 then--Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			 			
			insert into temporal_detalle_facturas_ventas
			SELECT 		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_libre_consignacion_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei
			from sre_recaudaciones.sre_fac_detalles_ventas_libres_consignaciones
			where venta_libre_consignacion_id = p_factura_id;
			
		when p_tipo_documento_sector_id = 14 then --Nota: NOTA FISCAL DE ZONA FRANCA			
	
			insert into temporal_detalle_facturas_ventas
			SELECT 	
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_zona_franca_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei		
			from sre_recaudaciones.sre_fac_detalles_ventas_zonas_francas
			where venta_zona_franca_id = p_factura_id;
			
		when p_tipo_documento_sector_id = 15 then--Nota: NOTA FISCAL DE ARTISTAS NACIONALES			
		
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_espectaculo_nacional_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei		
			from sre_recaudaciones.sre_fac_detalles_ventas_espectaculos_nacionales
			where venta_espectaculo_nacional_id = p_factura_id;

		when p_tipo_documento_sector_id = 16 then--Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			
			insert into temporal_detalle_facturas_ventas
			SELECT 			
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_seguridad_alimentaria_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_seguridades_alimentarias
			where venta_seguridad_alimentaria_id = p_factura_id;
						
		when p_tipo_documento_sector_id = 17 then--Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			
			insert into temporal_detalle_facturas_ventas
			SELECT 	
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_moneda_extranjera_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_monedas_extranjeras
			where venta_moneda_extranjera_id = p_factura_id;
			

		when p_tipo_documento_sector_id = 18  then--Nota: NOTA DE CREDITO-DEBITO			
		        
			insert into temporal_detalle_facturas_ventas
			SELECT 
			--(usuario_registro_id, usuario_ultima_modificacion_id, nota_credito_debito_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida, tipo_detalle_transaccion)
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			nota_credito_debito_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei				    
        	from sre_recaudaciones.sre_fac_detalles_notas_creditos
			where nota_credito_debito_id = p_factura_id;					
			
		when p_tipo_documento_sector_id = 19 then--Nota: NOTA DE CONCILIACION
										
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			nota_conciliacion_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_notas_conciliaciones
			where nota_conciliacion_id = p_factura_id;		
			
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO (No tiene detalle)??????????????????
			then
					
				
		when p_tipo_documento_sector_id = 21 then--Nota: NOTA FISCAL TURISMO RECEPTIVO
			
			insert into temporal_detalle_facturas_ventas		
			SELECT 			
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_turismo_receptivo_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			0 cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_turismos_receptivos
			where venta_turismo_receptivo_id = p_factura_id;	
	
		when p_tipo_documento_sector_id = 22 then--Nota: NOTA FISCAL TASA CERO
		
			insert into temporal_detalle_facturas_ventas		
			SELECT 		
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_tasa_cero_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_tasas_ceros
			where venta_tasa_cero_id = p_factura_id;
	
		when p_tipo_documento_sector_id = 23 then--Nota: FACTURA HIDROCARBUROS
							 
			insert into temporal_detalle_facturas_ventas
			SELECT 			
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_hidrocarburo_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_hidrocarburos
			where venta_hidrocarburo_id = p_factura_id;	
							
		when p_tipo_documento_sector_id = 24 then--Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB			
	  
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_exportacion_ypfb_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			0 precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei				
			from sre_recaudaciones.sre_fac_detalles_ventas_exportaciones_ypfb
			where venta_exportacion_ypfb_id = p_factura_id;
				
			
		when p_tipo_documento_sector_id = 25 then--Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES (Pendiente)
			
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_exportacion_minera_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			0 cantidad,
			precio_unitario, 
			0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida1,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_exportaciones_mineras
			where venta_exportacion_minera_id = p_factura_id;
		
		when p_tipo_documento_sector_id = 26 then--Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			
			--(usuario_registro_id, usuario_ultima_modificacion_id, venta_libre_consignacion_ypfb_id, actividad_economica_id, producto_sin_id, producto_id, partida_arancelaria, descripcion, cantidad, precio_unitario, unidad_medida, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)
			insert into temporal_detalle_facturas_ventas
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_libre_consignacion_ypfb_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_libres_consignaciones_ypfb
			where venta_libre_consignacion_ypfb_id = p_factura_id;
		
		when p_tipo_documento_sector_id = 27 then--Nota: FACTURA VENTA INTERNA MINERALES
							 				
			insert into temporal_detalle_facturas_ventas	
			SELECT 
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_minera_interna_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			0 cantidad,
			precio_unitario, 
			0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			unidad_medida,
			'' imei			
			from sre_recaudaciones.sre_fac_detalles_ventas_mineras_internas
			where venta_minera_interna_id = p_factura_id;
						
		when p_tipo_documento_sector_id = 28 then--Nota: FACTURA PREVALORADA DIGITAL
				
			insert into temporal_detalle_facturas_ventas
			SELECT 
			--(usuario_registro_id, usuario_ultima_modificacion_id, prevalorada_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			prevalorada_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			'' unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_prevaloradas
			where prevalorada_id = p_factura_id;	
		
		when p_tipo_documento_sector_id = 29 then--Nota: TELECOMUNICACIÓN
				
			insert into temporal_detalle_facturas_ventas
			SELECT 
			--(usuario_registro_id, usuario_ultima_modificacion_id, prevalorada_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			venta_telecomunicacion_id "facturaId", 
			producto_id,
			producto_sin_id, 
			actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			'' unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_ventas_telecomunicaciones
			where venta_telecomunicacion_id = p_factura_id;	
		
		when p_tipo_documento_sector_id = 30 then--Nota: SFV
				
		insert into temporal_detalle_facturas_ventas
			SELECT 
			--(usuario_registro_id, usuario_ultima_modificacion_id, prevalorada_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id)
			usuario_registro_id, 
			usuario_ultima_modificacion_id, 
			nota_credito_debito_sfv_id "facturaId", 
			'' producto_id,
			0 producto_sin_id, 
			0 actividad_economica_id,
			'' numero_serie, 
			descripcion, 
			cantidad,
			precio_unitario, 
			 0 monto_descuento, 
			subtotal, 
			fecha_registro, 
			fecha_ultima_modificacion,
			estado_id, 
			'' unidad_medida,
			'' imei	
			from sre_recaudaciones.sre_fac_detalles_notas_creditos_sfv
			where nota_credito_debito_sfv_id = p_factura_id;
		
		else 
		
	end case;

	return query (select row_to_json(tbl1) :: character varying 
      			 from (	select		
						usuario_registro_id "usuarioRegistroId", 
						usuario_ultima_modificacion_id "usuarioUltimaModificacionId", 
						"facturaId", 
						producto_id "productoId",
						producto_sin_id "productoSinId", 
						actividad_economica_id "actividadEconomicaId",
						numero_serie "numeroSerie", 
						descripcion, 
						cantidad,
						precio_unitario "precioUnitario", 
						monto_descuento "montoDescuento", 
						subtotal "subTotal", 
						to_char(fecha_registro,'YYYY-MM-DD') "fechaRegistro",						
						to_char(fecha_ultima_modificacion,'YYYY-MM-DD') "fechaUltimaModificacion",
						estado_id "estadoId", 
						unidad_medida "unidadMedida",
						imei
						from temporal_detalle_facturas_ventas	
      			      ) tbl1
				 );

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_etapas_por_sistema(p_sistema_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 20/05/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar;
	i integer;
	v_etapas_descripcion varchar[] := array['Generacion CUF', 'Consumo Servicios','Validaciones Generales XML/XSD','Sincronizacion de Catalogos',
											'Sincronizacion de fecha y hora','Eventos Significativos','Envio Paquetes','Firma Digital'];	
	v_sistema_id bigint := 37;
	
	-------------------
	v_etapas_casos_prueba integer[] := array[0,1,2,3,4,5,6,7];
	v_contador_consulta integer :=0;	
	v_resultado varchar;
	
begin
	foreach i in array v_etapas_casos_prueba
	loop
		v_sql := (sre_recaudaciones.sre_fac_ope_verifica_registros_en_casos_prueba(i,1));
		execute v_sql using p_sistema_id into v_contador_consulta;
		
		
		if(v_contador_consulta > 0)then
			v_resultado := concat(v_resultado, i ,' - ',v_etapas_descripcion[i+1], ',');
		end if;
		
	end loop;

	return v_resultado;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_facturas_ventas(p_numero_documento character varying, p_fecha_emision_inicio character varying, p_fecha_emision_fin character varying, p_tipo_documento_fiscal_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función permite la búsqueda de la información de la factura a travez del número de documento y el rango de 
				fechas inicio - fin y el tipo de documento fiscal para los siguientes documentos fiscales:
				
				FACTURA:
					- FACTURA ESTANDAR
					- FACTURA SECTORES EDUCATIVOS
					- FACTURA HIDROCARBUROS
					- FACTURA DE ALQUILER DE BIENES INMUEBLES	
					- FACTURA DE SERVICIOS BASICOS	
					- FACTURA DE ENTIDADES FINANCIERAS
					- FACTURA DE HOTELES
					- FACTURAS DE HOSPITALES/CLINICAS
					- FACTURA DE JUEGOS DE AZAR
					- FACTURA DE ARTISTAS INTERNACIONALES
					- FACTURA PREVALORADA DIGITAL
					- FACTURA PRODUCTOS ALCANZADOS POR EL ICE
					- FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
					
				NOTA FISCAL:
					- FACTURA COMERCIAL DE EXPORTACION	
					- FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION				
					- NOTA FISCAL DE ZONA FRANCA
					- NOTA FISCAL DE ARTISTAS NACIONALES
					- NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD 
					- NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA 
					- NOTA FISCAL DE EXPORTACIÓN DE SERVICIO TURÍSTICO Y HOSPEDAJE
					- NOTA FISCAL TASA CERO
					- FACTURA COMERCIAL DE EXPORTACIÓN YPFB
					- FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
					- FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
					- FACTURA VENTA INTERNA MINERALES
					
				DOCUMENTO EQUIVALENTE:	
					--NOTA DE CREDITO-DEBITO
					--NOTA DE CONCILIACION
					--BOLETO AEREO
PARAMETROS INGRESO
    		p_numero_documento
    		p_fecha_emision_inicio
    		p_fecha_emision_fin
    		p_tipo_documento_fiscal_id
    		
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <25/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a agregar los siguientes parámetros de salide de acuerdo a los siguientes documentos sectores:
				 FACTURA SECTORES EDUCATIVOS: nombre_estudiante
				 NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA: tipo_cambio, tipo_cambio_oficial y monto_diferencia_tipo_cambio
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<30/09/2019>
AUTOR DE LA MODIFICACION : junior.flores
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	v_nro_casos_prueba integer :=0;
begin
	drop table if exists temporal_facturas_ventas;
	CREATE TEMPORARY TABLE temporal_facturas_ventas
	(
		cuf character varying,
		"facturaId" bigint,
		nit_emisor bigint,
	    direccion character varying,
	    numero_documento character varying,
	    nombre_razon_social character varying,
	    monto_total numeric,
	    fecha_emision timestamp,
	    numero_factura bigint,
	    nombre_estudiante character varying,
	    tipo_cambio numeric,
	    tipo_cambio_oficial numeric,
	    monto_diferencia_tipo_cambio numeric,	    
	    tipo_documento_sector_id bigint
	) ;
  
	case when p_tipo_documento_fiscal_id=345 then --FACTURA	
		insert into temporal_facturas_ventas
		select tbl.cuf, tbl."facturaId", tbl.nit_emisor, tbl.direccion, tbl.numero_documento, tbl.nombre_razon_social, tbl.monto_total, tbl.fecha_emision, tbl.numero_factura, tbl.nombre_estudiante, tbl.tipo_cambio, tbl.tipo_cambio_oficial, tbl.monto_diferencia_tipo_cambio, tbl.tipo_documento_sector_id
		from (  
				select cuf, venta_estandar_id "facturaId", nit_emisor, direccion,numero_documento, nombre_razon_social, monto_total,  fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_estandares
				
				union
				
				SELECT cuf,venta_colegio_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_colegios
				
				union
				
				SELECT cuf,venta_hidrocarburo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hidrocarburos
				
				union
				
				SELECT cuf,venta_alquiler_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_alquileres
				
				union
				
				SELECT cuf,venta_servicio_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_servicios
				
				union
				
				SELECT cuf,venta_banco_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_bancos
				
				union
				
				SELECT cuf,venta_hotel_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hoteles
				
				union
				
				SELECT cuf,venta_hospital_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hospitales
				
				union
				
				SELECT cuf,venta_juego_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_juegos
				
				union
				
				SELECT cuf,venta_espectaculo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_espectaculos
				
				union
				
				SELECT cuf,punto_venta_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_embotelladoras
				
				union
				
				SELECT cuf,venta_combustible_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_combustibles
				
				/* TODO: No existe numero_documento				
				SELECT prevalorada_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_prevaloradas
				*/
			 ) tbl
		where tbl.numero_documento=p_numero_documento
		and to_char(tbl.fecha_emision,'YYYY-MM-DD') >= p_fecha_emision_inicio 
		and to_char(tbl.fecha_emision,'YYYY-MM-DD') <= p_fecha_emision_fin;
	
	when p_tipo_documento_fiscal_id=671 then --NOTA FISCAL	
		insert into temporal_facturas_ventas
		--select tbl."facturaId",tbl.nit_emisor, tbl.direccion, tbl.numero_documento, tbl.nombre_razon_social, tbl.monto_total, tbl.fecha_emision , tbl.numero_factura, tbl.tipo_documento_sector_id
		select tbl.cuf, tbl."facturaId", tbl.nit_emisor, tbl.direccion, tbl.numero_documento, tbl.nombre_razon_social, tbl.monto_total, tbl.fecha_emision, tbl.numero_factura, tbl.nombre_estudiante, tbl.tipo_cambio, tbl.tipo_cambio_oficial, tbl.monto_diferencia_tipo_cambio, tbl.tipo_documento_sector_id
		from (  
				SELECT cuf,venta_moneda_extranjera_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, tipo_cambio, tipo_cambio_oficial, monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_monedas_extranjeras
				
				union
				
				SELECT cuf,venta_exportacion_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones
				/*
--				TODO: No existe nombre_razon_social
				SELECT venta_libre_consignacion_id "facturaId", nit_emisor, direccion, numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_libres_consignaciones
				*/
				union
				
				SELECT cuf,venta_zona_franca_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_zonas_francas
				
				union
				
				SELECT  cuf,venta_espectaculo_nacional_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales
				
				union
				
				select  cuf,venta_seguridad_alimentaria_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias
				
				union
				
				SELECT cuf,venta_turismo_receptivo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_turismos_receptivos
				
				union
				
				SELECT cuf,venta_tasa_cero_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_tasas_ceros
			
				union
				
				SELECT cuf,venta_exportacion_ypfb_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb
						
				union
				
				SELECT cuf,venta_exportacion_minera_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones_mineras
				/*
--				TODO: No existe nombre_razon_social
				SELECT venta_libre_consignacion_ypfb_id "facturaId", nit_emisor, direccion, numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb
				*/
				union
				
				SELECT cuf,venta_minera_interna_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_mineras_internas
	
			 ) tbl
		where tbl.numero_documento=p_numero_documento
		and to_char(tbl.fecha_emision,'YYYY-MM-DD') >= p_fecha_emision_inicio 
		and to_char(tbl.fecha_emision,'YYYY-MM-DD') <= p_fecha_emision_fin;
	
	when p_tipo_documento_fiscal_id=995 then --DOCUMENTO EQUIVALENTE
		insert into temporal_facturas_ventas
		select tbl.cuf, tbl."facturaId", tbl.nit_emisor, tbl.direccion, tbl.numero_documento, tbl.nombre_razon_social, tbl.monto_total, tbl.fecha_emision, tbl.numero_factura, tbl.nombre_estudiante, tbl.tipo_cambio, tbl.tipo_cambio_oficial, tbl.monto_diferencia_tipo_cambio, tbl.tipo_documento_sector_id		
		from (  
				SELECT cuf,nota_credito_debito_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total_original monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_creditos_debitos
				
				union
				
				SELECT cuf,nota_conciliacion_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total_original monto_total, fecha_emision ,numero_factura,'' nombre_estudiante, 0 tipo_cambio, 0 tipo_cambio_oficial, 0 monto_diferencia_tipo_cambio, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_conciliaciones
				
				union

				SELECT cuf,venta_boleto_aereo_id "facturaId", nit_emisor, '' direccion, numero_documento_beneficiario, nombre_razon_social_beneficiario, monto_total_boleto monto_total, fecha_emision ,numero_boleto_aereo, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_boletos_aereos
				
	
			 ) tbl
		where tbl.numero_documento=p_numero_documento
		and to_char(tbl.fecha_emision,'YYYY-MM-DD') >= p_fecha_emision_inicio 
		and to_char(tbl.fecha_emision,'YYYY-MM-DD') <= p_fecha_emision_fin;

	else
  		
	end case;

	alter table temporal_facturas_ventas add column "nombreRazonSocialNIT" varchar;
	
	update temporal_facturas_ventas set "nombreRazonSocialNIT"=(select a.nombres||' '||a.primer_apellido||' '||a.segundo_apellido "nombreRazonSocialNIT" 
											     from scn_contribuyentes.scn_per_personas_naturales a 
											     inner join scn_contribuyentes.scn_emp_contribuyentes c 
											     on (c.persona_contribuyente_id=a.persona_id)
												 where c.nit = temporal_facturas_ventas.nit_emisor 
												 
												 union 
												 
											     select b.razon_social "nombreRazonSocialNIT" 
											     from scn_contribuyentes.scn_per_personas_juridicas b 
											     inner join scn_contribuyentes.scn_emp_contribuyentes c 
											     on (c.persona_contribuyente_id=b.persona_id)
											     where c.nit = temporal_facturas_ventas.nit_emisor
											     );

	return query (select row_to_json(tbl1) ::character varying 
      			 from ((	
--  select cuf, tipo_documento_sector_id, "nombreRazonSocialNIT", "facturaId", nit_emisor "nitEmisor", direccion, nombre_razon_social "nombreRazonSocial", monto_total "montoTotal", extract(epoch from (select fecha_emision))"fechaEmision" ,numero_factura "numeroFactura", tipo_documento_sector_id "tipoDocumentoSectorId" 
select cuf, tipo_documento_sector_id, "nombreRazonSocialNIT", "facturaId", nit_emisor "nitEmisor", direccion, nombre_razon_social "nombreRazonSocial", monto_total "montoTotal", to_char (fecha_emision::timestamp at time zone 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS"Z"') "fechaEmision" ,numero_factura "numeroFactura", nombre_estudiante "nombreEstudiante", tipo_cambio "tipoCambio", tipo_cambio_oficial "tipoCambioOficial", monto_diferencia_tipo_cambio "montoDiferenciaTipoCambio", tipo_documento_sector_id "tipoDocumentoSectorId"
      			 																																														 											
      			 		 from temporal_facturas_ventas
      			 		 limit 50
      			      )) tbl1
				 );

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_facturas_ventas_publicas(p_cuf character varying, p_tipo_documento_sector_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función permite la búsqueda de la información de la factura a travez del número de documento y el rango de 
				fechas inicio - fin y el tipo de documento fiscal para los siguientes documentos fiscales:
				
				FACTURA:
					- FACTURA ESTANDAR
					- FACTURA SECTORES EDUCATIVOS
					- FACTURA HIDROCARBUROS
					- FACTURA DE ALQUILER DE BIENES INMUEBLES	
					- FACTURA DE SERVICIOS BASICOS	
					- FACTURA DE ENTIDADES FINANCIERAS
					- FACTURA DE HOTELES
					- FACTURAS DE HOSPITALES/CLINICAS
					- FACTURA DE JUEGOS DE AZAR
					- FACTURA DE ARTISTAS INTERNACIONALES
					- FACTURA PREVALORADA DIGITAL
					- FACTURA PRODUCTOS ALCANZADOS POR EL ICE
					- FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
					
				NOTA FISCAL:
					- FACTURA COMERCIAL DE EXPORTACION	
					- FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION				
					- NOTA FISCAL DE ZONA FRANCA
					- NOTA FISCAL DE ARTISTAS NACIONALES
					- NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD 
					- NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA 
					- NOTA FISCAL DE EXPORTACIÓN DE SERVICIO TURÍSTICO Y HOSPEDAJE
					- NOTA FISCAL TASA CERO
					- FACTURA COMERCIAL DE EXPORTACIÓN YPFB
					- FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
					- FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
					- FACTURA VENTA INTERNA MINERALES
					
				DOCUMENTO EQUIVALENTE:	
					--NOTA DE CREDITO-DEBITO
					--NOTA DE CONCILIACION
					--BOLETO AEREO
PARAMETROS INGRESO
    		p_numero_documento
    		p_fecha_emision_inicio
    		p_fecha_emision_fin
    		p_tipo_documento_fiscal_id
    		
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <25/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	v_nro_casos_prueba integer :=0;
begin
	drop table if exists temporal_facturas_ventas;
	CREATE TEMPORARY TABLE temporal_facturas_ventas
	(
		"facturaId" bigint,
		nit_emisor bigint,
	    direccion character varying,
	    numero_documento character varying,
	    nombre_razon_social character varying,
	    monto_total numeric,
	    fecha_emision timestamp,
	    numero_factura bigint,
	    tipo_documento_sector_id bigint
	) ;
	
		case when p_tipo_documento_sector_id=1 then 	
				insert into temporal_facturas_ventas
				SELECT venta_estandar_id "facturaId", nit_emisor, direccion,numero_documento, nombre_razon_social, monto_total,  fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_estandares
				where cuf=p_cuf;
				
			when p_tipo_documento_sector_id=2 then 	
				insert into temporal_facturas_ventas
				SELECT venta_colegio_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_colegios
				where cuf=p_cuf;
				
			when p_tipo_documento_sector_id=3 then 	
				insert into temporal_facturas_ventas
				SELECT venta_alquiler_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_alquileres
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=4 then 	
				insert into temporal_facturas_ventas
				SELECT venta_hidrocarburo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hidrocarburos
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=5 then 	
				insert into temporal_facturas_ventas
				SELECT venta_servicio_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_servicios
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=6 then 	
				insert into temporal_facturas_ventas
				SELECT punto_venta_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_embotelladoras
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=7 then 	
				insert into temporal_facturas_ventas
				SELECT venta_banco_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_bancos
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=8 then 	
				insert into temporal_facturas_ventas
				SELECT venta_hotel_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hoteles
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=9 then 	
				insert into temporal_facturas_ventas
				SELECT venta_hospital_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hospitales
				where cuf=p_cuf;
			
			
			when p_tipo_documento_sector_id=10 then 	
				insert into temporal_facturas_ventas
				SELECT venta_juego_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_juegos
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=11 then 	
				insert into temporal_facturas_ventas
				SELECT venta_espectaculo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_espectaculos
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=12 then 	
				insert into temporal_facturas_ventas
				SELECT venta_exportacion_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=13 then 	
				insert into temporal_facturas_ventas
				SELECT venta_libre_consignacion_id "facturaId", nit_emisor, direccion, numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_libres_consignaciones
				where cuf=p_cuf;			
			
			when p_tipo_documento_sector_id=14 then 	
				insert into temporal_facturas_ventas
				SELECT venta_zona_franca_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_zonas_francas
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=15 then 	
				insert into temporal_facturas_ventas
				SELECT venta_espectaculo_nacional_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales
				where cuf=p_cuf;
						
			when p_tipo_documento_sector_id=16 then 	
				insert into temporal_facturas_ventas
				SELECT venta_seguridad_alimentaria_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=17 then 	
				insert into temporal_facturas_ventas
				SELECT venta_moneda_extranjera_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_monedas_extranjeras
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=18 then 	
				insert into temporal_facturas_ventas
				SELECT nota_credito_debito_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total_original monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_creditos_debitos
				where cuf=p_cuf;
						
			when p_tipo_documento_sector_id=19 then 	
				insert into temporal_facturas_ventas
				SELECT nota_conciliacion_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total_original monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_conciliaciones
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=20 then 	
				insert into temporal_facturas_ventas
				SELECT venta_boleto_aereo_id "facturaId", nit_emisor, '' direccion, numero_documento_beneficiario, nombre_razon_social_beneficiario, monto_total_boleto monto_total, fecha_emision ,numero_boleto_aereo, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_boletos_aereos
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=21 then 	
				insert into temporal_facturas_ventas
				SELECT venta_turismo_receptivo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_turismos_receptivos
				where cuf=p_cuf;
						
			when p_tipo_documento_sector_id=22 then 	
				insert into temporal_facturas_ventas
				SELECT venta_tasa_cero_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_tasas_ceros
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=23 then 	
				insert into temporal_facturas_ventas
				SELECT venta_combustible_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_combustibles
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=24 then 	
				insert into temporal_facturas_ventas
				SELECT venta_exportacion_ypfb_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb
				where cuf=p_cuf;
						
			when p_tipo_documento_sector_id=25 then 	
				insert into temporal_facturas_ventas
				SELECT venta_exportacion_minera_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones_mineras
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=26 then 	
				insert into temporal_facturas_ventas
				SELECT venta_libre_consignacion_ypfb_id "facturaId", nit_emisor, direccion, numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb
				where cuf=p_cuf;
			
			when p_tipo_documento_sector_id=27 then 	
				insert into temporal_facturas_ventas
				SELECT venta_minera_interna_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_mineras_internas
				where cuf=p_cuf;
						
			when p_tipo_documento_sector_id=28 then 	
				insert into temporal_facturas_ventas
				SELECT prevalorada_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_prevaloradas
				where cuf=p_cuf;
			
			-- no existe p_tipo_documento_sector_id=29 TODO: Agregar para obtener los registros
						
			-- no existe p_tipo_documento_sector_id=30 TODO: Agregar para obtener los registros
							
			else
				insert into temporal_facturas_ventas
				select 0 "facturaId", 0 nit_emisor,null direccion,null numero_documento, null nombre_razon_social,0 monto_total, null fecha_emision , 0 numero_factura, 0 tipo_documento_sector_id;
			
			end case;
				


	alter table temporal_facturas_ventas add column "nombreRazonSocialNIT" varchar;
	
	update temporal_facturas_ventas set "nombreRazonSocialNIT"=(select a.nombres||' '||a.primer_apellido||' '||a.segundo_apellido "nombreRazonSocialNIT" 
											     from scn_contribuyentes.scn_per_personas_naturales a 
											     inner join scn_contribuyentes.scn_emp_contribuyentes c 
											     on (c.persona_contribuyente_id=a.persona_id)
												 where c.nit = temporal_facturas_ventas.nit_emisor 
												 
												 union 
												 
											     select b.razon_social "nombreRazonSocialNIT" 
											     from scn_contribuyentes.scn_per_personas_juridicas b 
											     inner join scn_contribuyentes.scn_emp_contribuyentes c 
											     on (c.persona_contribuyente_id=b.persona_id)
											     where c.nit = temporal_facturas_ventas.nit_emisor
											     );

	return  (select row_to_json(tbl1) ::character varying 
      			 from ((	
      			 		 select tipo_documento_sector_id, "nombreRazonSocialNIT", "facturaId", nit_emisor "nitEmisor", direccion, nombre_razon_social "nombreRazonSocial", monto_total "montoTotal", to_char(fecha_emision,'YYYY-MM-DD')"fechaEmision" ,numero_factura "numeroFactura", tipo_documento_sector_id "tipoDocumentoSectorId" 
      			 		 from temporal_facturas_ventas
      			 		 limit 50
      			      )) tbl1
				 );

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_facturas_ventas_publicas(p_cuf character varying, p_tipo_documento_sector_id integer, p_numero_documento_fiscal bigint, p_nit_emisor bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función permite la búsqueda de la información de la factura a travez del número de documento y el rango de 
				fechas inicio - fin y el tipo de documento fiscal para los siguientes documentos fiscales:
				
				FACTURA:
					- FACTURA ESTANDAR
					- FACTURA SECTORES EDUCATIVOS
					- FACTURA HIDROCARBUROS
					- FACTURA DE ALQUILER DE BIENES INMUEBLES	
					- FACTURA DE SERVICIOS BASICOS	
					- FACTURA DE ENTIDADES FINANCIERAS
					- FACTURA DE HOTELES
					- FACTURAS DE HOSPITALES/CLINICAS
					- FACTURA DE JUEGOS DE AZAR
					- FACTURA DE ARTISTAS INTERNACIONALES
					- FACTURA PREVALORADA DIGITAL
					- FACTURA PRODUCTOS ALCANZADOS POR EL ICE
					- FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
					
				NOTA FISCAL:
					- FACTURA COMERCIAL DE EXPORTACION	
					- FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION				
					- NOTA FISCAL DE ZONA FRANCA
					- NOTA FISCAL DE ARTISTAS NACIONALES
					- NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD 
					- NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA 
					- NOTA FISCAL DE EXPORTACIÓN DE SERVICIO TURÍSTICO Y HOSPEDAJE
					- NOTA FISCAL TASA CERO
					- FACTURA COMERCIAL DE EXPORTACIÓN YPFB
					- FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
					- FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
					- FACTURA VENTA INTERNA MINERALES
					
				DOCUMENTO EQUIVALENTE:	
					--NOTA DE CREDITO-DEBITO
					--NOTA DE CONCILIACION
					--BOLETO AEREO
PARAMETROS INGRESO
    		p_numero_documento
    		p_fecha_emision_inicio
    		p_fecha_emision_fin
    		p_tipo_documento_fiscal_id
    		
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <29/12/2019>
AUTOR : Equipo Tyrell <junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	v_nro_casos_prueba integer :=0;
begin
	drop table if exists temporal_facturas_ventas;
	CREATE TEMPORARY TABLE temporal_facturas_ventas
	(
		"facturaId" bigint,
		nit_emisor bigint,
	    direccion character varying,
	    numero_documento character varying,
	    nombre_razon_social character varying,
	    monto_total numeric,
	    fecha_emision timestamp,
	    numero_factura bigint,
	    tipo_documento_sector_id bigint
	) ;
	
		case when p_tipo_documento_sector_id=1 then 	
				insert into temporal_facturas_ventas
				SELECT venta_estandar_id "facturaId", nit_emisor, direccion,numero_documento, nombre_razon_social, monto_total,  fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_estandares
				where cuf=p_cuf
				and numero_factura=p_numero_documento_fiscal
				and nit_emisor = p_nit_emisor limit 1;
				
			when p_tipo_documento_sector_id=2 then 	
				insert into temporal_facturas_ventas
				SELECT venta_colegio_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_colegios
				where cuf=p_cuf limit 1;
				
			when p_tipo_documento_sector_id=3 then 	
				insert into temporal_facturas_ventas
				SELECT venta_alquiler_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_alquileres
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=4 then 	
				insert into temporal_facturas_ventas
				SELECT venta_combustible_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_combustibles
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=5 then 	
				insert into temporal_facturas_ventas
				SELECT venta_servicio_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_servicios
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=6 then 	
				insert into temporal_facturas_ventas
				SELECT punto_venta_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_embotelladoras
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=7 then 	
				insert into temporal_facturas_ventas
				SELECT venta_banco_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_bancos
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=8 then 	
				insert into temporal_facturas_ventas
				SELECT venta_hotel_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hoteles
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=9 then 	
				insert into temporal_facturas_ventas
				SELECT venta_hospital_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hospitales
				where cuf=p_cuf limit 1;
			
			
			when p_tipo_documento_sector_id=10 then 	
				insert into temporal_facturas_ventas
				SELECT venta_juego_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_juegos
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=11 then 	
				insert into temporal_facturas_ventas
				SELECT venta_espectaculo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_espectaculos
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=12 then 	
				insert into temporal_facturas_ventas
				SELECT venta_exportacion_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=13 then 	
				insert into temporal_facturas_ventas
				SELECT venta_libre_consignacion_id "facturaId", nit_emisor, direccion, numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_libres_consignaciones
				where cuf=p_cuf limit 1;			
			
			when p_tipo_documento_sector_id=14 then 	
				insert into temporal_facturas_ventas
				SELECT venta_zona_franca_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_zonas_francas
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=15 then 	
				insert into temporal_facturas_ventas
				SELECT venta_espectaculo_nacional_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales
				where cuf=p_cuf limit 1;
						
			when p_tipo_documento_sector_id=16 then 	
				insert into temporal_facturas_ventas
				SELECT venta_seguridad_alimentaria_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=17 then 	
				insert into temporal_facturas_ventas
				SELECT venta_moneda_extranjera_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_monedas_extranjeras
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=18 then 	
				insert into temporal_facturas_ventas
				SELECT nota_credito_debito_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total_original monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_creditos_debitos
				where cuf=p_cuf limit 1;
						
			when p_tipo_documento_sector_id=19 then 	
				insert into temporal_facturas_ventas
				SELECT nota_conciliacion_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total_original monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_conciliaciones
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=20 then 	
				insert into temporal_facturas_ventas
				SELECT venta_boleto_aereo_id "facturaId", nit_emisor, '' direccion, numero_documento_beneficiario, nombre_razon_social_beneficiario, monto_total_boleto monto_total, fecha_emision ,numero_boleto_aereo, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_boletos_aereos
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=21 then 	
				insert into temporal_facturas_ventas
				SELECT venta_turismo_receptivo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_turismos_receptivos
				where cuf=p_cuf limit 1;
						
			when p_tipo_documento_sector_id=22 then 	
				insert into temporal_facturas_ventas
				SELECT venta_tasa_cero_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_tasas_ceros
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=23 then 	
				insert into temporal_facturas_ventas
				SELECT venta_hidrocarburo_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_hidrocarburos
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=24 then 	
				insert into temporal_facturas_ventas
				SELECT venta_exportacion_ypfb_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb
				where cuf=p_cuf limit 1;
						
			when p_tipo_documento_sector_id=25 then 	
				insert into temporal_facturas_ventas
				SELECT venta_exportacion_minera_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_exportaciones_mineras
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=26 then 	
				insert into temporal_facturas_ventas
				SELECT venta_libre_consignacion_ypfb_id "facturaId", nit_emisor, direccion, numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb
				--where cuf=p_cuf limit 1;
				where cuf=p_cuf
				and numero_factura=p_numero_documento_fiscal
				and nit_emisor = p_nit_emisor limit 1;
			
			when p_tipo_documento_sector_id=27 then 	
				insert into temporal_facturas_ventas
				SELECT venta_minera_interna_id "facturaId", nit_emisor, direccion, numero_documento, nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_mineras_internas
				where cuf=p_cuf limit 1;
						
			when p_tipo_documento_sector_id=28 then 	
				insert into temporal_facturas_ventas
				SELECT prevalorada_id "facturaId", nit_emisor, direccion, 0 numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_prevaloradas
				where cufp=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=29 then 	
				insert into temporal_facturas_ventas
				SELECT venta_telecomunicacion_id "facturaId", nit_emisor, direccion, 0 numero_documento, '' nombre_razon_social, monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_ventas_telecomunicaciones
				where cuf=p_cuf limit 1;
			
			when p_tipo_documento_sector_id=30 then 	
				insert into temporal_facturas_ventas
				SELECT nota_credito_debito_sfv_id "facturaId", nit_emisor, direccion, 0 numero_documento, '' nombre_razon_social, 0 monto_total, fecha_emision ,numero_factura, tipo_documento_sector_id
				FROM sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv
				where cuf=p_cuf limit 1;
							
			else
				insert into temporal_facturas_ventas
				select 0 "facturaId", 0 nit_emisor,null direccion,null numero_documento, null nombre_razon_social,0 monto_total, null fecha_emision , 0 numero_factura, 0 tipo_documento_sector_id;
			
			end case;
				


	alter table temporal_facturas_ventas add column "nombreRazonSocialNIT" varchar;
	
	update temporal_facturas_ventas set "nombreRazonSocialNIT"=(select a.nombres||' '||a.primer_apellido||' '||a.segundo_apellido "nombreRazonSocialNIT" 
											     from scn_contribuyentes.scn_per_personas_naturales a 
											     inner join scn_contribuyentes.scn_emp_contribuyentes c 
											     on (c.persona_contribuyente_id=a.persona_id)
												 where c.nit = temporal_facturas_ventas.nit_emisor 
												 
												 union 
												 
											     select b.razon_social "nombreRazonSocialNIT" 
											     from scn_contribuyentes.scn_per_personas_juridicas b 
											     inner join scn_contribuyentes.scn_emp_contribuyentes c 
											     on (c.persona_contribuyente_id=b.persona_id)
											     where c.nit = temporal_facturas_ventas.nit_emisor
											     );

	return  (select row_to_json(tbl1) ::character varying 
      			 from ((	
      			 		 select tipo_documento_sector_id, "nombreRazonSocialNIT", "facturaId", nit_emisor "nitEmisor", direccion, nombre_razon_social "nombreRazonSocial", monto_total "montoTotal", to_char(fecha_emision,'YYYY-MM-DD')"fechaEmision" ,numero_factura "numeroFactura", tipo_documento_sector_id "tipoDocumentoSectorId" 
      			 		 from temporal_facturas_ventas
      			 		 limit 50
      			      )) tbl1
				 );

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_fecha_caso_prueba_etapa_0(p_hash character varying, p_fecha_inicio_prueba timestamp without time zone, p_fecha_fin_prueba timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite obtener la ultima fecha del rregistro del LOG de la etapa 0
PARAMETROS INGRESO
    		p_hash
    		p_fecha_inicio_prueba
    		p_fecha_fin_prueba
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : 13/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_fecha_prueba timestamp;
	 
begin
	
	return 
	coalesce
	(
		(select LOGS.fecha_prueba
		from   sre_recaudaciones.sre_fac_log_0_cuf as LOGS
		where  LOGS.hash = p_hash 
		and    LOGS.fecha_prueba >= p_fecha_inicio_prueba 
		and    LOGS.fecha_prueba <= p_fecha_fin_prueba
		ORDER BY LOGS.fecha_prueba DESC
	    FETCH FIRST 1 ROWS only) , null 
	);
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_fecha_caso_prueba_etapa_5(p_hash character varying, p_fecha_inicio_prueba timestamp without time zone, p_fecha_fin_prueba timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite obtener la ultima fecha del rregistro del LOG
PARAMETROS INGRESO
    		p_hash
    		p_fecha_inicio_prueba
    		p_fecha_fin_prueba
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : 13/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_fecha_prueba timestamp;
	 
begin
	
	return 
	coalesce
	(
		(select LOGS.fecha_prueba
		from   sre_recaudaciones.sre_fac_log_5_eventos_significativos as LOGS
		where  LOGS.hash = p_hash 
		and    LOGS.fecha_prueba >= p_fecha_inicio_prueba 
		and    LOGS.fecha_prueba <= p_fecha_fin_prueba
		and    LOGS.estado_match = 1
		ORDER BY LOGS.fecha_prueba DESC
	    FETCH FIRST 1 ROWS only) , null 
	);
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_listado_etapas_fase_dos(p_sistema_id bigint, p_solicitud_certificacion_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el listado de las etapas correspondientes a la fase 2. 
                El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
             No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <20/09/2019>
AUTOR : <Tyrel>
VERSION : 1.0
**************************************************************************************************************************************************/
declare

begin 
       drop table if exists TMP_ETAPAS_FASE_2;
             
       create temp table TMP_ETAPAS_FASE_2
       as
       --Etapa I
       select 
             3226 etapa_certificacion_sistemas_id,  
             (select descripcion       from str_transversales.str_cps_clasificadores where tipo_clasificador='etapa_certificacion_sistemas_id' and clasificador_id = 3226) as descripcion_prueba
             ,                   
             (select 
                    case 
                                  when count(CA.*) >= 1 then 100
                                  else 0
                    end    
              FROM sre_recaudaciones.sre_fac_componentes_archivos CA
             inner join sre_recaudaciones.sre_fac_componentes_certificados CC on (CA.componente_archivo_id = CC.componente_archivo_id) 
              WHERE 
                    CC.sistema_id = p_sistema_id and
                   cc.solicitud_certificacion_id = p_solicitud_certificacion_id and
                   CA.estado_id = 'AC' and 
                    CC.estado_id = 'AC'
             ) as porcentaje,
             (select 
                           case 
                                        when count(CA.*) >= 1 then true
                                        else false
                           end    
                     FROM sre_recaudaciones.sre_fac_componentes_archivos CA
                    inner join sre_recaudaciones.sre_fac_componentes_certificados CC on (CA.componente_archivo_id = CC.componente_archivo_id) 
                     WHERE 
                           CC.sistema_id = p_sistema_id and
                          cc.solicitud_certificacion_id = p_solicitud_certificacion_id and
                          CA.estado_id = 'AC' and 
                           CC.estado_id = 'AC'
             ) as es_prueba_concluida
                    
             union
       --Etapa II - VI
       --II
       select 
                    clasificador_id etapa_certificacion_sistemas_id,
                    descripcion descripcion_prueba,
                    (
                    select 
                    case 
                           when count(*) >= 1 then 100
                           else 0
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and                   
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3227)
                                        )
                    ) as porcentaje,
                    (
                    select 
                    case 
                           when count(*) >= 1 then true
                           else false
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3227)
                                        )
                    ) as es_prueba_concluida         
       from str_transversales.str_cps_clasificadores 
       where tipo_clasificador='etapa_certificacion_sistemas_id'
       and clasificador_id in (3227)
       and estado_id='AC'
       union
       --III
       select 
                    clasificador_id etapa_certificacion_sistemas_id,
                    descripcion descripcion_prueba,
                    (
                    select 
                    case 
                           when count(*) >= 1 then 100
                           else 0
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3228)
                                        )
                    ) as porcentaje,
                    (
                    select 
                    case 
                           when count(*) >= 1 then true
                           else false
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3228)
                                        )
                    ) as es_prueba_concluida         
       from str_transversales.str_cps_clasificadores 
       where tipo_clasificador='etapa_certificacion_sistemas_id'
       and clasificador_id in (3228)
       and estado_id='AC'
       union
       --IV
       select 
                    clasificador_id etapa_certificacion_sistemas_id,
                    descripcion descripcion_prueba,
                    (
                    select 
                    case 
                           when count(*) >= 1 then 100
                           else 0
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and 
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3229)
                                        )
                    ) as porcentaje,
                    (
                    select 
                    case 
                           when count(*) >= 1 then true
                           else false
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3229)
                                        )
                    ) as es_prueba_concluida         
       from str_transversales.str_cps_clasificadores 
       where tipo_clasificador='etapa_certificacion_sistemas_id'
       and clasificador_id in (3229)
       and estado_id='AC'
       union
       --V
       select 
                    clasificador_id etapa_certificacion_sistemas_id,
                    descripcion descripcion_prueba,
                    (
                    select 
                    case 
                           when count(*) >= 1 then 100
                           else 0
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3230)
                                        )
                    ) as porcentaje,
                    (
                    select 
                    case 
                           when count(*) >= 1 then true
                           else false
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3230)
                                        )
                    ) as es_prueba_concluida         
       from str_transversales.str_cps_clasificadores 
       where tipo_clasificador='etapa_certificacion_sistemas_id'
       and clasificador_id in (3230)
       and estado_id='AC'
       union
       --VI
       select 
                    clasificador_id etapa_certificacion_sistemas_id,
                    descripcion descripcion_prueba,
                    (
                    select 
                    case 
                           when count(*) >= 1 then 100
                           else 0
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3231)
                                        )
                    ) as porcentaje,
                    (
                    select 
                    case 
                           when count(*) >= 1 then true
                           else false
                    end    
                    from sre_recaudaciones.sre_fac_diagramas_certificaciones
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id in (3231)
                                        )
                    ) as es_prueba_concluida         
       from str_transversales.str_cps_clasificadores 
       where tipo_clasificador='etapa_certificacion_sistemas_id'
       and clasificador_id in (3231)
       and estado_id='AC'
       
       
       union 
       
       --Etapa VII
       select 
             clasificador_id etapa_certificacion_sistemas_id,
             descripcion descripcion_prueba,
             (
                    select 
                    case 
                           when count(*) >= 1 then 100
                           else 0
                    end    
                    from sre_recaudaciones.sre_fac_detalles_certificaciones_sistemas
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id = 3232
                                        )
             ) as porcentaje,
             (
                    select 
                    case 
                           when count(*) >= 1 then true
                           else false
                    end    
                    from sre_recaudaciones.sre_fac_detalles_certificaciones_sistemas
                    where 
                    sistema_id=p_sistema_id and
                    solicitud_certificacion_id = p_solicitud_certificacion_id and
                    estado_id='AC' and
                    etapa_id in (
                                        select clasificador_id
                                        from str_transversales.str_cps_clasificadores 
                                        where tipo_clasificador='etapa_certificacion_sistemas_id'
                                        and clasificador_id = 3232
                                        )
             ) as es_prueba_concluida         
             from str_transversales.str_cps_clasificadores 
             where tipo_clasificador='etapa_certificacion_sistemas_id'
             and clasificador_id = 3232  
             and estado_id='AC'
       order by 1;
                                                                                              
       return query (select row_to_json(tbl) :: varchar
                             from (
                                        select etapa_certificacion_sistemas_id, descripcion_prueba, porcentaje, es_prueba_concluida
                                        
                                         from TMP_ETAPAS_FASE_2
                                        
                                     ) tbl);
                                     
       drop table if exists TMP_ETAPAS_FASE_2;
       
       
       EXCEPTION
         when others
           then              
                    perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_listado_etapas_fase_dos');
                    return;
                                                                                                         
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_listado_etapas_fase_dos(p_sistema_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga de obtener el listado de las etapas correspondientes a la fase 2. 
                El porcentaje se obtiene a partir de la fecha inicio hasta la fecha actual. 
PARAMETROS INGRESO
    		p_sistema_id: identificador del sistema.
PARAMETROS SALIDA
    json: listado de etapas con el calculo de porcentaje.
SUBSISTEMA : Facturación
FECHA CREACION : <20/09/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_etapa_1 int4:=3226;
	v_etapa_2 int4:=3227;
	v_etapa_3 int4:=3228;
	v_etapa_4 int4:=3229;
	v_etapa_5 int4:=3230;
	v_etapa_6 int4:=3231;
	v_etapa_7 int4:=3232;
begin	
	drop table if exists TMP_ETAPAS_FASE_2;
		
	create temp table TMP_ETAPAS_FASE_2
	as
	--Etapa I
	select 
		v_etapa_1 etapa_certificacion_sistemas_id,	
		(select descripcion from str_transversales.str_cps_clasificadores where tipo_clasificador='etapa_certificacion_sistemas_id'	and clasificador_id = v_etapa_1 and estado_id='AC' limit 1) as descripcion_prueba
		,			
		(select 
			case 
					when count(CA.*) >= 1 then 100
					else 0
			end 	
		 FROM sre_recaudaciones.sre_fac_componentes_archivos CA
		 inner join sre_recaudaciones.sre_fac_componentes_certificados CC on (CA.componente_archivo_id = CC.componente_archivo_id) 
		 WHERE 
		 	CC.sistema_id = p_sistema_id and 	
		 	CA.estado_id = 'AC' and 
		 	CC.estado_id = 'AC'
		) as porcentaje,
		(select 
				case 
						when count(CA.*) >= 1 then true
						else false
				end 	
			 FROM sre_recaudaciones.sre_fac_componentes_archivos CA
			 inner join sre_recaudaciones.sre_fac_componentes_certificados CC on (CA.componente_archivo_id = CC.componente_archivo_id) 
			 WHERE 
			 	CC.sistema_id = p_sistema_id and 	
			 	CA.estado_id = 'AC' and 
			 	CC.estado_id = 'AC'
		) as es_prueba_concluida
			
		union
	--Etapa II - VI
	--II
	select 
			clasificador_id etapa_certificacion_sistemas_id,
			descripcion descripcion_prueba,
			(
			select	
			case 
				when count(*) >= 1 then 100
				else 0
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_2
			) as porcentaje,
			(
			select	
			case 
				when count(*) >= 1 then true
				else false
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_2
			) as es_prueba_concluida		
	from str_transversales.str_cps_clasificadores 
	where tipo_clasificador='etapa_certificacion_sistemas_id'
	and clasificador_id = v_etapa_2
	and estado_id='AC'	
	
	union
	
	--III
	select 
			clasificador_id etapa_certificacion_sistemas_id,
			descripcion descripcion_prueba,
			(
			select	
			case 
				when count(*) >= 1 then 100
				else 0
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_3
			) as porcentaje,
			(
			select	
			case 
				when count(*) >= 1 then true
				else false
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_3
			) as es_prueba_concluida		
	from str_transversales.str_cps_clasificadores 
	where tipo_clasificador='etapa_certificacion_sistemas_id'
	and clasificador_id = v_etapa_3
	and estado_id='AC'	
	
	union
	
	--IV
	select 
			clasificador_id etapa_certificacion_sistemas_id,
			descripcion descripcion_prueba,
			(
			select	
			case 
				when count(*) >= 1 then 100
				else 0
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_4
			) as porcentaje,
			(
			select	
			case 
				when count(*) >= 1 then true
				else false
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_4
			) as es_prueba_concluida		
	from str_transversales.str_cps_clasificadores 
	where tipo_clasificador='etapa_certificacion_sistemas_id'
	and clasificador_id = v_etapa_4
	and estado_id='AC'
	
	union
	--V
	select 
			clasificador_id etapa_certificacion_sistemas_id,
			descripcion descripcion_prueba,
			(
			select	
			case 
				when count(*) >= 1 then 100
				else 0
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_5
			) as porcentaje,
			(
			select	
			case 
				when count(*) >= 1 then true
				else false
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_5
			) as es_prueba_concluida		
	from str_transversales.str_cps_clasificadores 
	where tipo_clasificador='etapa_certificacion_sistemas_id'
	and clasificador_id = v_etapa_5
	and estado_id='AC'	
	
	union
	--VI
	select 
			clasificador_id etapa_certificacion_sistemas_id,
			descripcion descripcion_prueba,
			(
			select	
			case 
				when count(*) >= 1 then 100
				else 0
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_6
			) as porcentaje,
			(
			select	
			case 
				when count(*) >= 1 then true
				else false
			end 	
			from sre_recaudaciones.sre_fac_diagramas_certificaciones
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_6			
			) as es_prueba_concluida		
	from str_transversales.str_cps_clasificadores 
	where tipo_clasificador='etapa_certificacion_sistemas_id'
	and clasificador_id = v_etapa_6
	and estado_id='AC'	
	
	union 
	
	--Etapa VII
	select 
		clasificador_id etapa_certificacion_sistemas_id,
		descripcion descripcion_prueba,
		(
			select	
			case 
				when count(*) >= 1 then 100
				else 0
			end 	
			from sre_recaudaciones.sre_fac_detalles_certificaciones_sistemas
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_7
		) as porcentaje,
		(
			select	
			case 
				when count(*) >= 1 then true
				else false
			end 	
			from sre_recaudaciones.sre_fac_detalles_certificaciones_sistemas
			where 
			sistema_id=p_sistema_id and
			estado_id='AC' and
			etapa_id = v_etapa_7						
		) as es_prueba_concluida		
	from str_transversales.str_cps_clasificadores 
	where tipo_clasificador='etapa_certificacion_sistemas_id'
	and clasificador_id = v_etapa_7  
	and estado_id='AC'
	order by 1;
														 
	return query (select row_to_json(tbl) :: varchar
				  from (
						 select etapa_certificacion_sistemas_id, descripcion_prueba, porcentaje, es_prueba_concluida
						 
						 from TMP_ETAPAS_FASE_2
						 
					   ) tbl);
					   	 
	drop table if exists TMP_ETAPAS_FASE_2;
		
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_listado_etapas_fase_dos');
			return;
					   					  					   
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_nits_asignados_etapa_9(p_sistema_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 10
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_resultado smallint := 0;	
begin
	
	drop table if exists TEMPORAL_NITS_ASIGNADOS;
	
	create temp table TEMPORAL_NITS_ASIGNADOS as
	select 
	proveedor.nit, 
	proveedor.tipo_documento_sector_id, 
	proveedor.usuario, 
	proveedor.contrasena, 
	asignados.cuis, 
	0::numeric as porcentaje_avance,
	false:: boolean satisfactorio 
	from sre_recaudaciones.sre_fac_nits_pruebas_proveedores proveedor
	inner join sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor asignados
	on proveedor.nit_prueba_proveedor_id=asignados.nit_prueba_proveedor_id
	where sistema_id_proveedor=p_sistema_id
	and proveedor.estado_id = 'AC'
	and asignados.estado_id = 'AC';

	alter table TEMPORAL_NITS_ASIGNADOS
	add column documento_sector character varying;

	update TEMPORAL_NITS_ASIGNADOS
	set documento_sector=(select descripcion  
						  from sre_recaudaciones.sre_fac_clasificadores  
					  	  where agrupador ='TIPO DOCUMENTO SECTOR'
						  and codigo_clasificador_equivalente=TEMPORAL_NITS_ASIGNADOS.tipo_documento_sector_id
						  and estado_id = 'AC'
						 );

	update TEMPORAL_NITS_ASIGNADOS
	set porcentaje_avance=(sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_9_por_nit(TEMPORAL_NITS_ASIGNADOS.nit,p_sistema_id));

	update TEMPORAL_NITS_ASIGNADOS
	set satisfactorio=true
	where porcentaje_avance>=100;
	
	return query  
	      (select row_to_json(tbl) :: varchar
		  from (
		  		select 
		  		nit,		  		
				documento_sector,
		  		usuario,
		  		contrasena as contrasenia,
		  		cuis,
		  		porcentaje_avance,
		  		satisfactorio
		  		from TEMPORAL_NITS_ASIGNADOS
		  	   ) tbl);

	EXCEPTION
	when others
		then		  
		  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_nits_asignados_etapa_9');
	      return;		  	   
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa(p_sistema_id bigint, p_contribuyente_id bigint, p_estado_sistema_contribuyente_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo de los servicios. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
              No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  De acuerdo a ordenes de Jefatura se realiza el ajuste del porcentaje general 
				 para los tipos de sistema PROVEEDOR.
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION :<20/04/2020>
AUTOR DE LA MODIFICACION : junior.flores
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare        
  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;
  v_porcentaje_etapa_cufd integer:=0;
  v_porcentaje_etapa_0 integer:=0; 
  v_porcentaje_etapa_1 integer:=0;    
  v_porcentaje_etapa_2 integer:=0;
  v_porcentaje_etapa_3 integer:=0;
  v_porcentaje_etapa_4 integer:=0;
  v_porcentaje_etapa_5 integer:=0;
  v_porcentaje_etapa_6 integer:=0;
  v_porcentaje_etapa_7 integer:=0;
  v_porcentaje_etapa_8 integer:=0;
  v_porcentaje_etapa_9 integer:=0;
  v_porcentaje_etapa_10 integer:=0;
  v_porcentaje_etapa_11 integer:=0;
  v_porcentaje_etapa_12 integer:=0;
  v_cantidad_total integer:=0;
  v_casos_erroneas integer:=0;
  v_casos_exitosas integer:=0;
  v_total_casos_promedio integer:=12;--Cantidad total de casos Obligatorios menos(-) Etapa VII - Firma Digital y Etapa XI - Sistema Proveedor   
  --v_es_tipo_sistema_proveedor boolean:=false;
  
begin
       
       -- Verificando la Etapa VII - Firma Digital
       if(coalesce(( select true 
                             from str_transversales.str_cps_clasificadores 
                             where tipo_clasificador='modalidad_facturacion_id' 
                             and descripcion='ELECTRONICA' 
                             and clasificador_id in ( select distinct(modalidad_facturacion_id) 
                                                      from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones
                                                      where sistema_id=p_sistema_id
                                                      and estado_id='AC'
                                                    )
                     ),false
                   )
       ) then
              v_total_casos_promedio := v_total_casos_promedio+1;
              v_porcentaje_etapa_7 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,2857);
       end if;
/*
       v_es_tipo_sistema_proveedor:=coalesce(( select true 
                                                                           from str_transversales.str_cps_clasificadores 
                                                                           where tipo_clasificador='tipo_sistema_id' and descripcion='PROVEEDOR'
                                                                           and clasificador_id = ( select tipo_sistema_id 
                                                                                                                     from sre_recaudaciones.sre_fac_sistemas 
                                                                                                                     where sistema_id=p_sistema_id
                                                                                                                     and estado_id='AC')
                                                                       ),false
                                                                     );    
*/
      v_porcentaje_etapa_cufd := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,3016);

       --Nota: Obtenemos el porcentaje de la etapa 0 - generacion de CUF
       --add 20190715 RGT
       v_porcentaje_etapa_0 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,2850);

       v_porcentaje_etapa_1 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,2851);
       
       v_porcentaje_etapa_2 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id, 2852);

       v_porcentaje_etapa_3 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,2853);

       v_porcentaje_etapa_4 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,2854);

       v_porcentaje_etapa_5 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,2855);

       v_porcentaje_etapa_6 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id, 2856);
       
       v_porcentaje_etapa_8 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id, 3069);
              /*
       if (v_es_tipo_sistema_proveedor=true) then
              v_porcentaje_etapa_9 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id, 3052);
              v_total_casos_promedio := v_total_casos_promedio+1;
       end if;
             */ 
       v_porcentaje_etapa_10 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,3053);

       v_porcentaje_etapa_11 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,3141);
       
       v_porcentaje_etapa_12 := sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id,3142);
       
       -- Obtiene el porcentaje de las etapas realizadas a la fecha.     
       return (v_porcentaje_etapa_cufd  +  v_porcentaje_etapa_0 + v_porcentaje_etapa_1 + v_porcentaje_etapa_2 + v_porcentaje_etapa_3 + v_porcentaje_etapa_4 + v_porcentaje_etapa_5 + v_porcentaje_etapa_6 + v_porcentaje_etapa_7 + v_porcentaje_etapa_8 + v_porcentaje_etapa_9 + v_porcentaje_etapa_10 + v_porcentaje_etapa_11 + v_porcentaje_etapa_12) / v_total_casos_promedio;

       EXCEPTION
                when others
                  then
                    RAISE INFO 'Error Name:%', SQLERRM;
                    RAISE INFO 'Error State:%', SQLSTATE;
              return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_0(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de las combinaciones de generacion de CUF correspondiente 
                al sistema.
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación
FECHA CREACION : 15/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: se agrego los calculos de las pruebas sugeridas
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad_casos_correctos integer := 0;
	v_cantidad_casos_incorrectos integer := 0;
	v_cantidad_casos_prueba integer := 0;
	v_cantidad_casos_pendientes integer := 0;
	v_porcentaje numeric(20,5) := 0;
	v_nombre_etapa_prueba varchar;
	p_prueba_certificacion_id bigint := null;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	v_cantidad_esperada integer := 0;
	v_cantidad_posibles_respuestas integer := 2;---2 : debido a que solo existe 1) correctos y 2) incorrectos
	
	--Nota: variables para casos de prueba sugeridos
	v_cantidad_casos_sugeridos integer := 0;
	v_cantidad_casos_sugeridos_correctos integer := 0;
	
begin	
	
	  if p_contribuyente_id > 0 then ---**
	
	  --Nota: Recuperamos las combinaciones generadas para el CUF
	  drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA_0;
	  create temp table TEMPORAL_CASOS_PRUEBA_ETAPA_0 as
													  select *
													  from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id, p_nit);
	
	  --**Nota: Para las pruebas sugeridas add 20190906
	  drop table if exists TEMPORAL_TOTAL_SUGERIDAS;
	  create temp table TEMPORAL_TOTAL_SUGERIDAS as select cantidad_total_casos_sugeridos, cantidad_casos_sugeridos_correctos 
	  												from sre_recaudaciones.sre_fac_obtener_totales_casos_prueba_sugeridas_etapa_0(p_sistema_id);
	  												
	  select cantidad_total_casos_sugeridos into v_cantidad_casos_sugeridos
	  from TEMPORAL_TOTAL_SUGERIDAS;
	  
	   select cantidad_casos_sugeridos_correctos into v_cantidad_casos_sugeridos_correctos
	  from TEMPORAL_TOTAL_SUGERIDAS;												
	  											  
	  --Nota: Obtenemos la cantidad de casos de prueba que debe pasar el contribuyente en la generacion de CUF - obligatorias
	  v_cantidad_casos_prueba := (select count(*) from TEMPORAL_CASOS_PRUEBA_ETAPA_0);	
	  
	  
	  --***Nota: integrando pruebas sugeridas 20190905
	  v_cantidad_casos_prueba := v_cantidad_casos_prueba + v_cantidad_casos_sugeridos;
	  
	  --Nota: Se obtiene el nombre de la prueba
	  v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id);
	  
	  --Nota: Creamos la tabala temporal
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	  create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.*
												   from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA, 
														  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
													where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
													      ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
													      PRUEBA_SISTEMA.sistema_id = p_sistema_id and
													      PRUEBA_SISTEMA.estado_id = 'AC';
	
	  --Nota: Obtenemos el ID de sre_fac_pruebas_certificacion_sistemas
	  p_prueba_certificacion_id := (select prueba_certificacion_sistema_id
									from   TEMPORAL_PRUEBA_SISTEMA); 
									      
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA
									    ), now()
									  );
	
      v_fecha_inicio_prueba := (
  								select fecha_inicio_prueba
  								from TEMPORAL_PRUEBA_SISTEMA
  							   );
	  							
	  
	  drop table if exists TEMPORAL_LOGS;
	  create temp table TEMPORAL_LOGS as (
										  select LOGS.hash, LOGS.estado_match, COUNT(LOGS.*) as total_logs
										  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
										  where LOGS.sistema_id = p_sistema_id  
										  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
										  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
										  and   LOGS.estado_id = 'AC'
										  group by LOGS.hash, LOGS.estado_match
										 );
	  
		--Nota: Creamos la tabla temporal donde se almacenara el detalle de los casos de prueba
		drop table if exists TEMPORAL_DETALLE;
	    create temp table TEMPORAL_DETALLE as
	    select PRUEBAS.nit as nit, 
		       PRUEBAS.sucursal as sucursal, 
		       PRUEBAS.modalidad as modalidad, 
	           PRUEBAS.emision as emision, 
	           PRUEBAS.documento_fiscal as documento_fiscal, 
		       PRUEBAS.sector as sector,
		       PRUEBAS.pos as punto_venta,	    
			   0::integer  as cantidad_casos_correctos,
			   0::integer  as cantidad_casos_incorrectos,
			   0::integer as porcentaje_avance,
			   '-'::varchar as fecha_registro,
			   PRUEBAS.hash as hash,
			   false::bool as satisfactorio
		 from TEMPORAL_CASOS_PRUEBA_ETAPA_0 as PRUEBAS;	 
	    
	    --Nota: Obtener cantidad de casos esperados		
	     v_cantidad_esperada := 2;
	     
	     
	     update TEMPORAL_DETALLE
	     set 
		 cantidad_casos_correctos = coalesce (
												  (select LOGS.total_logs
												  from  TEMPORAL_LOGS as LOGS
												  where LOGS.estado_match = 1
												  and TEMPORAL_DETALLE.hash = LOGS.hash	), 0								  
									  			 ),
		 cantidad_casos_incorrectos = coalesce( 
				    							  (select LOGS.total_logs
												  from  TEMPORAL_LOGS as LOGS
												  where LOGS.estado_match = 0
												  and TEMPORAL_DETALLE.hash = LOGS.hash), 0
		  										 ); 
		  										 
		 --Nota: Obtener cantidad de casos esperados
	     v_cantidad_esperada := 2; 										 
	     
		 --Nota: Se actualiza el porcentaje de los casos de prueba
	     update TEMPORAL_DETALLE
         set porcentaje_avance = sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(TEMPORAL_DETALLE.cantidad_casos_correctos,
         TEMPORAL_DETALLE.cantidad_casos_incorrectos,v_cantidad_esperada,v_cantidad_posibles_respuestas);	
	      										 
	  	 										 
		
	    --Nota: Obtener la cantidad de casos correctos add 20190715 rgt
	    select count(1) into v_cantidad_casos_correctos
	    from  TEMPORAL_DETALLE as DETALLE
	    where porcentaje_avance >= 100;
	   		   	
	    --**Nota: agregando pruebas sugeridas
	    v_cantidad_casos_correctos := v_cantidad_casos_correctos + v_cantidad_casos_sugeridos_correctos;
	    																
		--Nota: Obtenenmos la cantidad de casos pendientes
		v_cantidad_casos_pendientes := v_cantidad_casos_prueba - v_cantidad_casos_correctos;
	    								 
		--Nota: Calculo del porcentaje
		if (v_cantidad_casos_prueba > 0) then
			v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_prueba::numeric*100;
		end if; 
		
		--Nota: Verifica si es prueba concluida 20190701
		if( v_cantidad_casos_correctos >= v_cantidad_casos_prueba and v_cantidad_casos_prueba != 0)then
			v_es_prueba_concluida := true;
		end if;
		
		--Nota: Verifica si es prueba finalizada
		v_existe_fecha_fin_prueba := coalesce (
												(select true
												 from   TEMPORAL_PRUEBA_SISTEMA
												 where  fecha_fin_prueba is not null),
												 false
											   );
	  --Adicionado 20191001 vcg.										   
      perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_casos_prueba,
			v_cantidad_casos_correctos,
			v_cantidad_casos_pendientes,
			v_porcentaje,
			v_es_prueba_concluida
		);
		
		
	  end if;--**
	  								  
	  return query
	  (select row_to_json(tbl) :: varchar
	  from (	  
	  		select p_prueba_certificacion_id as prueba_certificacion_sistema_id,
	  		       p_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id,
	  		       v_nombre_etapa_prueba as descripcion_prueba,
	  		       v_cantidad_casos_correctos as cantidad_pruebas_exitoso,
	  		       v_cantidad_casos_pendientes as cantidad_pruebas_pendiente,
	  		       v_cantidad_casos_prueba as cantidad_pruebas,
	  		       v_porcentaje as porcentaje,
	  		       v_es_prueba_concluida as es_prueba_concluida,
	  		       v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
	       ) tbl);									        									   
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_0_20191002(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de las combinaciones de generacion de CUF correspondiente 
                al sistema.
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación
FECHA CREACION : 15/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: se agrego los calculos de las pruebas sugeridas
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad_casos_correctos integer := 0;
	v_cantidad_casos_incorrectos integer := 0;
	v_cantidad_casos_prueba integer := 0;
	v_cantidad_casos_pendientes integer := 0;
	v_porcentaje numeric(20,5) := 0;
	v_nombre_etapa_prueba varchar;
	p_prueba_certificacion_id bigint := null;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	v_cantidad_esperada integer := 0;
	v_cantidad_posibles_respuestas integer := 2;---2 : debido a que solo existe 1) correctos y 2) incorrectos
	
	--Nota: variables para casos de prueba sugeridos
	v_cantidad_casos_sugeridos integer := 0;
	v_cantidad_casos_sugeridos_correctos integer := 0;
	
begin	
	
	  --Nota: Recuperamos las combinaciones generadas para el CUF
	  drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA_0;
	  create temp table TEMPORAL_CASOS_PRUEBA_ETAPA_0 as
													  select *
													  from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id, p_nit);
	
	  --**Nota: Para las pruebas sugeridas add 20190906
	  drop table if exists TEMPORAL_TOTAL_SUGERIDAS;
	  create temp table TEMPORAL_TOTAL_SUGERIDAS as select cantidad_total_casos_sugeridos, cantidad_casos_sugeridos_correctos 
	  												from sre_recaudaciones.sre_fac_obtener_totales_casos_prueba_sugeridas_etapa_0(p_sistema_id);
	  												
	  select cantidad_total_casos_sugeridos into v_cantidad_casos_sugeridos
	  from TEMPORAL_TOTAL_SUGERIDAS;
	  
	   select cantidad_casos_sugeridos_correctos into v_cantidad_casos_sugeridos_correctos
	  from TEMPORAL_TOTAL_SUGERIDAS;												
	  											  
	  --Nota: Obtenemos la cantidad de casos de prueba que debe pasar el contribuyente en la generacion de CUF - obligatorias
	  v_cantidad_casos_prueba := (select count(*) from TEMPORAL_CASOS_PRUEBA_ETAPA_0);	
	  
	  
	  --***Nota: integrando pruebas sugeridas 20190905
	  v_cantidad_casos_prueba := v_cantidad_casos_prueba + v_cantidad_casos_sugeridos;
	  
	  --Nota: Se obtiene el nombre de la prueba
	  v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id);
	  
	  --Nota: Creamos la tabala temporal
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	  create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.*
												   from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA, 
														  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
													where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
													      ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
													      PRUEBA_SISTEMA.sistema_id = p_sistema_id and
													      PRUEBA_SISTEMA.estado_id = 'AC';
	
	  --Nota: Obtenemos el ID de sre_fac_pruebas_certificacion_sistemas
	  p_prueba_certificacion_id := (select prueba_certificacion_sistema_id
									from   TEMPORAL_PRUEBA_SISTEMA); 
									      
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA
									    ), now()
									  );
	
      v_fecha_inicio_prueba := (
  								select fecha_inicio_prueba
  								from TEMPORAL_PRUEBA_SISTEMA
  							   );
	  							
	  
	  drop table if exists TEMPORAL_LOGS;
	  create temp table TEMPORAL_LOGS as (
										  select LOGS.hash, LOGS.estado_match, COUNT(LOGS.*) as total_logs
										  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
										  where LOGS.sistema_id = p_sistema_id  
										  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
										  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
										  and   LOGS.estado_id = 'AC'
										  group by LOGS.hash, LOGS.estado_match
										 );
	  
		  --Nota: Creamos la tabla temporal donde se almacenara el detalle de los casos de prueba
		drop table if exists TEMPORAL_DETALLE;
	    create temp table TEMPORAL_DETALLE as
	    select PRUEBAS.nit as nit, 
		       PRUEBAS.sucursal as sucursal, 
		       PRUEBAS.modalidad as modalidad, 
	           PRUEBAS.emision as emision, 
	           PRUEBAS.documento_fiscal as documento_fiscal, 
		       PRUEBAS.sector as sector,
		       PRUEBAS.pos as punto_venta,	    
			   0::integer  as cantidad_casos_correctos,
			   0::integer  as cantidad_casos_incorrectos,
			   0::integer as porcentaje_avance,
			   '-'::varchar as fecha_registro,
			   PRUEBAS.hash as hash,
			   false::bool as satisfactorio
		 from TEMPORAL_CASOS_PRUEBA_ETAPA_0 as PRUEBAS;	     
	     
	     update TEMPORAL_DETALLE
	     set 
		 cantidad_casos_correctos = coalesce (
												  (select LOGS.total_logs
												  from  TEMPORAL_LOGS as LOGS
												  where LOGS.estado_match = 1
												  and TEMPORAL_DETALLE.hash = LOGS.hash	), 0								  
									  			 ),
		 cantidad_casos_incorrectos = coalesce( 
				    							  (select LOGS.total_logs
												  from  TEMPORAL_LOGS as LOGS
												  where LOGS.estado_match = 0
												  and TEMPORAL_DETALLE.hash = LOGS.hash), 0
		  										 ); 
		  										 
		--Nota: Obtener cantidad de casos esperados
	     v_cantidad_esperada := 2; 										 
	     
		--Nota: Se actualiza el porcentaje de los casos de prueba
	    update TEMPORAL_DETALLE
        set porcentaje_avance = sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(TEMPORAL_DETALLE.cantidad_casos_correctos,
        TEMPORAL_DETALLE.cantidad_casos_incorrectos,v_cantidad_esperada,v_cantidad_posibles_respuestas);	
	      										 
	  	 										 
	    --Nota: Obtener la cantidad de casos correctos add 20190715 rgt
	    select count(1) into v_cantidad_casos_correctos
	    from  TEMPORAL_DETALLE as DETALLE
	    where porcentaje_avance >= 100;
	   	
	    --**Nota: agregando pruebas sugeridas
	    v_cantidad_casos_correctos := v_cantidad_casos_correctos + v_cantidad_casos_sugeridos_correctos;
	    																
		--Nota: Obtenenmos la cantidad de casos pendientes
		v_cantidad_casos_pendientes := v_cantidad_casos_prueba - v_cantidad_casos_correctos;
	    								 
		--Nota: Calculo del porcentaje
		if (v_cantidad_casos_prueba > 0) then
			v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_prueba::numeric*100;
		end if; 
		
		--Nota: Verifica si es prueba concluida 20190701
		if( v_cantidad_casos_correctos >= v_cantidad_casos_prueba and v_cantidad_casos_prueba != 0)then
			v_es_prueba_concluida := true;
		end if;
		
		--Nota: Verifica si es prueba finalizada
		v_existe_fecha_fin_prueba := coalesce (
												(select true
												 from   TEMPORAL_PRUEBA_SISTEMA
												 where  fecha_fin_prueba is not null),
												 false
											   );
	  								  
	  return query
	  (select row_to_json(tbl) :: varchar
	  from (	  
	  		select p_prueba_certificacion_id as prueba_certificacion_sistema_id,
	  		       p_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id,
	  		       v_nombre_etapa_prueba as descripcion_prueba,
	  		       v_cantidad_casos_correctos as cantidad_pruebas_exitoso,
	  		       v_cantidad_casos_pendientes as cantidad_pruebas_pendiente,
	  		       v_cantidad_casos_prueba as cantidad_pruebas,
	  		       v_porcentaje as porcentaje,
	  		       v_es_prueba_concluida as es_prueba_concluida,
	  		       v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
	       ) tbl);									        									   
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_1(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo de los servicios. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_cantidad_pruebas_exitoso integer:=0;
  v_fecha_inicio_prueba timestamp;  	
  v_cantidad_pruebas integer;
  v_cantidad_pruebas_erroneo integer:=0;
  v_cantidad_pruebas_pendiente integer:=0;
  v_prueba_certificacion_sistema_id integer;
  v_descripcion_prueba character varying;
  v_json_varchar character varying;
  v_json json;
  v_prueba_concluida bool:=false;
  v_existe_fecha_fin_prueba bool:=false;
  v_valor_verificador_json varchar;
  v_porcentaje numeric:=0;
  v_etapa_completada boolean:=false;
begin
	
	v_fecha_inicio_prueba:= coalesce((  select fecha_inicio_prueba 
										from  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
									    inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
									    on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
									    where a.sistema_id=p_sistema_id 
									    and a.estado_id='AC' 
									    and b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
									  ),now());						
						  
	v_descripcion_prueba:=(select descripcion 
						   from str_transversales.str_cps_clasificadores 
						   where clasificador_id=p_etapa_certificacion_sistemas_id);
						  
    v_json_varchar:=(select row_to_json(TEMPORAL_CASO_PRUEBA_1) from (select a.fecha_inicio_prueba, a.fecha_fin_prueba, a.prueba_certificacion_sistema_id  
							    				   from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas a
												   right join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
												   on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
												   where b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id 
												   and (a.estado_id='AC' OR a.estado_id is null) 
												   and a.sistema_id=p_sistema_id
												  ) TEMPORAL_CASO_PRUEBA_1
					);

    v_json:= cast(v_json_varchar as json);
    v_valor_verificador_json:=(v_json->'prueba_certificacion_sistema_id');      
  	if(v_valor_verificador_json<>'null') then
  		v_fecha_inicio_prueba:=(v_json->'fecha_inicio_prueba');							 
	    v_prueba_certificacion_sistema_id:=(v_json->'prueba_certificacion_sistema_id');    	    
	    v_valor_verificador_json:=(v_json->'fecha_fin_prueba');
	     
	    if(v_valor_verificador_json <>'null') then    	
	    	v_existe_fecha_fin_prueba:=true;
	   	end if;   
	end if;	
	
	select etapa_completada 
	into v_etapa_completada
    from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
    inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
    on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
    where a.sistema_id=p_sistema_id 
    and a.estado_id='AC' 
    and b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
    order by fecha_inicio_prueba desc
    limit 1;
								     
	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		v_porcentaje:=100;
		v_cantidad_pruebas_pendiente:=0;
		v_cantidad_pruebas_exitoso:=(select count(1)/2 
									 from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio
									 where documento_sector_id in ( select b.codigo_clasificador 
									 							    from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
																    inner join sre_recaudaciones.sre_fac_clasificadores b
																    on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
																    where sistema_id=p_sistema_id
																    and a.estado_tipo_documento_sistema_id = 1380
							     									and a.estado_id='AC'
																   )
									);
		v_cantidad_pruebas:=v_cantidad_pruebas_exitoso;
		v_prueba_concluida:=true;
	else
		drop table if exists TEMPORAL_DETALLE_CASO_PRUEBA_1;
		CREATE TEMP TABLE TEMPORAL_DETALLE_CASO_PRUEBA_1 AS
		select resultado,porcentaje_avance from sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_detalle_1(p_sistema_id,p_etapa_certificacion_sistemas_id);
		v_cantidad_pruebas_exitoso:=(select count(1) from TEMPORAL_DETALLE_CASO_PRUEBA_1 where resultado=true);
		v_cantidad_pruebas_pendiente:=(select count(1) from TEMPORAL_DETALLE_CASO_PRUEBA_1 where resultado=false);
		v_cantidad_pruebas:=(select count(1) from TEMPORAL_DETALLE_CASO_PRUEBA_1);
		v_porcentaje:=(select sum(porcentaje_avance) from TEMPORAL_DETALLE_CASO_PRUEBA_1)/case when v_cantidad_pruebas=0 then 1 else v_cantidad_pruebas end;
		v_prueba_concluida := case when v_porcentaje>=(select sre_recaudaciones.sre_fac_par_estado('estado_porcentaje_caso_prueba_aprobado')) then true else false end; 
	end if;
	
	 --Adicionado 20191001 vcg.										   
     perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendiente,
			v_porcentaje,
			v_prueba_concluida
	 );
	
    return cast((select row_to_json(TEMPORAL_CASO_PRUEBA_1)       			 
      			 from ( select 
      			 v_existe_fecha_fin_prueba existe_fecha_fin_prueba,
      			 v_prueba_certificacion_sistema_id prueba_certificacion_sistema_id,
      			 p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			 v_descripcion_prueba descripcion_prueba,
      			 v_cantidad_pruebas cantidad_pruebas,
      			 v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso,
      			 v_cantidad_pruebas_pendiente cantidad_pruebas_pendiente, 
      			 v_porcentaje porcentaje, 
      			 v_prueba_concluida es_prueba_concluida
      			      ) TEMPORAL_CASO_PRUEBA_1
      			) as varchar
      		   );
	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa_1')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_10(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo del servicio de sincronizacion de fecha y hora. 
                El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <10/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad_casos_pruebas integer :=0;
	v_cantidad_casos_correctos integer := 0;
	v_cantidad_casos_pendientes integer := 0;
	v_porcentaje numeric := 0;
	v_nombre_etapa_prueba varchar := '';
	p_prueba_certificacion_id bigint := 0;
	v_match smallint :=0;
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	v_cantidad_pruebas_realizadas integer := 0;
	
begin		
	--NOTA: Obtener la canntidad de pruebas total de la etapa 5 de Eventos  Significativos
	v_cantidad_casos_pruebas := coalesce (
											(
												select count(*)
												from sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos
											), 0
										 );
										 
	--NOTA: Obtener nombre de la etapa
	v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id);
	
	--NOTA: obtenemos el registro de caso de prueba sistema, para ello creamos la tabla temporal
	drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.*
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';	
	
	v_fecha_fin_prueba := coalesce (
									(select fecha_fin_prueba
									 from   TEMPORAL_PRUEBA_SISTEMA
								    ), now()
								   );--add 20190716
								   
	v_fecha_inicio_prueba := (select fecha_inicio_prueba
							  from   TEMPORAL_PRUEBA_SISTEMA);--add 20190716	
	
	--NOTA: Obtener la cantidad de pruebas correctas de la etapa 5
	 select count(1) into v_cantidad_casos_correctos
	 from (
			select LOGS.caso_prueba_id, LOGS.hash, count(*) as total_casos_realizados
			from   sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as CASOS_PRUEBAS
			       inner join 
			       sre_recaudaciones.sre_fac_log_10_envio_masivos as LOGS
			on     CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id and CASOS_PRUEBAS.hash = logs.hash
			where  LOGS.sistema_id = p_sistema_id
			and    LOGS.estado_match = 1
			and    CASOS_PRUEBAS.estado_id = 'AC'
			and    LOGS.fecha_prueba >= v_fecha_inicio_prueba 
			and    LOGS.fecha_prueba <= v_fecha_fin_prueba
			group by LOGS.caso_prueba_id, LOGS.hash
		 ) as TBL_LOGS 
		 inner join 
		 sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as CASOS_PRUEBAS
     on TBL_LOGS.caso_prueba_id = CASOS_PRUEBAS.caso_prueba_id
     where sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(TBL_LOGS.total_casos_realizados::integer, CASOS_PRUEBAS.total_pruebas) >= 100;

	--NOTA: Obtener los casos de prueba pendiente
	v_cantidad_casos_pendientes := v_cantidad_casos_pruebas - v_cantidad_casos_correctos;							
	
	--NOTA: Calculo de porcentaje
	v_porcentaje :=	v_cantidad_casos_correctos *100::numeric / v_cantidad_casos_pruebas;
	
	--NOTA: Obtiene la prueba_certificacion_id
	p_prueba_certificacion_id := (select prueba_certificacion_sistema_id
								  from TEMPORAL_PRUEBA_SISTEMA);
									    
	--Nota: Calculo del porcentaje
	if (v_cantidad_casos_pruebas > 0) then
		v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_pruebas::numeric*100;
	end if; 								      
	
	--Nota: Verifica si es prueba concluida 20190701
	if( v_cantidad_casos_correctos >= v_cantidad_casos_pruebas and v_cantidad_casos_pruebas != 0)then
		v_es_prueba_concluida := true;
	end if;
	
	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce (
											(select true
											 from   TEMPORAL_PRUEBA_SISTEMA
											 where  fecha_fin_prueba is not null
											) ,false
										  );
										
	--Adicionado 20191001 vcg.										   
	perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_casos_pruebas,
			v_cantidad_casos_correctos,
			v_cantidad_casos_pendientes,
			v_porcentaje,
			v_es_prueba_concluida
	);
	
										  
	return query
  	(select row_to_json(tbl) :: varchar
  	from (	  
		   select p_prueba_certificacion_id as prueba_certificacion_sistema_id,
	       p_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id,
	       v_nombre_etapa_prueba as descripcion_prueba,
	       v_cantidad_casos_correctos as cantidad_pruebas_exitoso,
	       v_cantidad_casos_pendientes as cantidad_pruebas_pendiente,
	       v_cantidad_casos_pruebas as cantidad_pruebas,
	       v_porcentaje as porcentaje,
	       v_es_prueba_concluida as es_prueba_concluida,
	       v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
      	 ) tbl);
								   
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_11(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje de anulaciones. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <20/08/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<Fecha>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_cantidad_pruebas_exitoso integer:=0;
  v_fecha_inicio_prueba timestamp;  	
  v_fecha_fin_prueba timestamp;
  v_cantidad_pruebas integer;
  v_cantidad_pruebas_erroneo integer:=0;
  v_prueba_certificacion_sistema_id integer;
  v_descripcion_prueba character varying;
  v_json_varchar character varying;
  v_json json;
  v_es_prueba_concluida bool := false;
  v_cantidad_pruebas_pendientes integer := 0;
  v_prueba_concluida bool:=false;
  v_existe_fecha_fin_prueba bool:=false;
  v_valor_verificador_json varchar;
  v_porcentaje numeric:=0;

begin

	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce ((select true
											  from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
											       sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
											 where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
											   and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
											   and PRUEBA_SISTEMA.fecha_fin_prueba is not null 
											   and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
											   and PRUEBA_SISTEMA.estado_id = 'AC'
											), false
										  );
										  
	v_fecha_fin_prueba:=coalesce(( select fecha_fin_prueba 
							 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
							 inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
							 on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
							 where a.sistema_id=p_sistema_id 
							 and a.estado_id='AC' 
							 and b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
						   ),now());
						  
		drop table if exists TEMPORAL_LOGS_ETAPA_11;
	  create temp table TEMPORAL_LOGS_ETAPA_11 as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_11_anulaciones as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_11;
	  create temp table TEMPORAL_DETALLE_ETAPA_11 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_ETAPA_11 as logs where logs.hash = casos.hash) cant 
			  from sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones as casos
			  where casos.estado_id = 'AC'
			  and exists (select 1 from TEMPORAL_LOGS_ETAPA_11 as logs where logs.hash = casos.hash)
			  and documento_sector_id in ( select b.codigo_clasificador 
			 							   from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
										   inner join sre_recaudaciones.sre_fac_clasificadores b
										   on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
										   where sistema_id=p_sistema_id
										   and a.estado_tipo_documento_sistema_id = 1380
							     		   and a.estado_id='AC'
										  )
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		   from sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones as casos
		   where casos.estado_id = 'AC'
		   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_11 as logs where logs.hash = casos.hash)
		   and documento_sector_id in ( select b.codigo_clasificador 
		 							    from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
									    inner join sre_recaudaciones.sre_fac_clasificadores b
									    on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
									    where sistema_id=p_sistema_id
									    and a.estado_tipo_documento_sistema_id = 1380
							     		and a.estado_id='AC'
									  )
	  );
	  
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	 
	  select sum(total_pruebas), sum(cant), sum(cant)/sum(total_pruebas)*100
	    into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_porcentaje
	    from TEMPORAL_DETALLE_ETAPA_11;
	  
	  v_cantidad_pruebas_pendientes := v_cantidad_pruebas - v_cantidad_pruebas_exitoso;
	  
	  if v_cantidad_pruebas_pendientes = 0 then
	  	v_es_prueba_concluida := true;
	  end if;
	 
	v_descripcion_prueba:=(select descripcion 
						   from str_transversales.str_cps_clasificadores 
						   where clasificador_id=p_etapa_certificacion_sistemas_id);
						  
    v_json_varchar:=(select row_to_json(TEMPORAL_CASO_PRUEBA_11) from (select a.fecha_inicio_prueba, a.fecha_fin_prueba, a.prueba_certificacion_sistema_id  
							    				   from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas a
												   right join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
												   on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
												   where b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id 
												   and (a.estado_id='AC' OR a.estado_id is null) 
												   and a.sistema_id=p_sistema_id
												  ) TEMPORAL_CASO_PRUEBA_11
					);

    v_json:= cast(v_json_varchar as json);
    v_valor_verificador_json:=(v_json->'prueba_certificacion_sistema_id');

	v_prueba_concluida := case when v_porcentaje=100 then true else false end; 
	v_cantidad_pruebas_erroneo := case when v_cantidad_pruebas_erroneo = 0 then v_cantidad_pruebas else v_cantidad_pruebas_erroneo end;
	
	
	--Adicionado 20191001 vcg.										   
	perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendientes,
			v_porcentaje,
			v_prueba_concluida
	);
	
    return cast((select row_to_json(TEMPORAL_CASO_PRUEBA_11)       			 
      			 from ( 
      			 select 
      			 v_existe_fecha_fin_prueba existe_fecha_fin_prueba,
      			 v_valor_verificador_json prueba_certificacion_sistema_id,
      			 p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			 v_descripcion_prueba descripcion_prueba,
      			 v_cantidad_pruebas cantidad_pruebas,
      			 v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso,
      			 v_cantidad_pruebas_pendientes cantidad_pruebas_pendiente, 
      			 v_porcentaje porcentaje, 
      			 v_prueba_concluida es_prueba_concluida
      			      ) TEMPORAL_CASO_PRUEBA_11
      			) as varchar
      		   );
	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa_11')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_12(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo de proveedores. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <20/08/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<Fecha>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_cantidad_pruebas_exitoso integer:=0;
  v_fecha_inicio_prueba timestamp;  	
  v_fecha_fin_prueba timestamp;
  v_cantidad_pruebas integer;
  v_cantidad_pruebas_erroneo integer:=0;
  v_prueba_certificacion_sistema_id integer;
  v_descripcion_prueba character varying;
  v_json_varchar character varying;
  v_json json;
  v_es_prueba_concluida bool := false;
  v_cantidad_pruebas_pendientes integer := 0;
  v_prueba_concluida bool:=false;
  v_existe_fecha_fin_prueba bool:=false;
  v_valor_verificador_json varchar;
  v_porcentaje numeric:=0;
 
begin

	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce ((select true
											  from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
											       sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
											 where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
											   and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
											   and PRUEBA_SISTEMA.fecha_fin_prueba is not null 
											   and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
											   and PRUEBA_SISTEMA.estado_id = 'AC'
											), false
										  );
			
	v_fecha_fin_prueba:=coalesce(( select fecha_fin_prueba 
							 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
							 inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
							 on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
							 where a.sistema_id=p_sistema_id 
							 and a.estado_id='AC' 
							 and b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
						   ),now());
						  
		drop table if exists TEMPORAL_LOGS_ETAPA_12;
	  create temp table TEMPORAL_LOGS_ETAPA_12 as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_12_reportes as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_12;
	  create temp table TEMPORAL_DETALLE_ETAPA_12 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_ETAPA_12 as logs where logs.hash = casos.hash) cant 
			  from sre_recaudaciones.sre_fac_casos_prueba_12_reportes as casos
			  where casos.estado_id = 'AC'
			  and exists (select 1 from TEMPORAL_LOGS_ETAPA_12 as logs where logs.hash = casos.hash)
			  
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		   from sre_recaudaciones.sre_fac_casos_prueba_12_reportes as casos
		   where casos.estado_id = 'AC'
		   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_12 as logs where logs.hash = casos.hash)		   
	  );
	 
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	  
	  select sum(total_pruebas), sum(cant), sum(cant)/sum(total_pruebas)*100
	    into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_porcentaje
	    from TEMPORAL_DETALLE_ETAPA_12;
	  
	  v_cantidad_pruebas_pendientes := v_cantidad_pruebas - v_cantidad_pruebas_exitoso;
	  
	  if v_cantidad_pruebas_pendientes = 0 then
	  	v_es_prueba_concluida := true;
	  end if;
	 
	v_descripcion_prueba:=(select descripcion 
						   from str_transversales.str_cps_clasificadores 
						   where clasificador_id=p_etapa_certificacion_sistemas_id);
						  
    v_json_varchar:=(select row_to_json(TEMPORAL_CASO_PRUEBA_12) from (select a.fecha_inicio_prueba, a.fecha_fin_prueba, a.prueba_certificacion_sistema_id  
							    				   from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas a
												   right join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
												   on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
												   where b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id 
												   and (a.estado_id='AC' OR a.estado_id is null) 
												   and a.sistema_id=p_sistema_id
												  ) TEMPORAL_CASO_PRUEBA_12
					);

    v_json:= cast(v_json_varchar as json);
    v_valor_verificador_json:=(v_json->'prueba_certificacion_sistema_id');

	v_prueba_concluida := case when v_porcentaje=100 then true else false end; 
	v_cantidad_pruebas_erroneo := case when v_cantidad_pruebas_erroneo = 0 then v_cantidad_pruebas else v_cantidad_pruebas_erroneo end;
	
	--Adicionado 20191001 vcg.										   
	perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendientes,
			v_porcentaje,
			v_prueba_concluida
	);
                   
	
    return cast((select row_to_json(TEMPORAL_CASO_PRUEBA_12)       			 
      			 from ( 
      			 	select 
      			 	v_existe_fecha_fin_prueba existe_fecha_fin_prueba,
      			 	v_valor_verificador_json prueba_certificacion_sistema_id,
      			 	p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			 	v_descripcion_prueba descripcion_prueba,
      			 	v_cantidad_pruebas cantidad_pruebas,
      			 	v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso,
      			 	v_cantidad_pruebas_pendientes cantidad_pruebas_pendiente, 
      			 	v_porcentaje porcentaje, 
      			 	v_prueba_concluida es_prueba_concluida
      			      ) TEMPORAL_CASO_PRUEBA_12
      			) as varchar
      		   );
	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa_12')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_2(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO    
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_prueba_certificacion_sistema_id bigint:=0;
 	v_etapa_certificacion_sistemas_id integer:=0;
  	v_descripcion_prueba varchar:='';
  	v_cantidad_pruebas integer:=0;
  	v_cantidad_pruebas_exitoso integer:=0;
  	v_cantidad_pruebas_pendiente integer:=0;
  	v_porcentaje numeric:=0;
  	v_es_prueba_concluida bool:=false;
  	v_existe_fecha_fin_prueba bool := false;
  	v_existe_prueba bool:=false;
  	v_ha_finalizado bool:=false;
  	v_ha_iniciado bool:=false;
  	
begin	
	--Obtener el ID prueba certificacion
	v_prueba_certificacion_sistema_id :=(
		select PRU.prueba_certificacion_sistema_id 
	  	from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
	  	on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
	  	where 
	  	PRU.estado_id='AC'
	  	and PRU.sistema_id=p_sistema_id	  	
	  	and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
	  	and ETA.estado_id='AC'
	  	limit 1
	  	);
	
 	
  	--Obtner la descripcion de la prueba
  	v_descripcion_prueba:=(select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id limit 1);
  	
  	select totalcasospruebas, totalcasospruebasexitosos, totalcasospruebapendientes, porcentajeetapa::numeric into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_cantidad_pruebas_pendiente, v_porcentaje 
  	from sre_recaudaciones.sre_fac_pru_calcular_totales_etapa_x(p_sistema_id, p_etapa_certificacion_sistemas_id, 0);
  	  	
  	  	
  	--Verificar si existe fecha fin de prueba  	
  	v_existe_fecha_fin_prueba :=coalesce((
	  	select true 
	  	from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
	  	on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
	  	where 
	  	PRU.estado_id='AC'
	  	and PRU.sistema_id=p_sistema_id
	  	and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is not null)
	  	and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
	  	and ETA.estado_id='AC'
	  	limit 1
  	),false);

  	--Comprobar si ha finalizado la etapa 
  	if v_porcentaje >=100 then
  		v_es_prueba_concluida:=true;
  	end if;
  	
	 --Adicionado 20191001 vcg.										   
     perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendiente,
			v_porcentaje,
			v_es_prueba_concluida
	 );
	 
  	return cast(
  		(select row_to_json(tbl) 
      	 from ( select v_prueba_certificacion_sistema_id as prueba_certificacion_sistema_id, 
      	 		p_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id, 
      	 		v_descripcion_prueba as descripcion_prueba, 
      	 		v_cantidad_pruebas as cantidad_pruebas,  
      	 		v_cantidad_pruebas_exitoso as cantidad_pruebas_exitoso,
      	 		v_cantidad_pruebas_pendiente as cantidad_pruebas_pendiente,
      	 		v_porcentaje as porcentaje, 
      	 		v_es_prueba_concluida as es_prueba_concluida,
      	 		v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
      	 		) tbl) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_3(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo del servicio de sincronizacion de catálogos. 
                El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <26/07/2019>
AUTOR : Ivan Salas
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	--p_etapa_certificacion_sistemas_id integer := 2854;
	--p_sistema_id bigint := 217;

	v_nombre_etapa_prueba varchar;
	v_fecha_fin_prueba timestamp;
	v_cantidad_pruebas integer := 0;
	v_cantidad_pruebas_exitoso integer := 0;
	v_cantidad_pruebas_pendientes integer := 0;
	v_porcentaje numeric(20,2) := 0;
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	p_prueba_certificacion_id bigint := null;
begin
	
	--Nota: Se obtiene el nombre de la prueba
	v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id = p_etapa_certificacion_sistemas_id);
	
	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce ((select true
											  from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
											       sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
											 where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
											   and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
											   and PRUEBA_SISTEMA.fecha_fin_prueba is not null 
											   and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
											   and PRUEBA_SISTEMA.estado_id = 'AC'
											), false
										  );
										  
	--Nota: Obtenemos el ID de sre_fac_pruebas_certificacion_sistemas
	 p_prueba_certificacion_id := (select PRUEBA_SISTEMA.prueba_certificacion_sistema_id
									 from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA, 
										  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
									  and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
									  and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
									  and PRUEBA_SISTEMA.estado_id = 'AC'); 										  
											   
	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_3;
	  create temp table TEMPORAL_LOGS_ETAPA_3 as (
		  select LOGS.hash, logs.agrupador
		  from  sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_3;
	  create temp table TEMPORAL_DETALLE_ETAPA_3 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant, x.agrupador
		    from (
			  select casos.hash, casos.total_pruebas, 
			         (select count(*) cant from TEMPORAL_LOGS_ETAPA_3 as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador) cant,
			         casos.agrupador
			    from sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos as casos
			   where casos.estado_id = 'AC'
			     and exists (select 1 from TEMPORAL_LOGS_ETAPA_3 as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant, casos.agrupador
		    from sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_3 as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
	  );
	  
	  update TEMPORAL_DETALLE_ETAPA_3 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_3 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	 
	  select sum(total_pruebas), sum(cant), sum(cant)/sum(total_pruebas)*100
	    into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_porcentaje
	    from TEMPORAL_DETALLE_ETAPA_3;
	  
	  v_cantidad_pruebas_pendientes := v_cantidad_pruebas - v_cantidad_pruebas_exitoso;
	  
	  if v_cantidad_pruebas_pendientes = 0 then
	  	v_es_prueba_concluida := true;
	  end if;
	  
	  
	 --Adicionado 20191001 vcg.										   
     perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendientes,
			v_porcentaje,
			v_es_prueba_concluida
	 );
	  
	  return cast((select row_to_json(tbl)       			 
      			 from ( select v_existe_fecha_fin_prueba existe_fecha_fin_prueba, 
      			               p_prueba_certificacion_id prueba_certificacion_sistema_id,
      			               p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			               v_nombre_etapa_prueba descripcion_prueba,
      			               v_cantidad_pruebas cantidad_pruebas,
      			               v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso, 
      			               v_cantidad_pruebas_pendientes cantidad_pruebas_pendiente,
      			               v_porcentaje porcentaje, 
      			               v_es_prueba_concluida es_prueba_concluida
      			      ) tbl
      			) as varchar
      		   );
	  
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_4(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo del servicio de sincronizacion de fecha y hora. 
                El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <10/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	--p_etapa_certificacion_sistemas_id integer := 2854;
	--p_sistema_id bigint := 217;

	v_nombre_etapa_prueba varchar;
	v_fecha_fin_prueba timestamp;
	v_cantidad_pruebas integer := 0;
	v_cantidad_pruebas_exitoso integer := 0;
	v_cantidad_pruebas_pendientes integer := 0;
	v_porcentaje numeric(20,2) := 0;
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	p_prueba_certificacion_id bigint := null;
begin
	
	--Nota: Se obtiene el nombre de la prueba
	v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id = p_etapa_certificacion_sistemas_id);
	
	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce ((select true
											  from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
											       sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
											 where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
											   and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
											   and PRUEBA_SISTEMA.fecha_fin_prueba is not null 
											   and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
											   and PRUEBA_SISTEMA.estado_id = 'AC'
											), false
										  );
										  
	--Nota: Obtenemos el ID de sre_fac_pruebas_certificacion_sistemas
	 p_prueba_certificacion_id := (select PRUEBA_SISTEMA.prueba_certificacion_sistema_id
									 from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA, 
										  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
									  and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
									  and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
									  and PRUEBA_SISTEMA.estado_id = 'AC'); 										  
											   
	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_ETAPA_4;
	  create temp table TEMPORAL_LOGS_ETAPA_4 as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_4;
	  create temp table TEMPORAL_DETALLE_ETAPA_4 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_ETAPA_4 as logs where logs.hash = casos.hash) cant 
			    from sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora as casos
			   where casos.estado_id = 'AC'
			     and exists (select 1 from TEMPORAL_LOGS_ETAPA_4 as logs where logs.hash = casos.hash)
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		    from sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_4 as logs where logs.hash = casos.hash)
	  );
	  
	  update TEMPORAL_DETALLE_ETAPA_4 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_4 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	 
	  select sum(total_pruebas), sum(cant), sum(cant)/sum(total_pruebas)*100
	    into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_porcentaje
	    from TEMPORAL_DETALLE_ETAPA_4;
	  
	  v_cantidad_pruebas_pendientes := v_cantidad_pruebas - v_cantidad_pruebas_exitoso;
	  
	  if v_cantidad_pruebas_pendientes = 0 then
	  	v_es_prueba_concluida := true;
	  end if;
	  
	  
	 --Adicionado 20191001 vcg.										   
     perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendientes,
			v_porcentaje,
			v_es_prueba_concluida
	 );
	  
	  return cast((select row_to_json(tbl)       			 
      			 from ( select v_existe_fecha_fin_prueba existe_fecha_fin_prueba, 
      			               p_prueba_certificacion_id prueba_certificacion_sistema_id,
      			               p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			               v_nombre_etapa_prueba descripcion_prueba,
      			               v_cantidad_pruebas cantidad_pruebas,
      			               v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso, 
      			               v_cantidad_pruebas_pendientes cantidad_pruebas_pendiente,
      			               v_porcentaje porcentaje, 
      			               v_es_prueba_concluida es_prueba_concluida
      			      ) tbl
      			) as varchar
      		   );
	  
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_5(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite obtener el porcentaje de la etapa 5
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 18/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se agrego a esta funcion el llamado del match entre los casos de prueba y la tabla de logs
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<24/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad_casos_pruebas integer :=0;
	v_cantidad_casos_correctos integer := 0;
	v_cantidad_casos_pendientes integer := 0;
	v_porcentaje numeric := 0;
	v_nombre_etapa_prueba varchar := '';
	p_prueba_certificacion_id bigint := 0;
	v_match smallint :=0;
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	v_cantidad_pruebas_realizadas integer := 0;
	
begin
	
	--NOTA: Llamamos a la funcion match -add 20190624
	v_match := sre_recaudaciones.sre_fac_match_log_casos_prueba_etapa_5(p_sistema_id);
	
	--NOTA: Obtener la canntidad de pruebas total de la etapa 5 de Eventos  Significativos
	v_cantidad_casos_pruebas := coalesce (
											(
												select count(*)
												from sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos
											), 0
										 );
										 
	--NOTA: Obtener nombre de la etapa
	v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id);
	
	--NOTA: obtenemos el registro de caso de prueba sistema, para ello creamos la tabla temporal
	drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.*
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';	
	
	v_fecha_fin_prueba := coalesce (
									(select fecha_fin_prueba
									 from   TEMPORAL_PRUEBA_SISTEMA
								    ), now()
								   );--add 20190716
								   
	v_fecha_inicio_prueba := (select fecha_inicio_prueba
							  from   TEMPORAL_PRUEBA_SISTEMA);--add 20190716	
	
	--NOTA: Obtener la cantidad de pruebas correctas de la etapa 5
	 select count(1) into v_cantidad_casos_correctos
	 from (
			select LOGS.caso_prueba_id, LOGS.hash, count(*) as total_casos_realizados
			from   sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
			       inner join 
			       sre_recaudaciones.sre_fac_log_5_eventos_significativos as LOGS
			on     CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id and CASOS_PRUEBAS.hash = logs.hash
			where  LOGS.sistema_id = p_sistema_id
			and    LOGS.estado_match = 1
			and    CASOS_PRUEBAS.estado_id = 'AC'
			and    LOGS.fecha_prueba >= v_fecha_inicio_prueba 
			and    LOGS.fecha_prueba <= v_fecha_fin_prueba
			group by LOGS.caso_prueba_id, LOGS.hash
		 ) as TBL_LOGS 
		 inner join 
		 sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
     on TBL_LOGS.caso_prueba_id = CASOS_PRUEBAS.caso_prueba_id
     where sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(TBL_LOGS.total_casos_realizados::integer, CASOS_PRUEBAS.total_pruebas) >= 100;

	--NOTA: Obtener los casos de prueba pendiente
	v_cantidad_casos_pendientes := v_cantidad_casos_pruebas - v_cantidad_casos_correctos;							
	
	--NOTA: Calculo de porcentaje
	v_porcentaje :=	v_cantidad_casos_correctos *100::numeric / v_cantidad_casos_pruebas;
	
	--NOTA: Obtiene la prueba_certificacion_id
	p_prueba_certificacion_id := (select prueba_certificacion_sistema_id
								  from TEMPORAL_PRUEBA_SISTEMA);
									    
	--Nota: Calculo del porcentaje
	if (v_cantidad_casos_pruebas > 0) then
		v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_pruebas::numeric*100;
	end if; 								      
	
	--Nota: Verifica si es prueba concluida 20190701
	if( v_cantidad_casos_correctos >= v_cantidad_casos_pruebas and v_cantidad_casos_pruebas != 0)then
		v_es_prueba_concluida := true;
	end if;
	
	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce (
											(select true
											 from   TEMPORAL_PRUEBA_SISTEMA
											 where  fecha_fin_prueba is not null
											) ,false
										  );
										
	
     --Adicionado 20191001 vcg.										   
     perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_casos_pruebas,
			v_cantidad_casos_correctos,
			v_cantidad_casos_pendientes,
			v_porcentaje,
			v_es_prueba_concluida
	 );
										  
	return query
  	(select row_to_json(tbl) :: varchar
  	from (	  
		   select p_prueba_certificacion_id as prueba_certificacion_sistema_id,
	       p_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id,
	       v_nombre_etapa_prueba as descripcion_prueba,
	       v_cantidad_casos_correctos as cantidad_pruebas_exitoso,
	       v_cantidad_casos_pendientes as cantidad_pruebas_pendiente,
	       v_cantidad_casos_pruebas as cantidad_pruebas,
	       v_porcentaje as porcentaje,
	       v_es_prueba_concluida as es_prueba_concluida,
	       v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
      	 ) tbl);
								   
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_6(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO    
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
                v_prueba_certificacion_sistema_id bigint:=0;
               v_etapa_certificacion_sistemas_id integer:=0;
               v_descripcion_prueba varchar:='';
               v_cantidad_pruebas integer:=0;
               v_cantidad_pruebas_exitoso integer:=0;
               v_cantidad_pruebas_pendiente integer:=0;
               v_porcentaje numeric:=0;
               v_es_prueba_concluida bool:=false;
               v_existe_fecha_fin_prueba bool := false;
               v_existe_prueba bool:=false;
               v_ha_finalizado bool:=false;
               v_ha_iniciado bool:=false;
begin                
                --Obtener el ID prueba certificacion
                v_prueba_certificacion_sistema_id :=(
                               select PRU.prueba_certificacion_sistema_id 
                               from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
                               on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
                               where 
                               PRU.estado_id='AC'
                               and PRU.sistema_id=p_sistema_id                         
                               and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
                               and ETA.estado_id='AC'
                               limit 1
                               );

                --Obtener el ID etapa certificacion
               v_etapa_certificacion_sistemas_id :=p_etapa_certificacion_sistemas_id;
               
               --Obtner la descripcion de la prueba
               v_descripcion_prueba:=(select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id limit 1);
               
               select totalcasospruebas, totalcasospruebasexitosos, totalcasospruebapendientes, porcentajeetapa::numeric into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_cantidad_pruebas_pendiente, v_porcentaje 
               from sre_recaudaciones.sre_fac_pru_calcular_totales_etapa_x(p_sistema_id, p_etapa_certificacion_sistemas_id, 0);
                               
               --Verificar si existe fecha fin de prueba                  
               v_existe_fecha_fin_prueba :=coalesce((
                               select true 
                               from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
                               on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
                               where 
                               PRU.estado_id='AC'
                               and PRU.sistema_id=p_sistema_id
                               and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is not null)
                               and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
                               and ETA.estado_id='AC'
                               limit 1
               ),false);

               --Comprobar si ha finalizado la etapa
               if v_porcentaje >=100 then
                               v_es_prueba_concluida:=true;
               end if;
               
               --Adicionado 20191001 vcg.										   
		     	perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
					p_sistema_id,
					p_etapa_certificacion_sistemas_id,
					v_cantidad_pruebas,
					v_cantidad_pruebas_exitoso,
					v_cantidad_pruebas_pendiente,
					v_porcentaje,
					v_es_prueba_concluida
			 	);
               
                                              
               return cast(
                               (select row_to_json(tbl) 
                from ( select v_prueba_certificacion_sistema_id as prueba_certificacion_sistema_id, 
                                               v_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id, 
                                               v_descripcion_prueba as descripcion_prueba, 
                                               v_cantidad_pruebas as cantidad_pruebas,  
                                               v_cantidad_pruebas_exitoso as cantidad_pruebas_exitoso,
                                               v_cantidad_pruebas_pendiente as cantidad_pruebas_pendiente,
                                               v_porcentaje as porcentaje, 
                                               v_es_prueba_concluida as es_prueba_concluida,
                                               v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
                                               ) tbl) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_7(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo de los servicios. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_cantidad_pruebas_exitoso integer:=0;
  v_cantidad_correctas integer:=0;
  v_fecha_inicio_prueba timestamp;  	
  v_fecha_fin_prueba timestamp;
  v_cantidad_total_pruebas integer;
  v_prueba_certificacion_sistema_id integer;
  v_sql varchar;	
  v_descripcion_prueba character varying;
  v_json_varchar character varying;
  v_json json;
  v_prueba_concluida bool:=false;
  v_valor_verificador_json varchar;
  v_casos_pendientes integer:=0;
  v_existe_fecha_fin_prueba bool:=false;
  v_porcentaje numeric:=0;
begin

	update sre_recaudaciones.sre_fac_log_7_firma_digital set estado_match=1
	where log_id in (select log_id 
					 from sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital a
					 inner join sre_recaudaciones.sre_fac_log_7_firma_digital b 
					 on a.hash=b.hash 
					 and sistema_id=p_sistema_id
				    );

	update sre_recaudaciones.sre_fac_log_7_firma_digital a set caso_prueba_id=( select caso_prueba_id 
																				from (select a.caso_prueba_id,sistema_id,log_id ,a.documento_sector_id
																					  from sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital a
																					  inner join sre_recaudaciones.sre_fac_log_7_firma_digital b 
																					  on a.hash=b.hash 
																					  and sistema_id=p_sistema_id 
																					  and b.estado_id='AC'
																					  ) tbl1
				    															where a.log_id=tbl1.log_id 
				    															and documento_sector_id=tbl1.documento_sector_id 
				    															and tbl1.sistema_id=a.sistema_id
				    														   );
				   
	v_sql:='select count (distinct caso_prueba_id) from sre_recaudaciones.sre_fac_log_7_firma_digital a where a.fecha_registro>=';
	
	v_descripcion_prueba:=( select descripcion 
							from str_transversales.str_cps_clasificadores 
						    where clasificador_id=p_etapa_certificacion_sistemas_id
						  );
				 
    v_json_varchar:=(select row_to_json(tbl) 
    				 from ( select a.fecha_inicio_prueba, a.fecha_fin_prueba, a.prueba_certificacion_sistema_id  
    				        from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas a
         					right join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
					        on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
	    					where b.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id 
	    				    and (a.estado_id='AC' OR a.estado_id is null) 
	    				    and a.sistema_id=p_sistema_id
	    				   ) tbl
	    			);

    v_json:= cast(v_json_varchar as json);
    v_valor_verificador_json:=(v_json->'prueba_certificacion_sistema_id');	
  	if(v_valor_verificador_json<>'null') then
	    v_prueba_certificacion_sistema_id:=(v_json->'prueba_certificacion_sistema_id');    	    
	    v_valor_verificador_json:=(v_json->'fecha_fin_prueba');
	    v_fecha_inicio_prueba:=(v_json->'fecha_inicio_prueba');	  
	    v_sql:=v_sql||''''||v_fecha_inicio_prueba||''''|| ' and estado_match=1 and estado_id=''AC'' and sistema_id='||p_sistema_id;
	    if(v_valor_verificador_json <>'null') then    	
	    	v_prueba_concluida:=true;
	    	v_fecha_fin_prueba:=(v_json->'fecha_fin_prueba');
	   	    v_sql:=v_sql||' and a.fecha_registro<='''||v_fecha_fin_prueba||'''';	   	   
  	        v_existe_fecha_fin_prueba:=true;
	   	end if;
	    execute v_sql  
	    into v_cantidad_correctas;
	end if;

    v_cantidad_total_pruebas:=(select count (1) from sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital);

	v_casos_pendientes := v_cantidad_total_pruebas - v_cantidad_correctas;
	v_cantidad_pruebas_exitoso:= v_cantidad_total_pruebas - v_casos_pendientes;
	v_porcentaje:=(case when v_cantidad_total_pruebas = 0 then 0 else round( v_cantidad_correctas/v_cantidad_total_pruebas::numeric*100, 2 ) end);
    v_prueba_concluida= case when v_porcentaje>=100 then true else false end;
    
    --Adicionado 20191001 vcg.										   
	perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_total_pruebas,
			v_cantidad_pruebas_exitoso,
			v_casos_pendientes,
			v_porcentaje,
			v_prueba_concluida
	);
    
    return cast((select row_to_json(tbl)       			 
      			 from ( select 
      			 v_existe_fecha_fin_prueba existe_fecha_fin_prueba, 
      			 v_prueba_certificacion_sistema_id prueba_certificacion_sistema_id,
      			 p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			 v_descripcion_prueba descripcion_prueba,
      			 v_cantidad_total_pruebas cantidad_pruebas,
      			 v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso, 
      			 v_casos_pendientes cantidad_pruebas_pendiente,
      			 v_porcentaje porcentaje, 
      			 v_prueba_concluida es_prueba_concluida
      			      ) tbl
      			) as varchar
      		   );
	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa_7')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_8(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO    
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_prueba_certificacion_sistema_id bigint:=0;
 	v_etapa_certificacion_sistemas_id integer:=0;
  	v_descripcion_prueba varchar:='';
  	v_cantidad_pruebas integer:=0;
  	v_cantidad_pruebas_exitoso integer:=0;
  	v_cantidad_pruebas_pendiente integer:=0;
  	v_porcentaje numeric:=0;
  	v_es_prueba_concluida bool:=false;
  	v_existe_fecha_fin_prueba bool := false;
  	v_existe_prueba bool:=false;
  	v_ha_finalizado bool:=false;
  	v_ha_iniciado bool:=false;
begin		
	--Obtener el ID prueba certificacion
	v_prueba_certificacion_sistema_id :=(
		select PRU.prueba_certificacion_sistema_id 
	  	from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
	  	on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
	  	where 
	  	PRU.estado_id='AC'
	  	and PRU.sistema_id=p_sistema_id	  	
	  	and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
	  	and ETA.estado_id='AC'
	  	limit 1
	  	);

	--Obtener el ID etapa certificacion
 	--v_etapa_certificacion_sistemas_id :=p_etapa_certificacion_sistemas_id;
 	
  	--Obtner la descripcion de la prueba
  	v_descripcion_prueba:=(select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id limit 1);
  	
  	select totalcasospruebas, totalcasospruebasexitosos, totalcasospruebapendientes, porcentajeetapa::numeric into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_cantidad_pruebas_pendiente, v_porcentaje 
  	from sre_recaudaciones.sre_fac_pru_calcular_totales_etapa_x(p_sistema_id, p_etapa_certificacion_sistemas_id,0);
  	 	  	
  	--Verificar si existe fecha fin de prueba  	
  	v_existe_fecha_fin_prueba :=coalesce((
	  	select true 
	  	from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
	  	on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
	  	where 
	  	PRU.estado_id='AC'
	  	and PRU.sistema_id=p_sistema_id
	  	and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is not null)
	  	and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
	  	and ETA.estado_id='AC'
	  	limit 1
  	),false);

  	--Comprobar si ha finalizado la etapa 
  	if(v_porcentaje>=100) then
  		v_es_prueba_concluida:=true;
  	end if;
  	
  	--Adicionado 20191001 vcg.										   
	perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendiente,
			v_porcentaje,
			v_es_prueba_concluida
	);
  	  	  	
  	return cast(
  		(select row_to_json(tbl) 
      	 from ( select 
      	 		v_prueba_certificacion_sistema_id as prueba_certificacion_sistema_id, 
      	 		p_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id, 
      	 		v_descripcion_prueba as descripcion_prueba, 
      	 		v_cantidad_pruebas as cantidad_pruebas,  
      	 		v_cantidad_pruebas_exitoso as cantidad_pruebas_exitoso,
      	 		v_cantidad_pruebas_pendiente as cantidad_pruebas_pendiente,
      	 		v_porcentaje as porcentaje, 
      	 		v_es_prueba_concluida as es_prueba_concluida,
      	 		v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
      	 		) tbl) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_9(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint, p_nit bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO    
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
                v_prueba_certificacion_sistema_id bigint:=0;
               v_etapa_certificacion_sistemas_id integer:=0;
               v_descripcion_prueba varchar:='';
               v_cantidad_pruebas integer:=0;
               v_cantidad_pruebas_exitoso integer:=0;
               v_cantidad_pruebas_pendiente integer:=0;
               v_porcentaje numeric:=0;
               v_es_prueba_concluida bool:=false;
               v_existe_fecha_fin_prueba bool := false;
               v_existe_prueba bool:=false;
               v_ha_finalizado bool:=false;
               v_ha_iniciado bool:=false;
begin                
                --Obtener el ID prueba certificacion
                v_prueba_certificacion_sistema_id :=(
                               select PRU.prueba_certificacion_sistema_id 
                               from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
                               on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
                               where 
                               PRU.estado_id='AC'
                               and PRU.sistema_id=p_sistema_id                         
                               and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
                               and ETA.estado_id='AC'
                               limit 1
                               );

                --Obtener el ID etapa certificacion
               v_etapa_certificacion_sistemas_id :=p_etapa_certificacion_sistemas_id;
               
               --Obtner la descripcion de la prueba
               v_descripcion_prueba:=(select descripcion from str_transversales.str_cps_clasificadores where clasificador_id=p_etapa_certificacion_sistemas_id limit 1);
               
               select totalcasospruebas, totalcasospruebasexitosos, totalcasospruebapendientes, porcentajeetapa::numeric into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_cantidad_pruebas_pendiente, v_porcentaje 
               from sre_recaudaciones.sre_fac_pru_calcular_totales_etapa_x(p_sistema_id, p_etapa_certificacion_sistemas_id, 0);
               

               --Verificar si existe fecha fin de prueba                  
               v_existe_fecha_fin_prueba :=coalesce((
                               select true 
                               from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
                               on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
                               where 
                               PRU.estado_id='AC'
                               and PRU.sistema_id=p_sistema_id
                               and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is not null)
                               and ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
                               and ETA.estado_id='AC'
                               limit 1
               ),false);

               --Comprobar si ha finalizado la etapa
               if v_porcentaje >=100 then
                               v_es_prueba_concluida:=true;
               end if;
               
               	--Adicionado 20191001 vcg.										   
				perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
						p_sistema_id,
						p_etapa_certificacion_sistemas_id,
						v_cantidad_pruebas,
						v_cantidad_pruebas_exitoso,
						v_cantidad_pruebas_pendiente,
						v_porcentaje,
						v_es_prueba_concluida
				);
                                              
               return cast(
                               (select row_to_json(tbl) 
                from ( select v_prueba_certificacion_sistema_id as prueba_certificacion_sistema_id, 
                                               v_etapa_certificacion_sistemas_id as etapa_certificacion_sistemas_id, 
                                               v_descripcion_prueba as descripcion_prueba, 
                                               v_cantidad_pruebas as cantidad_pruebas,  
                                               v_cantidad_pruebas_exitoso as cantidad_pruebas_exitoso,
                                               v_cantidad_pruebas_pendiente as cantidad_pruebas_pendiente,
                                               v_porcentaje as porcentaje, 
                                               v_es_prueba_concluida as es_prueba_concluida,
                                               v_existe_fecha_fin_prueba as existe_fecha_fin_prueba
                                               ) tbl) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_9_por_nit(p_nit bigint, p_sistema_id bigint)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO    
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se ajusto el porcentaje de la etapa proveedores  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<26/09/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
       v_porcentaje_total numeric:=0;
      v_porcentaje_por_nit numeric:=0;
      v_porcentaje numeric:=0;
      v_tipo_documento_sector integer:=0;
       v_tipo_documento_sector_proveedor bigint:=0;
       v_fecha_fin_prueba timestamp;
       v_fecha_inicio_prueba timestamp;
begin

          v_tipo_documento_sector_proveedor:=(select tipo_documento_sector_id from sre_recaudaciones.sre_fac_nits_pruebas_proveedores where nit=p_nit);
       v_tipo_documento_sector:= (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where codigo_clasificador_equivalente=v_tipo_documento_sector_proveedor limit 1);    
       v_porcentaje_total:=(select count(1) from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor where documento_sector_id in (v_tipo_documento_sector,0) and estado_id='AC');

       select PRUEBA_SISTEMA.fecha_inicio_prueba,PRUEBA_SISTEMA.fecha_fin_prueba
       into  v_fecha_inicio_prueba ,v_fecha_fin_prueba 
       from  sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
             sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
       where ETAPA.etapa_certificacion_sistemas_id = 3052 and --SISTEMA PROVEEDOR                                                                                 
             ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
             PRUEBA_SISTEMA.sistema_id = p_sistema_id and
             PRUEBA_SISTEMA.estado_id = 'AC';
       
       v_fecha_fin_prueba:=case when v_fecha_fin_prueba is null then now() else v_fecha_fin_prueba end;
      
      drop table if exists temporal_sre_fac_casos_prueba_9_gestion_proveedor;
         create temp table temporal_sre_fac_casos_prueba_9_gestion_proveedor
         as
         select total_pruebas,agrupador,hash  
         from  sre_recaudaciones.sre_fac_casos_prueba_9_proveedor
         where estado_id='AC'                                                 
         and documento_sector_id in (v_tipo_documento_sector,0); 
        
         
         update temporal_sre_fac_casos_prueba_9_gestion_proveedor 
         set agrupador ='PAQUETE' where agrupador like 'SOAP PARAMETROS%';
      
         drop table if exists temporal_sre_fac_log_9_gestion_proveedor;
         create temp table temporal_sre_fac_log_9_gestion_proveedor
         as
         select count(1) cantidad_log,a.agrupador,a.hash  
         from sre_recaudaciones.sre_fac_log_9_gestion_proveedor a 
         inner join sre_recaudaciones.sre_fac_casos_prueba_9_proveedor b
         on a.hash=b.hash
         where a.nit_cliente= p_nit
         and fecha_prueba>=v_fecha_inicio_prueba
         and fecha_prueba<=v_fecha_fin_prueba
         and sistema_id=p_sistema_id
         and a.estado_id='AC'
         and b.estado_id='AC'
         and a.estado_match=1
         and b.documento_sector_id in (v_tipo_documento_sector,0)      
         group by a.hash,a.agrupador;

         alter table temporal_sre_fac_casos_prueba_9_gestion_proveedor
         add column cantidad_log integer;

         update temporal_sre_fac_casos_prueba_9_gestion_proveedor set cantidad_log= (select tbl.cantidad_log 
                                                                                                                                           from (select b.*  
                                                                                                                                                       from temporal_sre_fac_casos_prueba_9_gestion_proveedor a
                                                                                                                                                       left JOIN temporal_sre_fac_log_9_gestion_proveedor b
                                                                                                                                                       on a.hash=b.hash 
                                                                                                                                                       and a.agrupador=b.agrupador
                                                                                                                                                       )tbl
                                                                                                                                           where tbl.hash=temporal_sre_fac_casos_prueba_9_gestion_proveedor.hash and tbl.agrupador=temporal_sre_fac_casos_prueba_9_gestion_proveedor.agrupador
                                                                                                                                           );

       UPDATE temporal_sre_fac_casos_prueba_9_gestion_proveedor set cantidad_log = (case when cantidad_log > total_pruebas then total_pruebas else cantidad_log end);
         
       v_porcentaje_por_nit:=(select sum(cantidad_log) from temporal_sre_fac_casos_prueba_9_gestion_proveedor);
       v_porcentaje_total:=(select sum(total_pruebas) from temporal_sre_fac_casos_prueba_9_gestion_proveedor);
       v_porcentaje:= trunc((v_porcentaje_por_nit/v_porcentaje_total)*100,0);
       v_porcentaje:= case when v_porcentaje>100 then 100 else v_porcentaje end; 
    return coalesce(v_porcentaje,0);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_n(p_sistema_id bigint, p_prueba_etapa_certificacion_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo de los servicios. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
              No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        

  v_porcentaje_etapa integer:=0; 
  v_porcentaje_decimal decimal:=0;
begin
              
       
       v_porcentaje_decimal:= coalesce((select (porcentaje_cubierto) 
                                                          from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas a
                                                          inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
                                                          on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
                                                          where sistema_id=p_sistema_id 
                                                          and a.estado_id='AC' 
                                                          and b.estado_id='AC' 
                                                          and etapa_certificacion_sistemas_id=p_prueba_etapa_certificacion_id
                                                         ),0
                                                       );    
       v_porcentaje_etapa:= trunc(v_porcentaje_decimal,0); 
       v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,p_prueba_etapa_certificacion_id));
       return v_porcentaje_etapa ;
       EXCEPTION
                when others
                  then
                    RAISE INFO 'Error Name:%', SQLERRM;
                    RAISE INFO 'Error State:%', SQLSTATE;
              return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_obtencion_cufd(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo del servicio de obtencion CUFD. 
                El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <13/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	--p_etapa_certificacion_sistemas_id integer := 3016;
	--p_sistema_id bigint := 217;

	v_nombre_etapa_prueba varchar;
	v_fecha_fin_prueba timestamp;
	v_cantidad_pruebas integer := 0;
	v_cantidad_pruebas_exitoso integer := 0;
	v_cantidad_pruebas_pendientes integer := 0;
	v_porcentaje numeric(20,2) := 0;
	v_es_prueba_concluida bool := false;
	v_existe_fecha_fin_prueba bool := false;
	p_prueba_certificacion_id bigint := null;
begin
	
	--Nota: Se obtiene el nombre de la prueba
	v_nombre_etapa_prueba := (select descripcion from str_transversales.str_cps_clasificadores where clasificador_id = p_etapa_certificacion_sistemas_id);
	
	--Nota: Verifica si es prueba finalizada
	v_existe_fecha_fin_prueba := coalesce ((select true
											  from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
											       sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
											 where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
											   and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
											   and PRUEBA_SISTEMA.fecha_fin_prueba is not null 
											   and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
											   and PRUEBA_SISTEMA.estado_id = 'AC'
											), false
										  );
										  
	--Nota: Obtenemos el ID de sre_fac_pruebas_certificacion_sistemas
	 p_prueba_certificacion_id := (select PRUEBA_SISTEMA.prueba_certificacion_sistema_id
									 from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA, 
										  sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
									  and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
									  and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
									  and PRUEBA_SISTEMA.estado_id = 'AC'); 										  
											   
	--NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	--      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select PRUEBA_SISTEMA.fecha_fin_prueba
										   from sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
										        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
										  where ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
										    and ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
										    and PRUEBA_SISTEMA.sistema_id = p_sistema_id 
										    and PRUEBA_SISTEMA.estado_id = 'AC'
									    ), now()
									  );
	  
	  drop table if exists TEMPORAL_LOGS_CUFD;
	  create temp table TEMPORAL_LOGS_CUFD as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_obtencion_cufd as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fecha_fin_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_CUFD;
	  create temp table TEMPORAL_DETALLE_CUFD as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_CUFD as logs where logs.hash = casos.hash) cant 
			    from sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd as casos
			   where casos.estado_id = 'AC'
			     and exists (select 1 from TEMPORAL_LOGS_CUFD as logs where logs.hash = casos.hash)
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		    from sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_CUFD as logs where logs.hash = casos.hash)
	  );
	 
	  update TEMPORAL_DETALLE_CUFD set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_CUFD set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;

	  select sum(total_pruebas), sum(cant), sum(cant)/sum(total_pruebas)*100
	    into v_cantidad_pruebas, v_cantidad_pruebas_exitoso, v_porcentaje
	    from TEMPORAL_DETALLE_CUFD;
	  
	  v_cantidad_pruebas_pendientes := v_cantidad_pruebas - v_cantidad_pruebas_exitoso;
	  
	  if v_cantidad_pruebas_pendientes = 0 then
	  	v_es_prueba_concluida := true;
	  end if;
	  
	  
	  --Adicionado 20191001 vcg.										   
      perform sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(
			p_sistema_id,
			p_etapa_certificacion_sistemas_id,
			v_cantidad_pruebas,
			v_cantidad_pruebas_exitoso,
			v_cantidad_pruebas_pendientes,
			v_porcentaje,
			v_es_prueba_concluida
		);
	  
	  return cast((select row_to_json(tbl)       			 
      			 from ( select v_existe_fecha_fin_prueba existe_fecha_fin_prueba, 
      			               p_prueba_certificacion_id prueba_certificacion_sistema_id,
      			               p_etapa_certificacion_sistemas_id etapa_certificacion_sistemas_id,
      			               v_nombre_etapa_prueba descripcion_prueba,
      			               v_cantidad_pruebas cantidad_pruebas,
      			               v_cantidad_pruebas_exitoso cantidad_pruebas_exitoso, 
      			               v_cantidad_pruebas_pendientes cantidad_pruebas_pendiente,
      			               v_porcentaje porcentaje, 
      			               v_es_prueba_concluida es_prueba_concluida
      			      ) tbl
      			) as varchar
      		   );
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_0_por_sistema(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint, p_contribuyente_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de las combinaciones de generacion de CUF correspondiente 
                al sistema.
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación
FECHA CREACION : <29/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se agrego la cantidad de 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad_casos_correctos integer := 0;
	v_cantidad_casos_prueba integer := 0;
	v_cantidad_casos_pendientes integer := 0;
	v_porcentaje numeric(20,5) := 0;
	v_cantidad_esperada integer := 0;
	p_nit bigint := (select sre_recaudaciones.sre_fac_ope_obtener_nit(p_contribuyente_id));
	v_cantidad_posibles_respuestas integer := 2;---2 : debido a que solo existe 1) correctos y 2) incorrectos
	v_etapa_completada boolean:=false;
	
	--Nota: variables para casos de prueba sugeridos
	v_cantidad_casos_sugeridos integer := 0;
	v_cantidad_casos_sugeridos_correctos integer := 0;
	 
begin	
	  select etapa_completada 
	  into v_etapa_completada
	  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
      where a.sistema_id=p_sistema_id 
      and a.estado_id='AC' 
      and b.etapa_certificacion_sistemas_id=2850;
     
      v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	  if(v_etapa_completada) then
		return 100;
	  end if;

	 --Nota: Recuperamos las combinaciones generadas para el CUF
	  drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA_0;
	  create temp table TEMPORAL_CASOS_PRUEBA_ETAPA_0 as
													  select *
													  from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id, p_nit);
	 
	  --**Nota: Para las pruebas sugeridas add 20190906
	  drop table if exists TEMPORAL_TOTAL_SUGERIDAS;
	  create temp table TEMPORAL_TOTAL_SUGERIDAS as select cantidad_total_casos_sugeridos, cantidad_casos_sugeridos_correctos 
	  												from sre_recaudaciones.sre_fac_obtener_totales_casos_prueba_sugeridas_etapa_0(p_sistema_id);
	  												
	  select cantidad_total_casos_sugeridos into v_cantidad_casos_sugeridos
	  from TEMPORAL_TOTAL_SUGERIDAS;
	  
	  select cantidad_casos_sugeridos_correctos into v_cantidad_casos_sugeridos_correctos
	  from TEMPORAL_TOTAL_SUGERIDAS;
	
	  --Nota: Obtenemos la cantidad de casos de prueba que debe pasar el contribuyente en la generacion de CUF 
	  v_cantidad_casos_prueba := (select count(*) from TEMPORAL_CASOS_PRUEBA_ETAPA_0);	
	  
	  --***Nota: integrando pruebas sugeridas 20190905
	  v_cantidad_casos_prueba := v_cantidad_casos_prueba + v_cantidad_casos_sugeridos;
	  
	  
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA_5;
	  create temp table TEMPORAL_PRUEBA_SISTEMA_5 as 
			  									  select PRUEBA_SISTEMA.*
												  from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												         sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												  where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	     ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												         PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												         PRUEBA_SISTEMA.estado_id = 'AC';
													  								      
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA_5
									    ), now()
									 );
	
	  v_fecha_inicio_prueba := (
	  							select fecha_inicio_prueba
	  							from TEMPORAL_PRUEBA_SISTEMA_5
	  						   );
	  							
	  
	  drop table if exists TEMPORAL_LOGS;
	  create temp table TEMPORAL_LOGS as (
										  select LOGS.hash, LOGS.estado_match
										  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
										  where LOGS.sistema_id = p_sistema_id  
										  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
										  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
										 );
	  
	  drop table if exists TEMPORAL_DETALLE;
	  create temp table TEMPORAL_DETALLE as
	  select PRUEBAS.nit as nit, 
			 (select count (*)
			  from  TEMPORAL_LOGS as LOGS
			  where LOGS.estado_match = 1
			  and   LOGS.hash = PRUEBAS.hash) as cantidad_casos_correctos,
			 (select count (*)
			  from  TEMPORAL_LOGS as LOGS
			  where LOGS.estado_match = 0
			  and   LOGS.hash = PRUEBAS.hash) as cantidad_casos_incorrectos    									     
		from TEMPORAL_CASOS_PRUEBA_ETAPA_0 as PRUEBAS
		     left join
	  		 (
	  		   select distinct LOGS.hash as hash
	  		   from  TEMPORAL_LOGS as LOGS
	  		 ) as LOGS 
	    on PRUEBAS.hash = LOGS.hash;	   
	    
		--Nota: Obtener cantidad de casos esperados
		select total_pruebas into v_cantidad_esperada
		from   sre_recaudaciones.sre_fac_casos_prueba_0_cuf
		where  opcional = 0;
	    						
	    
		--Nota: Obtener la cantidad de casos correctos 
	    select count(1) into v_cantidad_casos_correctos
	    from  TEMPORAL_DETALLE as DETALLE
	    where sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(DETALLE.cantidad_casos_correctos::integer,
	    																DETALLE.cantidad_casos_incorrectos::integer,
	    																v_cantidad_esperada,
	    																v_cantidad_posibles_respuestas) >= 100;
		
	    --**Nota: agregando pruebas sugeridas
	    v_cantidad_casos_correctos := v_cantidad_casos_correctos + v_cantidad_casos_sugeridos_correctos;
	   																	
		--Nota: Calculo del porcentaje
		if (v_cantidad_casos_prueba > 0) then
			v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_prueba::numeric*100;
		end if; 
		v_porcentaje := cast (round(v_porcentaje,0) as integer);
		v_porcentaje := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje::integer,p_sistema_id,2850));
	  return v_porcentaje;
						        									   
	--EXCEPTION
	  	-- when others
		  --then
	    	-- perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_sistemas_por_contribuyente');

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_0_por_sistema_20191001(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint, p_contribuyente_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite obtener el detalle de las combinaciones de generacion de CUF correspondiente 
                al sistema.
PARAMETROS INGRESO
	p_sistema_id  
	p_nit
PARAMETROS SALIDA
    Tabla con el detalle de  casos de pruebas.
SUBSISTEMA : Facturación
FECHA CREACION : <29/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se agrego la cantidad de 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_cantidad_casos_correctos integer := 0;
	v_cantidad_casos_prueba integer := 0;
	v_cantidad_casos_pendientes integer := 0;
	v_porcentaje numeric(20,5) := 0;
	v_cantidad_esperada integer := 0;
	p_nit bigint := (select sre_recaudaciones.sre_fac_ope_obtener_nit(p_contribuyente_id));
	v_cantidad_posibles_respuestas integer := 2;---2 : debido a que solo existe 1) correctos y 2) incorrectos
	v_etapa_completada boolean:=false;
	
	--Nota: variables para casos de prueba sugeridos
	v_cantidad_casos_sugeridos integer := 0;
	v_cantidad_casos_sugeridos_correctos integer := 0;
	 
begin	
	  select etapa_completada 
	  into v_etapa_completada
	  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
      where a.sistema_id=p_sistema_id 
      and a.estado_id='AC' 
      and b.etapa_certificacion_sistemas_id=2850;
     
      v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	  if(v_etapa_completada) then
		return 100;
	  end if;

	 --Nota: Recuperamos las combinaciones generadas para el CUF
	  drop table if exists TEMPORAL_CASOS_PRUEBA_ETAPA_0;
	  create temp table TEMPORAL_CASOS_PRUEBA_ETAPA_0 as
													  select *
													  from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(p_sistema_id, p_nit);
	 
	  --**Nota: Para las pruebas sugeridas add 20190906
	  drop table if exists TEMPORAL_TOTAL_SUGERIDAS;
	  create temp table TEMPORAL_TOTAL_SUGERIDAS as select cantidad_total_casos_sugeridos, cantidad_casos_sugeridos_correctos 
	  												from sre_recaudaciones.sre_fac_obtener_totales_casos_prueba_sugeridas_etapa_0(p_sistema_id);
	  												
	  select cantidad_total_casos_sugeridos into v_cantidad_casos_sugeridos
	  from TEMPORAL_TOTAL_SUGERIDAS;
	  
	  select cantidad_casos_sugeridos_correctos into v_cantidad_casos_sugeridos_correctos
	  from TEMPORAL_TOTAL_SUGERIDAS;
	
	  --Nota: Obtenemos la cantidad de casos de prueba que debe pasar el contribuyente en la generacion de CUF 
	  v_cantidad_casos_prueba := (select count(*) from TEMPORAL_CASOS_PRUEBA_ETAPA_0);	
	  
	  --***Nota: integrando pruebas sugeridas 20190905
	  v_cantidad_casos_prueba := v_cantidad_casos_prueba + v_cantidad_casos_sugeridos;
	  
	  
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA_5;
	  create temp table TEMPORAL_PRUEBA_SISTEMA_5 as 
			  									  select PRUEBA_SISTEMA.*
												  from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												         sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												  where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	     ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												         PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												         PRUEBA_SISTEMA.estado_id = 'AC';
													  								      
	  --NOTA: Obtenemos la fecha de fin de prueba en caso de que este campo sea null
	  --      se reemplaza con la fecha actual para visualizar el porcentaje hasta la fecha actual
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA_5
									    ), now()
									 );
	
	  v_fecha_inicio_prueba := (
	  							select fecha_inicio_prueba
	  							from TEMPORAL_PRUEBA_SISTEMA_5
	  						   );
	  							
	  
	  drop table if exists TEMPORAL_LOGS;
	  create temp table TEMPORAL_LOGS as (
										  select LOGS.hash, LOGS.estado_match, COUNT(LOGS.*) as total_logs
										  from  sre_recaudaciones.sre_fac_log_0_cuf as LOGS
										  where LOGS.sistema_id = p_sistema_id  
										  and   LOGS.fecha_prueba >= v_fecha_inicio_prueba
										  and   LOGS.fecha_prueba <= v_fecha_fin_prueba
										  and   LOGS.estado_id = 'AC'
										  group by LOGS.hash, LOGS.estado_match
										 );
	  
	--Nota: Creamos la tabla donde se almacenara los casos de prueba
	  drop table if exists TEMPORAL_DETALLE;
	  create temp table TEMPORAL_DETALLE as
	  select PRUEBAS.nit as nit, 
		     PRUEBAS.sucursal as sucursal, 
		     PRUEBAS.modalidad as modalidad, 
	         PRUEBAS.emision as emision, 
	         PRUEBAS.documento_fiscal as documento_fiscal, 
		     PRUEBAS.sector as sector,
		     PRUEBAS.pos as punto_venta,	    
			 0::integer  as cantidad_casos_correctos,
			 0::integer  as cantidad_casos_incorrectos,
			 0::integer as porcentaje_avance,
			 '-'::varchar as fecha_registro,
			 PRUEBAS.hash as hash,
			 false::bool as satisfactorio
		 from TEMPORAL_CASOS_PRUEBA_ETAPA_0 as PRUEBAS;
		 
	--Nota: Se actuliza las cantidades de la tabla DETALLE 
      update TEMPORAL_DETALLE
      set 
	   cantidad_casos_correctos = coalesce (
											  (select LOGS.total_logs
											  from  TEMPORAL_LOGS as LOGS
											  where LOGS.estado_match = 1
											  and TEMPORAL_DETALLE.hash = LOGS.hash	), 0								  
								  			 ),
	   cantidad_casos_incorrectos = coalesce( 
			    							  (select LOGS.total_logs
											  from  TEMPORAL_LOGS as LOGS
											  where LOGS.estado_match = 0
											  and TEMPORAL_DETALLE.hash = LOGS.hash), 0
	  										 ); 
	  	
	  --Nota: Obtener cantidad de casos esperados
	  select total_pruebas into v_cantidad_esperada
	  from   sre_recaudaciones.sre_fac_casos_prueba_0_cuf
	  where  opcional = 0;										 
	  										 
	  										 
	  --Nota: Se actualiza el porcentaje de los casos de prueba
	  update TEMPORAL_DETALLE
      set porcentaje_avance = sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(TEMPORAL_DETALLE.cantidad_casos_correctos,
      TEMPORAL_DETALLE.cantidad_casos_incorrectos,v_cantidad_esperada,v_cantidad_posibles_respuestas);	
	      										 
	  										      
	  --Nota: Obtener la cantidad de casos correctos 
	  select count(1) into v_cantidad_casos_correctos
	  from  TEMPORAL_DETALLE as DETALLE
	  where DETALLE.porcentaje_avance >= 100;
		
	  --**Nota: agregando pruebas sugeridas
	  v_cantidad_casos_correctos := v_cantidad_casos_correctos + v_cantidad_casos_sugeridos_correctos;
	   																	
	  --Nota: Calculo del porcentaje
	  if (v_cantidad_casos_prueba > 0) then
			v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_prueba::numeric*100;
	  end if; 
	  v_porcentaje := cast (round(v_porcentaje,0) as integer);
	  v_porcentaje := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje::integer,p_sistema_id,2850));
	  
	  return v_porcentaje;
						        									   
	--EXCEPTION
	  	-- when others
		  --then
	    	-- perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_sistemas_por_contribuyente');

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_10_por_sistema(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite calcular el porcentaje de las pruebas realizadas por sistema
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 18/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se agrego a esta funcion el llamado del match entre los casos de prueba y la tabla de logs
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<24/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare

	v_cantidad_casos_pruebas integer :=0;
	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_match smallint :=0;
	v_cantidad_casos_correctos integer := 0;
	v_porcentaje numeric := 0;
	v_etapa_completada boolean:=false;

begin
	--NOTA: obtenemos el registro de caso de prueba sistema, para ello creamos la tabla temporal
	drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.fecha_fin_prueba,PRUEBA_SISTEMA.fecha_inicio_prueba,PRUEBA_SISTEMA.etapa_completada
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';
						
	v_etapa_completada:=(select etapa_completada from TEMPORAL_PRUEBA_SISTEMA);

	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;
											       
	--NOTA: Llamamos a la funcion match -add 20190624
	v_match := sre_recaudaciones.sre_fac_match_log_casos_prueba_etapa_10(p_sistema_id);
	
	--NOTA: Obtener la canntidad de pruebas total de la etapa 5 de Eventos  Significativos
	v_cantidad_casos_pruebas := coalesce (
											(
												select count(*)
												from sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos
											), 0
										 );	
	
	v_fecha_fin_prueba := coalesce (
									(select fecha_fin_prueba
									 from   TEMPORAL_PRUEBA_SISTEMA
								    ), now()
								   );
								   
	v_fecha_inicio_prueba := (select fecha_inicio_prueba
							  from   TEMPORAL_PRUEBA_SISTEMA);	
							  
	--NOTA: Obtener la cantidad de pruebas correctas de la etapa 5
	 select count(1) into v_cantidad_casos_correctos
	 from (
			select LOGS.caso_prueba_id, LOGS.hash, count(*) as total_casos_realizados
			from   sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as CASOS_PRUEBAS
			       inner join 
			       sre_recaudaciones.sre_fac_log_10_envio_masivos as LOGS
			on     CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id and CASOS_PRUEBAS.hash = logs.hash
			where  LOGS.sistema_id = p_sistema_id
			and    LOGS.estado_match = 1
			and    CASOS_PRUEBAS.estado_id = 'AC'
			and    LOGS.fecha_prueba >= v_fecha_inicio_prueba 
			and    LOGS.fecha_prueba <= v_fecha_fin_prueba
			group by LOGS.caso_prueba_id, LOGS.hash
		 ) as TBL_LOGS 
		 inner join 
		 sre_recaudaciones.sre_fac_casos_prueba_10_envio_masivos as CASOS_PRUEBAS
     on TBL_LOGS.caso_prueba_id = CASOS_PRUEBAS.caso_prueba_id
     where sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(TBL_LOGS.total_casos_realizados::integer, CASOS_PRUEBAS.total_pruebas) >= 100;

    --NOTA: Calculo de porcentaje
	if (v_cantidad_casos_pruebas > 0) then
		v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_pruebas::numeric*100;
	end if; 
	v_porcentaje := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje::integer,p_sistema_id,p_etapa_certificacion_sistemas_id));
	return v_porcentaje::integer;
     
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_11_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa XI - Anulaciones. 
				El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha final y los sistemas involucrados
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/08/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<22/08/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;
  v_cantidad_total integer:=0;
  v_casos_erroneos integer:=0;
  v_casos_exitosos integer:=0;
  v_porcentaje_etapa integer:=0;
  v_resultado_match integer:=0;
  v_etapa_completada boolean:=false;
begin
	
	select fecha_fin_prueba, etapa_completada 
	into v_fin_registro_prueba, v_etapa_completada
									  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
								      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
								      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
								      where a.sistema_id=p_sistema_id 
								      and a.estado_id='AC' 
								      and b.etapa_certificacion_sistemas_id=3141;
								     
	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;

	v_fin_registro_prueba:=case when v_fin_registro_prueba is null then now() else v_fin_registro_prueba end;

		drop table if exists TEMPORAL_LOGS_ETAPA_11;
	  create temp table TEMPORAL_LOGS_ETAPA_11 as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_11_anulaciones as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fin_registro_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = 3141 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_11;
	  create temp table TEMPORAL_DETALLE_ETAPA_11 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_ETAPA_11 as logs where logs.hash = casos.hash) cant 
			  from sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones as casos
			  where casos.estado_id = 'AC'
			  and exists (select 1 from TEMPORAL_LOGS_ETAPA_11 as logs where logs.hash = casos.hash)
			  and documento_sector_id in ( select b.codigo_clasificador 
			 							   from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
										   inner join sre_recaudaciones.sre_fac_clasificadores b
										   on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
										   where sistema_id=p_sistema_id
										   and a.estado_tipo_documento_sistema_id = 1380
							     		   and a.estado_id='AC'
										  )
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		   from sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones as casos
		   where casos.estado_id = 'AC'
		   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_11 as logs where logs.hash = casos.hash)
		   and documento_sector_id in ( select b.codigo_clasificador 
		 							    from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
									    inner join sre_recaudaciones.sre_fac_clasificadores b
									    on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
									    where sistema_id=p_sistema_id
									    and a.estado_tipo_documento_sistema_id = 1380
							     		and a.estado_id='AC'
									  )
	  );
	  
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	 
	  select trunc(sum(cant)/sum(total_pruebas)*100,0)
	  into v_porcentaje_etapa
	  from TEMPORAL_DETALLE_ETAPA_11;
	   
	v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,3141));

	return coalesce(v_porcentaje_etapa,0);

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_12_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa XII - Reportes. 
				El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha final y los sistemas involucrados
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/08/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<22/08/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;
  v_cantidad_total integer:=0;
  v_casos_erroneos integer:=0;
  v_casos_exitosos integer:=0;
  v_porcentaje_etapa integer:=0;
  v_resultado_match integer:=0;
  v_etapa_completada boolean:=false;
begin
	select fecha_fin_prueba, etapa_completada 
	into v_fin_registro_prueba, v_etapa_completada
									  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
								      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
								      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
								      where a.sistema_id=p_sistema_id 
								      and a.estado_id='AC' 
								      and b.etapa_certificacion_sistemas_id=3142;
								     
	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;

	if((select count(1) 
		from sre_recaudaciones.sre_fac_log_12_reportes 
		where sistema_id=p_sistema_id 
		and caso_prueba_id is null and estado_id='AC') > 0 ) then
			v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_12(p_sistema_id) ;
	end if;	

	v_fin_registro_prueba:=case when v_fin_registro_prueba is null then now() else v_fin_registro_prueba end;

	drop table if exists TEMPORAL_LOGS_ETAPA_12;
	  create temp table TEMPORAL_LOGS_ETAPA_12 as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_12_reportes as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fin_registro_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = 3142 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_12;
	  create temp table TEMPORAL_DETALLE_ETAPA_12 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_ETAPA_12 as logs where logs.hash = casos.hash) cant 
			  from sre_recaudaciones.sre_fac_casos_prueba_12_reportes as casos
			  where casos.estado_id = 'AC'
			  and exists (select 1 from TEMPORAL_LOGS_ETAPA_12 as logs where logs.hash = casos.hash)
			  
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		   from sre_recaudaciones.sre_fac_casos_prueba_12_reportes as casos
		   where casos.estado_id = 'AC'
		   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_12 as logs where logs.hash = casos.hash)		   
	  );
	 
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_11 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	  
	  select sum(cant)/sum(total_pruebas)*100
	    into v_porcentaje_etapa
	    from TEMPORAL_DETALLE_ETAPA_12;
	   
	v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,3142));

	return v_porcentaje_etapa;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_1_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa I - Consumo de Servicios. 
                           El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha final y los sistemas involucrados
PARAMETROS INGRESO
              No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/07/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_inicio_registro_prueba timestamp;
  v_cantidad_pruebas integer:=0;
  v_porcentaje_etapa integer:=0;
  v_resultado_match integer:=0;
  v_casos_erroneas integer:=0;
  v_casos_exitosas integer:=0;
  v_etapa_completada boolean:=false;
begin
       select fecha_inicio_prueba, etapa_completada 
       into v_inicio_registro_prueba, v_etapa_completada
       from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
       inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
       on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
       where a.sistema_id=p_sistema_id 
       and a.estado_id='AC' 
       and b.etapa_certificacion_sistemas_id=2851
       order by fecha_inicio_prueba desc
       limit 1;
                                                            
       v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

       if(v_etapa_completada) then
              return 100;
       end if;
       
       drop table if exists temporal_detalle_caso_prueba_1;
       CREATE TEMP TABLE temporal_detalle_caso_prueba_1 AS
       select resultado,porcentaje_avance from sre_recaudaciones.sre_fac_match_log_caso_pruebas_por_etapa_detalle_1(p_sistema_id,2851);
       v_cantidad_pruebas:=(select count(1) from temporal_detalle_caso_prueba_1);
       v_porcentaje_etapa:=(select sum(porcentaje_avance) from temporal_detalle_caso_prueba_1)/case when v_cantidad_pruebas=0 then 1 else v_cantidad_pruebas end;
    v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,2851));

       return coalesce(v_porcentaje_etapa,0);

       EXCEPTION
                when others
                  then
                    RAISE INFO 'Error Name:%', SQLERRM;
                    RAISE INFO 'Error State:%', SQLSTATE;
              return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_etapa_1_por_sistema')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_3_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa III - Sincronización de Catálogos. 
				El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha final y los sistemas involucrados
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/07/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;
  v_cantidad_total integer:=0;
  v_casos_erroneos integer:=0;
  v_casos_exitosos integer:=0;
  v_porcentaje_etapa integer:=0;
  v_resultado_match integer:=0;
  v_etapa_completada boolean:=false;
begin
	select fecha_fin_prueba, etapa_completada 
	into v_fin_registro_prueba, v_etapa_completada
									  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
								      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
								      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
								      where a.sistema_id=p_sistema_id 
								      and a.estado_id='AC' 
								      and b.etapa_certificacion_sistemas_id=2853;
								     
	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;
	
	if((select count(1) 
		from sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo 
		where sistema_id=p_sistema_id 
		and caso_prueba_id is null and estado_id='AC') > 0 ) then
			v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_3_sincronizacion_catalogos(p_sistema_id) ;
	end if;	
	
	v_fin_registro_prueba:=case when v_fin_registro_prueba is null then now() else v_fin_registro_prueba end;

		  drop table if exists TEMPORAL_LOGS_ETAPA_3;
	 	  create temp table TEMPORAL_LOGS_ETAPA_3 as (
		  select LOGS.hash, logs.agrupador
		  from  sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fin_registro_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = 2853 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	  
	  drop table if exists TEMPORAL_DETALLE_ETAPA_3;
	  create temp table TEMPORAL_DETALLE_ETAPA_3 as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant, x.agrupador
		    from (
			  select casos.hash, casos.total_pruebas, 
			         (select count(*) cant from TEMPORAL_LOGS_ETAPA_3 as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador) cant,
			         casos.agrupador
			    from sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos as casos
			   where casos.estado_id = 'AC'
			     and exists (select 1 from TEMPORAL_LOGS_ETAPA_3 as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant, casos.agrupador
		    from sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_ETAPA_3 as logs where logs.hash = casos.hash and logs.agrupador = casos.agrupador)
	  );
	  
	  update TEMPORAL_DETALLE_ETAPA_3 set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_ETAPA_3 set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;
	 
	  select trunc(sum(cant)/sum(total_pruebas)*100,0)
	  into v_porcentaje_etapa
	  from TEMPORAL_DETALLE_ETAPA_3;
	 
	  v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,2853));		 
	 
	return v_porcentaje_etapa;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_4_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa IV - Sincronización de Fecha y Hora. 
                           El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha final y los sistemas involucrados
PARAMETROS INGRESO
              No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/07/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;
  v_cantidad_total integer:=0;
  v_casos_erroneos integer:=0;
  v_casos_exitosos integer:=0;
  v_porcentaje_etapa integer:=0;
  v_resultado_match integer:=0;
  v_etapa_completada boolean:=false;
begin
       select fecha_fin_prueba, etapa_completada 
       into v_fin_registro_prueba, v_etapa_completada
                                                                from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
                                                             inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
                                                             on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
                                                             where a.sistema_id=p_sistema_id 
                                                             and a.estado_id='AC' 
                                                             and b.etapa_certificacion_sistemas_id=2854;
                                                            
       v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

       if(v_etapa_completada) then
              return 100;
       end if;

       if((select count(1) 
              from sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora 
              where sistema_id=p_sistema_id 
              and caso_prueba_id is null and estado_id='AC') > 0 ) then
                  v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_4(p_sistema_id) ;
       end if;

       v_fin_registro_prueba:=case when v_fin_registro_prueba is null then now() else v_fin_registro_prueba end;

       drop table if exists TEMPORAL_LOGS_ETAPA_4;
         create temp table TEMPORAL_LOGS_ETAPA_4 as (
                select LOGS.hash
                from  sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora as LOGS,
                      sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
                      sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
                where LOGS.sistema_id = p_sistema_id
                  and LOGS.estado_id = 'AC'
                  and LOGS.estado_match = 1
                  and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
                     and PRUEBAS_SISTEMAS.estado_id = 'AC' 
                     and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
                     and LOGS.fecha_prueba <= v_fin_registro_prueba 
                     and ETAPAS.etapa_certificacion_sistemas_id = 2854 
                     and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
         );
         
         drop table if exists TEMPORAL_DETALLE_ETAPA_4;
         create temp table TEMPORAL_DETALLE_ETAPA_4 as (
                select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
                  from (
                       select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_ETAPA_4 as logs where logs.hash = casos.hash) cant 
                         from sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora as casos
                        where casos.estado_id = 'AC'
                          and exists (select 1 from TEMPORAL_LOGS_ETAPA_4 as logs where logs.hash = casos.hash)
                 ) x
                 union
                 select casos.hash, casos.total_pruebas, 0 cant
                  from sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora as casos
                 where casos.estado_id = 'AC'
                   and not exists (select 1 from TEMPORAL_LOGS_ETAPA_4 as logs where logs.hash = casos.hash)
         );
         
         update TEMPORAL_DETALLE_ETAPA_4 set total_pruebas=1,cant=1
         where total_pruebas !=1 and total_pruebas=cant;
       
         update TEMPORAL_DETALLE_ETAPA_4 set total_pruebas=1,cant=0
         where total_pruebas !=1 and total_pruebas!=cant;
       
         
         select trunc(sum(cant)/sum(total_pruebas)*100,0)
         into v_porcentaje_etapa
         from TEMPORAL_DETALLE_ETAPA_4;
          
       v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,2854));

       return v_porcentaje_etapa;

       EXCEPTION
                when others
                  then
                    RAISE INFO 'Error Name:%', SQLERRM;
                    RAISE INFO 'Error State:%', SQLSTATE;
              return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_5_por_sistema(p_etapa_certificacion_sistemas_id integer, p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite calcular el porcentaje de las pruebas realizadas por sistema
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 18/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se agrego a esta funcion el llamado del match entre los casos de prueba y la tabla de logs
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<24/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare

	v_cantidad_casos_pruebas integer :=0;
	v_fecha_fin_prueba timestamp;
	v_fecha_inicio_prueba timestamp;
	v_match smallint :=0;
	v_cantidad_casos_correctos integer := 0;
	v_porcentaje numeric := 0;
	v_etapa_completada boolean:=false;

begin
	
	--NOTA: obtenemos el registro de caso de prueba sistema, para ello creamos la tabla temporal
	drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	create temp table TEMPORAL_PRUEBA_SISTEMA as select PRUEBA_SISTEMA.fecha_fin_prueba,PRUEBA_SISTEMA.fecha_inicio_prueba,PRUEBA_SISTEMA.etapa_completada
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = p_etapa_certificacion_sistemas_id and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';	
		
	v_etapa_completada:=(select etapa_completada from TEMPORAL_PRUEBA_SISTEMA);

	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;

	--NOTA: Llamamos a la funcion match -add 20190624
	v_match := sre_recaudaciones.sre_fac_match_log_casos_prueba_etapa_5(p_sistema_id);
	
	--NOTA: Obtener la canntidad de pruebas total de la etapa 5 de Eventos  Significativos
	v_cantidad_casos_pruebas := coalesce (
											(
												select count(*)
												from sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos
											), 0
										 );
	
	v_fecha_fin_prueba := coalesce (
									(select fecha_fin_prueba
									 from   TEMPORAL_PRUEBA_SISTEMA
								    ), now()
								   );
								   
	v_fecha_inicio_prueba := (select fecha_inicio_prueba
							  from   TEMPORAL_PRUEBA_SISTEMA);	
							  
	--NOTA: Obtener la cantidad de pruebas correctas de la etapa 5
	 select count(1) into v_cantidad_casos_correctos
	 from (
			select LOGS.caso_prueba_id, LOGS.hash, count(*) as total_casos_realizados
			from   sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
			       inner join 
			       sre_recaudaciones.sre_fac_log_5_eventos_significativos as LOGS
			on     CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id and CASOS_PRUEBAS.hash = logs.hash
			where  LOGS.sistema_id = p_sistema_id
			and    LOGS.estado_match = 1
			and    CASOS_PRUEBAS.estado_id = 'AC'
			and    LOGS.fecha_prueba >= v_fecha_inicio_prueba 
			and    LOGS.fecha_prueba <= v_fecha_fin_prueba
			group by LOGS.caso_prueba_id, LOGS.hash
		 ) as TBL_LOGS 
		 inner join 
		 sre_recaudaciones.sre_fac_casos_prueba_5_eventos_significativos as CASOS_PRUEBAS
     on TBL_LOGS.caso_prueba_id = CASOS_PRUEBAS.caso_prueba_id
     where sre_recaudaciones.sre_fac_calcular_porcentaje_etapa_5(TBL_LOGS.total_casos_realizados::integer, CASOS_PRUEBAS.total_pruebas) >= 100;

    --NOTA: Calculo de porcentaje
	if (v_cantidad_casos_pruebas > 0) then
		v_porcentaje := v_cantidad_casos_correctos / v_cantidad_casos_pruebas::numeric*100;
	end if; 
	v_porcentaje := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje::integer,p_sistema_id,p_etapa_certificacion_sistemas_id));
	return v_porcentaje::integer;
     
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_7_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa VII - Firma Digital. 
				El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha final y los sistemas involucrados
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/07/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<29/07/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_inicio_registro_prueba timestamp;
  v_fin_registro_prueba timestamp;
  v_cantidad_total integer:=0;
  v_casos_erroneos integer:=0;
  v_casos_exitosos integer:=0;
  v_porcentaje_etapa integer:=0;
  v_etapa_completada boolean:=false;
begin
	select fecha_inicio_prueba, fecha_fin_prueba, etapa_completada 
	into v_inicio_registro_prueba,v_fin_registro_prueba, v_etapa_completada
									  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
								      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
								      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
								      where a.sistema_id=p_sistema_id 
								      and a.estado_id='AC' 
								      and b.etapa_certificacion_sistemas_id=2857;
								     
	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;	
							  
	v_inicio_registro_prueba:=case when v_inicio_registro_prueba is null then now() else v_inicio_registro_prueba end;
	v_fin_registro_prueba:=case when v_fin_registro_prueba is null then now() else v_fin_registro_prueba end;

	v_casos_exitosos:=( select count(1) 
						from sre_recaudaciones.sre_fac_log_7_firma_digital a
						inner join sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital b						
						on a.hash=b.hash
						and a.sistema_id = p_sistema_id
						and a.estado_match = 1
						and a.fecha_prueba>=v_inicio_registro_prueba
						and a.fecha_prueba<=v_fin_registro_prueba
						and a.estado_id='AC'
						and b.estado_id='AC'
					  );
					 
	v_cantidad_total:= (select sum(total_pruebas) 
					    from sre_recaudaciones.sre_fac_casos_prueba_7_firma_digital
					   );
	v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_calcular_porcentaje_caso_prueba(v_casos_exitosos,v_casos_erroneos,v_cantidad_total,1));
	v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,2857));

	return v_porcentaje_etapa;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_9_por_sistema(p_sistema_id bigint, p_nit bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO    
SUBSISTEMA : Facturación
FECHA CREACION : <24/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se ajusto el porcentaje de la etapa proveedores  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<26/09/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
       v_porcentaje_total numeric:=0;
      v_porcentaje_por_nit numeric:=0;
      v_porcentaje numeric:=0;
      v_tipo_documento_sector integer:=0;
       v_tipo_documento_sector_proveedor bigint:=0;
       v_fecha_fin_prueba timestamp;
       v_fecha_inicio_prueba timestamp;
begin

       v_tipo_documento_sector_proveedor:=(select tipo_documento_sector_id from sre_recaudaciones.sre_fac_nits_pruebas_proveedores where nit=p_nit);
       v_tipo_documento_sector:= (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where codigo_clasificador_equivalente=v_tipo_documento_sector_proveedor limit 1);    
       v_porcentaje_total:=(select count(1) from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor where documento_sector_id in (v_tipo_documento_sector,0) and estado_id='AC');

       select PRUEBA_SISTEMA.fecha_inicio_prueba,PRUEBA_SISTEMA.fecha_fin_prueba
       into  v_fecha_inicio_prueba ,v_fecha_fin_prueba 
       from  sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
             sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
       where ETAPA.etapa_certificacion_sistemas_id = 3052 and --SISTEMA PROVEEDOR                                                                                 
             ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
             PRUEBA_SISTEMA.sistema_id = p_sistema_id and
             PRUEBA_SISTEMA.estado_id = 'AC';
       
       v_fecha_fin_prueba:=case when v_fecha_fin_prueba is null then now() else v_fecha_fin_prueba end;
      
	  drop table if exists temporal_sre_fac_log_9_gestion_proveedor;
	  create temp table temporal_sre_fac_log_9_gestion_proveedor
	  as
	  select count(1),a.agrupador,a.hash  
	  from sre_recaudaciones.sre_fac_log_9_gestion_proveedor a 
	  inner join sre_recaudaciones.sre_fac_casos_prueba_9_proveedor b
	  on a.hash=b.hash
	  where a.nit_cliente= p_nit
	  and fecha_prueba>=v_fecha_inicio_prueba
	  and fecha_prueba<=v_fecha_fin_prueba
	  and sistema_id=p_sistema_id
	  and a.estado_id='AC'
	  and b.estado_id='AC'
	  and a.estado_match=1
	  and b.documento_sector_id in (v_tipo_documento_sector,0)      
	  group by a.hash,a.agrupador;

	alter table temporal_sre_fac_log_9_gestion_proveedor
	add column total_pruebas integer;

	update temporal_sre_fac_log_9_gestion_proveedor set total_pruebas= (select total_pruebas 
																			from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor 
																			where agrupador=temporal_sre_fac_log_9_gestion_proveedor.agrupador 
																			and hash=temporal_sre_fac_log_9_gestion_proveedor.hash 
																			and estado_id='AC' and documento_sector_id in (1,0) 
																	   );

	update temporal_sre_fac_log_9_gestion_proveedor set total_pruebas= (select total_pruebas 
																		from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor 
																		where agrupador LIKE 'SOAP PARAMETROS%'																																		
																		and hash=temporal_sre_fac_log_9_gestion_proveedor.hash 
																		and estado_id='AC' and documento_sector_id in (1,0) 
																		)
													where agrupador = 'PAQUETE';

	UPDATE temporal_sre_fac_log_9_gestion_proveedor set count = (case when count > total_pruebas then total_pruebas else count end);
	  
	v_porcentaje_por_nit:=(select sum(count) from temporal_sre_fac_log_9_gestion_proveedor);
	v_porcentaje_total:=(select sum(total_pruebas) from temporal_sre_fac_log_9_gestion_proveedor);
	v_porcentaje:= trunc((v_porcentaje_por_nit/v_porcentaje_total)*100,0);
	v_porcentaje:= case when v_porcentaje>100 then 100 else v_porcentaje end; 
    return v_porcentaje;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_porcentaje_etapa_cufd_por_sistema(p_sistema_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje para la etapa del CUFD. El porcentaje se lo obtendra a partir de la fecha inicio hasta 
				la fecha final y los sistemas involucrados
PARAMETROS INGRESO
    		No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/07/2019>
AUTOR : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a cambiar el resultado de la respuesta en formato Json.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare        
  v_fin_registro_prueba timestamp;
  v_porcentaje_etapa integer:=0;
  v_etapa_completada boolean:=false;
  v_resultado_match integer:=0;
begin
	
	select fecha_fin_prueba, etapa_completada 
	into v_fin_registro_prueba, v_etapa_completada
									  from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas  a
								      inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b
								      on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
								      where a.sistema_id=p_sistema_id 
								      and a.estado_id='AC' 
								      and b.etapa_certificacion_sistemas_id=3016;
								     
	v_etapa_completada:=case when v_etapa_completada is null then false else v_etapa_completada end;

	if(v_etapa_completada) then
		return 100;
	end if;

	if((select count(1) 
		from sre_recaudaciones.sre_fac_log_obtencion_cufd 
		where sistema_id=p_sistema_id 
		and caso_prueba_id is null and estado_id='AC') > 0 ) then
			v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_obtencion_cufd(p_sistema_id) ;
	end if;

	v_fin_registro_prueba:=case when v_fin_registro_prueba is null then now() else v_fin_registro_prueba end;

	  drop table if exists TEMPORAL_LOGS_CUFD;
	  create temp table TEMPORAL_LOGS_CUFD as (
		  select LOGS.hash
		  from  sre_recaudaciones.sre_fac_log_obtencion_cufd as LOGS,
		        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBAS_SISTEMAS,
		        sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPAS
		  where LOGS.sistema_id = p_sistema_id
		    and LOGS.estado_id = 'AC'
		    and LOGS.estado_match = 1
		    and PRUEBAS_SISTEMAS.sistema_id = LOGS.sistema_id 
		  	and PRUEBAS_SISTEMAS.estado_id = 'AC' 
		  	and LOGS.fecha_prueba >= PRUEBAS_SISTEMAS.fecha_inicio_prueba 
		  	and LOGS.fecha_prueba <= v_fin_registro_prueba 
		  	and ETAPAS.etapa_certificacion_sistemas_id = 3016 
		  	and ETAPAS.prueba_etapa_certificacion_id = PRUEBAS_SISTEMAS.prueba_etapa_certificacion_id
	  );
	 
	  drop table if exists TEMPORAL_DETALLE_CUFD;
	  create temp table TEMPORAL_DETALLE_CUFD as (
		  select x.hash, x.total_pruebas, (case when x.cant > x.total_pruebas then x.total_pruebas else x.cant end) cant
		    from (
			  select casos.hash, casos.total_pruebas, (select count(*) cant from TEMPORAL_LOGS_CUFD as logs where logs.hash = casos.hash) cant 
			    from sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd as casos
			   where casos.estado_id = 'AC'
			     and exists (select 1 from TEMPORAL_LOGS_CUFD as logs where logs.hash = casos.hash)
		   ) x
		   union
		   select casos.hash, casos.total_pruebas, 0 cant
		    from sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd as casos
		   where casos.estado_id = 'AC'
		     and not exists (select 1 from TEMPORAL_LOGS_CUFD as logs where logs.hash = casos.hash)
	  );
	 
	  update TEMPORAL_DETALLE_CUFD set total_pruebas=1,cant=1
	  where total_pruebas !=1 and total_pruebas=cant;
	 
	  update TEMPORAL_DETALLE_CUFD set total_pruebas=1,cant=0
	  where total_pruebas !=1 and total_pruebas!=cant;

	  select  sum(cant)/sum(total_pruebas)*100
	  into v_porcentaje_etapa
	  from TEMPORAL_DETALLE_CUFD;
	  v_porcentaje_etapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentaje_etapa,p_sistema_id,3016));	

	return v_porcentaje_etapa;

	EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		 return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_porcentaje_casos_prueba_etapa')) as character varying);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_recepcion_anulacion(p_cuf character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera recepcion id de la anulación   
PARAMETROS INGRESO
    p_json_varchar : Cadena en formato json contiene campos tipo documento fiscal, tipo documento sector, nitEmisor, cuf, numeroFactura.	
PARAMETROS SALIDA
    string en formato json, ejemplo: {}
    '0' cuando no existen datos encontrados
SUBSISTEMA : Facturación
FECHA CREACION : 18/09/2019
AUTOR : Equipo Tyrell - Reynaldo Chambi
VERSION : 1.0sre_fac_obtener_recepcion_anulacion
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare   
	v_resultado bigint:=0;
begin	
	v_resultado := (select recepcion_anulacion_id from sre_recaudaciones.sre_fac_recepciones_anulaciones where cuf = p_Cuf and estado_id = 'AC');	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then
	    	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_recepcion_anulacion');
			return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_obtener_recepcion_anulacion')) as varchar) ;	      	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_sistemas_por_contribuyente(p_contribuyente_id bigint, p_estado_sistema_contribuyente_id bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
declare

begin
       
              drop table if exists tbl;
              CREATE TEMP TABLE tbl as
       
              select row_to_json(tbl1) 
                     from ((                                 
                                         select distinct
                                         cnt2.sistema_id as "sistemaId",

                                         (select sis.nombre_sistema from sre_recaudaciones.sre_fac_sistemas sis where sis.sistema_id=cnt2.sistema_id and sis.estado_id='AC') as "nombreSistema",
                                         
                                         (sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa(cnt2.sistema_id, p_contribuyente_id, p_estado_sistema_contribuyente_id)) porcentaje,
                                         --20 porcentaje,
                                         
                                         (select string_agg(distinct cla.descripcion, ' - ') 
                                         from sre_recaudaciones.sre_fac_sistemas sis inner join str_transversales.str_cps_clasificadores cla on
                                         sis.tipo_sistema_id=cla.clasificador_id inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes cnt
                                         on sis.sistema_id=cnt.sistema_id and cla.tipo_clasificador = 'tipo_sistema_id'
                                         where cnt.contribuyente_id=p_contribuyente_id and 
                                         cnt.estado_sistema_contribuyente_id=p_estado_sistema_contribuyente_id and
                                         cnt.estado_id='AC' and
                                         sis.estado_id='AC' and
                                         cla.estado_id='AC' and
                                         cnt.estado_sistema_contribuyente_id not in(639,638) and
                                         sis.estado_sistema_id not in  (1287) and
                                         cnt.sistema_id=cnt2.sistema_id) as "tipoSistema",                                                                               
                                                         
                                         (select string_agg(distinct cla.descripcion, ' - ')                                           
                                         from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones cnt inner join str_transversales.str_cps_clasificadores cla
                                         on cnt.modalidad_facturacion_id=cla.clasificador_id and cla.tipo_clasificador = 'modalidad_facturacion_id'
                                         where                                    
                                         cnt.estado_id='AC' and
                                         cla.estado_id='AC' and                                       
                                         cnt.sistema_id=cnt2.sistema_id) as "modalidadFacturacion"
                                                         
                                         from sre_recaudaciones.sre_fac_sistemas_contribuyentes cnt2 inner join sre_recaudaciones.sre_fac_sistemas sis2 on
                                         cnt2.sistema_id=sis2.sistema_id
                                         where cnt2.contribuyente_id=p_contribuyente_id and 
                                         cnt2.estado_sistema_contribuyente_id=p_estado_sistema_contribuyente_id and
                                         cnt2.estado_id='AC' and 
                                         sis2.estado_id='AC' and 
                                         cnt2.estado_sistema_contribuyente_id not in(639,638) and
                                         sis2.estado_sistema_id not in  (1287)
                                         
                                         ))tbl1;
       
       return query select cast (row_to_json as character varying) from  tbl;
       
        EXCEPTION
        when others
           then
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_obtener_sistemas_por_contribuyente');
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_obtener_totales_casos_prueba_sugeridas_etapa_0(p_sistema_id bigint)
 RETURNS TABLE(cantidad_total_casos_sugeridos integer, cantidad_casos_sugeridos_correctos integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : 
PARAMETROS INGRESO

PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : 06/09/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Obtiene la cantidad de casos sugeridos y los caos sugeridos correctos 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/07/2019
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/


declare

v_cantidad_casos_correctos int := 0;
v_cantidad_casos_pendientes int := 0;
v_etapa_cuf integer := 2850;
v_fecha_fin_prueba timestamp;
v_fecha_inicio_prueba timestamp;


begin
	
	  --Nota: Control de casos de prueba declarados registrados add 20190918
	  drop table if exists TEMPORAL_PRUEBA_SISTEMA;
	  create temp table TEMPORAL_PRUEBA_SISTEMA as 
			  									 select PRUEBA_SISTEMA.*
												 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
												        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
												 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_cuf and
												 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
												        PRUEBA_SISTEMA.sistema_id = p_sistema_id and
												        PRUEBA_SISTEMA.estado_id = 'AC';
													  
	  v_fecha_fin_prueba := coalesce (
									    (
									     select fecha_fin_prueba
										 from   TEMPORAL_PRUEBA_SISTEMA
									    ), now()
									  );
	
	  v_fecha_inicio_prueba := (
	  							select fecha_inicio_prueba
	  							from TEMPORAL_PRUEBA_SISTEMA
	  							);

	
	--Nota: Creamos la tabla de casos de pruebas sugeridas registrado en los LOGS
	drop table if exists TEMPORAL_LOGS;
	create temp table TEMPORAL_LOGS as select distinct LOGS.hash, LOGS.caso_prueba_id--LOGS.*
									   from sre_recaudaciones.sre_fac_casos_prueba_0_cuf as CASOS_PRUEBAS,
										    sre_recaudaciones.sre_fac_log_0_cuf as LOGS
									   where CASOS_PRUEBAS.hash in (LOGS.hash)
									   and CASOS_PRUEBAS.caso_prueba_id = LOGS.caso_prueba_id
									   and LOGS.sistema_id = p_sistema_id
									   and LOGS.fecha_prueba >= v_fecha_inicio_prueba
									   and LOGS.fecha_prueba <= v_fecha_fin_prueba
									   and LOGS.estado_id = 'AC';
										
	--TABLE(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, cantidad_esperada integer)
	drop table if exists tbl_casos_prueba;
	create temp table tbl_casos_prueba as 
	select caso_prueba_id,
		   cast (split_part(caso_prueba,'|',7) as integer) as sector,
		   hash,
		   hash_descripcion,		   
		   opcional
	from sre_recaudaciones.sre_fac_casos_prueba_0_cuf
	where opcional = 1; --1 es una prueba sugerida
	

	--Nota: Se debe retornar los casos de prueba correspondientes a los sectores del sistema
  
    drop table if exists TEMPORAL_CASOS_SUGERIDOS;
	create temp table TEMPORAL_CASOS_SUGERIDOS as select CASOS_PRUEBA.*,
								  		       coalesce((select true from TEMPORAL_LOGS where TEMPORAL_LOGS.caso_prueba_id = CASOS_PRUEBA.caso_prueba_id and  TEMPORAL_LOGS.hash = CASOS_PRUEBA.hash), false) as es_caso_prueba_registrada
										  		from tbl_casos_prueba CASOS_PRUEBA,
										  			 (	select CLASIFICADORES.codigo_clasificador as sector
														from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOCUMENTOS_SISTEMAS
														 inner join sre_recaudaciones.sre_fac_clasificadores CLASIFICADORES
														on DOCUMENTOS_SISTEMAS.tipo_documento_factura_id = CLASIFICADORES.codigo_clasificador_equivalente and CLASIFICADORES.agrupador = 'TIPO DOCUMENTO SECTOR'
														where  DOCUMENTOS_SISTEMAS.sistema_id = p_sistema_id
														and    DOCUMENTOS_SISTEMAS.estado_tipo_documento_sistema_id = 1380
													 ) as DOCUMNETOS_SISTEMAS
											    where CASOS_PRUEBA.sector = DOCUMNETOS_SISTEMAS.sector
											    order by CASOS_PRUEBA.sector;
				
	select count(*) into v_cantidad_casos_pendientes
	from TEMPORAL_CASOS_SUGERIDOS;
	
	select count(*) into v_cantidad_casos_correctos
	from TEMPORAL_CASOS_SUGERIDOS
	where es_caso_prueba_registrada = true;
	

	drop table if exists TEMPORAL_TOTALES_CASOS_SUGERIDOS; 
	create temp table TEMPORAL_TOTALES_CASOS_SUGERIDOS(cantidad_total_casos_sugeridos integer, cantidad_casos_sugeridos_correctos integer);
	insert into TEMPORAL_TOTALES_CASOS_SUGERIDOS(cantidad_total_casos_sugeridos, cantidad_casos_sugeridos_correctos) 
	VALUES(v_cantidad_casos_pendientes, v_cantidad_casos_correctos );
	
	return query select * from  TEMPORAL_TOTALES_CASOS_SUGERIDOS;
	

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_estado_recepcion integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a la funcion sre_fac_ope_armar_consulta_actualizar_estado_recepcion y 
				 sre_fac_ope_obtener_estado_recepcion
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
	-- se retorna el estado de la recepcion
	
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion(p_tipo_documento_sector_id));
	   
	    execute v_sql  using p_estado_recepcion, p_codigo_recepcion;
	    
	    return coalesce((sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion)),0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_anulado_manual(p_codigo_recepcion bigint, p_estado_recepcion character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Ejecuta la consulta de actualizacion de estado de las tablas de recepciones de anulados
PARAMETROS INGRESO
id de recepcion y el estado al cual sera actulizado el registro de recepcion anulado
PARAMETROS SALIDA
clasificador_id del estado actualizado
SUBSISTEMA : Facturación
FECHA CREACION : 06/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : 
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	v_estado_recepcion bigint; 
begin
	-- se retorna el estado de la recepcion
	    v_estado_recepcion := (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion =p_estado_recepcion);
	    v_sql:= 'update  sre_recaudaciones.sre_fman_recepciones_anuladas SET  estado_recepcion_anulado_manual_id = $1,  fecha_utlima_modificacion =  now()  where  recepcion_anulado_id = $2 returning estado_recepcion_anulado_manual_id';
	    execute v_sql  using v_estado_recepcion, p_codigo_recepcion into v_resultado;
	    return coalesce(v_resultado,0);

	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_anulado_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_estado_recepcion integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a la funcion sre_fac_ope_armar_consulta_actualizar_estado_recepcion y 
				 sre_fac_ope_obtener_estado_recepcion
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
	-- se retorna el estado de la recepcion
	
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_est_rec_contingencia(p_tipo_documento_sector_id));
	   
	    execute v_sql  using p_estado_recepcion, p_codigo_recepcion;
	    
	    return coalesce((sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)),0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_facturacion_manual(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_estado_recepcion character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Ejecuta la consulta de actualizacion de estado de las tablas de recepciones
PARAMETROS INGRESO
tipo documento sector, id de recepcion y el estado al cual sera actulizado el registro de recepcion
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 01/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : 
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	v_estado_recepcion bigint; 
begin
	-- se retorna el estado de la recepcion
	    v_estado_recepcion := (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion =p_estado_recepcion);
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recep_manual(p_tipo_documento_sector_id));
	    execute v_sql  using v_estado_recepcion, p_codigo_recepcion into v_resultado;
	   return coalesce(v_resultado,0);
		
	
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_facturacion_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_paq_contingencia(p_documento_fiscal integer, p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_estado_recepcion_id_paquete integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito los select donde se llaman a las funciones: sre_fac_ope_obtener_estado_recepcion_paquete, sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq
				 sre_fac_ope_obtener_estado_recepcion_paquete
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se cambio la condicion if(v_codigo_estado_paquete=709) a if(v_codigo_estado_paquete=706) para actualizar si el paquete fue procesado completamente 				 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :13/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_codigo_estado_paquete smallint:=0;
	v_sql varchar:='0';
begin	  	 
	    v_codigo_estado_paquete:=(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion));--*
	    
	    if(v_codigo_estado_paquete=709) then
	    	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_act_est_rec_pq_contingencia(p_tipo_documento_sector_id)); --*	    	    
		    	execute v_sql using p_estado_recepcion_id_paquete, p_codigo_recepcion;	    
		    	
		    	return (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion));	    		    			    		   
	    end if;
	    
	    if(v_codigo_estado_paquete=706) then --706=PAQUETE PROCESADO
	    	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_act_est_rec_pq_contingencia(p_tipo_documento_sector_id)); --*	    	    
		    	execute v_sql using p_estado_recepcion_id_paquete, p_codigo_recepcion;	    
		    	
		    	return (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion));	    		    			    		   
	    end if;
	    	    
	return v_codigo_estado_paquete;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_paq_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_paquete(p_documento_fiscal integer, p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_estado_recepcion_id_paquete integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito los select donde se llaman a las funciones: sre_fac_ope_obtener_estado_recepcion_paquete, sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq
				 sre_fac_ope_obtener_estado_recepcion_paquete
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se cambio la condicion if(v_codigo_estado_paquete=709) a if(v_codigo_estado_paquete=706) para actualizar si el paquete fue procesado completamente 				 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :13/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_codigo_estado_paquete smallint:=0;
	v_sql varchar:='0';
	v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5
begin	 
		if (p_documento_fiscal = 4 or p_documento_fiscal = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
			v_documento_fiscal := 2;
		end if;
	
		if (v_documento_fiscal = 1 )then	
			v_codigo_estado_paquete:=(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion));--*
		    
		    if(v_codigo_estado_paquete=709) then 
		    	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq(p_tipo_documento_sector_id)); --*	    	    
			    	execute v_sql using p_estado_recepcion_id_paquete, p_codigo_recepcion;	    
			    	
			    	return (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion));	    		    			    		   
		    end if;
		    
		    if(v_codigo_estado_paquete=706) then --706=PAQUETE PROCESADO
		    	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq(p_tipo_documento_sector_id)); --*	    	    
			    	execute v_sql using p_estado_recepcion_id_paquete, p_codigo_recepcion;	    
			    	
			    	return (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion));	    		    			    		   
		    end if;						
		else
			return sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_paq_contingencia(p_documento_fiscal, p_tipo_documento_sector_id, p_codigo_recepcion, p_estado_recepcion_id_paquete);		
		end if;
	
	    	    
	return v_codigo_estado_paquete;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_paquete'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_paquete(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_estado_recepcion_id_paquete integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito los select donde se llaman a las funciones: sre_fac_ope_obtener_estado_recepcion_paquete, sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq
				 sre_fac_ope_obtener_estado_recepcion_paquete
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se cambio la condicion if(v_codigo_estado_paquete=709) a if(v_codigo_estado_paquete=706) para actualizar si el paquete fue procesado completamente 				 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :13/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_codigo_estado_paquete smallint:=0;
	v_sql varchar:='0';
begin	  	 
	    v_codigo_estado_paquete:=(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion));--*
	    
	    if(v_codigo_estado_paquete=709) then 
	    	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq(p_tipo_documento_sector_id)); --*	    	    
		    	execute v_sql using p_estado_recepcion_id_paquete, p_codigo_recepcion;	    
		    	
		    	return (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion));	    		    			    		   
	    end if;
	    
	    if(v_codigo_estado_paquete=706) then --706=PAQUETE PROCESADO
	    	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq(p_tipo_documento_sector_id)); --*	    	    
		    	execute v_sql using p_estado_recepcion_id_paquete, p_codigo_recepcion;	    
		    	
		    	return (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion));	    		    			    		   
	    end if;
	    	    
	return v_codigo_estado_paquete;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_paquete'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_ventas(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_recepcion_correcta_id bigint, p_venta_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a otras funciones: v_estado_recepcion, v_estado_factura, v_estado_recepcion y v_estado_venta
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 

  v_estado_recepcion smallint:=0;
  v_estado_factura smallint:=0;
  v_estado_venta smallint:=0; 
  v_estado_recepcion_pendiente integer := 709;
  v_estado_factura_pendiente integer := 1495;

  v_estado_recepcion_valida integer := 705; 
  v_estado_factura_valida integer := 690;
  
  begin	
		
	  	v_estado_recepcion := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion)); --*	  	
	  	--v_estado_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id(p_tipo_documento_sector_id, p_venta_id));--*
	  	v_estado_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id(p_tipo_documento_sector_id, p_recepcion_correcta_id));--*
	  	if(v_estado_recepcion = v_estado_recepcion_pendiente and v_estado_factura = v_estado_factura_pendiente)
	  	then
	  		v_estado_recepcion := (sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion, v_estado_recepcion_valida));--*
   	
	  		v_estado_venta := (sre_recaudaciones.sre_fac_ope_actualizar_estado_venta(p_tipo_documento_sector_id,p_recepcion_correcta_id, v_estado_factura_valida));--*	
		
	     end if;
	     	     					                       
  return v_estado_recepcion;
  
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_ventas'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_ventas_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint, p_recepcion_correcta_id bigint, p_venta_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a otras funciones: v_estado_recepcion, v_estado_factura, v_estado_recepcion y v_estado_venta
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 

  v_estado_recepcion smallint:=0;
  v_estado_factura smallint:=0;
  v_estado_venta smallint:=0; 
  v_estado_recepcion_pendiente integer := 709;
  v_estado_factura_pendiente integer := 1495;

  v_estado_recepcion_valida integer := 705; 
  v_estado_factura_valida integer := 690;
  
  begin	
	
	
	  	v_estado_recepcion := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
	  	

	  	v_estado_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id_contingencia(p_tipo_documento_sector_id, p_recepcion_correcta_id));--*
	  	
	  	
	  	if(v_estado_recepcion = v_estado_recepcion_pendiente and v_estado_factura = v_estado_factura_pendiente)
	  	then
	  		v_estado_recepcion := (sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion, v_estado_recepcion_valida));--*
	  		v_estado_venta := (sre_recaudaciones.sre_fac_ope_actualizar_estado_venta_contingencia(p_tipo_documento_sector_id,p_recepcion_correcta_id, v_estado_factura_valida));--*	
	     end if;
	     	     					                       
  return v_estado_recepcion;
  
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_recepcion_ventas_contingencia'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_venta(p_tipo_documento_sector_id integer, p_recepcion_correcta_id bigint, p_estado_factura integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a las funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
	-- se retorna el estado de la venta
	
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_venta(p_tipo_documento_sector_id));

	    execute v_sql using p_estado_factura, p_recepcion_correcta_id;	    
	    return coalesce((sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id(p_tipo_documento_sector_id, p_recepcion_correcta_id)),0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_venta'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_venta_contingencia(p_tipo_documento_sector_id integer, p_recepcion_correcta_id bigint, p_estado_factura integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a las funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
	-- se retorna el estado de la venta
	
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_est_ven_contingencia(p_tipo_documento_sector_id));

	    execute v_sql using p_estado_factura, p_recepcion_correcta_id;	    
	    return coalesce((sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id_contingencia(p_tipo_documento_sector_id, p_recepcion_correcta_id)),0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_venta_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_estado_venta_facturacion_manual(p_tipo_documento_sector_id integer, p_codigo_venta bigint, p_estado_venta character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Operacion para actualizar el estado de una venta, ejecuta la consulta UPDATE
PARAMETROS INGRESO
tipo documento sector, id de venta, estado venta (descripcion)
PARAMETROS SALIDA
clasificador_id de la venta actualizada
SUBSISTEMA : Facturación
FECHA CREACION : 14/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : 
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	v_estado_venta bigint; 
begin

	    v_estado_venta := (select clasificador_id from  str_transversales.str_cps_clasificadores where tipo_clasificador like 'estado_venta_manual_documento_fiscal_id' AND descripcion =p_estado_venta);
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_venta_manual(p_tipo_documento_sector_id));
	    
	    execute v_sql  using v_estado_venta, p_codigo_venta into v_resultado;
	    return coalesce(v_resultado,0);
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_estado_venta_facturacion_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_actualizar_totales_etapa(p_sistema_id bigint, p_etapa_certificacion_sistemas_id bigint, p_cantidad_pruebas integer, p_cantidad_pruebas_exitoso integer, p_cantidad_pruebas_pendiente integer, p_porcentaje numeric, p_es_prueba_concluida boolean)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Actualiza los totales de la etapa (cantidad de pruebas, pruebas exitosos, pruebas pendientes y porcentaje)
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare   
  v_etapa_id bigint:=0;
  v_resultado smallint :=0;
begin
	
	SELECT prueba_etapa_certificacion_id into v_etapa_id 
	FROM sre_recaudaciones.sre_fac_pruebas_etapa_certificacion
	WHERE etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id
	limit 1;	
		
	--if p_es_prueba_concluida=false then	
	    UPDATE sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas
	    SET 
	    total_casos_prueba=p_cantidad_pruebas, 
	    casos_prueba_exitoso=p_cantidad_pruebas_exitoso, 
	    casos_prueba_pendiente=p_cantidad_pruebas_pendiente, 
	    porcentaje_cubierto=p_porcentaje
	    WHERE 
	    sistema_id=p_sistema_id and 
	    prueba_etapa_certificacion_id=v_etapa_id and
	    estado_id='AC';
	    
	    v_resultado:=1;
	--end if;    
	
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_actualizar_totales_etapa');
	  return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_actualizar_totales_etapa'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_con_actualizar_estado_recepcion_venta_paq(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Actualiza los estados de los registros de las tablas recepcion y ventas para un determinado paquete
				TABLA RECEPCION, ACTUALIZAR SI:	estado_recepcion_pendiente = 709; y estado_factura_pendiente = 1495 entonces 705 (estado_recepcion_valida)
				TABLA VENTAS, ACTUALIZAR SI: estado_recepcion_pendiente = 709; y estado_factura_pendiente = 1495 entonces 690 (estado_factura_valida)
PARAMETROS INGRESO
    p_recepcion_paquete_id : Identificador del paquete
PARAMETROS SALIDA
    v_sql: sentencia sql del documentos sector
SUBSISTEMA : Facturación
FECHA CREACION : <24/10/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_estandares as RECEPCION_ACTUALIZAR
					set	
						estado_recepcion_id=705				
					from sre_recaudaciones.sre_fac_recepciones_estandares as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_estandares as RECEPCION_CORRECTA
					on RECEPCION.recepcion_estandar_id=RECEPCION_CORRECTA.recepcion_estandar_id inner join sre_recaudaciones.sre_fac_ventas_estandares VENTAS 
					on RECEPCION_CORRECTA.recepcion_correcta_estandar_id=VENTAS.recepcion_correcta_estandar_id
					where 
					RECEPCION.recepcion_paquete_estandar_id=$1 and 
					RECEPCION_CORRECTA.recepcion_paquete_estandar_id=$1 and
					(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
					RECEPCION.recepcion_estandar_id=RECEPCION_ACTUALIZAR.recepcion_estandar_id;
					
					update sre_recaudaciones.sre_fac_ventas_estandares VENTAS_ACTUALIZAR
					set
						estado_factura_id=690			
					from sre_recaudaciones.sre_fac_recepciones_estandares as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_estandares as RECEPCION_CORRECTA
					on RECEPCION.recepcion_estandar_id=RECEPCION_CORRECTA.recepcion_estandar_id inner join sre_recaudaciones.sre_fac_ventas_estandares VENTAS 
					on RECEPCION_CORRECTA.recepcion_correcta_estandar_id=VENTAS.recepcion_correcta_estandar_id
					where 
					RECEPCION.recepcion_paquete_estandar_id=$1 and
					RECEPCION_CORRECTA.recepcion_paquete_estandar_id=$1 and
					((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
					VENTAS.venta_estandar_id=VENTAS_ACTUALIZAR.venta_estandar_id;';	 
												
		when p_tipo_documento_sector_id = 2
			then 			
 			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_colegios as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_colegios as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_colegios as RECEPCION_CORRECTA
on RECEPCION.recepcion_colegio_id=RECEPCION_CORRECTA.recepcion_colegio_id inner join sre_recaudaciones.sre_fac_ventas_colegios VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_colegio_id=VENTAS.recepcion_correcta_colegio_id
where 
RECEPCION.recepcion_paquete_colegio_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_colegio_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_colegio_id=RECEPCION_ACTUALIZAR.recepcion_colegio_id;

update sre_recaudaciones.sre_fac_ventas_colegios VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_colegios as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_colegios as RECEPCION_CORRECTA
on RECEPCION.recepcion_colegio_id=RECEPCION_CORRECTA.recepcion_colegio_id inner join sre_recaudaciones.sre_fac_ventas_colegios VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_colegio_id=VENTAS.recepcion_correcta_colegio_id
where 
RECEPCION.recepcion_paquete_colegio_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_colegio_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_colegio_id=VENTAS_ACTUALIZAR.venta_colegio_id;';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_alquileres as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_alquileres as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_alquileres as RECEPCION_CORRECTA
on RECEPCION.recepcion_alquiler_id=RECEPCION_CORRECTA.recepcion_alquiler_id inner join sre_recaudaciones.sre_fac_ventas_alquileres VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_alquiler_id=VENTAS.recepcion_correcta_alquiler_id
where 
RECEPCION.recepcion_paquete_alquiler_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_alquiler_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_alquiler_id=RECEPCION_ACTUALIZAR.recepcion_alquiler_id;

update sre_recaudaciones.sre_fac_ventas_alquileres VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_alquileres as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_alquileres as RECEPCION_CORRECTA
on RECEPCION.recepcion_alquiler_id=RECEPCION_CORRECTA.recepcion_alquiler_id inner join sre_recaudaciones.sre_fac_ventas_alquileres VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_alquiler_id=VENTAS.recepcion_correcta_alquiler_id
where 
RECEPCION.recepcion_paquete_alquiler_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_alquiler_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_alquiler_id=VENTAS_ACTUALIZAR.venta_alquiler_id;';	

		when p_tipo_documento_sector_id = 4
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_combustibles as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_combustibles as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_combustibles as RECEPCION_CORRECTA
on RECEPCION.recepcion_combustible_id=RECEPCION_CORRECTA.recepcion_combustible_id inner join sre_recaudaciones.sre_fac_ventas_combustibles VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_combustible_id=VENTAS.recepcion_correcta_combustible_id
where 
RECEPCION.recepcion_paquete_combustible_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_combustible_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_combustible_id=RECEPCION_ACTUALIZAR.recepcion_combustible_id;

update sre_recaudaciones.sre_fac_ventas_combustibles VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_combustibles as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_combustibles as RECEPCION_CORRECTA
on RECEPCION.recepcion_combustible_id=RECEPCION_CORRECTA.recepcion_combustible_id inner join sre_recaudaciones.sre_fac_ventas_combustibles VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_combustible_id=VENTAS.recepcion_correcta_combustible_id
where 
RECEPCION.recepcion_paquete_combustible_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_combustible_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_combustible_id=VENTAS_ACTUALIZAR.venta_combustible_id;';	

		when p_tipo_documento_sector_id = 5
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_servicios as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_servicios as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_servicios as RECEPCION_CORRECTA
on RECEPCION.recepcion_servicio_id=RECEPCION_CORRECTA.recepcion_servicio_id inner join sre_recaudaciones.sre_fac_ventas_servicios VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_servicio_id=VENTAS.recepcion_correcta_servicio_id
where 
RECEPCION.recepcion_paquete_servicio_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_servicio_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_servicio_id=RECEPCION_ACTUALIZAR.recepcion_servicio_id;

update sre_recaudaciones.sre_fac_ventas_servicios VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_servicios as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_servicios as RECEPCION_CORRECTA
on RECEPCION.recepcion_servicio_id=RECEPCION_CORRECTA.recepcion_servicio_id inner join sre_recaudaciones.sre_fac_ventas_servicios VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_servicio_id=VENTAS.recepcion_correcta_servicio_id
where 
RECEPCION.recepcion_paquete_servicio_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_servicio_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_servicio_id=VENTAS_ACTUALIZAR.venta_servicio_id;';	
				
		when p_tipo_documento_sector_id = 6
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_embotelladoras as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_embotelladoras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras as RECEPCION_CORRECTA
on RECEPCION.recepcion_embotelladora_id=RECEPCION_CORRECTA.recepcion_embotelladora_id inner join sre_recaudaciones.sre_fac_ventas_embotelladoras VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_embotelladora_id=VENTAS.recepcion_correcta_embotelladora_id
where 
RECEPCION.recepcion_paquete_embotelladora_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_embotelladora_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_embotelladora_id=RECEPCION_ACTUALIZAR.recepcion_embotelladora_id;

update sre_recaudaciones.sre_fac_ventas_embotelladoras VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_embotelladoras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras as RECEPCION_CORRECTA
on RECEPCION.recepcion_embotelladora_id=RECEPCION_CORRECTA.recepcion_embotelladora_id inner join sre_recaudaciones.sre_fac_ventas_embotelladoras VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_embotelladora_id=VENTAS.recepcion_correcta_embotelladora_id
where 
RECEPCION.recepcion_paquete_embotelladora_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_embotelladora_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_embotelladora_id=VENTAS_ACTUALIZAR.venta_embotelladora_id;';	 	

		--add 20190408 vcg
		 when p_tipo_documento_sector_id = 7
			then			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_bancos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_bancos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_bancos as RECEPCION_CORRECTA
on RECEPCION.recepcion_banco_id=RECEPCION_CORRECTA.recepcion_banco_id inner join sre_recaudaciones.sre_fac_ventas_bancos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_banco_id=VENTAS.recepcion_correcta_banco_id
where 
RECEPCION.recepcion_paquete_banco_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_banco_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_banco_id=RECEPCION_ACTUALIZAR.recepcion_banco_id;

update sre_recaudaciones.sre_fac_ventas_bancos VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_bancos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_bancos as RECEPCION_CORRECTA
on RECEPCION.recepcion_banco_id=RECEPCION_CORRECTA.recepcion_banco_id inner join sre_recaudaciones.sre_fac_ventas_bancos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_banco_id=VENTAS.recepcion_correcta_banco_id
where 
RECEPCION.recepcion_paquete_banco_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_banco_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_banco_id=VENTAS_ACTUALIZAR.venta_banco_id;';	 					
		--add 20190408 vcg		
 		when p_tipo_documento_sector_id = 8
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_hoteles as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_hoteles as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hoteles as RECEPCION_CORRECTA
on RECEPCION.recepcion_hotel_id=RECEPCION_CORRECTA.recepcion_hotel_id inner join sre_recaudaciones.sre_fac_ventas_hoteles VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_hotel_id=VENTAS.recepcion_correcta_hotel_id
where 
RECEPCION.recepcion_paquete_hotel_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_hotel_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_hotel_id=RECEPCION_ACTUALIZAR.recepcion_hotel_id;

update sre_recaudaciones.sre_fac_ventas_hoteles VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_hoteles as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hoteles as RECEPCION_CORRECTA
on RECEPCION.recepcion_hotel_id=RECEPCION_CORRECTA.recepcion_hotel_id inner join sre_recaudaciones.sre_fac_ventas_hoteles VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_hotel_id=VENTAS.recepcion_correcta_hotel_id
where 
RECEPCION.recepcion_paquete_hotel_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_hotel_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_hotel_id=VENTAS_ACTUALIZAR.venta_hotel_id;';	 	
				
		when p_tipo_documento_sector_id = 9
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_hospitales as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_hospitales as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hospitales as RECEPCION_CORRECTA
on RECEPCION.recepcion_hospital_id=RECEPCION_CORRECTA.recepcion_hospital_id inner join sre_recaudaciones.sre_fac_ventas_hospitales VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_hospital_id=VENTAS.recepcion_correcta_hospital_id
where 
RECEPCION.recepcion_paquete_hospital_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_hospital_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_hospital_id=RECEPCION_ACTUALIZAR.recepcion_hospital_id;

update sre_recaudaciones.sre_fac_ventas_hospitales VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_hospitales as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hospitales as RECEPCION_CORRECTA
on RECEPCION.recepcion_hospital_id=RECEPCION_CORRECTA.recepcion_hospital_id inner join sre_recaudaciones.sre_fac_ventas_hospitales VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_hospital_id=VENTAS.recepcion_correcta_hospital_id
where 
RECEPCION.recepcion_paquete_hospital_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_hospital_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_hospital_id=VENTAS_ACTUALIZAR.venta_hospital_id;';	 	
				
		when p_tipo_documento_sector_id = 10
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_juegos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_juegos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_juegos as RECEPCION_CORRECTA
on RECEPCION.recepcion_juego_id=RECEPCION_CORRECTA.recepcion_juego_id inner join sre_recaudaciones.sre_fac_ventas_juegos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_juego_id=VENTAS.recepcion_correcta_juego_id
where 
RECEPCION.recepcion_paquete_juego_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_juego_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_juego_id=RECEPCION_ACTUALIZAR.recepcion_juego_id;

update sre_recaudaciones.sre_fac_ventas_juegos VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_juegos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_juegos as RECEPCION_CORRECTA
on RECEPCION.recepcion_juego_id=RECEPCION_CORRECTA.recepcion_juego_id inner join sre_recaudaciones.sre_fac_ventas_juegos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_juego_id=VENTAS.recepcion_correcta_juego_id
where 
RECEPCION.recepcion_paquete_juego_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_juego_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_juego_id=VENTAS_ACTUALIZAR.venta_juego_id;';	 	
	
		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_espectaculos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_espectaculos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos as RECEPCION_CORRECTA
on RECEPCION.recepcion_espectaculo_id=RECEPCION_CORRECTA.recepcion_espectaculo_id inner join sre_recaudaciones.sre_fac_ventas_espectaculos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_espectaculo_id=VENTAS.recepcion_correcta_espectaculo_id
where 
RECEPCION.recepcion_paquete_espectaculo_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_espectaculo_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_espectaculo_id=RECEPCION_ACTUALIZAR.recepcion_espectaculo_id;

update sre_recaudaciones.sre_fac_ventas_espectaculos VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_espectaculos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos as RECEPCION_CORRECTA
on RECEPCION.recepcion_espectaculo_id=RECEPCION_CORRECTA.recepcion_espectaculo_id inner join sre_recaudaciones.sre_fac_ventas_espectaculos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_espectaculo_id=VENTAS.recepcion_correcta_espectaculo_id
where 
RECEPCION.recepcion_paquete_espectaculo_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_espectaculo_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_espectaculo_id=VENTAS_ACTUALIZAR.venta_espectaculo_id;';	 	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_exportaciones as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_exportaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_exportacion_id=RECEPCION_CORRECTA.recepcion_exportacion_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_exportacion_id=VENTAS.recepcion_correcta_exportacion_id
where 
RECEPCION.recepcion_paquete_exportacion_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_exportacion_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_exportacion_id=RECEPCION_ACTUALIZAR.recepcion_exportacion_id;

update sre_recaudaciones.sre_fac_ventas_exportaciones VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_exportaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_exportacion_id=RECEPCION_CORRECTA.recepcion_exportacion_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_exportacion_id=VENTAS.recepcion_correcta_exportacion_id
where 
RECEPCION.recepcion_paquete_exportacion_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_exportacion_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_exportacion_id=VENTAS_ACTUALIZAR.venta_exportacion_id;';	 	
		-- add 20190409
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_libres_consignaciones as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_libre_consignacion_id=RECEPCION_CORRECTA.recepcion_libre_consignacion_id inner join sre_recaudaciones.sre_fac_ventas_libres_consignaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_id=VENTAS.recepcion_correcta_libre_consignacion_id
where 
RECEPCION.recepcion_paquete_libre_consignacion_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_libre_consignacion_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_libre_consignacion_id=RECEPCION_ACTUALIZAR.recepcion_libre_consignacion_id;

update sre_recaudaciones.sre_fac_ventas_libres_consignaciones VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_libre_consignacion_id=RECEPCION_CORRECTA.recepcion_libre_consignacion_id inner join sre_recaudaciones.sre_fac_ventas_libres_consignaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_id=VENTAS.recepcion_correcta_libre_consignacion_id
where 
RECEPCION.recepcion_paquete_libre_consignacion_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_libre_consignacion_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_libre_consignacion_id=VENTAS_ACTUALIZAR.venta_libre_consignacion_id;';	 	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_zonas_francas as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_zonas_francas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas as RECEPCION_CORRECTA
on RECEPCION.recepcion_zona_franca_id=RECEPCION_CORRECTA.recepcion_zona_franca_id inner join sre_recaudaciones.sre_fac_ventas_zonas_francas VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_zona_franca_id=VENTAS.recepcion_correcta_zona_franca_id
where 
RECEPCION.recepcion_paquete_zona_franca_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_zona_franca_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_zona_franca_id=RECEPCION_ACTUALIZAR.recepcion_zona_franca_id;

update sre_recaudaciones.sre_fac_ventas_zonas_francas VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_zonas_francas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas as RECEPCION_CORRECTA
on RECEPCION.recepcion_zona_franca_id=RECEPCION_CORRECTA.recepcion_zona_franca_id inner join sre_recaudaciones.sre_fac_ventas_zonas_francas VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_zona_franca_id=VENTAS.recepcion_correcta_zona_franca_id
where 
RECEPCION.recepcion_paquete_zona_franca_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_zona_franca_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_zona_franca_id=VENTAS_ACTUALIZAR.venta_zona_franca_id;';	 	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales as RECEPCION_CORRECTA
on RECEPCION.recepcion_espectaculo_nacional_id=RECEPCION_CORRECTA.recepcion_espectaculo_nacional_id inner join sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_espectaculo_nacional_id=VENTAS.recepcion_correcta_espectaculo_nacional_id
where 
RECEPCION.recepcion_paquete_espectaculo_nacional_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_espectaculo_nacional_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_espectaculo_nacional_id=RECEPCION_ACTUALIZAR.recepcion_espectaculo_nacional_id;

update sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales as RECEPCION_CORRECTA
on RECEPCION.recepcion_espectaculo_nacional_id=RECEPCION_CORRECTA.recepcion_espectaculo_nacional_id inner join sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_espectaculo_nacional_id=VENTAS.recepcion_correcta_espectaculo_nacional_id
where 
RECEPCION.recepcion_paquete_espectaculo_nacional_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_espectaculo_nacional_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_espectaculo_nacional_id=VENTAS_ACTUALIZAR.venta_espectaculo_nacional_id;';	

		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias as RECEPCION_CORRECTA
on RECEPCION.recepcion_seguridad_alimentaria_id=RECEPCION_CORRECTA.recepcion_seguridad_alimentaria_id inner join sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_seguridad_alimentaria_id=VENTAS.recepcion_correcta_seguridad_alimentaria_id
where 
RECEPCION.recepcion_paquete_seguridad_alimentaria_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_seguridad_alimentaria_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_seguridad_alimentaria_id=RECEPCION_ACTUALIZAR.recepcion_seguridad_alimentaria_id;

update sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias as RECEPCION_CORRECTA
on RECEPCION.recepcion_seguridad_alimentaria_id=RECEPCION_CORRECTA.recepcion_seguridad_alimentaria_id inner join sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_seguridad_alimentaria_id=VENTAS.recepcion_correcta_seguridad_alimentaria_id
where 
RECEPCION.recepcion_paquete_seguridad_alimentaria_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_seguridad_alimentaria_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_seguridad_alimentaria_id=VENTAS_ACTUALIZAR.venta_seguridad_alimentaria_id;';	 
					
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras as RECEPCION_CORRECTA
on RECEPCION.recepcion_moneda_extranjera_id=RECEPCION_CORRECTA.recepcion_moneda_extranjera_id inner join sre_recaudaciones.sre_fac_ventas_monedas_extranjeras VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_moneda_extranjera_id=VENTAS.recepcion_correcta_moneda_extranjera_id
where 
RECEPCION.recepcion_paquete_moneda_extranjera_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_moneda_extranjera_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_moneda_extranjera_id=RECEPCION_ACTUALIZAR.recepcion_moneda_extranjera_id;

update sre_recaudaciones.sre_fac_ventas_monedas_extranjeras VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras as RECEPCION_CORRECTA
on RECEPCION.recepcion_moneda_extranjera_id=RECEPCION_CORRECTA.recepcion_moneda_extranjera_id inner join sre_recaudaciones.sre_fac_ventas_monedas_extranjeras VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_moneda_extranjera_id=VENTAS.recepcion_correcta_moneda_extranjera_id
where 
RECEPCION.recepcion_paquete_moneda_extranjera_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_moneda_extranjera_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_moneda_extranjera_id=VENTAS_ACTUALIZAR.venta_moneda_extranjera_id;';	 	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos as RECEPCION_CORRECTA
on RECEPCION.recepcion_nota_credito_debito_id=RECEPCION_CORRECTA.recepcion_nota_credito_debito_id inner join sre_recaudaciones.sre_fac_notas_creditos_debitos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_id=VENTAS.recepcion_correcta_nota_credito_debito_id
where 
RECEPCION.recepcion_paquete_nota_credito_debito_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_nota_credito_debito_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_notadc_id=1495) and
RECEPCION.recepcion_nota_credito_debito_id=RECEPCION_ACTUALIZAR.recepcion_nota_credito_debito_id;

update sre_recaudaciones.sre_fac_notas_creditos_debitos VENTAS_ACTUALIZAR
set
	estado_notadc_id=690			
from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos as RECEPCION_CORRECTA
on RECEPCION.recepcion_nota_credito_debito_id=RECEPCION_CORRECTA.recepcion_nota_credito_debito_id inner join sre_recaudaciones.sre_fac_notas_creditos_debitos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_id=VENTAS.recepcion_correcta_nota_credito_debito_id
where 
RECEPCION.recepcion_paquete_nota_credito_debito_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_nota_credito_debito_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_notadc_id=1495) and
VENTAS.nota_credito_debito_id=VENTAS_ACTUALIZAR.nota_credito_debito_id;';	 
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_conciliaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_nota_conciliacion_id=RECEPCION_CORRECTA.recepcion_nota_conciliacion_id inner join sre_recaudaciones.sre_fac_notas_conciliaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_nota_conciliacion_id=VENTAS.recepcion_correcta_nota_conciliacion_id
where 
RECEPCION.recepcion_paquete_nota_conciliacion_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_nota_conciliacion_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_nota_conciliacion_id=1495) and
RECEPCION.recepcion_nota_conciliacion_id=RECEPCION_ACTUALIZAR.recepcion_nota_conciliacion_id;

update sre_recaudaciones.sre_fac_notas_conciliaciones VENTAS_ACTUALIZAR
set
	estado_nota_conciliacion_id=690			
from sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_conciliaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_nota_conciliacion_id=RECEPCION_CORRECTA.recepcion_nota_conciliacion_id inner join sre_recaudaciones.sre_fac_notas_conciliaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_nota_conciliacion_id=VENTAS.recepcion_correcta_nota_conciliacion_id
where 
RECEPCION.recepcion_paquete_nota_conciliacion_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_nota_conciliacion_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_nota_conciliacion_id=1495) and
VENTAS.nota_conciliacion_id=VENTAS_ACTUALIZAR.nota_conciliacion_id;';	 			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_boletos_aereos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_boletos_aereos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_boletos_aereos as RECEPCION_CORRECTA
on RECEPCION.recepcion_boleto_aereo_id=RECEPCION_CORRECTA.recepcion_boleto_aereo_id inner join sre_recaudaciones.sre_fac_ventas_boletos_aereos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_boleto_aereo_id=VENTAS.recepcion_correcta_boleto_aereo_id
where 
RECEPCION.recepcion_paquete_boleto_aereo_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_boleto_aereo_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_boleto_aereo_id=RECEPCION_ACTUALIZAR.recepcion_boleto_aereo_id;

update sre_recaudaciones.sre_fac_ventas_boletos_aereos VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_boletos_aereos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_boletos_aereos as RECEPCION_CORRECTA
on RECEPCION.recepcion_boleto_aereo_id=RECEPCION_CORRECTA.recepcion_boleto_aereo_id inner join sre_recaudaciones.sre_fac_ventas_boletos_aereos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_boleto_aereo_id=VENTAS.recepcion_correcta_boleto_aereo_id
where 
RECEPCION.recepcion_paquete_boleto_aereo_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_boleto_aereo_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_boleto_aereo_id=VENTAS_ACTUALIZAR.venta_boleto_aereo_id;';	 			
			
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_turismos_receptivos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_turismos_receptivos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos as RECEPCION_CORRECTA
on RECEPCION.recepcion_turismo_receptivo_id=RECEPCION_CORRECTA.recepcion_turismo_receptivo_id inner join sre_recaudaciones.sre_fac_ventas_turismos_receptivos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_turismo_receptivo_id=VENTAS.recepcion_correcta_turismo_receptivo_id
where 
RECEPCION.recepcion_paquete_turismo_receptivo_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_turismo_receptivo_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_turismo_receptivo_id=RECEPCION_ACTUALIZAR.recepcion_turismo_receptivo_id;

update sre_recaudaciones.sre_fac_ventas_turismos_receptivos VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_turismos_receptivos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos as RECEPCION_CORRECTA
on RECEPCION.recepcion_turismo_receptivo_id=RECEPCION_CORRECTA.recepcion_turismo_receptivo_id inner join sre_recaudaciones.sre_fac_ventas_turismos_receptivos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_turismo_receptivo_id=VENTAS.recepcion_correcta_turismo_receptivo_id
where 
RECEPCION.recepcion_paquete_turismo_receptivo_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_turismo_receptivo_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_turismo_receptivo_id=VENTAS_ACTUALIZAR.venta_turismo_receptivo_id;';	 	

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_tasas_ceros as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_tasas_ceros as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros as RECEPCION_CORRECTA
on RECEPCION.recepcion_tasa_cero_id=RECEPCION_CORRECTA.recepcion_tasa_cero_id inner join sre_recaudaciones.sre_fac_ventas_tasas_ceros VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_tasa_cero_id=VENTAS.recepcion_correcta_tasa_cero_id
where 
RECEPCION.recepcion_paquete_tasa_cero_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_tasa_cero_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_tasa_cero_id=RECEPCION_ACTUALIZAR.recepcion_tasa_cero_id;

update sre_recaudaciones.sre_fac_ventas_tasas_ceros VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_tasas_ceros as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros as RECEPCION_CORRECTA
on RECEPCION.recepcion_tasa_cero_id=RECEPCION_CORRECTA.recepcion_tasa_cero_id inner join sre_recaudaciones.sre_fac_ventas_tasas_ceros VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_tasa_cero_id=VENTAS.recepcion_correcta_tasa_cero_id
where 
RECEPCION.recepcion_paquete_tasa_cero_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_tasa_cero_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_tasa_cero_id=VENTAS_ACTUALIZAR.venta_tasa_cero_id;';	 	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23
			then				 
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_hidrocarburos as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_hidrocarburos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos as RECEPCION_CORRECTA
on RECEPCION.recepcion_hidrocarburo_id=RECEPCION_CORRECTA.recepcion_hidrocarburo_id inner join sre_recaudaciones.sre_fac_ventas_hidrocarburos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_hidrocarburo_id=VENTAS.recepcion_correcta_hidrocarburo_id
where 
RECEPCION.recepcion_paquete_hidrocarburo_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_hidrocarburo_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_hidrocarburo_id=RECEPCION_ACTUALIZAR.recepcion_hidrocarburo_id;

update sre_recaudaciones.sre_fac_ventas_hidrocarburos VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_hidrocarburos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos as RECEPCION_CORRECTA
on RECEPCION.recepcion_hidrocarburo_id=RECEPCION_CORRECTA.recepcion_hidrocarburo_id inner join sre_recaudaciones.sre_fac_ventas_hidrocarburos VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_hidrocarburo_id=VENTAS.recepcion_correcta_hidrocarburo_id
where 
RECEPCION.recepcion_paquete_hidrocarburo_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_hidrocarburo_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_hidrocarburo_id=VENTAS_ACTUALIZAR.venta_hidrocarburo_id;';	 					
		--add 20190410 rgt 
 		when p_tipo_documento_sector_id = 24
			then				 
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb as RECEPCION_CORRECTA
on RECEPCION.recepcion_exportacion_ypfb_id=RECEPCION_CORRECTA.recepcion_exportacion_ypfb_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_exportacion_ypfb_id=VENTAS.recepcion_correcta_exportacion_ypfb_id
where 
RECEPCION.recepcion_paquete_exportacion_ypfb_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_exportacion_ypfb_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_exportacion_ypfb_id=RECEPCION_ACTUALIZAR.recepcion_exportacion_ypfb_id;

update sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb as RECEPCION_CORRECTA
on RECEPCION.recepcion_exportacion_ypfb_id=RECEPCION_CORRECTA.recepcion_exportacion_ypfb_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_exportacion_ypfb_id=VENTAS.recepcion_correcta_exportacion_ypfb_id
where 
RECEPCION.recepcion_paquete_exportacion_ypfb_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_exportacion_ypfb_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_exportacion_ypfb_id=VENTAS_ACTUALIZAR.venta_exportacion_ypfb_id;';	 
 		
 		--add 20190729 rgt 
 		when p_tipo_documento_sector_id = 25
			then				 
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras as RECEPCION_CORRECTA
on RECEPCION.recepcion_exportacion_minera_id=RECEPCION_CORRECTA.recepcion_exportacion_minera_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones_mineras VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_exportacion_minera_id=VENTAS.recepcion_correcta_exportacion_minera_id
where 
RECEPCION.recepcion_paquete_exportacion_minera_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_exportacion_minera_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_exportacion_minera_id=RECEPCION_ACTUALIZAR.recepcion_exportacion_minera_id;

update sre_recaudaciones.sre_fac_ventas_exportaciones_mineras VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras as RECEPCION_CORRECTA
on RECEPCION.recepcion_exportacion_minera_id=RECEPCION_CORRECTA.recepcion_exportacion_minera_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones_mineras VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_exportacion_minera_id=VENTAS.recepcion_correcta_exportacion_minera_id
where 
RECEPCION.recepcion_paquete_exportacion_minera_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_exportacion_minera_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_exportacion_minera_id=VENTAS_ACTUALIZAR.venta_exportacion_minera_id;';	 
 			
 		--add 20190410 jf 
 		when p_tipo_documento_sector_id = 26
			then				 
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb as RECEPCION_CORRECTA
on RECEPCION.recepcion_libre_consignacion_ypfb_id=RECEPCION_CORRECTA.recepcion_libre_consignacion_ypfb_id inner join sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_ypfb_id=VENTAS.recepcion_correcta_libre_consignacion_ypfb_id
where 
RECEPCION.recepcion_paquete_libre_consignacion_ypfb_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_libre_consignacion_ypfb_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_libre_consignacion_ypfb_id=RECEPCION_ACTUALIZAR.recepcion_libre_consignacion_ypfb_id;

update sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb as RECEPCION_CORRECTA
on RECEPCION.recepcion_libre_consignacion_ypfb_id=RECEPCION_CORRECTA.recepcion_libre_consignacion_ypfb_id inner join sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_ypfb_id=VENTAS.recepcion_correcta_libre_consignacion_ypfb_id
where 
RECEPCION.recepcion_paquete_libre_consignacion_ypfb_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_libre_consignacion_ypfb_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_libre_consignacion_ypfb_id=VENTAS_ACTUALIZAR.venta_libre_consignacion_ypfb_id;';	 
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_mineras_internas as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_mineras_internas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas as RECEPCION_CORRECTA
on RECEPCION.recepcion_minera_interna_id=RECEPCION_CORRECTA.recepcion_minera_interna_id inner join sre_recaudaciones.sre_fac_ventas_mineras_internas VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_minera_interna_id=VENTAS.recepcion_correcta_minera_interna_id
where 
RECEPCION.recepcion_paquete_minera_interna_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_minera_interna_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_minera_interna_id=RECEPCION_ACTUALIZAR.recepcion_minera_interna_id;

update sre_recaudaciones.sre_fac_ventas_mineras_internas VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_mineras_internas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas as RECEPCION_CORRECTA
on RECEPCION.recepcion_minera_interna_id=RECEPCION_CORRECTA.recepcion_minera_interna_id inner join sre_recaudaciones.sre_fac_ventas_mineras_internas VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_minera_interna_id=VENTAS.recepcion_correcta_minera_interna_id
where 
RECEPCION.recepcion_paquete_minera_interna_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_minera_interna_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_minera_interna_id=VENTAS_ACTUALIZAR.venta_minera_interna_id;';	  			
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_prevaloradas as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_prevaloradas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_prevaloradas as RECEPCION_CORRECTA
on RECEPCION.recepcion_prevalorada_id=RECEPCION_CORRECTA.recepcion_prevalorada_id inner join sre_recaudaciones.sre_fac_prevaloradas VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_prevalorada_id=VENTAS.recepcion_correcta_prevalorada_id
where 
RECEPCION.recepcion_paquete_prevalorada_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_prevalorada_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_prevalorada_id=RECEPCION_ACTUALIZAR.recepcion_prevalorada_id;

update sre_recaudaciones.sre_fac_prevaloradas VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_prevaloradas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_prevaloradas as RECEPCION_CORRECTA
on RECEPCION.recepcion_prevalorada_id=RECEPCION_CORRECTA.recepcion_prevalorada_id inner join sre_recaudaciones.sre_fac_prevaloradas VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_prevalorada_id=VENTAS.recepcion_correcta_prevalorada_id
where 
RECEPCION.recepcion_paquete_prevalorada_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_prevalorada_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.prevalorada_id=VENTAS_ACTUALIZAR.prevalorada_id;';	 
		
		--add 20190724 rgt				
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_telecomunicaciones as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_telecomunicaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_telecomunicacion_id=RECEPCION_CORRECTA.recepcion_telecomunicacion_id inner join sre_recaudaciones.sre_fac_ventas_telecomunicaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_telecomunicacion_id=VENTAS.recepcion_correcta_telecomunicacion_id
where 
RECEPCION.recepcion_paquete_telecomunicacion_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_telecomunicacion_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_factura_id=1495) and
RECEPCION.recepcion_telecomunicacion_id=RECEPCION_ACTUALIZAR.recepcion_telecomunicacion_id;

update sre_recaudaciones.sre_fac_ventas_telecomunicaciones VENTAS_ACTUALIZAR
set
	estado_factura_id=690			
from sre_recaudaciones.sre_fac_recepciones_telecomunicaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones as RECEPCION_CORRECTA
on RECEPCION.recepcion_telecomunicacion_id=RECEPCION_CORRECTA.recepcion_telecomunicacion_id inner join sre_recaudaciones.sre_fac_ventas_telecomunicaciones VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_telecomunicacion_id=VENTAS.recepcion_correcta_telecomunicacion_id
where 
RECEPCION.recepcion_paquete_telecomunicacion_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_telecomunicacion_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_factura_id=1495) and
VENTAS.venta_telecomunicacion_id=VENTAS_ACTUALIZAR.venta_telecomunicacion_id;';	 
		
		--add 20190729 rgt				
		when p_tipo_documento_sector_id = 30
			then
			v_sql:= 'update sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv as RECEPCION_ACTUALIZAR
set	
	estado_recepcion_id=705				
from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv as RECEPCION_CORRECTA
on RECEPCION.recepcion_nota_credito_debito_sfv_id=RECEPCION_CORRECTA.recepcion_nota_credito_debito_sfv_id inner join sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_sfv_id=VENTAS.recepcion_correcta_nota_credito_debito_sfv_id
where 
RECEPCION.recepcion_paquete_nota_credito_debito_sfv_id=$1 and 
RECEPCION_CORRECTA.recepcion_paquete_nota_credito_debito_sfv_id=$1 and
(RECEPCION.estado_recepcion_id=709 and VENTAS.estado_notadc_id=1495) and
RECEPCION.recepcion_nota_credito_debito_sfv_id=RECEPCION_ACTUALIZAR.recepcion_nota_credito_debito_sfv_id;

update sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv VENTAS_ACTUALIZAR
set
	estado_notadc_id=690			
from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv as RECEPCION_CORRECTA
on RECEPCION.recepcion_nota_credito_debito_sfv_id=RECEPCION_CORRECTA.recepcion_nota_credito_debito_sfv_id inner join sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv VENTAS 
on RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_sfv_id=VENTAS.recepcion_correcta_nota_credito_debito_sfv_id
where 
RECEPCION.recepcion_paquete_nota_credito_debito_sfv_id=$1 and
RECEPCION_CORRECTA.recepcion_paquete_nota_credito_debito_sfv_id=$1 and
((RECEPCION.estado_recepcion_id=709 or RECEPCION.estado_recepcion_id=705)  and VENTAS.estado_notadc_id=1495) and
VENTAS.nota_credito_debito_sfv_id=VENTAS_ACTUALIZAR.nota_credito_debito_sfv_id;';	 
			
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_con_actualizar_estado_recepcion_venta_paq')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_act_est_rec_pq_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para actualización en sector 25 (sre_fac_recepciones_contingencias_paquetes_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 25/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_estandares SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_estandar_id = $2';
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_colegios 	SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_colegio_id = $2';	
		
		--add 20190408 rgt
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_alquileres SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_alquiler_id = $2';		

		
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_combustibles SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_combustible_id = $2';	

 		--add 20190408 rgt
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_servicios SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_servicio_id = $2';	
				
 		--add 20190408 rgt
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_embotelladoras SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_embotelladora_id = $2';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_bancos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_banco_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hoteles SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_hotel_id = $2';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hospitales SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_hospital_id = $2';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_juegos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_juego_id = $2';	

 		--add 20190408 rgt
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_espectaculo_id = $2';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION 
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_exportacion_id = $2';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consignaciones SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_libre_consignacion_id = $2';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_zonas_francas SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_zona_franca_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos_nacionales SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_espectaculo_nacional_id = $2';	

		--add 20190408 rgt
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_seguridades_alimentarias SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_seguridad_alimentaria_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_monedas_extranjeras SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_moneda_extranjera_id = $2';	

		--add 20190410 jf				
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_creditos_debitos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_nota_credito_debito_id = $2';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_conciliaciones SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_nota_conciliacion_id = $2';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_boletos_aereos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_boleto_aereo_id = $2';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEOCTIVO
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_turismos_receptivos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_turismo_receptivo_id = $2';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_tasas_ceros 	SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_tasa_cero_id = $2';	
		--add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hidrocarburos SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_hidrocarburo_id = $2';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones_ypfb SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_exportacion_ypfb_id = $2';
		--add 20190729 rgt
		--actualizacion 20191025 eca
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_export_mineras SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_exportacion_minera_id = $2';	
		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consignaciones_ypfb SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_libre_consignacion_ypfb_id = $2';
			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_mineras_internas 	SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_minera_interna_id = $2';
		
		--add 20190410 jf
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_prevaloradas SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_prevalorada_id = $2';			
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_telecomunicaciones SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_telecomunicacion_id = $2';			
		
		--add 20190729 rgt
		when p_tipo_documento_sector_id = 30 --Nota: FACTURA NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_creditos_debitos_sfv SET estado_recepcion_contingencia_id = $1 WHERE recepcion_contingencia_paquete_nota_credito_debito_sfv_id = $2';			
		
			
		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_act_est_rec_pq_contingencia')) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizacion_venta_contingencia(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cuf character varying, p_estado_factura_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	v_sql varchar:='';	
begin
 	v_sql:=(case
 	
			when(p_tipo_documento_sector_id=1) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_estandares 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_estandar_id=(select venta_contingencia_estandar_id from sre_recaudaciones.sre_fac_ventas_contingencias_estandares v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id=2) then --sre_fac_ventas_colegios
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_colegios 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_colegio_id=(select venta_contingencia_colegio_id from sre_recaudaciones.sre_fac_ventas_contingencias_colegios v where v.cuf=''',p_cuf,''' limit 1)')					
						
			when(p_tipo_documento_sector_id=3) then --sre_fac_ventas_alquileres
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_alquileres 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_alquiler_id=(select venta_contingencia_alquiler_id from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id=4) then --sre_fac_ventas_combustibles
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_combustibles 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_combustible_id=(select venta_contingencia_combustible_id from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles v where v.cuf=''',p_cuf,''' limit 1)')					
			
			when(p_tipo_documento_sector_id=5) then --sre_fac_ventas_servicios
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_servicios 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_servicio_id=(select venta_contingencia_servicio_id from sre_recaudaciones.sre_fac_ventas_contingencias_servicios v where v.cuf=''',p_cuf,''' limit 1)')	
								
			when(p_tipo_documento_sector_id=6) then --sre_fac_ventas_embotelladoras			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_embotelladora_id=(select venta_contingencia_embotelladora_id from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras v where v.cuf=''',p_cuf,''' limit 1)')				
					
			when(p_tipo_documento_sector_id=7) then --sre_fac_ventas_bancos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_bancos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_banco_id=(select venta_contingencia_banco_id from sre_recaudaciones.sre_fac_ventas_contingencias_bancos v where v.cuf=''',p_cuf,''' limit 1)')					
			
			when(p_tipo_documento_sector_id=8) then --sre_fac_ventas_hoteles
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_hoteles 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_hotel_id=(select venta_contingencia_hotel_id from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles v where v.cuf=''',p_cuf,''' limit 1)')				
			
			when(p_tipo_documento_sector_id=9) then --sre_fac_ventas_hospitales
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_hospitales 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_hospital_id=(select venta_contingencia_hospital_id from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales v where v.cuf=''',p_cuf,''' limit 1)')										

			when(p_tipo_documento_sector_id=10) then --sre_fac_ventas_juegos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_juegos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_juego_id=(select venta_contingencia_juego_id from sre_recaudaciones.sre_fac_ventas_contingencias_juegos v where v.cuf=''',p_cuf,''' limit 1)')									
		
			when(p_tipo_documento_sector_id=11) then --sre_fac_ventas_espectaculos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_espectaculo_id=(select venta_contingencia_espectaculo_id from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos v where v.cuf=''',p_cuf,''' limit 1)')		

			when(p_tipo_documento_sector_id=12) then --sre_fac_ventas_exportaciones
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_exportacion_id=(select venta_contingencia_exportacion_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones v where v.cuf=''',p_cuf,''' limit 1)')					
			
			when(p_tipo_documento_sector_id=13) then --sre_fac_ventas_libres_consignaciones
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_libre_consignacion_id=(select venta_contingencia_libre_consignacion_id from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones v where v.cuf=''',p_cuf,''' limit 1)')	
					
			when(p_tipo_documento_sector_id=14) then --sre_fac_ventas_zonas_francas
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_zona_franca_id=(select venta_contingencia_zona_franca_id from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas v where v.cuf=''',p_cuf,''' limit 1)')	
									
			when(p_tipo_documento_sector_id=15) then --sre_fac_ventas_espectaculos_nacionales
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_espectaculo_nacional_id=(select venta_contingencia_espectaculo_nacional_id from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales v where v.cuf=''',p_cuf,''' limit 1)')	
					
			when(p_tipo_documento_sector_id=16) then --sre_fac_ventas_seguridades_alimentarias
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_seguridad_alimentaria_id=(select venta_contingencia_seguridad_alimentaria_id from sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias v where v.cuf=''',p_cuf,''' limit 1)')			

			when(p_tipo_documento_sector_id=17) then --sre_fac_ventas_monedas_extranjeras
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_moneda_extranjera_id=(select venta_contingencia_moneda_extranjera_id from sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras v where v.cuf=''',p_cuf,''' limit 1)')		
				
			when(p_tipo_documento_sector_id=18) then --sre_fac_notas_creditos_debitos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_notas_creditos_debitos 
								SET estado_notadc_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE nota_credito_debito_id=(select nota_credito_debito_id from sre_recaudaciones.sre_fac_notas_creditos_debitos v where v.cuf=''',p_cuf,''' limit 1)')			
		
			when(p_tipo_documento_sector_id=19) then --sre_fac_notas_conciliaciones
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_notas_conciliaciones 
								SET estado_nota_conciliacion_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE nota_conciliacion_id=(select nota_conciliacion_id from sre_recaudaciones.sre_fac_notas_conciliaciones v where v.cuf=''',p_cuf,''' limit 1)')			
			
			--add 20190514 rgt //posiblemente se les proporcione el servicio de anulacion de factura
			when(p_tipo_documento_sector_id = 20) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_boleto_aereo_id=(select venta_contingencia_boleto_aereo_id from sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos v where v.cuf=''',p_cuf,''' limit 1)')			
				
			when(p_tipo_documento_sector_id=21) then -- sre_fac_ventas_turismos_receptivos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_turismo_receptivo_id=(select venta_contingencia_turismo_receptivo_id from sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos v where v.cuf=''',p_cuf,''' limit 1)')			
					
			when(p_tipo_documento_sector_id=22) then --sre_fac_ventas_tasas_ceros
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_tasa_cero_id=(select venta_contingencia_tasa_cero_id from sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros v where v.cuf=''',p_cuf,''' limit 1)')		
				
			when(p_tipo_documento_sector_id=23) then --sre_fac_ventas_hidrocarburos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_hidrocarburo_id=(select venta_contingencia_hidrocarburo_id from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos v where v.cuf=''',p_cuf,''' limit 1)')	
													
			when(p_tipo_documento_sector_id = 24) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_exportacion_ypfb_id=(select venta_contingencia_exportacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id = 25) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_exportacion_minera_id = (select venta_contingencia_exportacion_minera_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras v where v.cuf=''',p_cuf,''' limit 1)')			
			 				  
			when(p_tipo_documento_sector_id = 26) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb 
								  SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							    ' WHERE venta_contingencia_libre_consignacion_ypfb_id=(select venta_contingencia_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id = 27) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas 
								  SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							    ' WHERE venta_contingencia_minera_interna_id=(select venta_contingencia_minera_interna_id from sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas v where v.cuf=''',p_cuf,''' limit 1)')			
							    
			when(p_tipo_documento_sector_id = 28) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_prevaloradas 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE prevalorada_id=(select prevalorada_id from sre_recaudaciones.sre_fac_prevaloradas v where v.cufp=''',p_cuf,''' limit 1)')	
			
			--add 20190724 rgt
			when(p_tipo_documento_sector_id = 29) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_contingencia_telecomunicacion_id=(select venta_contingencia_telecomunicacion_id from sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones v where v.cuf=''',p_cuf,''' limit 1)')
			
			--add 20190726 rgt
			when(p_tipo_documento_sector_id = 30) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv 
								SET estado_notadc_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE nota_credito_debito_sfv_id=(select nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv v where v.cuf=''',p_cuf,''' limit 1)')
							  				  
	end);		
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizacion_venta_contingencia')) as varchar);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizacion_ventas(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cuf character varying, p_estado_factura_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	v_sql varchar:='';	
begin
 	v_sql:=(case
 	
			when(p_tipo_documento_sector_id=1) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_estandares 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_estandar_id=(select venta_estandar_id from sre_recaudaciones.sre_fac_ventas_estandares v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id=2) then --sre_fac_ventas_colegios
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_colegios 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_colegio_id=(select venta_colegio_id from sre_recaudaciones.sre_fac_ventas_colegios v where v.cuf=''',p_cuf,''' limit 1)')					
						
			when(p_tipo_documento_sector_id=3) then --sre_fac_ventas_alquileres
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_alquileres 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_alquiler_id=(select venta_alquiler_id from sre_recaudaciones.sre_fac_ventas_alquileres v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id=4) then --sre_fac_ventas_combustibles
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_combustibles 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_combustible_id=(select venta_combustible_id from sre_recaudaciones.sre_fac_ventas_combustibles v where v.cuf=''',p_cuf,''' limit 1)')					
			
			when(p_tipo_documento_sector_id=5) then --sre_fac_ventas_servicios
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_servicios 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_servicio_id=(select venta_servicio_id from sre_recaudaciones.sre_fac_ventas_servicios v where v.cuf=''',p_cuf,''' limit 1)')	
								
			when(p_tipo_documento_sector_id=6) then --sre_fac_ventas_embotelladoras			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_embotelladoras 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_embotelladora_id=(select venta_embotelladora_id from sre_recaudaciones.sre_fac_ventas_embotelladoras v where v.cuf=''',p_cuf,''' limit 1)')				
					
			when(p_tipo_documento_sector_id=7) then --sre_fac_ventas_bancos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_bancos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_banco_id=(select venta_banco_id from sre_recaudaciones.sre_fac_ventas_bancos v where v.cuf=''',p_cuf,''' limit 1)')					
			
			when(p_tipo_documento_sector_id=8) then --sre_fac_ventas_hoteles
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_hoteles 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_hotel_id=(select venta_hotel_id from sre_recaudaciones.sre_fac_ventas_hoteles v where v.cuf=''',p_cuf,''' limit 1)')				
			
			when(p_tipo_documento_sector_id=9) then --sre_fac_ventas_hospitales
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_hospitales 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_hospital_id=(select venta_hospital_id from sre_recaudaciones.sre_fac_ventas_hospitales v where v.cuf=''',p_cuf,''' limit 1)')										

			when(p_tipo_documento_sector_id=10) then --sre_fac_ventas_juegos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_juegos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_juego_id=(select venta_juego_id from sre_recaudaciones.sre_fac_ventas_juegos v where v.cuf=''',p_cuf,''' limit 1)')									
		
			when(p_tipo_documento_sector_id=11) then --sre_fac_ventas_espectaculos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_espectaculos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_espectaculo_id=(select venta_espectaculo_id from sre_recaudaciones.sre_fac_ventas_espectaculos v where v.cuf=''',p_cuf,''' limit 1)')		

			when(p_tipo_documento_sector_id=12) then --sre_fac_ventas_exportaciones
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_exportaciones 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_exportacion_id=(select venta_exportacion_id from sre_recaudaciones.sre_fac_ventas_exportaciones v where v.cuf=''',p_cuf,''' limit 1)')					
			
			when(p_tipo_documento_sector_id=13) then --sre_fac_ventas_libres_consignaciones
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_libres_consignaciones 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_libre_consignacion_id=(select venta_libre_consignacion_id from sre_recaudaciones.sre_fac_ventas_libres_consignaciones v where v.cuf=''',p_cuf,''' limit 1)')	
					
			when(p_tipo_documento_sector_id=14) then --sre_fac_ventas_zonas_francas
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_zonas_francas 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_zona_franca_id=(select venta_zona_franca_id from sre_recaudaciones.sre_fac_ventas_zonas_francas v where v.cuf=''',p_cuf,''' limit 1)')	
									
			when(p_tipo_documento_sector_id=15) then --sre_fac_ventas_espectaculos_nacionales
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_espectaculo_nacional_id=(select venta_espectaculo_nacional_id from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales v where v.cuf=''',p_cuf,''' limit 1)')	
					
			when(p_tipo_documento_sector_id=16) then --sre_fac_ventas_seguridades_alimentarias
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_seguridad_alimentaria_id=(select venta_seguridad_alimentaria_id from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias v where v.cuf=''',p_cuf,''' limit 1)')			

			when(p_tipo_documento_sector_id=17) then --sre_fac_ventas_monedas_extranjeras
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_monedas_extranjeras 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_moneda_extranjera_id=(select venta_moneda_extranjera_id from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras v where v.cuf=''',p_cuf,''' limit 1)')		
				
			when(p_tipo_documento_sector_id=18) then --sre_fac_notas_creditos_debitos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_notas_creditos_debitos 
								SET estado_notadc_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE nota_credito_debito_id=(select nota_credito_debito_id from sre_recaudaciones.sre_fac_notas_creditos_debitos v where v.cuf=''',p_cuf,''' limit 1)')			
		
			when(p_tipo_documento_sector_id=19) then --sre_fac_notas_conciliaciones
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_notas_conciliaciones 
								SET estado_nota_conciliacion_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE nota_conciliacion_id=(select nota_conciliacion_id from sre_recaudaciones.sre_fac_notas_conciliaciones v where v.cuf=''',p_cuf,''' limit 1)')			
			
			--add 20190514 rgt //posiblemente se les proporcione el servicio de anulacion de factura
			when(p_tipo_documento_sector_id = 20) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_boletos_aereos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_boleto_aereo_id=(select venta_boleto_aereo_id from sre_recaudaciones.sre_fac_ventas_boletos_aereos v where v.cuf=''',p_cuf,''' limit 1)')			
				
			when(p_tipo_documento_sector_id=21) then -- sre_fac_ventas_turismos_receptivos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_turismos_receptivos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_turismo_receptivo_id=(select venta_turismo_receptivo_id from sre_recaudaciones.sre_fac_ventas_turismos_receptivos v where v.cuf=''',p_cuf,''' limit 1)')			
					
			when(p_tipo_documento_sector_id=22) then --sre_fac_ventas_tasas_ceros
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_tasas_ceros 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_tasa_cero_id=(select venta_tasa_cero_id from sre_recaudaciones.sre_fac_ventas_tasas_ceros v where v.cuf=''',p_cuf,''' limit 1)')		
				
			when(p_tipo_documento_sector_id=23) then --sre_fac_ventas_hidrocarburos
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_hidrocarburos 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_hidrocarburo_id=(select venta_hidrocarburo_id from sre_recaudaciones.sre_fac_ventas_hidrocarburos v where v.cuf=''',p_cuf,''' limit 1)')	
													
			when(p_tipo_documento_sector_id = 24) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_exportacion_ypfb_id=(select venta_exportacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id = 25) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_exportaciones_mineras 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_exportacion_minera_id = (select venta_exportacion_minera_id from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras v where v.cuf=''',p_cuf,''' limit 1)')			
			 				  
			when(p_tipo_documento_sector_id = 26) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb 
								  SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							    ' WHERE venta_libre_consignacion_ypfb_id=(select venta_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb v where v.cuf=''',p_cuf,''' limit 1)')			
			
			when(p_tipo_documento_sector_id = 27) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_mineras_internas 
								  SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							    ' WHERE venta_minera_interna_id=(select venta_minera_interna_id from sre_recaudaciones.sre_fac_ventas_mineras_internas v where v.cuf=''',p_cuf,''' limit 1)')			
							    
			when(p_tipo_documento_sector_id = 28) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_prevaloradas 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE prevalorada_id=(select prevalorada_id from sre_recaudaciones.sre_fac_prevaloradas v where v.cufp=''',p_cuf,''' limit 1)')	
			
			--add 20190724 rgt
			when(p_tipo_documento_sector_id = 29) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_ventas_telecomunicaciones 
								SET estado_factura_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE venta_telecomunicacion_id=(select venta_telecomunicacion_id from sre_recaudaciones.sre_fac_ventas_telecomunicaciones v where v.cuf=''',p_cuf,''' limit 1)')
			
			--add 20190726 rgt
			when(p_tipo_documento_sector_id = 30) then			
				CONCAT(' UPDATE  sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv 
								SET estado_notadc_id=', p_estado_factura_id,',fecha_ultima_modificacion=now()',
							  ' WHERE nota_credito_debito_sfv_id=(select nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv v where v.cuf=''',p_cuf,''' limit 1)')
							  				  
	end);		
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizacion_ventas')) as varchar);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_est_rec_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_estandares SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_estandar_id = $2';
														
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_colegios SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_colegio_id = $2';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_alquileres SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_alquiler_id = $2';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_combustibles SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_combustible_id = $2';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_servicios SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_servicio_id = $2';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_embotelladoras SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_embotelladora_id = $2';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_bancos SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_banco_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_hoteles SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_hotel_id = $2';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_hospitales SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_hospital_id = $2';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_juegos SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_juego_id = $2';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_espectaculo_id = $2';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_exportacion_id = $2';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_libre_consignacion_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_zonas_francas SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_zona_franca_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos_nacionales SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_espectaculo_nacional_id = $2';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_seguridades_alimentarias SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_seguridad_alimentaria_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_monedas_extranjeras SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_moneda_extranjera_id = $2';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_nota_credito_debito_id = $2';		
	
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_turismos_receptivos SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_turismo_receptivo_id = $2';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_tasas_ceros SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_tasa_cero_id = $2';	

				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_hidrocarburos SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_hidrocarburo_id = $2';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_ypfb SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_exportacion_ypfb_id = $2';
		
		 --add 20190729 rgt
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_mineras SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_exportacion_minera_id = $2';
			
		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones_ypfb SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_libre_consignacion_ypfb_id = $2';
			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_mineras_internas 		SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_minera_interna_id = $2';
		
		--add 20190410 jf
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_prevaloradas SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_prevalorada_id = $2';
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_telecomunicaciones SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_telecomunicacion_id = $2';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos_sfv SET estado_recepcion_contingencia_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_nota_credito_debito_sfv_id = $2';
		
			
		else 
			 v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_est_rec_contingencia')) as varchar);
      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_est_ven_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_estandares SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_estandar_id = $2';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_colegios SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_colegio_id = $2';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_alquileres SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_alquiler_id = $2';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_combustibles SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_combustible_id = $2';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_servicios SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_servicio_id = $2';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras SET estado_factura_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_contingencia_correcta_embotelladora_id = $2';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_bancos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_banco_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_hoteles SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_hotel_id = $2';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_hospitales SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_hospital_id = $2';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_juegos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_juego_id = $2';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_espectaculo_id = $2';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_exportacion_id = $2';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_libre_consignacion_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas SET estado_factura_id = $1,  fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_zona_franca_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_espectaculo_nacional_id = $2';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_seguridad_alimentaria_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_moneda_extranjera_id = $2';	

		--add 20190513
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then 
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_boleto_aereo_id = $2';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_turismo_receptivo_id = $2';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_tasa_cero_id = $2';	
				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_hidrocarburo_id = $2';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_exportacion_ypfb_id = $2';
 		
		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_exportacion_minera_id = $2';
 		
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_libre_consignacion_ypfb_id = $2';
 		
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas 	SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_minera_interna_id = $2'; 			
		
		--add 20190724 rgt	
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones 	SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_contingencia_correcta_telecomunicacion_id = $2'; 
		
 		else 
			v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_est_ven_contingencia')) as varchar);	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recep_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta UPDATE para la actualizacion del campo estado_recepcion_documento_fiscal_id enlas tablas de recepciones 
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa el UPDATE que sera ejecutado.
SUBSISTEMA : Facturación
FECHA CREACION : 01/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_estandares SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_estandar_id = $2 returning estado_recepcion_documento_fiscal_id';	 
														
		when p_tipo_documento_sector_id = 1387 -- FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_alcanzadas_ice SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_alcanzada_ice_id = $2 returning estado_recepcion_documento_fiscal_id';	
 			
		when p_tipo_documento_sector_id = 1384 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_alquileres SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_alquiler_id = $2 returning estado_recepcion_documento_fiscal_id';	 
			
		when p_tipo_documento_sector_id = 1393 -- FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_comerciales_exportaciones SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_comercial_exportacion_id = $2 returning estado_recepcion_documento_fiscal_id';

		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_libres_consignaciones SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_libre_consignacion_id = $2 returning estado_recepcion_documento_fiscal_id';
			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_hidrocarburos SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_hidrocarburo_id = $2 returning estado_recepcion_documento_fiscal_id';

		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_entidades_financieras SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_entidad_financiera_id = $2 returning estado_recepcion_documento_fiscal_id';	

		when p_tipo_documento_sector_id = 1390 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_hospitales SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_hospital_id = $2 returning estado_recepcion_documento_fiscal_id';

		when p_tipo_documento_sector_id = 1389 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_hoteles SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_hotel_id = $2 returning estado_recepcion_documento_fiscal_id';	

		when p_tipo_documento_sector_id = 1383 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_sectores_educativos SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_sector_educativo_id = $2 returning estado_recepcion_documento_fiscal_id';	 	
				
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_notas_credito_debito SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_nota_credito_debito_id = $2 returning estado_recepcion_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_notas_monedas_extranjeras SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_nota_moneda_extranjera_id = $2 returning estado_recepcion_documento_fiscal_id';	 
			
		when p_tipo_documento_sector_id = 1825 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_notas_tasa_cero SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_nota_tasa_cero_id = $2 returning estado_recepcion_documento_fiscal_id';

		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_recepciones_notas_zona_franca SET estado_recepcion_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE recepcion_nota_zona_franca_id = $2 returning estado_recepcion_documento_fiscal_id';	 
		
		else 
			 v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_estado_recep_manual')) as varchar);
      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_estandares SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_estandar_id = $2';	 
														
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_colegios SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_colegio_id = $2';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_alquileres SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_alquiler_id = $2';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_combustibles SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_combustible_id = $2';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_servicios SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_servicio_id = $2';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_embotelladoras SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_embotelladora_id = $2';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_bancos SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_banco_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_hoteles SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_hotel_id = $2';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_hospitales SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_hospital_id = $2';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_juegos SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_juego_id = $2';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_espectaculos SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_espectaculo_id = $2';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_exportaciones SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_exportacion_id = $2';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_libres_consignaciones SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_libre_consignacion_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_zonas_francas SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_zona_franca_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_espectaculo_nacional_id = $2';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_seguridad_alimentaria_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_moneda_extranjera_id = $2';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='UPDATE sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_nota_credito_debito_id = $2';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones 	SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_nota_conciliacion_id = $2';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_boletos_aereos	SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_boleto_aereo_id = $2';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_turismos_receptivos SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_turismo_receptivo_id = $2';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_tasas_ceros SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_tasa_cero_id = $2';	

				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_hidrocarburos SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_hidrocarburo_id = $2';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_exportacion_ypfb_id = $2';
		
		 --add 20190729 rgt
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_exportacion_minera_id = $2';
			
		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_libre_consignacion_ypfb_id = $2';
			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_mineras_internas 		SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_minera_interna_id = $2';
		
		--add 20190410 jf
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_prevaloradas SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_prevalorada_id = $2';
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_telecomunicaciones SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_telecomunicacion_id = $2';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv SET estado_recepcion_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_nota_credito_debito_sfv_id = $2';
		
			
		else 
			 v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_estado_recepcion')) as varchar);
      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_estandares SET estado_recepcion_id = $1 WHERE recepcion_paquete_estandar_id = $2';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_colegios 	SET estado_recepcion_id = $1 WHERE recepcion_paquete_colegio_id = $2';	
		
		--add 20190408 rgt
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres SET estado_recepcion_id = $1 WHERE recepcion_paquete_alquiler_id = $2';		

		
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles SET estado_recepcion_id = $1 WHERE recepcion_paquete_combustible_id = $2';	

 		--add 20190408 rgt
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_servicios SET estado_recepcion_id = $1 WHERE recepcion_paquete_servicio_id = $2';	
				
 		--add 20190408 rgt
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras SET estado_recepcion_id = $1 WHERE recepcion_paquete_embotelladora_id = $2';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_bancos SET estado_recepcion_id = $1 WHERE recepcion_paquete_banco_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles SET estado_recepcion_id = $1 WHERE recepcion_paquete_hotel_id = $2';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales SET estado_recepcion_id = $1 WHERE recepcion_paquete_hospital_id = $2';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_juegos SET estado_recepcion_id = $1 WHERE recepcion_paquete_juego_id = $2';	

 		--add 20190408 rgt
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos SET estado_recepcion_id = $1 WHERE recepcion_paquete_espectaculo_id = $2';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION 
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones SET estado_recepcion_id = $1 WHERE recepcion_paquete_exportacion_id = $2';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones SET estado_recepcion_id = $1 WHERE recepcion_paquete_libre_consignacion_id = $2';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas SET estado_recepcion_id = $1 WHERE recepcion_paquete_zona_franca_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales SET estado_recepcion_id = $1 WHERE recepcion_paquete_espectaculo_nacional_id = $2';	

		--add 20190408 rgt
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias SET estado_recepcion_id = $1 WHERE recepcion_paquete_seguridad_alimentaria_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras SET estado_recepcion_id = $1 WHERE recepcion_paquete_moneda_extranjera_id = $2';	

		--add 20190410 jf				
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos SET estado_recepcion_id = $1 WHERE recepcion_paquete_nota_credito_debito_id = $2';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones SET estado_recepcion_id = $1 WHERE recepcion_paquete_nota_conciliacion_id = $2';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos SET estado_recepcion_id = $1 WHERE recepcion_paquete_boleto_aereo_id = $2';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEOCTIVO
			then			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos SET estado_recepcion_id = $1 WHERE recepcion_paquete_turismo_receptivo_id = $2';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros 	SET estado_recepcion_id = $1 WHERE recepcion_paquete_tasa_cero_id = $2';	
		--add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos SET estado_recepcion_id = $1 WHERE recepcion_paquete_hidrocarburo_id = $2';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb SET estado_recepcion_id = $1 WHERE recepcion_paquete_exportacion_ypfb_id = $2';
		--add 20190729 rgt
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras SET estado_recepcion_id = $1 WHERE recepcion_paquete_exportacion_minera_id = $2';	
		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
			 v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb SET estado_recepcion_id = $1 WHERE recepcion_paquete_libre_consignacion_ypfb_id = $2';
			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas 	SET estado_recepcion_id = $1 WHERE recepcion_paquete_minera_interna_id = $2';
		
		--add 20190410 jf
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas SET estado_recepcion_id = $1 WHERE recepcion_paquete_prevalorada_id = $2';			
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones SET estado_recepcion_id = $1 WHERE recepcion_paquete_telecomunicacion_id = $2';			
		
		--add 20190729 rgt
		when p_tipo_documento_sector_id = 30 --Nota: FACTURA NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv SET estado_recepcion_id = $1 WHERE recepcion_paquete_nota_credito_debito_sfv_id = $2';			
		
			
		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_estado_recepcion_paq')) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_venta(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_estandares SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_estandar_id = $2';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_colegios SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_colegio_id = $2';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_alquileres SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_alquiler_id = $2';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_combustibles SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_combustible_id = $2';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_servicios SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_servicio_id = $2';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_embotelladoras SET estado_factura_id = $1, fecha_ultima_modificacion=now() WHERE recepcion_correcta_embotelladora_id = $2';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_bancos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_banco_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_hoteles SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_hotel_id = $2';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_hospitales SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_hospital_id = $2';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_juegos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_juego_id = $2';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_espectaculos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_espectaculo_id = $2';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_exportaciones SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_exportacion_id = $2';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_libres_consignaciones SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_libre_consignacion_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_zonas_francas SET estado_factura_id = $1,  fecha_ultima_modificacion=now()  WHERE recepcion_correcta_zona_franca_id = $2';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_espectaculo_nacional_id = $2';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_seguridad_alimentaria_id = $2';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_monedas_extranjeras SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_moneda_extranjera_id = $2';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_notas_creditos_debitos SET estado_notadc_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_nota_credito_debito_id = $2';	
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_notas_conciliaciones 	SET estado_nota_conciliacion_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_nota_conciliacion_id = $2';			
		--add 20190513
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then 
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_boletos_aereos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_boleto_aereo_id = $2';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_turismos_receptivos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_turismo_receptivo_id = $2';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_tasas_ceros SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_tasa_cero_id = $2';	
				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_hidrocarburos SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_hidrocarburo_id = $2';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_exportacion_ypfb_id = $2';
 		
		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_exportaciones_mineras SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_exportacion_minera_id = $2';
 		
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_libre_consignacion_ypfb_id = $2';
 		
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_mineras_internas 	SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_minera_interna_id = $2'; 			
		
		--add 20190410 jf		
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_prevaloradas 	SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_prevalorada_id = $2'; 
		
		--add 20190724 rgt	
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_ventas_telecomunicaciones 	SET estado_factura_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_telecomunicacion_id = $2'; 
		
		--add 20190725	rgt	
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'UPDATE sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv 	SET estado_notadc_id = $1, fecha_ultima_modificacion=now()  WHERE recepcion_correcta_nota_credito_debito_sfv_id = $2'; 
		
 		else 
			v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_estado_venta')) as varchar);	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_actualizar_estado_venta_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta dinamica UPDATE  para la actualizacion del estado de una venta
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta UPDATE dependiendo el sector proporcionado
SUBSISTEMA : Facturación
FECHA CREACION : 14/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_estandares SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_estandar_id = $2 returning  estado_venta_manual_documento_fiscal_id';	 
														
		when p_tipo_documento_sector_id = 1387 -- FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_alcanzadas_ice SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_alcanzada_ice_id = $2 returning estado_venta_manual_documento_fiscal_id';	 
 			
		when p_tipo_documento_sector_id = 1384 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_alquileres SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_alquiler_id = $2 returning estado_venta_manual_documento_fiscal_id';	 
			
		when p_tipo_documento_sector_id = 1393 -- FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_comercial_exportacion_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL LIBRE CONSIGNACION
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_libres_consignaciones SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_libre_consignacion_id = $2 returning estado_venta_manual_documento_fiscal_id';	 
			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_hidrocarburos SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_hidrocarburo_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_entidades_financieras SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_entidad_financiera_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1390 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_hospitales SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_hospital_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1389 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_hoteles SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_hotel_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1383 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_sectores_educativos SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_sector_educativo_id = $2 returning estado_venta_manual_documento_fiscal_id';	 
				
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_notas_credito_debito SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_nota_credito_debito_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_nota_moneda_extranjera_id = $2 returning estado_venta_manual_documento_fiscal_id';	 
			
		when p_tipo_documento_sector_id = 1825 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_notas_tasas_cero SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_nota_tasa_cero_id = $2 returning estado_venta_manual_documento_fiscal_id';	 

		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'UPDATE sre_recaudaciones.sre_fman_ventas_notas_zona_franca SET estado_venta_manual_documento_fiscal_id = $1,  fecha_ultima_modificacion=now() WHERE venta_nota_zona_franca_id = $2 returning estado_venta_manual_documento_fiscal_id';	 
		
		else 
			 v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
       return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_actualizar_estado_venta_manual')) as varchar);
      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_contar_recepciones_correctas(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Cuenta recepciones correctas correspondiente al documento sector (ativos)
PARAMETROS INGRESO
 p_tipo_documento_sector_id -> código del documentos sector
PARAMETROS SALIDA
 v_sql -> intruccion sql para la obtención de cantidad de registros en tabla
 v_sql -> cadena '0' en caso de no econtrar documento sector ó excepción 
SUBSISTEMA : Facturación
FECHA CREACION : 07/09/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 
 v_sql varchar:=''; 
begin
 
 case
 when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
  then   
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_estandares where recepcion_paquete_estandar_id=$1 and estado_id = $2 ';
     
 when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_colegios where recepcion_paquete_colegio_id=$1 and estado_id = $2 ';
  
 when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
  then    
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_alquileres where recepcion_paquete_alquiler_id=$1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_combustibles where recepcion_paquete_combustible_id=$1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_servicios where recepcion_paquete_servicio_id=$1 and estado_id = $2 ';
  
 when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras where recepcion_paquete_embotelladora_id=$1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_bancos where recepcion_paquete_banco_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_hoteles where recepcion_paquete_hotel_id = $1 and estado_id = $2 ';
  
 when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_hospitales where recepcion_paquete_hospital_id = $1 and estado_id = $2 ';
  
 when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_juegos where recepcion_paquete_juego_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos where recepcion_paquete_espectaculo_id = $1 and estado_id = $2 ';
  
 when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones where recepcion_paquete_exportacion_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones where recepcion_paquete_libre_consignacion_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas where recepcion_paquete_zona_franca_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales where recepcion_paquete_espectaculo_nacional_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias where recepcion_paquete_seguridad_alimentaria_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras where recepcion_paquete_moneda_extranjera_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
  then
  v_sql:='select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos where recepcion_paquete_nota_credito_debito_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
  then
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_notas_conciliaciones where recepcion_paquete_nota_conciliacion_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
  then
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_boletos_aereos where recepcion_paquete_boleto_aereo_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
  then     
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos where recepcion_paquete_turismo_receptivo_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
  then  
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros where recepcion_paquete_tasa_cero_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
  then   
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos where recepcion_paquete_hidrocarburo_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
  then   
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb where recepcion_paquete_exportacion_ypfb_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
  then   
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras where recepcion_paquete_exportacion_minera_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
  then   
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb where recepcion_paquete_libre_consignacion_ypfb_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
  then
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas where recepcion_paquete_minera_interna_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
  then
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_prevaloradas where recepcion_paquete_prevalorada_id = $1 and estado_id = $2 ';

 when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
  then
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones where recepcion_paquete_telecomunicacion_id = $1 and estado_id = $2 ';
 
 when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
  then
  v_sql:= 'select count(*) from sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv where recepcion_paquete_nota_credito_debito_sfv_id = $1 and estado_id = $2 ';
 
 else 
  v_sql:='0';

 end case;
 
 return coalesce(v_sql,'0');
 
 EXCEPTION
 when others
 then
  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_contar_recepciones_correctas');
  v_sql:='0';
  return v_sql;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_numero_doc_fiscal_contingencia(p_tipo_documento_sector_id integer, p_numero_documento_fiscal bigint, p_cuf character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Realiza la verificación del número de documento fiscal a travéz del CUF
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <11/09/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: <Descripción>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_select varchar:=''; 
	v_sql varchar:='';	
begin
	
 	v_select:='select count(1) from';

	v_sql:=(case		
			when p_tipo_documento_sector_id = 1 then 					
					   CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_estandares r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
			when p_tipo_documento_sector_id = 2 then --sre_fac_ventas_colegios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_colegios r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)				
			
			when p_tipo_documento_sector_id = 3 then --sre_fac_ventas_alquileres
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_alquileres r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 4 then --sre_fac_ventas_combustibles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_combustibles r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)							
			
			when p_tipo_documento_sector_id = 5 then --sre_fac_ventas_servicios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_servicios r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
			when p_tipo_documento_sector_id = 6 then --sre_fac_ventas_embotelladoras			
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
					
			when p_tipo_documento_sector_id = 7 then --sre_fac_ventas_bancos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_bancos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
			when p_tipo_documento_sector_id = 8 then --sre_fac_ventas_hoteles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_hoteles r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)				

			when p_tipo_documento_sector_id = 9 then --sre_fac_ventas_hospitales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_hospitales r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)							

			when p_tipo_documento_sector_id = 10 then --sre_fac_ventas_juegos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_juegos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)						
			
			when p_tipo_documento_sector_id = 11 then --sre_fac_ventas_espectaculos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	

			when p_tipo_documento_sector_id = 12 then --sre_fac_ventas_exportaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)			
			
			when p_tipo_documento_sector_id = 13 then --sre_fac_ventas_libres_consignaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
										 
			when p_tipo_documento_sector_id = 14 then --sre_fac_ventas_zonas_francas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)			
	
			when p_tipo_documento_sector_id = 15 then --sre_fac_ventas_espectaculos_nacionales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 16 then --sre_fac_ventas_seguridades_alimentarias
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	

			when p_tipo_documento_sector_id = 17 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
		
			when p_tipo_documento_sector_id = 18 then --sre_fac_notas_creditos_debitos
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_notadc=',p_numero_documento_fiscal)										

			when p_tipo_documento_sector_id = 19  then --sre_fac_notas_conciliaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_conciliaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)			
										 
			when p_tipo_documento_sector_id = 20 then --sre_fac_ventas_boletos_aereos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_boleto_aereo=',p_numero_documento_fiscal)
			
			when p_tipo_documento_sector_id = 21 then -- sre_fac_ventas_turismos_receptivos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
										 
			when p_tipo_documento_sector_id = 22 then --sre_fac_ventas_tasas_ceros
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
										 
			when p_tipo_documento_sector_id = 23 then --sre_fac_ventas_hidrocarburos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	

			when p_tipo_documento_sector_id = 24 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
										 
			when p_tipo_documento_sector_id = 25 then --sre_fac_ventas_exportaciones_mineras 
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
										 
			when p_tipo_documento_sector_id = 26 then --sre_fac_ventas_libres_consignaciones_ypfb
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 27 then --sre_fac_ventas_mineras_internas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
		
			when p_tipo_documento_sector_id = 28 then --sre_fac_prevaloradas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_prevaloradas r
										 WHERE r.cufp=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
		    when p_tipo_documento_sector_id = 29 then --sre_fac_ventas_telecomunicaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 30 then --sre_fac_notas_creditos_debitos_sfv
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
										 
			else ''
		end);	
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_ventas_factura')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_numero_documento_fiscal(p_tipo_documento_sector_id integer, p_numero_documento_fiscal bigint, p_cuf character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Realiza la verificación del número de documento fiscal a travéz del CUF
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <11/09/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: <Descripción>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_select varchar:=''; 
	v_sql varchar:='';	
begin
	
 	v_select:='select count(1) from';

	v_sql:=(case		
			when p_tipo_documento_sector_id = 1 then 					
					   CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_estandares r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
			when p_tipo_documento_sector_id = 2 then --sre_fac_ventas_colegios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_colegios r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)				
			
			when p_tipo_documento_sector_id = 3 then --sre_fac_ventas_alquileres
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_alquileres r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 4 then --sre_fac_ventas_combustibles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_combustibles r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)							
			
			when p_tipo_documento_sector_id = 5 then --sre_fac_ventas_servicios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_servicios r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
			when p_tipo_documento_sector_id = 6 then --sre_fac_ventas_embotelladoras			
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_embotelladoras r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
					
			when p_tipo_documento_sector_id = 7 then --sre_fac_ventas_bancos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_bancos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
			when p_tipo_documento_sector_id = 8 then --sre_fac_ventas_hoteles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_hoteles r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)				

			when p_tipo_documento_sector_id = 9 then --sre_fac_ventas_hospitales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_hospitales r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)							

			when p_tipo_documento_sector_id = 10 then --sre_fac_ventas_juegos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_juegos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)						
			
			when p_tipo_documento_sector_id = 11 then --sre_fac_ventas_espectaculos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_espectaculos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	

			when p_tipo_documento_sector_id = 12 then --sre_fac_ventas_exportaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_exportaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)			
			
			when p_tipo_documento_sector_id = 13 then --sre_fac_ventas_libres_consignaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_libres_consignaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
										 
			when p_tipo_documento_sector_id = 14 then --sre_fac_ventas_zonas_francas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_zonas_francas r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)			
	
			when p_tipo_documento_sector_id = 15 then --sre_fac_ventas_espectaculos_nacionales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 16 then --sre_fac_ventas_seguridades_alimentarias
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	

			when p_tipo_documento_sector_id = 17 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_monedas_extranjeras r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
		
			when p_tipo_documento_sector_id = 18 then --sre_fac_notas_creditos_debitos
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_notadc=',p_numero_documento_fiscal)										

			when p_tipo_documento_sector_id = 19  then --sre_fac_notas_conciliaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_conciliaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)			
										 
			when p_tipo_documento_sector_id = 20 then --sre_fac_ventas_boletos_aereos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_boletos_aereos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_boleto_aereo=',p_numero_documento_fiscal)
			
			when p_tipo_documento_sector_id = 21 then -- sre_fac_ventas_turismos_receptivos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_turismos_receptivos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
										 
			when p_tipo_documento_sector_id = 22 then --sre_fac_ventas_tasas_ceros
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_tasas_ceros r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
										 
			when p_tipo_documento_sector_id = 23 then --sre_fac_ventas_hidrocarburos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_hidrocarburos r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	

			when p_tipo_documento_sector_id = 24 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
										 
			when p_tipo_documento_sector_id = 25 then --sre_fac_ventas_exportaciones_mineras 
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_exportaciones_mineras r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
										 
			when p_tipo_documento_sector_id = 26 then --sre_fac_ventas_libres_consignaciones_ypfb
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 27 then --sre_fac_ventas_mineras_internas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_mineras_internas r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
		
			when p_tipo_documento_sector_id = 28 then --sre_fac_prevaloradas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_prevaloradas r
										 WHERE r.cufp=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)		
			
		    when p_tipo_documento_sector_id = 29 then --sre_fac_ventas_telecomunicaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_telecomunicaciones r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)	
			
			when p_tipo_documento_sector_id = 30 then --sre_fac_notas_creditos_debitos_sfv
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv r
										 WHERE r.cuf=''',p_cuf,'''',' and r.numero_factura=',p_numero_documento_fiscal)
										 
			else ''
		end);	
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_ventas_factura')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_archivo_xml_valido(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que recupera datos de las tablas sre_fac_archivos_xml_validos,
                        de acuerdo al tipo documento fiscal y documento sector
PARAMETROS INGRESO
      p_tipo_documento_fiscal_id tipo documento fiscal
    p_tipo_documento_sector_id tipo documento sector
    $1 corresponde al valor del cuf
    $2 corresponde al valor del numeroFactura
    $3 corresponde al valor del nitEmisor
PARAMETROS SALIDA
    cadena con intruccion select de la tabla correspondiente 
    '0' en caso de error o no corresponda 
SUBSISTEMA : Facturación
FECHA CREACION : 23/08/2019, 26/08/2019 
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciona instruccion encode(ax.archivo,'||chr(39)||'escape'||chr(39)||'), para que no se llegue a modificar en la  
                         transformacion a formato json 
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 28/08/2019
AUTOR DE LA MODIFICACION : Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Complementación de intrucciones para sectores faltantes  
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 13/09/2019
AUTOR DE LA MODIFICACION : Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste considerando factura y nota fiscal contingencias (Documentos Fiscal 4,6 respectivamente)  
NUMERO SECUENCIAL : 3
FECHA DE MODIFICACION : 16/09/2019
AUTOR DE LA MODIFICACION : Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste validacion or p_tipo_documento_fiscal_id = 2 (documento equivalente)  
NUMERO SECUENCIAL : 4
FECHA DE MODIFICACION : 02/12/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare
      v_sql varchar:='0';     
      v_sql_contingencia varchar:='0';
      v_sql_resultado varchar:='0';
      v_sql_row_to_json varchar:= 'select row_to_json(d) from (';
      v_sql_campos varchar:= ' as recepcion_correcta_id, ax.archivo_xml_valido_id, encode(ax.archivo,'||chr(39)||'escape'||chr(39)||') as archivo';
      v_sql_inner_join varchar:= 'rc inner join sre_recaudaciones.sre_fac_archivos_xml_validos ax on rc.archivo_xml_valido_id = ax.archivo_xml_valido_id ';
      v_sql_where varchar:= 'where rc.cuf = $1 and rc.numero_factura= $2 ) d';
begin
      
/*    
clasificador_id |descripcion                                                                           |codigo_clasificador |
----------------|--------------------------------------------------------------------------------------|--------------------|
1382            |FACTURA ESTANDAR                                                                      |1                   |
1383            |FACTURA SECTORES EDUCATIVOS                                                           |2                   |
1384            |FACTURA DE ALQUILER DE BIENES INMUEBLES                                               |3                   |
1385            |FACTURA DE COMERCIALIZACION DE HIDROCARBUROS                                          |4                   |
1386            |FACTURA DE SERVICIOS BASICOS                                                          |5                   |
1387            |FACTURA DE EMBOTELLADORAS                                                             |6                   |
1388            |FACTURA DE ENTIDADES FINANCIERAS                                                      |7                   |
1389            |FACTURA DE HOTELES                                                                    |8                   |
1390            |FACTURAS DE HOSPITALES/CLINICAS                                                       |9                   |
1391            |FACTURA DE JUEGOS DE AZAR                                                             |10                  |
1392            |FACTURA DE ARTISTAS INTERNACIONALES                                                   |11                  |
1393            |FACTURA COMERCIAL DE EXPORTACION                                                      |12                  |
1394            |FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION                                |13                  |
1395            |NOTA FISCAL DE ZONA FRANCA                                                            |14                  |
1396            |NOTA FISCAL DE ARTISTAS NACIONALES                                                    |15                  |
1397            |NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO |16                  |
1398            |NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA                                    |17                  |
1399            |NOTA DE CREDITO-DEBITO                                                                |18                  |
1400            |NOTA DE CONCILIACION                                                                  |19                  |
1494            |BOLETO AEREO                                                                          |20                  |
1824            |NOTA FISCAL TURISMO RECEPTIVO                                                         |21                  |
1824            |NOTA FISCAL TURISMO RECEPTIVO                                                         |21                  |
1825            |NOTA FISCAL TASA CERO                                                                 |22                  |
1826            |FACTURA HIDROCARBUROS                                                                 |23                  |
2654            |FACTURA COMERCIAL DE EXPORTACIÓN YPFB                                                 |24                  |
2655            |FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES                                         |25                  |
2656            |FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB                                          |26                  |
2657            |FACTURA VENTA INTERNA MINERALES                                                       |27                  |
2658            |FACTURA PREVALORADA DIGITAL                                                           |28                  |
2xxx            |FACTURA TELECOMUNICACIONES                                                                              |29                  |
2xxx            |NOTA DE CREDITO-DEBITO SFV                                                            |30                  |
*/
      
      case
            when p_tipo_documento_sector_id = 1
                  then                    
                  v_sql:= 'select rc.recepcion_correcta_estandar_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_estandares '||v_sql_inner_join;
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_estandar_id '||v_sql_campos||'  
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_estandares '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 2
                  then              
                  v_sql:= 'select rc.recepcion_correcta_colegio_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_colegios '||v_sql_inner_join;                       
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_colegio_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_colegios '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 3
                  then                                           
                  v_sql:= 'select rc.recepcion_correcta_alquiler_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_alquileres '||v_sql_inner_join;                                            
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_alquiler_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_alquileres '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 4
                  then                                                             
                  v_sql:= 'select rc.recepcion_correcta_combustible_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_combustibles '||v_sql_inner_join;             
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_combustible_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_combustibles '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 5
                  then 
                  v_sql:= 'select rc.recepcion_correcta_servicio_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_servicios '||v_sql_inner_join;
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_servicio_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_servicios '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 6
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_embotelladora_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras '||v_sql_inner_join;                                                                
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_embotelladora_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_embotelladoras '||v_sql_inner_join;    
                                         
            when p_tipo_documento_sector_id = 7
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_banco_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_bancos '||v_sql_inner_join;                                                            
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_banco_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_bancos '||v_sql_inner_join;    
                                         
            when p_tipo_documento_sector_id = 8
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_hotel_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_hoteles '||v_sql_inner_join;                                                     
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_hotel_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_hoteles '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 9
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_hospital_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_hospitales '||v_sql_inner_join;                                            
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_hospital_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_hospitales '||v_sql_inner_join;    
                                         
            when p_tipo_documento_sector_id = 10
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_juego_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_juegos '||v_sql_inner_join;                   
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_juego_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_juegos '||v_sql_inner_join;    
                                         
            when p_tipo_documento_sector_id = 11 --FACTURA DE ARTISTAS INTERNACIONALES
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_espectaculo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos '||v_sql_inner_join; 
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_espectaculo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_espectaculos '||v_sql_inner_join;
                                         
            when p_tipo_documento_sector_id = 12
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_exportacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones '||v_sql_inner_join;      
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_exportacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_exportaciones '||v_sql_inner_join;
                                         
            
            when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
                  then
                  v_sql:= 'select rc.recepcion_correcta_libre_consignacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_libre_consignacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_libres_consig '||v_sql_inner_join;
                                        
            when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
                  then
                  v_sql:= 'select rc.recepcion_correcta_zona_franca_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas '||v_sql_inner_join;      
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_zona_franca_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_zonas_francas '||v_sql_inner_join;                                       
                                        
            when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
                  then
                  v_sql:= 'select rc.recepcion_correcta_espectaculo_nacional_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_espectaculo_nacional_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_espectaculos_nal '||v_sql_inner_join;
            
            when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
                  then
                  v_sql:= 'select rc.recepcion_correcta_seguridad_alimentaria_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_seguridad_alimentaria_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_seguridad_alimen '||v_sql_inner_join;
                                                                      
            when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
                  then
                  v_sql:= 'select rc.recepcion_correcta_moneda_extranjera_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_moneda_extranjera_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_monedas_extranjeras '||v_sql_inner_join;                                       
                                                                
            when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
                  then
                  v_sql:= 'select rc.recepcion_correcta_nota_credito_debito_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos '||v_sql_inner_join;
                  -- NO HABRAN TABLAS DE CONTINGENCIA PARA ESTE SECTOR 20190913 
                  v_sql_contingencia:= '0';
           
            when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
                  then
                  v_sql:= 'select rc.recepcion_correcta_nota_conciliacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_notas_conciliaciones '||v_sql_inner_join;    
                  -- NO HABRAN TABLAS DE CONTINGENCIA PARA ESTE SECTOR 20190913 
                  v_sql_contingencia:= '0';
                                         
            when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
                  then
                  v_sql:= 'select rc.recepcion_correcta_boleto_aereo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_boletos_aereos '||v_sql_inner_join;     
                  -- NO HABRAN TABLAS DE CONTINGENCIA PARA ESTE SECTOR 20190913 
                  v_sql_contingencia:= '0';
                                        
            when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
                  then
                  v_sql:= 'select rc.recepcion_correcta_turismo_receptivo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_turismo_receptivo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_turismos_receptivos '||v_sql_inner_join;
                                                     
            when p_tipo_documento_sector_id = 22
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_tasa_cero_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros '||v_sql_inner_join;
                  --TODO (Edwin Coro) actualizar una vez que hayan creado las tablas 20190913 
                  v_sql_contingencia:= '0';
            when p_tipo_documento_sector_id = 23
                  then                                                 
                  v_sql:= 'select rc.recepcion_correcta_hidrocarburo_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos '||v_sql_inner_join;      
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_hidrocarburo_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_hidrocarburos '||v_sql_inner_join;    
                                   
            when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
                  then
                  v_sql:= 'select rc.recepcion_correcta_exportacion_ypfb_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb '||v_sql_inner_join; 
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_libre_consignacion_ypfb_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_libres_consig_ypfb '||v_sql_inner_join;

            when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
                  then
                  v_sql:= 'select rc.recepcion_correcta_exportacion_minera_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_seguridad_alimentaria_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_seguridad_alimen '||v_sql_inner_join;                                       
            
            when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
                  then
                  v_sql:= 'select rc.recepcion_correcta_libre_consignacion_ypfb_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb '||v_sql_inner_join;    
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_libre_consignacion_ypfb_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_libres_consig_ypfb '||v_sql_inner_join;                                       
            
            when p_tipo_documento_sector_id = 27 --FACTURA VENTA INTERNA MINERALES
                  then
                  v_sql:= 'select rc.recepcion_correcta_minera_interna_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas '||v_sql_inner_join;                                 
                  v_sql_contingencia:= 'select rc.recepcion_contingencia_correcta_minera_interna_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_mineras_internas '||v_sql_inner_join;
                                                                                   
            when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
                  then
                  v_sql:= 'select rc.recepcion_correcta_prevalorada_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_prevaloradas '||v_sql_inner_join;                               
                  -- NO HABRAN TABLAS DE CONTINGENCIA PARA ESTE SECTOR 20190913 
                  v_sql_contingencia:= '0';
                                         
            when p_tipo_documento_sector_id = 29 --FACTURA TELECOMUNICACIONES
                  then                                           
                  v_sql:= 'select rc.recepcion_correcta_telecomunicacion_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones '||v_sql_inner_join;
                  -- NO HABRAN TABLAS DE CONTINGENCIA PARA ESTE SECTOR 20190913   
                  v_sql_contingencia:= '0';    
                  
            when p_tipo_documento_sector_id = 30 --Nota: NOTA DE CREDITO DEBITO SFV
                  then
                  v_sql:= 'select rc.recepcion_correcta_nota_credito_debito_sfv_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv '||v_sql_inner_join;                                 
                  -- NO HABRAN TABLAS DE CONTINGENCIA PARA ESTE SECTOR 20190913 
                  v_sql_contingencia:= '0';
                  
            else 
                  v_sql:='0';       
                  v_sql_contingencia:='0';
      end case;   

      if (v_sql <> '0') then
         if p_tipo_documento_fiscal_id = 1 or p_tipo_documento_fiscal_id = 2 or p_tipo_documento_fiscal_id = 3 then -- factura
                  v_sql_resultado := concat(v_sql_row_to_json, v_sql, v_sql_where) ;                   
         else 
            if p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6 then -- facturas contingencia, notas contingencia
                  if v_sql_contingencia <> '0' then
                        v_sql_resultado := concat(v_sql_row_to_json, v_sql_contingencia, v_sql_where);
                  else                    
                        v_sql_resultado := v_sql_contingencia;
                  end if;
            end if;
         end if;
      end if;
      return coalesce(v_sql_resultado, '0');

      exception
      when others then  
            perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_archivo_xml_valido');
            return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_armar_consulta_obtener_archivo_xml_valido')) as varchar) ;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_cuf(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_estandares where venta_estandar_id = $1	limit 1';	 
														
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_colegios	where venta_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_alquileres where venta_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_combustibles where venta_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_servicios where venta_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_embotelladoras	where venta_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7
			then 			 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_bancos	where venta_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_hoteles where venta_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_hospitales where venta_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_juegos where venta_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_espectaculos	where venta_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_exportaciones	where venta_exportacion_id = $1	limit 1';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_libres_consignaciones	where venta_libre_consignacion_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_zonas_francas	where venta_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales	where venta_espectaculo_nacional_id = $1	limit 1';
				
		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias	where venta_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras	where venta_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_notas_creditos_debitos	where nota_credito_debito_id = $1	limit 1';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_notas_conciliaciones 	where nota_conciliacion_id = $1	limit 1';			
		--add 20190513
		when p_tipo_documento_sector_id = 20
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_boletos_aereos 	where venta_boleto_aereo_id = $1	limit 1';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_turismos_receptivos	where venta_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_tasas_ceros	where venta_tasa_cero_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_hidrocarburos	where venta_hidrocarburo_id = $1	limit 1';	
		
 		when p_tipo_documento_sector_id = 24
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb	where venta_exportacion_ypfb_id = $1	limit 1';
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras	where venta_exportacion_minera_id = $1	limit 1';
 			
 		--add 20190410 jf	
 		when p_tipo_documento_sector_id = 26
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb where venta_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_mineras_internas 	where venta_minera_interna_id = $1	limit 1';
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'select cufp from sre_recaudaciones.sre_fac_prevaloradas where prevalorada_id = $1	limit 1';
			
		--add 20190724 rgt 
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_telecomunicaciones where venta_telecomunicacion_id = $1	limit 1';
		
		--add 20190725 rgt 
		when p_tipo_documento_sector_id = 30 --Nota: NOTA DE CREDITO DEBITO SFV
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv where nota_credito_debito_sfv_id = $1	limit 1';
		
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_cuf')) as varchar);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_cuf_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_estandares where venta_contingencia_estandar_id = $1	limit 1';	 
														
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_colegios	where venta_contingencia_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres where venta_contingencia_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles where venta_contingencia_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_servicios where venta_contingencia_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras	where venta_contingencia_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7
			then 			 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_bancos	where venta_contingencia_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles where venta_contingencia_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales where venta_contingencia_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_juegos where venta_contingencia_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos	where venta_contingencia_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones	where venta_contingencia_exportacion_id = $1	limit 1';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones	where venta_contingencia_libre_consignacion_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas	where venta_contingencia_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales	where venta_contingencia_espectaculo_nacional_id = $1	limit 1';
				
		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias	where venta_contingencia_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras	where venta_contingencia_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_notas_creditos_debitos	where nota_credito_debito_id = $1	limit 1';		

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos	where venta_contingencia_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos	where venta_contingencia_hidrocarburo_id = $1	limit 1';	
		
 		when p_tipo_documento_sector_id = 24
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb	where venta_contingencia_exportacion_ypfb_id = $1	limit 1';
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras	where venta_contingencia_exportacion_minera_id = $1	limit 1';
 			
 		--add 20190410 jf	
 		when p_tipo_documento_sector_id = 26
			then				 
 			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb where venta_contingencia_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select cuf from sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas 	where venta_contingencia_minera_interna_id = $1	limit 1';	
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_cuf_contingencia')) as varchar);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_cuf_correctas(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma query para obtencion de codigo recepcion, cuando la recepcion llego a tabla recepciones correctas
PARAMETROS INGRESO
    identificador del tipo documento sector 
PARAMETROS SALIDA
    query
SUBSISTEMA : Facturación
FECHA CREACION : 12/07/2019
AUTOR : Equipo Tyrell (Edwin Coro)
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: No se validará que los registros de las tablas recepciones correspondan al cufd enviado, debido a que el cufd enviado es variable.
				Se adiciona intrucciones para documentos sectores 25, 29, 30 	
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 13/09/2019
AUTOR DE LA MODIFICACION : Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/

declare
	v_tabla_recepciones varchar;
	v_tabla_recepciones_correctas varchar;	
	v_campo_recepcion_factura_id varchar;
 	v_select_from varchar :='';
	v_where varchar :='';
	v_sql varchar:='0';	
begin							
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 					
				v_tabla_recepciones :='sre_fac_recepciones_estandares';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_estandares';				
				v_campo_recepcion_factura_id := 'recepcion_estandar_id';
				
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
				v_tabla_recepciones :='sre_fac_recepciones_colegios';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_colegios';
				v_campo_recepcion_factura_id := 'recepcion_colegio_id';
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 			
				v_tabla_recepciones :='sre_fac_recepciones_alquileres';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_alquileres';			
				v_campo_recepcion_factura_id := 'recepcion_alquiler_id';
				
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
				v_tabla_recepciones :='sre_fac_recepciones_combustibles';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_combustibles';			
				v_campo_recepcion_factura_id := 'recepcion_combustible_id';
				
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
				v_tabla_recepciones :='sre_fac_recepciones_servicios';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_servicios';			
				v_campo_recepcion_factura_id := 'recepcion_servicio_id';
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 		
				v_tabla_recepciones :='sre_fac_recepciones_embotelladoras';	
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_embotelladoras';						
				v_campo_recepcion_factura_id := 'recepcion_embotelladora_id';
				
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 	
				v_tabla_recepciones :='sre_fac_recepciones_bancos';		
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_bancos';			
				v_campo_recepcion_factura_id := 'recepcion_banco_id';
			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 	
				v_tabla_recepciones :='sre_fac_recepciones_hoteles';	
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_hoteles';			
				v_campo_recepcion_factura_id := 'recepcion_hotel_id';
 							
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 	
				v_tabla_recepciones :='sre_fac_recepciones_hospitales';		
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_hospitales';			
				v_campo_recepcion_factura_id := 'recepcion_hospital_id';
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then
				v_tabla_recepciones :='sre_fac_recepciones_juegos';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_juegos';			
				v_campo_recepcion_factura_id := 'recepcion_juego_id';
 							
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then
				v_tabla_recepciones :='sre_fac_recepciones_espectaculos';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_espectaculos';			
				v_campo_recepcion_factura_id := 'recepcion_espectaculo_id';
 							
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then
				v_tabla_recepciones :='sre_fac_recepciones_exportaciones';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_exportaciones';			
				v_campo_recepcion_factura_id := 'recepcion_exportacion_id';
 							
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
				v_tabla_recepciones :='sre_fac_recepciones_libres_consignaciones';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_libres_consignaciones';			
				v_campo_recepcion_factura_id := 'recepcion_libre_consignacion_id';
 							
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
				v_tabla_recepciones :='sre_fac_recepciones_zonas_francas';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_zonas_francas';			
				v_campo_recepcion_factura_id := 'recepcion_zona_franca_id';
 							
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then
				v_tabla_recepciones :='sre_fac_recepciones_espectaculos_nacionales';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_espectaculos_nacionales';			
				v_campo_recepcion_factura_id := 'recepcion_espectaculo_nacional_id';
 							
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then
				v_tabla_recepciones :='sre_fac_recepciones_seguridades_alimentarias';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_seguridades_alimentarias';			
				v_campo_recepcion_factura_id := 'recepcion_seguridad_alimentaria_id';
 							
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then
				v_tabla_recepciones :='sre_fac_recepciones_monedas_extranjeras';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_monedas_extranjeras';			
				v_campo_recepcion_factura_id := 'recepcion_moneda_extranjera_id';
 							
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
				v_tabla_recepciones :='sre_fac_recepciones_notas_creditos_debitos';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_notas_creditos_debitos';
				v_campo_recepcion_factura_id := 'recepcion_nota_credito_debito_id';
 							
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
				v_tabla_recepciones :='sre_fac_recepciones_notas_conciliaciones';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_notas_conciliaciones';
				v_campo_recepcion_factura_id := 'recepcion_nota_conciliacion_id';
 							
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
				v_tabla_recepciones :='sre_fac_recepciones_boletos_aereos';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_boletos_aereos';
				v_campo_recepcion_factura_id := 'recepcion_boleto_aereo_id';
 							
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then
				v_tabla_recepciones :='sre_fac_recepciones_turismos_receptivos';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_turismos_receptivos';			
				v_campo_recepcion_factura_id := 'recepcion_turismo_receptivo_id';
 							
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then
				v_tabla_recepciones :='sre_fac_recepciones_tasas_ceros';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_tasas_ceros';			
				v_campo_recepcion_factura_id := 'recepcion_tasa_cero_id';
 							
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then
				v_tabla_recepciones :='sre_fac_recepciones_hidrocarburos';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_hidrocarburos';			
				v_campo_recepcion_factura_id := 'recepcion_hidrocarburo_id';
 							
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then
				v_tabla_recepciones :='sre_fac_recepciones_exportaciones_ypfb';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_exportaciones_ypfb';
				v_campo_recepcion_factura_id := 'recepcion_exportacion_ypfb_id';
			
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES
			then
			v_tabla_recepciones :='sre_fac_recepciones_exportaciones_mineras';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_exportaciones_mineras';
				v_campo_recepcion_factura_id := 'recepcion_exportacion_minera_id';
				
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then
				v_tabla_recepciones :='sre_fac_recepciones_libres_consignaciones_ypfb';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_libres_consignaciones_ypfb';			
				v_campo_recepcion_factura_id := 'recepcion_libre_consignacion_ypfb_id';
 							
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
				v_tabla_recepciones :='sre_fac_recepciones_mineras_internas';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_mineras_internas';			
				v_campo_recepcion_factura_id := 'recepcion_minera_interna_id';
 							
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
				v_tabla_recepciones :='sre_fac_recepciones_prevaloradas';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_prevaloradas';				
				v_campo_recepcion_factura_id := 'recepcion_prevalorada_id';

				v_where := 'where r.cuis = $1
						and r.tipo_documento_fiscal_id = $2
						and r.tipo_documento_sector_id = $3
						and r.tipo_modalidad_id = $4		
						and r.persona_contribuyente_id = $5
						and r.sistema_id = $6
						and r.sucursal_id = $7
						and c.cufp = $8
						and c.tipo_emision_id = $9 
						and c.estado_id = $10		
						and c.cuape = r.cuape
						and c.cuis = r.cuis
						and c.tipo_documento_fiscal_id = r.tipo_documento_fiscal_id
						and c.tipo_documento_sector_id = r.tipo_documento_sector_id
						and c.tipo_emision_id = r.tipo_emision_id';
		
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
				v_tabla_recepciones :='sre_fac_recepciones_telecomunicaciones';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_telecomunicaciones';			
				v_campo_recepcion_factura_id := 'recepcion_telecomunicacion_id';
				
		when p_tipo_documento_sector_id = 30 --Nota: NOTA DE CREDITO DEBITO SFV
			then
				v_tabla_recepciones :='sre_fac_recepciones_notas_creditos_debitos_sfv';
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_notas_creditos_debitos_sfv';			
				v_campo_recepcion_factura_id := 'recepcion_nota_credito_debito_sfv_id';
								
		else 
				v_sql:='0';
	end case;

								
	v_select_from := CONCAT('select r.',v_campo_recepcion_factura_id,
								' from sre_recaudaciones.',v_tabla_recepciones, ' r',
								' inner join sre_recaudaciones.',v_tabla_recepciones_correctas, ' c',
								' on r.',v_campo_recepcion_factura_id, ' = c.',v_campo_recepcion_factura_id);								

		if (v_where = '') then
			v_where := 'where r.cuis = $1
						and r.tipo_documento_fiscal_id = $2
						and r.tipo_documento_sector_id = $3
						and r.tipo_modalidad_id = $4		
						and r.persona_contribuyente_id = $5
						and r.sistema_id = $6
						and r.sucursal_id = $7
						and c.cuf = $8
						and c.tipo_emision_id = $9
						and c.estado_id = $10		
						and c.cufd = r.cufd
						and c.cuis = r.cuis
						and c.tipo_documento_fiscal_id = r.tipo_documento_fiscal_id
						and c.tipo_documento_sector_id = r.tipo_documento_sector_id
						and c.tipo_emision_id = r.tipo_emision_id';
		end if;
		
		v_sql:= concat(v_select_from,' ',v_where);
		
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then      
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_est_rec_pq_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para obtener el estado de la recepción sector 25 (sre_fac_recepciones_contingencias_paquetes_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 25/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para obtener el estado de la recepción sector 13 - sre_fac_recepciones_contingencias_paquetes_libres_consigna, 
				26 - sre_fac_recepciones_contingencias_paquetes_libres_consigna_ypfb)
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 15/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	--TODO: adecauar la consultas para los documentos fiscales del 2 al 24
 	
	case
		--add 20190408 vcg	
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR 
			then 					
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_estandares rcp where rcp.recepcion_contingencia_paquete_estandar_id=$1 limit 1';			
		--add 20190410 vcg  														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_colegios rcp  	where rcp.recepcion_contingencia_paquete_colegio_id=$1 limit 1';	
			
 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA ALQUILER BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_alquileres where recepcion_contingencia_paquete_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_combustibles where recepcion_contingencia_paquete_combustible_id = $1	limit 1';	

 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_servicios rcp where rcp.recepcion_contingencia_paquete_servicio_id=$1 limit 1';	
				
 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORA
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_embotelladoras rcp where rcp.recepcion_contingencia_paquete_embotelladora_id=$1 limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_bancos rcp where rcp.recepcion_contingencia_paquete_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA HOTELES
			then			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hoteles rcp where rcp.recepcion_contingencia_paquete_hotel_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURA DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hospitales	where recepcion_contingencia_paquete_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JJUEGOS DE AZAR
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_juegos	where recepcion_contingencia_paquete_juego_id = $1 limit 1';	

 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos where recepcion_contingencia_paquete_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones where recepcion_contingencia_paquete_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consigna where recepcion_contingencia_paquete_libre_consignacion_id=$1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_zonas_francas rcp where rcp.recepcion_contingencia_paquete_zona_franca_id=$1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 						
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos_nacionales rcp where rcp.recepcion_contingencia_paquete_espectaculo_nacional_id=$1 limit 1';	

		--add 20190410 rgt
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_seguridades_alimentarias where recepcion_contingencia_paquete_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_monedas_extranjeras rcp where rcp.recepcion_contingencia_paquete_moneda_extranjera_id=$1 limit 1';	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_creditos_debitos rcp where rcp.recepcion_contingencia_paquete_nota_credito_debito_id=$1 limit 1';
		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_conciliaciones rcp 	where rcp.recepcion_contingencia_paquete_nota_conciliacion_id=$1 limit 1';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_boletos_aereos rcp 	where rcp.recepcion_contingencia_paquete_boleto_aereo_id = $1 limit 1';			
		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_turismos_receptivos rcp where rcp.recepcion_contingencia_paquete_turismo_receptivo_id=$1 limit 1';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_tasas_ceros rcp where rcp.recepcion_contingencia_paquete_tasa_cero_id=$1 limit 1';	
		--add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			 v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hidrocarburos where recepcion_contingencia_paquete_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
			 v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones_ypfb where recepcion_contingencia_paquete_exportacion_ypfb_id = $1	limit 1';
		--add 20190729 rgt
		--actualización 20191025 eca
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then
			 v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_export_mineras where recepcion_contingencia_paquete_exportacion_minera_id = $1	limit 1';			
		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then
			 v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consigna_ypfb where recepcion_contingencia_paquete_libre_consignacion_ypfb_id = $1	limit 1';
			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_mineras_internas rcp 		where rcp.recepcion_contingencia_paquete_minera_interna_id=$1 limit 1';			 
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_prevaloradas rcp 		where rcp.recepcion_contingencia_paquete_prevalorada_id=$1 limit 1';
		
		--add 20190724 rgt				
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_telecomunicaciones 	where recepcion_contingencia_paquete_telecomunicacion_id = $1 limit 1';
		
		--add 20190729 rgt				
		when p_tipo_documento_sector_id = 30 --Nota: FACTURA NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_creditos_debitos_sfv 	where recepcion_contingencia_paquete_nota_credito_debito_sfv_id = $1 limit 1';
		
		else 
				v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';	
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_est_rec_pq_contingencia')) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_rec_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 							 
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_estandares where recepcion_contingencia_estandar_id = $1 limit 1';
														
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_colegios where recepcion_contingencia_colegio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_alquileres where recepcion_contingencia_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_combustibles where recepcion_contingencia_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_servicios where recepcion_contingencia_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_embotelladoras where recepcion_contingencia_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_bancos where recepcion_contingencia_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_hoteles where recepcion_contingencia_hotel_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_hospitales	where recepcion_contingencia_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_juegos	where recepcion_contingencia_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos where recepcion_contingencia_espectaculo_id = $1	limit 1';			
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones where recepcion_contingencia_exportacion_id = $1	limit 1';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones where recepcion_contingencia_libre_consignacion_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_zonas_francas where recepcion_contingencia_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos_nacionales	where recepcion_contingencia_espectaculo_nacional_id = $1	limit 1';				

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_seguridades_alimentarias where recepcion_contingencia_seguridad_alimentaria_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_monedas_extranjeras where recepcion_contingencia_moneda_extranjera_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos where recepcion_contingencia_nota_credito_debito_id = $1 limit 1';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_conciliaciones as a 	where a.recepcion_nota_conciliacion_id = $1 limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_boletos_aereos where recepcion_contingencia_boleto_aereo_id = $1 limit 1';			
		--add 20190408 vcg	
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_turismos_receptivos where recepcion_contingencia_turismo_receptivo_id = $1 limit 1';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_tasas_ceros where recepcion_contingencia_tasa_cero_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_hidrocarburos where recepcion_contingencia_hidrocarburo_id = $1 limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_ypfb where recepcion_contingencia_exportacion_ypfb_id = $1 limit 1';
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_mineras where recepcion_contingencia_exportacion_minera_id = $1 limit 1';
 		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones_ypfb where recepcion_contingencia_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg
 		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_mineras_internas as a 		where a.recepcion_minera_interna_id = $1 limit 1'; 			
		
		--add 20190410 jf
 		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_prevaloradas as a where a.recepcion_prevalorada_id = $1 limit 1';
		
		--add 20190724 rgt
 		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_telecomunicaciones where recepcion_contingencia_telecomunicacion_id = $1 limit 1';
		
		--add 20190725 rgt
 		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select estado_recepcion_contingencia_id from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos_sfv where recepcion_contingencia_nota_credito_debito_sfv_id = $1 limit 1';
		
 		else 
				v_sql:='0';
		
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_estado_rec_contingencia')) as varchar);	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_recepcion_id(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 							 
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_estandares as a where a.recepcion_estandar_id = $1 limit 1';
														
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_colegios where recepcion_colegio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_alquileres where recepcion_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_combustibles where recepcion_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_servicios where recepcion_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_embotelladoras where recepcion_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_bancos where recepcion_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_hoteles where recepcion_hotel_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_hospitales	where recepcion_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_juegos	where recepcion_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_espectaculos where recepcion_espectaculo_id = $1	limit 1';			
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select estado_recepcion_id	from sre_recaudaciones.sre_fac_recepciones_exportaciones where recepcion_exportacion_id = $1	limit 1';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones where recepcion_libre_consignacion_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select estado_recepcion_id	from sre_recaudaciones.sre_fac_recepciones_zonas_francas where recepcion_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales	where recepcion_espectaculo_nacional_id = $1	limit 1';				

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select estado_recepcion_id	from sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias where recepcion_seguridad_alimentaria_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras where recepcion_moneda_extranjera_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos where recepcion_nota_credito_debito_id = $1 limit 1';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones as a 	where a.recepcion_nota_conciliacion_id = $1 limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_boletos_aereos where recepcion_boleto_aereo_id = $1 limit 1';			
		--add 20190408 vcg	
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_turismos_receptivos where recepcion_turismo_receptivo_id = $1 limit 1';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_tasas_ceros where recepcion_tasa_cero_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_hidrocarburos where recepcion_hidrocarburo_id = $1 limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb where recepcion_exportacion_ypfb_id = $1 limit 1';
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras where recepcion_exportacion_minera_id = $1 limit 1';
 		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb where recepcion_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg
 		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_mineras_internas as a 		where a.recepcion_minera_interna_id = $1 limit 1'; 			
		
		--add 20190410 jf
 		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select a.estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_prevaloradas as a where a.recepcion_prevalorada_id = $1 limit 1';
		
		--add 20190724 rgt
 		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_telecomunicaciones where recepcion_telecomunicacion_id = $1 limit 1';
		
		--add 20190725 rgt
 		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv where recepcion_nota_credito_debito_sfv_id = $1 limit 1';
		
 		else 
				v_sql:='0';
		
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_estado_recepcion_id')) as varchar);	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_recepcion_id_pq(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	--TODO: adecauar la consultas para los documentos fiscales del 2 al 24
 	
	case
		--add 20190408 vcg	
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 					
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_estandares rcp where rcp.recepcion_paquete_estandar_id=$1 limit 1';			
		--add 20190410 vcg  														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_colegios rcp  	where rcp.recepcion_paquete_colegio_id=$1 limit 1';	
			
 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA ALQUILER BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres where recepcion_paquete_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles where recepcion_paquete_combustible_id = $1	limit 1';	

 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_servicios rcp where rcp.recepcion_paquete_servicio_id=$1 limit 1';	
				
 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORA
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras rcp where rcp.recepcion_paquete_embotelladora_id=$1 limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_bancos rcp where rcp.recepcion_paquete_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA HOTELES
			then			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles rcp where rcp.recepcion_paquete_hotel_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURA DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales	where recepcion_paquete_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JJUEGOS DE AZAR
			then 			
 			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_juegos	where recepcion_paquete_juego_id = $1 limit 1';	

 		--add 20190410 rgt
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos where recepcion_paquete_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select estado_recepcion_id	from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones where recepcion_paquete_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones where recepcion_paquete_libre_consignacion_id=$1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas rcp where rcp.recepcion_paquete_zona_franca_id=$1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 						
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales rcp where rcp.recepcion_paquete_espectaculo_nacional_id=$1 limit 1';	

		--add 20190410 rgt
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias where recepcion_paquete_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras rcp where rcp.recepcion_paquete_moneda_extranjera_id=$1 limit 1';	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos rcp where rcp.recepcion_paquete_nota_credito_debito_id=$1 limit 1';
		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones rcp 	where rcp.recepcion_paquete_nota_conciliacion_id=$1 limit 1';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos rcp 	where rcp.recepcion_paquete_boleto_aereo_id = $1 limit 1';			
		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos rcp where rcp.recepcion_paquete_turismo_receptivo_id=$1 limit 1';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros rcp where rcp.recepcion_paquete_tasa_cero_id=$1 limit 1';	
		--add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
			 v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos where recepcion_paquete_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
			 v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb where recepcion_paquete_exportacion_ypfb_id = $1	limit 1';
		--add 20190729 rgt
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
			 v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras where recepcion_paquete_exportacion_minera_id = $1	limit 1';			
		--add 20190410 jf
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
			 v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb where recepcion_paquete_libre_consignacion_ypfb_id = $1	limit 1';
			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas rcp 		where rcp.recepcion_paquete_minera_interna_id=$1 limit 1';			 
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas rcp 		where rcp.recepcion_paquete_prevalorada_id=$1 limit 1';
		
		--add 20190724 rgt				
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones 	where recepcion_paquete_telecomunicacion_id = $1 limit 1';
		
		--add 20190729 rgt				
		when p_tipo_documento_sector_id = 30 --Nota: FACTURA NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select estado_recepcion_id from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv 	where recepcion_paquete_nota_credito_debito_sfv_id = $1 limit 1';
		
		else 
				v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_estado_recepcion_id_pq')) as varchar);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_venta_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 							 
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_estandares  where recepcion_contingencia_correcta_estandar_id = $1 limit 1';
														
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_colegios	where recepcion_contingencia_correcta_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres where recepcion_contingencia_correcta_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles where recepcion_contingencia_correcta_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_servicios where recepcion_contingencia_correcta_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras	where recepcion_contingencia_correcta_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_bancos	where recepcion_contingencia_correcta_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles where recepcion_contingencia_correcta_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales where recepcion_contingencia_correcta_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_juegos where recepcion_contingencia_correcta_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos where recepcion_contingencia_correcta_espectaculo_id = $1	limit 1';		
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones where recepcion_contingencia_correcta_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones where recepcion_contingencia_correcta_libre_consignacion_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas where recepcion_contingencia_correcta_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales	where recepcion_contingencia_correcta_espectaculo_nacional_id = $1	limit 1';

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias where recepcion_contingencia_correcta_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras	where recepcion_contingencia_correcta_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos where recepcion_contingencia_correcta_nota_credito_debito_id = $1	limit 1';	
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select estado_nota_conciliacion_id from sre_recaudaciones.sre_fac_notas_conciliaciones 	where recepcion_contingencia_correcta_nota_conciliacion_id = $1 limit 1';			
		--add 20190513
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos	where recepcion_contingencia_correcta_boleto_aereo_id = $1	limit 1';		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos	where recepcion_contingencia_correcta_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg 	
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros	where recepcion_contingencia_correcta_tasa_cero_id = $1	limit 1';	
		--add 20190409 rgt
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos	where recepcion_contingencia_correcta_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb	where recepcion_contingencia_correcta_exportacion_ypfb_id = $1	limit 1';
		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras	where recepcion_contingencia_correcta_exportacion_minera_id = $1	limit 1';
 		
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb	where recepcion_contingencia_correcta_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas  where recepcion_contingencia_correcta_minera_interna_id = $1 limit 1'; 			
		
		--add 20190410 jf		
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_prevaloradas where recepcion_contingencia_correcta_prevalorada_id = $1 limit 1';
		
		--add 20190724 rgt		
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones where recepcion_contingencia_correcta_telecomunicacion_id = $1 limit 1';
		
		--add 20190725 rgt		
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv where recepcion_contingencia_correcta_nota_credito_debito_sfv_id = $1 limit 1';
		
 		else 
				v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_estado_venta_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_venta_id(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 							 
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_estandares  where recepcion_correcta_estandar_id = $1 limit 1';
														
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_colegios	where recepcion_correcta_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_alquileres where recepcion_correcta_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_combustibles where recepcion_correcta_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_servicios where recepcion_correcta_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_embotelladoras	where recepcion_correcta_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_bancos	where recepcion_correcta_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_hoteles where recepcion_correcta_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_hospitales where recepcion_correcta_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_juegos where recepcion_correcta_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_espectaculos where recepcion_correcta_espectaculo_id = $1	limit 1';		
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_exportaciones where recepcion_correcta_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_libres_consignaciones where recepcion_correcta_libre_consignacion_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_zonas_francas where recepcion_correcta_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales	where recepcion_correcta_espectaculo_nacional_id = $1	limit 1';

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias where recepcion_correcta_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras	where recepcion_correcta_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos where recepcion_correcta_nota_credito_debito_id = $1	limit 1';	
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select estado_nota_conciliacion_id from sre_recaudaciones.sre_fac_notas_conciliaciones 	where recepcion_correcta_nota_conciliacion_id = $1 limit 1';			
		--add 20190513
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_boletos_aereos	where recepcion_correcta_boleto_aereo_id = $1	limit 1';		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_turismos_receptivos	where recepcion_correcta_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg 	
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_tasas_ceros	where recepcion_correcta_tasa_cero_id = $1	limit 1';	
		--add 20190409 rgt
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_hidrocarburos	where recepcion_correcta_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb	where recepcion_correcta_exportacion_ypfb_id = $1	limit 1';
		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras	where recepcion_correcta_exportacion_minera_id = $1	limit 1';
 		
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb	where recepcion_correcta_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_mineras_internas  where recepcion_correcta_minera_interna_id = $1 limit 1'; 			
		
		--add 20190410 jf		
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_prevaloradas where recepcion_correcta_prevalorada_id = $1 limit 1';
		
		--add 20190724 rgt		
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select estado_factura_id from sre_recaudaciones.sre_fac_ventas_telecomunicaciones where recepcion_correcta_telecomunicacion_id = $1 limit 1';
		
		--add 20190725 rgt		
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv where recepcion_correcta_nota_credito_debito_sfv_id = $1 limit 1';
		
 		else 
				v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_estado_venta_id')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_venta_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta SELECT dinamicamente segun el tipo documento sector proporcionado
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta SELECT para encontrar el estado_venta_manual_documento_fiscal_id de las tablas de ventas
SUBSISTEMA : Facturación
FECHA CREACION : 27/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_estandares WHERE venta_estandar_id = $1 limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice WHERE venta_alcanzada_ice_id = $1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_alquileres WHERE venta_alquiler_id = $1 limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones  WHERE venta_comercial_exportacion_id = $1 limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  WHERE venta_libre_consignacion_id = $1 limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos WHERE venta_hidrocarburo_id = $1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_entidades_financieras WHERE venta_entidad_financiera_id = $1 limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_hospitales WHERE venta_hospital_id = $1 limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_hoteles WHERE venta_hotel_id = $1 limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_sectores_educativos WHERE venta_sector_educativo_id = $1 limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_notas_credito_debito WHERE venta_nota_credito_debito_id = $1 limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras WHERE venta_nota_moneda_extranjera_id = $1 limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero WHERE venta_nota_tasa_cero_id = $1 limit 1';
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select estado_venta_manual_documento_fiscal_id from sre_recaudaciones.sre_fman_ventas_notas_zona_franca WHERE venta_nota_zona_franca_id = $1 limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
         return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_existe_ventas_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_cab(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que recupera datos de las tablas ventas y ventas contingencia según corresponda,
                        de acuerdo al tipo documento fiscal (1-factura, 5-contingencia) y documento sector (determinado)
PARAMETROS INGRESO
    p_tipo_documento_fiscal_id tipo documento fiscal
    p_tipo_documento_sector_id tipo documento sector
    $1 corresponde al valor del cuf
    $2 corresponde al valor del numeroFactura
    $3 corresponde al valor del nitEmisor
PARAMETROS SALIDA
    cadena con intruccion select de la tabla correspondiente 
    '0' en caso de error o no corresponda 
SUBSISTEMA : Facturación
FECHA CREACION : 20/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste considerando factura y nota fiscal contingencias (Documentos Fiscal 4,6 respectivamente)  
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 16/09/2019
AUTOR DE LA MODIFICACION : Edwin Coro 
VERSION : 2.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste adición de campos de retorno, además de adicionar campo v.estado_id as detalle, que será reemplazado en función 
                        sre_fac_servicio_obtener_factura_datos_parcial, para adición de lista de detalles
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 17/09/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste consulta instrucción where
NUMERO SECUENCIAL : 3
FECHA DE MODIFICACION : 26/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/

declare     
      v_sql varchar:='0';     
      v_sql_contingencia varchar:='0';
      v_sql_resultado varchar:='0';
      v_sql_row_to_json varchar:= 'select row_to_json(d) from (';
      -- campo v.estado_id as detalle habilitado para ser reemplazado en funcion sre_fac_servicio_obtener_factura_datos_parcial, para adicion de 
      -- lista de detalles
      v_sql_campos varchar:= ' as ventaId , 
                                         v.monto_total as montoTotal, 
                                         v.fecha_emision as fechaEmision, 
                                         v.sucursal_id as sucursalId,
                                         v.direccion, 
                                         v.punto_venta_id as puntoVentaId, 
                                         v.nombre_razon_social as nombreRazonSocial,
                                         v.tipo_documento_identidad_id as tipoDocumentoIdentidad, 
                                         v.numero_documento as numeroDocumento,
                                         v.complemento, 
                                         v.usuario, 
                                         v.estado_id as detalle ';    
      
      v_sql_where varchar:= ' where v.cuf = $1 and v.numero_factura= $2 and v.nit_emisor = $3) d';
begin
/*    
clasificador_id |descripcion                                  |codigo_clasificador |
----------------|---------------------------------------------|--------------------|
1382            |FACTURA ESTANDAR                             |1                   |
1383            |FACTURA SECTORES EDUCATIVOS                  |2                   |
1384            |FACTURA DE ALQUILER DE BIENES INMUEBLES      |3                   |
1385            |FACTURA DE COMERCIALIZACION DE HIDROCARBUROS |4                   |
1386            |FACTURA DE SERVICIOS BASICOS                 |5                   |
1387            |FACTURA DE EMBOTELLADORAS                    |6                   |
1388            |FACTURA DE ENTIDADES FINANCIERAS             |7                   |
1389            |FACTURA DE HOTELES                           |8                   |
1390            |FACTURAS DE HOSPITALES/CLINICAS              |9                   |
1391            |FACTURA DE JUEGOS DE AZAR                    |10                  |
1392            |FACTURA DE ARTISTAS INTERNACIONALES          |11                  |
1393            |FACTURA COMERCIAL DE EXPORTACION             |12                  |
1826            |FACTURA HIDROCARBUROS                        |23                  |
2657            |FACTURA VENTA INTERNA MINERALES              |27                  |
2xxx            |FACTURA TELECOMUNICACIONES                   |29                  |
*/
      case
            when p_tipo_documento_sector_id = 1
                  then
                  v_sql:= 'select v.venta_estandar_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_estandares v ';
                  v_sql_contingencia:= 'select v.venta_contingencia_estandar_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_estandares v ';
            when p_tipo_documento_sector_id = 2
                  then              
                  v_sql:= 'select v.venta_colegio_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_colegios v';                     
                  v_sql_contingencia:= 'select v.venta_contingencia_colegio_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_colegios v';
            when p_tipo_documento_sector_id = 3
                  then                                           
                  v_sql:= 'select v.venta_alquiler_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_alquileres v';                                               
                  v_sql_contingencia:= 'select v.venta_contingencia_alquiler_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres v';
            when p_tipo_documento_sector_id = 4
                  then                                                             
                  v_sql:= 'select v.venta_combustible_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_combustibles v';                
                  v_sql_contingencia:= 'select v.venta_contingencia_combustible_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles v';
            when p_tipo_documento_sector_id = 5
                  then 
                  v_sql:= 'select v.venta_servicio_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_servicios v';
                  v_sql_contingencia:= 'select v.venta_contingencia_servicio_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_servicios v';
            when p_tipo_documento_sector_id = 6
                  then                                                 
                  v_sql:= 'select v.venta_embotelladora_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_embotelladoras v';                                                             
                  v_sql_contingencia:= 'select v.venta_contingencia_embotelladora_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras v';     
            when p_tipo_documento_sector_id = 7
                  then                                                 
                  v_sql:= 'select v.venta_banco_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_bancos v';                                                              
                  v_sql_contingencia:= 'select v.venta_contingencia_banco_id '||v_sql_campos||' 
                                          from sre_recaudaciones.sre_fac_ventas_contingencias_bancos v';  
            when p_tipo_documento_sector_id = 8
                  then                                                 
                  v_sql:= 'select v.venta_hotel_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_hoteles v';                                                        
                  v_sql_contingencia:= 'select v.venta_contingencia_hotel_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles v';
            when p_tipo_documento_sector_id = 9
                  then                                                 
                  v_sql:= 'select v.venta_hospital_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_hospitales v';                                               
                  v_sql_contingencia:= 'select v.venta_contingencia_hospital_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales v';   
            when p_tipo_documento_sector_id = 10
                  then                                                 
                  v_sql:= 'select v.venta_juego_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_juegos v';                     
                  v_sql_contingencia:= 'select v.venta_contingencia_juego_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_juegos v';  
            when p_tipo_documento_sector_id = 11 --FACTURA DE ARTISTAS INTERNACIONALES
                  then                                                 
                  v_sql:= 'select v.venta_espectaculo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_espectaculos v';    
                  v_sql_contingencia:= 'select v.venta_contingencia_espectaculo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos v'; 
            when p_tipo_documento_sector_id = 12
                  then                                                 
                  v_sql:= 'select v.venta_exportacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_exportaciones v';   
                  v_sql_contingencia:= 'select v.venta_contingencia_exportacion_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones v'; 
            when p_tipo_documento_sector_id = 23
                  then                                                 
                  v_sql:= 'select v.venta_hidrocarburo_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_hidrocarburos v';   
                  v_sql_contingencia:= 'select v.venta_contingencia_hidrocarburo_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos v';            
            when p_tipo_documento_sector_id = 27 --FACTURA VENTA INTERNA MINERALES
                  then                                                 
                  v_sql:= 'select v.venta_minera_interna_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_mineras_internas v';                                   
                  v_sql_contingencia:= 'select v.venta_contingencia_minera_interna_id '||v_sql_campos||' 
                                         from sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas v';
            when p_tipo_documento_sector_id = 29 --FACTURA TELECOMUNICACIONES
                  then                                           
                  v_sql:= 'select v.venta_telecomunicacion_id '||v_sql_campos||'
                                         from sre_recaudaciones.sre_fac_ventas_telecomunicaciones v';    
                  v_sql_contingencia:= '0';                      
            else 
                  v_sql:='0';       
                  v_sql_contingencia:='0';
      end case;   

      raise notice 'v_sql_cabecera ------> %',v_sql;
      if (v_sql <> '0') then
         if p_tipo_documento_fiscal_id = 1 then -- factura
                  v_sql_resultado := concat(v_sql_row_to_json, v_sql, v_sql_where) ;
         else 
            if p_tipo_documento_fiscal_id = 4 then -- facturas de contingencia
                  if v_sql_contingencia <> '0' then
                        v_sql_resultado := concat(v_sql_row_to_json, v_sql_contingencia, v_sql_where);
                  else                    
                        v_sql_resultado := v_sql_contingencia;
                  end if;
            end if;
         end if;
      end if;
      
      return coalesce(v_sql_resultado, '0');

      exception
      when others then  
            perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_cab');
            return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_cab')) as varchar) ;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_det(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que recupera datos de las tablas detalles y detalles contingencia según corresponda,
                        de acuerdo al tipo documento fiscal (1-factura, 5-contingencia) y documento sector (determinado)
PARAMETROS INGRESO
    p_tipo_documento_fiscal_id tipo documento fiscal
    p_tipo_documento_sector_id tipo documento sector
    $1 corresponde al valor del identificador de la tabla venta
PARAMETROS SALIDA
    cadena con instrucción select de la tabla correspondiente 
    '0' en caso de error o no corresponda 
SUBSISTEMA : Facturación
FECHA CREACION : 20/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste validación if p_tipo_documento_fiscal_id = 4 then -- facturas de contingencia
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 17/09/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste consulta para sectores 8 - Hoteles, 29 - Telecomunicaciones
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 26/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/
declare
      v_sql varchar:='0';     
      v_sql_contingencia varchar:='0';
      v_sql_resultado varchar:='0';
      v_sql_array_to_json varchar:= 'select array_to_json(array_agg(row_to_json(det))) as detalle from (';
      v_sql_campos varchar:= 'as detalleVentaId,
                                         d.actividad_economica_id as actividadEconomicaId, 
                                         d.producto_sin_id as productoSinId, 
                                         d.producto_id as productoId,
                                         d.descripcion as descripcion,
                                         d.cantidad as cantidad,
                                         d.unidad_medida as unidadMedida,
                                         d.precio_unitario as precioUnitario, 
                                         d.subtotal as subTotal';     
begin 
/*    
clasificador_id |descripcion                                  |codigo_clasificador |
----------------|---------------------------------------------|--------------------|
1382            |FACTURA ESTANDAR                             |1                   |
1383            |FACTURA SECTORES EDUCATIVOS                  |2                   |
1384            |FACTURA DE ALQUILER DE BIENES INMUEBLES      |3                   |
1385            |FACTURA DE COMERCIALIZACION DE HIDROCARBUROS |4                   |
1386            |FACTURA DE SERVICIOS BASICOS                 |5                   |
1387            |FACTURA DE EMBOTELLADORAS                    |6                   |
1388            |FACTURA DE ENTIDADES FINANCIERAS             |7                   |
1389            |FACTURA DE HOTELES                           |8                   |
1390            |FACTURAS DE HOSPITALES/CLINICAS              |9                   |
1391            |FACTURA DE JUEGOS DE AZAR                    |10                  |
1392            |FACTURA DE ARTISTAS INTERNACIONALES          |11                  |
1393            |FACTURA COMERCIAL DE EXPORTACION             |12                  |
1826            |FACTURA HIDROCARBUROS                        |23                  |
2657            |FACTURA VENTA INTERNA MINERALES              |27                  |
2xxx            |FACTURA TELECOMUNICACIONES                   |29                  |
*/
      case
            when p_tipo_documento_sector_id = 1
                  then              
                  v_sql:= 'select d.detalle_venta_estandar_id '||v_sql_campos||'                                        
                                   from sre_recaudaciones.sre_fac_detalles_ventas_estandares d  
                                   where d.venta_estandar_id=$1) det';            
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_estandar_id '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_estandares d  
                                   where d.venta_contingencia_estandar_id=$1) det';
            when p_tipo_documento_sector_id = 2
                  then              
                  v_sql:= 'select d.detalle_venta_colegio_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_colegios d  
                                   where d.venta_colegio_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_colegio_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_colegios d
                                   where d.venta_contingencia_colegio_id=$1) det';
            when p_tipo_documento_sector_id = 3
                  then        
                  v_sql:= 'select d.venta_alquiler_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_alquileres d  
                                   where d.venta_alquiler_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_alquiler_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_alquileres d
                                   where d.venta_contingencia_alquiler_id=$1) det';
            when p_tipo_documento_sector_id = 4
                  then        
                  v_sql:= 'select d.detalle_venta_combustible_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_combustibles d  
                                   where d.venta_combustible_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_combustible_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_combustibles d
                                   where d.venta_contingencia_combustible_id=$1) det';
            when p_tipo_documento_sector_id = 5
                  then        
                  v_sql:= 'select d.detalle_venta_servicio_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_servicios d  
                                   where d.venta_servicio_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_servicio_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_servicios d
                                   where d.venta_contingencia_servicio_id=$1) det';
            when p_tipo_documento_sector_id = 6
                  then        
                  v_sql:= 'select d.detalle_venta_embotelladora_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_embotelladoras d  
                                   where d.venta_embotelladora_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_embotelladora_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_embotelladoras d
                                   where d.venta_contingencia_embotelladora_id=$1) det';
            when p_tipo_documento_sector_id = 7
                  then              
                  v_sql:= 'select d.detalle_venta_banco_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_bancos d  
                                   where d.venta_banco_id=$1) det';   
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_banco_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_bancos d
                                   where d.venta_contingencia_banco_id=$1) det';
            when p_tipo_documento_sector_id = 8
                  then        
                  v_sql:= 'select d.detalle_venta_hotel_id as detalleVentaId,
                                         d.actividad_economica_id as actividadEconomicaId, 
                                         d.producto_sin_id as productoSinId, 
                                         d.producto_id as productoId,
                                         d.descripcion as descripcion,
                                         d.cantidad_dias as cantidad,
                                         d.unidad_medida as unidadMedida,
                                         d.precio_unitario as precioUnitario, 
                                         d.subtotal as subTotal
                                   from sre_recaudaciones.sre_fac_detalles_ventas_hoteles d  
                                   where d.venta_hotel_id=$1) det';                                 
                                         
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_hotel_id  as detalleVentaId,
                                         d.actividad_economica_id as actividadEconomicaId, 
                                         d.producto_sin_id as productoSinId, 
                                         d.producto_id as productoId,
                                         d.descripcion as descripcion,
                                         d.cantidad_dias as cantidad,
                                         d.unidad_medida as unidadMedida,
                                         d.precio_unitario as precioUnitario, 
                                         d.subtotal as subTotal
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_hoteles d
                                   where d.venta_contingencia_hotel_id=$1) det';
            when p_tipo_documento_sector_id = 9
                  then        
                  v_sql:= 'select d.detalle_venta_hospital_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_hospitales d  
                                   where d.venta_hospital_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_hospital_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_hospitales d
                                   where d.venta_contingencia_hospital_id=$1) det';
            when p_tipo_documento_sector_id = 10
                  then        
                  v_sql:= 'select d.detalle_venta_juego_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_juegos d  
                                   where d.venta_juego_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_juego_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_juegos d
                                   where d.venta_contingencia_juego_id=$1) det';
            when p_tipo_documento_sector_id = 11 --FACTURA DE ARTISTAS INTERNACIONALES
                  then 
                  v_sql:= 'select d.detalle_venta_espectaculo_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_espectaculos d  
                                   where d.venta_espectaculo_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_espectaculo_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_espectaculos d
                                   where d.venta_contingencia_espectaculo_id=$1) det';
            when p_tipo_documento_sector_id = 12
                  then 
                  v_sql:= 'select d.detalle_venta_exportacion_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_exportaciones d  
                                   where d.venta_exportacion_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_exportacion_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_exportaciones d
                                   where d.venta_contingencia_exportacion_id=$1) det';
            when p_tipo_documento_sector_id = 23
                  then  
                  v_sql:= 'select d.detalle_venta_hidrocarburo_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_hidrocarburos d  
                                   where d.venta_hidrocarburo_id=$1) det';
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_hidrocarburo_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_hidrocarburos d
                                   where d.venta_contingencia_hidrocarburo_id=$1) det';
           when p_tipo_documento_sector_id = 27 --FACTURA VENTA INTERNA MINERALES
                  then        
                  v_sql:= 'select d.detalle_venta_minera_interna_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_mineras_internas d  
                                   where d.venta_minera_interna_id=$1) det';      
                  v_sql_contingencia:= 'select d.detalle_venta_contingencia_minera_interna_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_contingencias_mineras_internas d
                                   where d.venta_contingencia_minera_interna_id=$1) det';                              
            when p_tipo_documento_sector_id = 29 --FACTURA TELECOMUNICACIONES
                  then  
                  v_sql:= 'select d.detalle_venta_telecomunicacion_id  '||v_sql_campos||'
                                   from sre_recaudaciones.sre_fac_detalles_ventas_telecomunicaciones d  
                                   where d.venta_telecomunicacion_id=$1) det';
                  v_sql_contingencia:= '0';                
            else 
                        v_sql:='0';                        
      end case;   

      raise notice 'v_sql_detalle ------> %',v_sql;
      if (v_sql <> '0') then
         if p_tipo_documento_fiscal_id = 1 then -- factura
                  v_sql_resultado := concat(v_sql_array_to_json, v_sql) ;
         else 
            if p_tipo_documento_fiscal_id = 4 then -- facturas de contingencia
                  if v_sql_contingencia <> '0' then
                        v_sql_resultado := concat(v_sql_array_to_json, v_sql_contingencia);
                  else                    
                        v_sql_resultado := v_sql_contingencia;
                  end if;
            end if;
         end if;
      end if;
      
      return coalesce(v_sql_resultado, '0');

      exception
      when others then  
            perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_det');
            return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_det')) as varchar) ;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_lista_rec_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 		
		--add 20190408 vcg			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_estandar_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_estandares d  where d.recepcion_contingencia_paquete_estandar_id=$1) d) tbl';
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_colegio_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_colegios d  where d.recepcion_contingencia_paquete_colegio_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 3
			then 								
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_alquiler_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_alquileres d  where d.recepcion_contingencia_paquete_alquiler_id = $1) d) tbl';	

		when p_tipo_documento_sector_id = 4
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_combustible_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_combustibles d  where d.recepcion_contingencia_paquete_combustible_id=$1) d) tbl';	

		when p_tipo_documento_sector_id = 5
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_servicio_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_servicios d  where d.recepcion_contingencia_paquete_servicio_id=$1) d) tbl';	
			
		when p_tipo_documento_sector_id = 6
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_embotelladora_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_embotelladoras d  where d.recepcion_contingencia_paquete_embotelladora_id=$1) d) tbl'; 	--*		

 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 7
			then						
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_banco_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_bancos d  where d.recepcion_contingencia_paquete_banco_id=$1) d) tbl';	

 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 8
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_hotel_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_hoteles d  where d.recepcion_contingencia_paquete_hotel_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_hospital_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_hospitales d  where d.recepcion_contingencia_paquete_hospital_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 10
			then 			 		
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_juego_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_juegos d  where d.recepcion_contingencia_paquete_juego_id=$1) d) tbl';

		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_espectaculo_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos d  where d.recepcion_contingencia_paquete_espectaculo_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 12
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_exportacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones d  where d.recepcion_contingencia_paquete_exportacion_id=$1) d) tbl';	
		
		-- add 20190408 rgt		
		when p_tipo_documento_sector_id = 13
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_libre_consignacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones d  where d.recepcion_contingencia_paquete_libre_consignacion_id = $1) d) tbl';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_zona_franca_id  as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_zonas_francas d  where d.recepcion_contingencia_paquete_zona_franca_id=$1) d) tbl';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_espectaculo_nacional_id  as recepciones_id_i   from sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos_nacionales d  where d.recepcion_contingencia_paquete_espectaculo_nacional_id=$1) d) tbl';	

		when p_tipo_documento_sector_id = 16
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_seguridad_alimentaria_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_seguridades_alimentarias d  where d.recepcion_contingencia_paquete_seguridad_alimentaria_id=$1) d) tbl';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_moneda_extranjera_id  as recepciones_id_i    from sre_recaudaciones.sre_fac_recepciones_contingencias_monedas_extranjeras d  where d.recepcion_contingencia_paquete_moneda_extranjera_id=$1) d) tbl';	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_nota_credito_debito_id  as recepciones_id_i    from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos d  where d.recepcion_contingencia_paquete_nota_credito_debito_id=$1) d) tbl';
	
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 19
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_nota_conciliacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_conciliaciones d  where d.recepcion_contingencia_paquete_nota_conciliacion_id=$1) d) tbl';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_boleto_aereo_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_boletos_aereos d  where d.recepcion_contingencia_paquete_boleto_aereo_id = $1) d) tbl';			

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then		
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_turismo_receptivo_id  as recepciones_id_i from sre_recaudaciones.sre_fac_recepciones_contingencias_turismos_receptivos d  where d.recepcion_contingencia_paquete_turismo_receptivo_id=$1) d) tbl';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_tasa_cero_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_tasas_ceros d  where d.recepcion_contingencia_paquete_tasa_cero_id=$1) d) tbl';	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_hidrocarburo_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_hidrocarburos d  where d.recepcion_contingencia_paquete_hidrocarburo_id = $1) d) tbl';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_exportacion_ypfb_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_ypfb d  where d.recepcion_contingencia_paquete_exportacion_ypfb_id = $1) d) tbl';
		 
		--add 20190729 rgt
		when p_tipo_documento_sector_id = 25
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_exportacion_minera_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_mineras d  where d.recepcion_contingencia_paquete_exportacion_minera_id = $1) d) tbl';
		
		 --add 20190408 jf
		when p_tipo_documento_sector_id = 26
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_libre_consignacion_ypfb_id  as recepciones_id_i    from sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones_ypfb d  where d.recepcion_contingencia_paquete_libre_consignacion_ypfb_id=$1) d) tbl';
		 
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_minera_interna_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_mineras_internas d  where d.recepcion_contingencia_paquete_minera_interna_id=$1) d) tbl';		
		
		--add 20190410 jf		
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_prevalorada_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_prevaloradas d  where d.recepcion_contingencia_paquete_prevalorada_id=$1) d) tbl';
		
		--add 20190724 rgt	
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_telecomunicacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_telecomunicaciones d  where d.recepcion_contingencia_paquete_telecomunicacion_id=$1) d) tbl';
		
		--add 20190729 rgt	
		when p_tipo_documento_sector_id = 30
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_contingencia_nota_credito_debito_sfv_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos_sfv d  where d.recepcion_contingencia_paquete_nota_credito_debito_sfv_id = $1) d) tbl';
			
		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_lista_rec_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_lista_recepcion_id(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 		
		--add 20190408 vcg			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_estandar_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_estandares d  where d.recepcion_paquete_estandar_id=$1) d) tbl';
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_colegio_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_colegios d  where d.recepcion_paquete_colegio_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 3
			then 								
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_alquiler_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_alquileres d  where d.recepcion_paquete_alquiler_id = $1) d) tbl';	

		when p_tipo_documento_sector_id = 4
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_combustible_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_combustibles d  where d.recepcion_paquete_combustible_id=$1) d) tbl';	

		when p_tipo_documento_sector_id = 5
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_servicio_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_servicios d  where d.recepcion_paquete_servicio_id=$1) d) tbl';	
			
		when p_tipo_documento_sector_id = 6
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_embotelladora_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_embotelladoras d  where d.recepcion_paquete_embotelladora_id=$1) d) tbl'; 	--*		

 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 7
			then						
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_banco_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_bancos d  where d.recepcion_paquete_banco_id=$1) d) tbl';	

 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 8
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_hotel_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_hoteles d  where d.recepcion_paquete_hotel_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_hospital_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_hospitales d  where d.recepcion_paquete_hospital_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 10
			then 			 		
 		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_juego_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_juegos d  where d.recepcion_paquete_juego_id=$1) d) tbl';

		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_espectaculo_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_espectaculos d  where d.recepcion_paquete_espectaculo_id=$1) d) tbl';	
				
		when p_tipo_documento_sector_id = 12
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_exportacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_exportaciones d  where d.recepcion_paquete_exportacion_id=$1) d) tbl';	
		
		-- add 20190408 rgt		
		when p_tipo_documento_sector_id = 13
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_libre_consignacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones d  where d.recepcion_paquete_libre_consignacion_id = $1) d) tbl';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_zona_franca_id  as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_zonas_francas d  where d.recepcion_paquete_zona_franca_id=$1) d) tbl';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_espectaculo_nacional_id  as recepciones_id_i   from sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales d  where d.recepcion_paquete_espectaculo_nacional_id=$1) d) tbl';	

		when p_tipo_documento_sector_id = 16
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_seguridad_alimentaria_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias d  where d.recepcion_paquete_seguridad_alimentaria_id=$1) d) tbl';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17
			then			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_moneda_extranjera_id  as recepciones_id_i    from sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras d  where d.recepcion_paquete_moneda_extranjera_id=$1) d) tbl';	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_nota_credito_debito_id  as recepciones_id_i    from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos d  where d.recepcion_paquete_nota_credito_debito_id=$1) d) tbl';
	
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 19
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_nota_conciliacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones d  where d.recepcion_paquete_nota_conciliacion_id=$1) d) tbl';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20
			then
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_boleto_aereo_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_boletos_aereos d  where d.recepcion_paquete_boleto_aereo_id = $1) d) tbl';			

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then		
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_turismo_receptivo_id  as recepciones_id_i from sre_recaudaciones.sre_fac_recepciones_turismos_receptivos d  where d.recepcion_paquete_turismo_receptivo_id=$1) d) tbl';	
		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22
			then 			
		v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_tasa_cero_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_tasas_ceros d  where d.recepcion_paquete_tasa_cero_id=$1) d) tbl';	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_hidrocarburo_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_hidrocarburos d  where d.recepcion_paquete_hidrocarburo_id = $1) d) tbl';	
		--add 20190410 rgt
		when p_tipo_documento_sector_id = 24
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_exportacion_ypfb_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb d  where d.recepcion_paquete_exportacion_ypfb_id = $1) d) tbl';
		 
		--add 20190729 rgt
		when p_tipo_documento_sector_id = 25
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_exportacion_minera_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras d  where d.recepcion_paquete_exportacion_minera_id = $1) d) tbl';
		
		 --add 20190408 jf
		when p_tipo_documento_sector_id = 26
			then				 
		 	v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_libre_consignacion_ypfb_id  as recepciones_id_i    from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb d  where d.recepcion_paquete_libre_consignacion_ypfb_id=$1) d) tbl';
		 
		--add 20190410 vcg		
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_minera_interna_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_mineras_internas d  where d.recepcion_paquete_minera_interna_id=$1) d) tbl';		
		
		--add 20190410 jf		
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_prevalorada_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_prevaloradas d  where d.recepcion_paquete_prevalorada_id=$1) d) tbl';
		
		--add 20190724 rgt	
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_telecomunicacion_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_telecomunicaciones d  where d.recepcion_paquete_telecomunicacion_id=$1) d) tbl';
		
		--add 20190729 rgt	
		when p_tipo_documento_sector_id = 30
			then
			v_sql:= 'select row_to_json(tbl) from(select array_to_json(array_agg(row_to_json(d))) as recepciones_id from (select recepcion_nota_credito_debito_sfv_id as recepciones_id_i  from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv d  where d.recepcion_paquete_nota_credito_debito_sfv_id = $1) d) tbl';
			
		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_lista_recepcion_id')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_numero_fac_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin 	
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_estandares	where venta_contingencia_estandar_id = $1	limit 1';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_colegios	where venta_contingencia_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres where venta_contingencia_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles where venta_contingencia_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_servicios where venta_contingencia_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras	where venta_contingencia_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7
			then 			 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_bancos	where venta_contingencia_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles where venta_contingencia_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales where venta_contingencia_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_juegos where venta_contingencia_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11
			then 
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos	where venta_contingencia_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones	where venta_contingencia_exportacion_id = $1	limit 1';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones	where venta_contingencia_libre_consignacion_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas	where venta_contingencia_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 	
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales	where venta_contingencia_espectaculo_nacional_id = $1	limit 1';
				
		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias	where venta_contingencia_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras	where venta_contingencia_moneda_extranjera_id = $1	limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos	where venta_contingencia_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg 			
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros	where venta_contingencia_tasa_cero_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos	where venta_contingencia_hidrocarburo_id = $1	limit 1';	
 		-- add 20190410 rgt
 		when p_tipo_documento_sector_id = 24
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb	where venta_contingencia_exportacion_ypfb_id = $1	limit 1';
 		
		-- add 20190729 rgt
 		when p_tipo_documento_sector_id = 25
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras	where venta_contingencia_exportacion_minera_id = $1	limit 1'; 		
 		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 26
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb	where venta_contingencia_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select numero_factura 	from sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas	where venta_contingencia_minera_interna_id = $1	limit 1'; 			
			
		--add 20190724 rgt			
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'select numero_factura 	from sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones where venta_contingencia_telecomunicacion_id = $1	limit 1';	
			
		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_numero_fac_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_numero_factura(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_estandares	where venta_estandar_id = $1	limit 1';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_colegios	where venta_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_alquileres where venta_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_combustibles where venta_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_servicios where venta_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_embotelladoras	where venta_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7
			then 			 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_bancos	where venta_banco_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_hoteles where venta_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_hospitales where venta_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_juegos where venta_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11
			then 
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_espectaculos	where venta_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_exportaciones	where venta_exportacion_id = $1	limit 1';	
		-- add 20190409 rgt
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_libres_consignaciones	where venta_libre_consignacion_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_zonas_francas	where venta_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 	
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales	where venta_espectaculo_nacional_id = $1	limit 1';
				
		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias	where venta_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras	where venta_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_notas_creditos_debitos	where nota_credito_debito_id = $1	limit 1';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19
			then
			v_sql:= 'select numero_nota_conciliacion from sre_recaudaciones.sre_fac_notas_conciliaciones		where nota_conciliacion_id = $1	limit 1';			
		--add 20190513
		when p_tipo_documento_sector_id = 20
			then
			v_sql:= 'select numero_boleto_aereo from sre_recaudaciones.sre_fac_ventas_boletos_aereos where venta_boleto_aereo_id = $1	limit 1';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_turismos_receptivos	where venta_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg 			
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_tasas_ceros	where venta_tasa_cero_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_hidrocarburos	where venta_hidrocarburo_id = $1	limit 1';	
 		-- add 20190410 rgt
 		when p_tipo_documento_sector_id = 24
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb	where venta_exportacion_ypfb_id = $1	limit 1';
 		
		-- add 20190729 rgt
 		when p_tipo_documento_sector_id = 25
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras	where venta_exportacion_minera_id = $1	limit 1'; 		
 		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 26
			then				 
 			v_sql:= 'select numero_factura from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb	where venta_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select numero_factura 	from sre_recaudaciones.sre_fac_ventas_mineras_internas	where venta_minera_interna_id = $1	limit 1'; 			
			
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'select numero_factura 	from sre_recaudaciones.sre_fac_prevaloradas	where prevalorada_id = $1	limit 1';
		
		--add 20190724 rgt			
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'select numero_factura 	from sre_recaudaciones.sre_fac_ventas_telecomunicaciones where venta_telecomunicacion_id = $1	limit 1';
		
		--add 20190725 rgt			
		when p_tipo_documento_sector_id = 30
			then
			v_sql:= 'select numero_notadc 	from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv where nota_credito_debito_sfv_id = $1	limit 1';
			
			
		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_numero_factura')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_recepcion_paquete_por_id(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que recupera registro de recepcion paquete a partir del id, retorna registro en formato json
PARAMETROS INGRESO
    p_tipo_documento_sector_id tipo documento sector
    $1 corresponde al identificador de la recepción
PARAMETROS SALIDA
    registro recepcion paquete en formato json
    '0' en caso de error 
SUBSISTEMA : Facturación
FECHA CREACION : 08/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	case
		when p_tipo_documento_sector_id = 1 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_estandares where  recepcion_paquete_estandar_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 2 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_colegios where recepcion_paquete_colegio_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 3 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres where recepcion_paquete_alquiler_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 4 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles where recepcion_paquete_combustible_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 5 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_servicios where recepcion_paquete_servicio_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 6 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras where recepcion_paquete_embotelladora_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 7 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_bancos where  recepcion_paquete_banco_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 8 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles where  recepcion_paquete_hotel_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 9 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales where recepcion_paquete_hospital_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 10 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_juegos where recepcion_paquete_juego_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 11 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos where  recepcion_paquete_espectaculo_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 12 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones where recepcion_paquete_exportacion_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 13 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones where  recepcion_paquete_libre_consignacion_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 14 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas where recepcion_paquete_zona_franca_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 15 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales where recepcion_paquete_espectaculo_nacional_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 16 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias where  recepcion_paquete_seguridad_alimentaria_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 17 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras where  recepcion_paquete_moneda_extranjera_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 18 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos where  recepcion_paquete_nota_credito_debito_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 19 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones where  recepcion_paquete_nota_conciliacion_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 20 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos where  recepcion_paquete_boleto_aereo_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 21 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos where recepcion_paquete_turismo_receptivo_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 22 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros where recepcion_paquete_tasa_cero_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 23 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos where  recepcion_paquete_hidrocarburo_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 24 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb where recepcion_paquete_exportacion_ypfb_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 25 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras where recepcion_paquete_exportacion_minera_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 26 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb where  recepcion_paquete_libre_consignacion_ypfb_id = $1 ) tbl';
		when p_tipo_documento_sector_id = 27 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas where  recepcion_paquete_minera_interna_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 28 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas where recepcion_paquete_prevalorada_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 29 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones where  recepcion_paquete_telecomunicacion_id=$1 ) tbl';
		when p_tipo_documento_sector_id = 30 then v_sql := 'select row_to_json(tbl) from (select * from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv where  recepcion_paquete_nota_credito_debito_sfv_id = $1 ) tbl';
		else v_sql := '0';
	end case;

	return coalesce(v_sql, '0');

	exception
	when others then 
	return cast ((
		select sre_recaudaciones.sre_fac_reg_registrar_excepcion (sqlstate,	SQLERRM, 'sre_fac_ope_armar_consulta_obtener_recepcion_paquete_por_id')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_venta_id(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'select venta_estandar_id from sre_recaudaciones.sre_fac_ventas_estandares	where recepcion_correcta_estandar_id = $1	limit 1';	 
														
		--add 20190410 vcg 			
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
			v_sql:= 'select venta_colegio_id from sre_recaudaciones.sre_fac_ventas_colegios	where recepcion_correcta_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select venta_alquiler_id from sre_recaudaciones.sre_fac_ventas_alquileres where recepcion_correcta_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select venta_combustible_id from sre_recaudaciones.sre_fac_ventas_combustibles where recepcion_correcta_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select venta_servicio_id from sre_recaudaciones.sre_fac_ventas_servicios where recepcion_correcta_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select venta_embotelladora_id from sre_recaudaciones.sre_fac_ventas_embotelladoras	where recepcion_correcta_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select venta_banco_id from sre_recaudaciones.sre_fac_ventas_bancos	where recepcion_correcta_banco_id = $1	limit 1';	
		
		--add 20190408 vcg 			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select venta_hotel_id from sre_recaudaciones.sre_fac_ventas_hoteles where recepcion_correcta_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select venta_hospital_id from sre_recaudaciones.sre_fac_ventas_hospitales where recepcion_correcta_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select venta_juego_id from sre_recaudaciones.sre_fac_ventas_juegos where recepcion_correcta_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 	
			v_sql:= 'select venta_espectaculo_id from sre_recaudaciones.sre_fac_ventas_espectaculos	where recepcion_correcta_espectaculo_id = $1	limit 1';				
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select venta_exportacion_id from sre_recaudaciones.sre_fac_ventas_exportaciones where recepcion_correcta_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select venta_libre_consignacion_id from sre_recaudaciones.sre_fac_ventas_libres_consignaciones	where recepcion_correcta_libre_consignacion_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select venta_zona_franca_id from sre_recaudaciones.sre_fac_ventas_zonas_francas	where recepcion_correcta_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select venta_espectaculo_nacional_id from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales	where recepcion_correcta_espectaculo_nacional_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select venta_seguridad_alimentaria_id from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias	where recepcion_correcta_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select venta_moneda_extranjera_id from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras	where recepcion_correcta_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18  --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select nota_credito_debito_id from sre_recaudaciones.sre_fac_notas_creditos_debitos where recepcion_correcta_nota_credito_debito_id = $1	limit 1';			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select nota_conciliacion_id 	from sre_recaudaciones.sre_fac_notas_conciliaciones		where recepcion_correcta_nota_conciliacion_id = $1	limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select venta_boleto_aereo_id 	from sre_recaudaciones.sre_fac_ventas_boletos_aereos where recepcion_correcta_boleto_aereo_id = $1	limit 1';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select venta_turismo_receptivo_id from sre_recaudaciones.sre_fac_ventas_turismos_receptivos	where recepcion_correcta_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select venta_tasa_cero_id from sre_recaudaciones.sre_fac_ventas_tasas_ceros	where recepcion_correcta_tasa_cero_id = $1	limit 1';	
		--add 20190410 rgt 
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select venta_hidrocarburo_id from sre_recaudaciones.sre_fac_ventas_hidrocarburos	where recepcion_correcta_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select venta_exportacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb	where recepcion_correcta_exportacion_ypfb_id = $1	limit 1';
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select venta_exportacion_minera_id from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras	where recepcion_correcta_exportacion_minera_id = $1	limit 1';
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select venta_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb where recepcion_correcta_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select venta_minera_interna_id from sre_recaudaciones.sre_fac_ventas_mineras_internas	where recepcion_correcta_minera_interna_id = $1	limit 1';						
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select prevalorada_id from sre_recaudaciones.sre_fac_prevaloradas where recepcion_correcta_prevalorada_id = $1	limit 1';
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select venta_telecomunicacion_id from sre_recaudaciones.sre_fac_ventas_telecomunicaciones where recepcion_correcta_telecomunicacion_id = $1	limit 1';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv where recepcion_correcta_nota_credito_debito_sfv_id = $1	limit 1';
		
		else 
			v_sql:='0';				
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_venta_id')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_venta_id_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'select venta_contingencia_estandar_id from sre_recaudaciones.sre_fac_ventas_contingencias_estandares	where recepcion_contingencia_correcta_estandar_id = $1	limit 1';
														
		--add 20190410 vcg 			
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
			v_sql:= 'select venta_contingencia_colegio_id from sre_recaudaciones.sre_fac_ventas_contingencias_colegios	where recepcion_contingencia_correcta_colegio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select venta_contingencia_alquiler_id from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres where recepcion_contingencia_correcta_alquiler_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select venta_contingencia_combustible_id from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles where recepcion_contingencia_correcta_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select venta_contingencia_servicio_id from sre_recaudaciones.sre_fac_ventas_contingencias_servicios where recepcion_contingencia_correcta_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select venta_contingencia_embotelladora_id from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras	where recepcion_contingencia_correcta_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select venta_contingencia_banco_id from sre_recaudaciones.sre_fac_ventas_contingencias_bancos	where recepcion_contingencia_correcta_banco_id = $1	limit 1';	
		
		--add 20190408 vcg 			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select venta_contingencia_hotel_id from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles where recepcion_contingencia_correcta_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select venta_contingencia_hospital_id from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales where recepcion_contingencia_correcta_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select venta_contingencia_juego_id from sre_recaudaciones.sre_fac_ventas_contingencias_juegos where recepcion_contingencia_correcta_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 	
			v_sql:= 'select venta_contingencia_espectaculo_id from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos	where recepcion_contingencia_correcta_espectaculo_id = $1	limit 1';				
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select venta_contingencia_exportacion_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones where recepcion_contingencia_correcta_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select venta_contingencia_libre_consignacion_id from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones	where recepcion_contingencia_correcta_libre_consignacion_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select venta_contingencia_zona_franca_id from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas	where recepcion_contingencia_correcta_zona_franca_id = $1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select venta_contingencia_espectaculo_nacional_id from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales	where recepcion_contingencia_correcta_espectaculo_nacional_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select venta_contingencia_seguridad_alimentaria_id from sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias	where recepcion_contingencia_correcta_seguridad_alimentaria_id = $1	limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select venta_contingencia_moneda_extranjera_id from sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras	where recepcion_contingencia_correcta_moneda_extranjera_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 18  --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select nota_credito_debito_id from sre_recaudaciones.sre_fac_notas_creditos_debitos where recepcion_contingencia_correcta_nota_credito_debito_id = $1	limit 1';			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select nota_conciliacion_id 	from sre_recaudaciones.sre_fac_notas_conciliaciones		where recepcion_contingencia_correcta_nota_conciliacion_id = $1	limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select venta_contingencia_boleto_aereo_id 	from sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos where recepcion_contingencia_correcta_boleto_aereo_id = $1	limit 1';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select venta_contingencia_turismo_receptivo_id from sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos	where recepcion_contingencia_correcta_turismo_receptivo_id = $1	limit 1';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select venta_contingencia_tasa_cero_id from sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros	where recepcion_contingencia_correcta_tasa_cero_id = $1	limit 1';	
		--add 20190410 rgt 
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select venta_contingencia_hidrocarburo_id from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos	where recepcion_contingencia_correcta_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select venta_contingencia_exportacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb	where recepcion_contingencia_correcta_exportacion_ypfb_id = $1	limit 1';
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select venta_contingencia_exportacion_minera_id from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras	where recepcion_contingencia_correcta_exportacion_minera_id = $1	limit 1';
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select venta_contingencia_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb where recepcion_contingencia_correcta_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select venta_contingencia_minera_interna_id from sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas	where recepcion_contingencia_correcta_minera_interna_id = $1	limit 1';						
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select prevalorada_id from sre_recaudaciones.sre_fac_prevaloradas where recepcion_contingencia_correcta_prevalorada_id = $1	limit 1';
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select venta_contingencia_telecomunicacion_id from sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones where recepcion_contingencia_correcta_telecomunicacion_id = $1	limit 1';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv where recepcion_contingencia_correcta_nota_credito_debito_sfv_id = $1	limit 1';
		
		else 
			v_sql:='0';				
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_obtener_venta_id_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_tabla_recepciones_correctas varchar;
	v_campo_recepcion_correcta_factura_id varchar;
	v_campo_recepcion_factura_id varchar;
	v_campo_recepcion_paquete_factura_id varchar;
	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 					
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_estandares';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_estandar_id';
				v_campo_recepcion_factura_id := 'recepcion_estandar_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_estandar_id';
				
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_colegios';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_colegio_id';
				v_campo_recepcion_factura_id := 'recepcion_colegio_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_colegio_id';
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_alquileres';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_alquiler_id';
				v_campo_recepcion_factura_id := 'recepcion_alquiler_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_alquiler_id';		
				
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_combustibles';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_combustible_id';
				v_campo_recepcion_factura_id := 'recepcion_combustible_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_combustible_id';		
				
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_servicios';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_servicio_id';
				v_campo_recepcion_factura_id := 'recepcion_servicio_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_servicio_id';		
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_embotelladoras';						
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_embotelladora_id';
				v_campo_recepcion_factura_id := 'recepcion_embotelladora_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_embotelladora_id';		
				
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_bancos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_banco_id';
				v_campo_recepcion_factura_id := 'recepcion_banco_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_banco_id';		 							
			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 		
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_hoteles';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_hotel_id';
				v_campo_recepcion_factura_id := 'recepcion_hotel_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_hotel_id';		
 							
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_hospitales';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_hospital_id';
				v_campo_recepcion_factura_id := 'recepcion_hospital_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_hospital_id';		
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_juegos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_juego_id';
				v_campo_recepcion_factura_id := 'recepcion_juego_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_juego_id';			
 							
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_espectaculos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_espectaculo_id';
				v_campo_recepcion_factura_id := 'recepcion_espectaculo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_espectaculo_id';												
 							
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_exportaciones';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_exportacion_id';
				v_campo_recepcion_factura_id := 'recepcion_exportacion_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_exportacion_id';					
 							
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_libres_consignaciones';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_libre_consignacion_id';
				v_campo_recepcion_factura_id := 'recepcion_libre_consignacion_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_libre_consignacion_id';		
 							
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_zonas_francas';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_zona_franca_id';
				v_campo_recepcion_factura_id := 'recepcion_zona_franca_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_zona_franca_id';					
 							
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_espectaculos_nacionales';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_espectaculo_nacional_id';
				v_campo_recepcion_factura_id := 'recepcion_espectaculo_nacional_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_espectaculo_nacional_id';					
 							
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_seguridades_alimentarias';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_seguridad_alimentaria_id';
				v_campo_recepcion_factura_id := 'recepcion_seguridad_alimentaria_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_seguridad_alimentaria_id';					
 							
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_monedas_extranjeras';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_moneda_extranjera_id';
				v_campo_recepcion_factura_id := 'recepcion_moneda_extranjera_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_moneda_extranjera_id';					
 							
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_notas_creditos_debitos';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_credito_debito_id';
				v_campo_recepcion_factura_id := 'recepcion_nota_credito_debito_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_nota_credito_debito_id';			
 							
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_notas_conciliaciones';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_conciliacion_id';
				v_campo_recepcion_factura_id := 'recepcion_nota_conciliacion_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_nota_conciliacion_id';			
 							
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_boletos_aereos';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_boleto_aereo_id';
				v_campo_recepcion_factura_id := 'recepcion_boleto_aereo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_boleto_aereo_id';			
 							
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_turismos_receptivos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_turismo_receptivo_id';
				v_campo_recepcion_factura_id := 'recepcion_turismo_receptivo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_turismo_receptivo_id';					
 							
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_tasas_ceros';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_tasa_cero_id';
				v_campo_recepcion_factura_id := 'recepcion_tasa_cero_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_tasa_cero_id';					
 							
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_hidrocarburos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_hidrocarburo_id';
				v_campo_recepcion_factura_id := 'recepcion_hidrocarburo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_hidrocarburo_id';					
 							
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_exportaciones_ypfb';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_exportacion_ypfb_id';
				v_campo_recepcion_factura_id := 'recepcion_exportacion_ypfb_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_exportacion_ypfb_id';					
			
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES add 20190729
			then 			
 				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_exportaciones_mineras';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_exportacion_minera_id';
				v_campo_recepcion_factura_id := 'recepcion_exportacion_minera_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_exportacion_minera_id';		
			
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_libres_consignaciones_ypfb';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_libre_consignacion_ypfb_id';
				v_campo_recepcion_factura_id := 'recepcion_libre_consignacion_ypfb_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_libre_consignacion_ypfb_id';				   			
 							
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_mineras_internas';			
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_minera_interna_id';
				v_campo_recepcion_factura_id := 'recepcion_minera_interna_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_minera_interna_id';				   			
 							
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_prevaloradas';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_prevalorada_id';
				v_campo_recepcion_factura_id := 'recepcion_prevalorada_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_prevalorada_id';
				v_sql:=
				'INSERT INTO sre_recaudaciones.'||v_tabla_recepciones_correctas||'
				(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, '||v_campo_recepcion_factura_id||', '||v_campo_recepcion_paquete_factura_id||', tipo_documento_sector_id, cufp, numero_factura, cuape, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
				VALUES
				($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19) 
				returning '||v_campo_recepcion_correcta_factura_id;
				return coalesce(v_sql,'0');
		
	    when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES 20190723
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_telecomunicaciones';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_telecomunicacion_id';
				v_campo_recepcion_factura_id := 'recepcion_telecomunicacion_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_telecomunicacion_id';
		
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV 20190725
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_correctas_notas_creditos_debitos_sfv';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_credito_debito_sfv_id';
				v_campo_recepcion_factura_id := 'recepcion_nota_credito_debito_sfv_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_paquete_nota_credito_debito_sfv_id';
		
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:=
			'INSERT INTO sre_recaudaciones.'||v_tabla_recepciones_correctas||'
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 
				archivo_xml_valido_id, 
				'||v_campo_recepcion_factura_id||', 
				'||v_campo_recepcion_paquete_factura_id||', 
				tipo_documento_sector_id, 
				cuf, 
				numero_factura, 
				cufd, 
				cuis, 	
				nombre_archivo, 
				fecha_envio, 
				fecha_recepcion, 
				fecha_consolidacion, 
				fecha_registro, 
				fecha_ultima_modificacion, 
				estado_id, 
				tipo_emision_id, 
				tipo_documento_fiscal_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19
		    ) returning '||v_campo_recepcion_correcta_factura_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_contingencia(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <10/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla sector 25 (sre_fac_recepciones_contingencias_correctas_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 24/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para registro en sector 26 (sre_fac_recepciones_contingencias_correctas_libres_consig_ypfb)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 30/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare
	v_tabla_recepciones_correctas varchar;
	v_campo_recepcion_correcta_factura_id varchar;
	v_campo_recepcion_factura_id varchar;
	v_campo_recepcion_paquete_factura_id varchar;
	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 					
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_estandares';
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_estandar_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_estandar_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_estandar_id';
				
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_colegios';
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_colegio_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_colegio_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_colegio_id';
		
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_alquileres';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_alquiler_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_alquiler_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_alquiler_id';		
			
		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_combustibles';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_combustible_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_combustible_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_combustible_id';		
			
		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_servicios';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_servicio_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_servicio_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_servicio_id';		
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_embotelladoras';						
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_embotelladora_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_embotelladora_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_embotelladora_id';		
				
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_bancos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_banco_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_banco_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_banco_id';		 							
			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 		
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_hoteles';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_hotel_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_hotel_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_hotel_id';		
 						
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_hospitales';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_hospital_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_hospital_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_hospital_id';		
		
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_juegos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_juego_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_juego_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_juego_id';			
 							
		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_espectaculos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_espectaculo_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_espectaculo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_espectaculo_id';												
 							
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_exportaciones';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_exportacion_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_exportacion_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_exportacion_id';					
 							
		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_libres_consig';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_libre_consignacion_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_libre_consignacion_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_libre_consignacion_id';		
 							
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_zonas_francas';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_zona_franca_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_zona_franca_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_zona_franca_id';					
 							
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_espectaculos_nal';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_espectaculo_nacional_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_espectaculo_nacional_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_espectaculo_nacional_id';					
 							
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_seguridad_alimen';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_seguridad_alimentaria_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_seguridad_alimentaria_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_seguridad_alimentaria_id';					
 							
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_monedas_extranjeras';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_moneda_extranjera_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_moneda_extranjera_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_moneda_extranjera_id';					
 			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_turismos_receptivos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_turismo_receptivo_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_turismo_receptivo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_turismo_receptivo_id';					
				
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_hidrocarburos';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_hidrocarburo_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_hidrocarburo_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_hidrocarburo_id';					
 							
		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_exportaciones_ypfb';
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_exportacion_ypfb_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_exportacion_ypfb_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_exportacion_ypfb_id';					
		
		when p_tipo_documento_sector_id = 25 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN DE MINERALES		
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_export_mineras';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_exportacion_minera_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_exportacion_minera_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_exportacion_minera_id';	
				
		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then
				v_tabla_recepciones_correctas:='sre_fac_recepciones_contingencias_correctas_libres_consig_ypfb';			
				v_campo_recepcion_correcta_factura_id :='recepcion_contingencia_correcta_libre_consignacion_ypfb_id';
				v_campo_recepcion_factura_id := 'recepcion_contingencia_libre_consignacion_ypfb_id';
				v_campo_recepcion_paquete_factura_id :='recepcion_contingencia_paquete_libre_consignacion_ypfb_id';				   			
		
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:=
			'INSERT INTO sre_recaudaciones.'||v_tabla_recepciones_correctas||'
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 
				archivo_xml_valido_id, 
				'||v_campo_recepcion_factura_id||', 
				'||v_campo_recepcion_paquete_factura_id||', 
				tipo_documento_sector_id, 
				cuf, 
				numero_factura, 
				cufd, 
				cuis, 	
				nombre_archivo, 
				fecha_envio, 
				fecha_recepcion, 
				fecha_consolidacion, 
				fecha_registro, 
				fecha_ultima_modificacion, 
				estado_id, 
				tipo_emision_id, 
				tipo_documento_fiscal_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19
		    ) returning '||v_campo_recepcion_correcta_factura_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion_contingencia')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_etapa_1(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se optimizo la funcion reemplazando if por case para el mejor rendimiento de las consultas
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<16/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='';	
begin 	 	
	v_sql := (case	
		
				when(p_tipo_documento_sector_id=1) then --sre_fac_recepciones_estandares
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_estandares
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_estandar_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_estandar_id'				
		
				when(p_tipo_documento_sector_id=2) then --sre_fac_recepciones_colegios
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_colegios
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_colegio_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_colegio_id'
			
				when(p_tipo_documento_sector_id=3) then --sre_fac_recepciones_alquileres
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_alquileres
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_alquiler_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_alquiler_id'
		
				when(p_tipo_documento_sector_id=4) then --sre_fac_recepciones_combustibles
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_combustibles
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_combustible_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_combustible_id'		
	
				when(p_tipo_documento_sector_id=5) then --sre_fac_recepciones_servicios
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_servicios
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_servicio_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_servicio_id'		
	
				when(p_tipo_documento_sector_id=6) then --sre_fac_recepciones_embotelladoras			
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_embotelladoras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_embotelladora_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_embotelladora_id'		
	
				when(p_tipo_documento_sector_id=7) then --sre_fac_recepciones_bancos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_bancos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_banco_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_banco_id'		
	
				when(p_tipo_documento_sector_id=8) then --sre_fac_recepciones_hoteles
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_hoteles
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_hotel_id, 				punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hotel_id'		
	
				when(p_tipo_documento_sector_id=9) then --sre_fac_recepciones_hospitales
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_hospitales
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_hospital_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hospital_id'		
							
				when(p_tipo_documento_sector_id=10) then --sre_fac_recepciones_juegos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_juegos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_juego_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_juego_id'		
		
				when(p_tipo_documento_sector_id=11) then --sre_fac_recepciones_espectaculos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_espectaculos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_espectaculo_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_espectaculo_id'	
							
				when(p_tipo_documento_sector_id=12) then --sre_fac_recepciones_exportaciones
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_exportaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_exportacion_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_exportacion_id'		
				
				when(p_tipo_documento_sector_id=13) then --sre_fac_recepciones_libres_consignaciones
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_libres_consignaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_libre_consignacion_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_libre_consignacion_id'		
		
				when(p_tipo_documento_sector_id=14) then --sre_fac_recepciones_zonas_francas
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_zonas_francas
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_zona_franca_id, 			punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_zona_franca_id'
							
				when(p_tipo_documento_sector_id=15) then --sre_fac_recepciones_espectaculos_nacionales
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_espectaculo_nacional_id, 	punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id) 
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_espectaculo_nacional_id'
		
				when(p_tipo_documento_sector_id=16) then --sre_fac_recepciones_seguridades_alimentarias
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_seguridad_alimentaria_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_seguridad_alimentaria_id'
				
				when(p_tipo_documento_sector_id=17) then --sre_fac_recepciones_monedas_extranjeras
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_moneda_extranjera_id, 	punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id) 
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_moneda_extranjera_id'		
				
				when(p_tipo_documento_sector_id=18) then --sre_fac_recepciones_notas_creditos_debitos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos			
	            (usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_nota_credito_debito_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_credito_debito_id'		
		
				when(p_tipo_documento_sector_id=19) then --sre_fac_recepciones_notas_conciliaciones
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_nota_conciliacion_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_conciliacion_id'				
	
				when(p_tipo_documento_sector_id=20) then --sre_fac_recepciones_boletos_aereos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_boletos_aereos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_boleto_aereo_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_boleto_aereo_id'				
				
				when(p_tipo_documento_sector_id=21) then --sre_fac_recepciones_turismos_receptivos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_turismos_receptivos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_turismo_receptivo_id, 	punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id) 
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_turismo_receptivo_id'		
						 			
				when(p_tipo_documento_sector_id=22) then --sre_fac_recepciones_tasas_ceros
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_tasas_ceros
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_tasa_cero_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_tasa_cero_id'		
				
				when(p_tipo_documento_sector_id=23) then --sre_fac_recepciones_hidrocarburos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_hidrocarburos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_hidrocarburo_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hidrocarburo_id'					
	
				when(p_tipo_documento_sector_id=24) then --sre_fac_recepciones_exportaciones_ypfb
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_exportacion_ypfb_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_exportacion_ypfb_id'				
				
				when(p_tipo_documento_sector_id=25) then --sre_fac_recepciones_exportaciones_mineras
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_exportacion_minera_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_exportacion_minera_id'				
				
				when(p_tipo_documento_sector_id=26) then --sre_fac_recepciones_libres_consignaciones_ypfb
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_libre_consignacion_ypfb_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)			 
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_libre_consignacion_ypfb_id'				
		
				when(p_tipo_documento_sector_id=27) then --sre_fac_recepciones_mineras_internas
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_mineras_internas
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_minera_interna_id, 	punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_minera_interna_id'				
	
				when(p_tipo_documento_sector_id=28) then --sre_fac_recepciones_prevaloradas
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_prevaloradas
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_prevalorada_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cuape, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id,tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_prevalorada_id'				
				
				when(p_tipo_documento_sector_id=29) then --sre_fac_recepciones_telecomunicaciones 2019/07/23
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_telecomunicaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_telecomunicacion_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_telecomunicacion_id'
				
				when(p_tipo_documento_sector_id=30) then --sre_fac_recepciones_notas_creditos_debitos_sfv 2019/07/25
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_nota_credito_debito_sfv_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_credito_debito_sfv_id'
				
			end);							
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion_etapa_1')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_etapa_1_contingencia(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Funcion donde se arma la consulta de insercion de datos>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste en consulta para insercion en tabla sector 25 (sre_fac_recepciones_contingencias_exportaciones_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 24/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para registro en sector 26 (sre_fac_recepciones_contingencias_libres_consignaciones_ypfb)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 30/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare
	v_sql varchar:='';	
begin 	 	
	v_sql := (case	
		
				when(p_tipo_documento_sector_id=1) then --sre_fac_recepciones_contingencias_estandares
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_estandares
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_estandar_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_estandar_id'				
		
				when(p_tipo_documento_sector_id=2) then --sre_fac_recepciones_contingencias_colegios
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_colegios
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_colegio_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_colegio_id'
			
				when(p_tipo_documento_sector_id=3) then --sre_fac_recepciones_contingencias_alquileres
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_alquileres
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_alquiler_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_alquiler_id'
				
				when(p_tipo_documento_sector_id=4) then --sre_fac_recepciones_contingencias_combustibles
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_combustibles
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_combustible_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_combustible_id'		
				
				when(p_tipo_documento_sector_id=5) then --sre_fac_recepciones_contingencias_servicios
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_servicios
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_servicio_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)returning recepcion_contingencia_servicio_id'		
				
				when(p_tipo_documento_sector_id=6) then --sre_fac_recepciones_contingencias_embotelladoras			
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_embotelladoras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_embotelladora_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
                VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_embotelladora_id'		
				
				when(p_tipo_documento_sector_id=7) then --sre_fac_recepciones_contingencias_bancos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_bancos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_banco_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_banco_id'		
				
				when(p_tipo_documento_sector_id=8) then --sre_fac_recepciones_contingencias_hoteles
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_hoteles
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_hotel_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_hotel_id'		
				
				when(p_tipo_documento_sector_id=9) then --sre_fac_recepciones_contingencias_hospitales
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_hospitales
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_hospital_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_hospital_id'		
							
				when(p_tipo_documento_sector_id=10) then --sre_fac_recepciones_contingencias_juegos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_juegos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_juego_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_juego_id'		
		
				when(p_tipo_documento_sector_id=11) then --sre_fac_recepciones_contingencias_espectaculos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_espectaculo_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_espectaculo_id'	
							
				when(p_tipo_documento_sector_id=12) then --sre_fac_recepciones_contingencias_exportaciones
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_exportacion_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_exportacion_id'		
				
				when(p_tipo_documento_sector_id=13) then --sre_fac_recepciones_contingencias_libres_consignaciones
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_libre_consignacion_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_libre_consignacion_id'		
		
				when(p_tipo_documento_sector_id=14) then --sre_fac_recepciones_contingencias_zonas_francas
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_zonas_francas
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_zona_franca_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_zona_franca_id'
							
				when(p_tipo_documento_sector_id=15) then --sre_fac_recepciones_contingencias_espectaculos_nacionales
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos_nacionales
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_espectaculo_nacional_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_espectaculo_nacional_id'
		
				when(p_tipo_documento_sector_id=16) then --sre_fac_recepciones_seguridades_alimentarias
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_seguridades_alimentarias
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_seguridad_alimentaria_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_seguridad_alimentaria_id'
		
				when(p_tipo_documento_sector_id=17) then --sre_fac_recepciones_monedas_extranjeras
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_monedas_extranjeras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_moneda_extranjera_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_moneda_extranjera_id'		
				
				when(p_tipo_documento_sector_id=21) then --sre_fac_recepciones_turismos_receptivos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_turismos_receptivos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_turismo_receptivo_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_turismo_receptivo_id'		
				
				when(p_tipo_documento_sector_id=23) then --sre_fac_recepciones_hidrocarburos
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_hidrocarburos
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_hidrocarburo_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_hidrocarburo_id'					
				
				when(p_tipo_documento_sector_id=24) then --sre_fac_recepciones_exportaciones_ypfb
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_ypfb
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_exportacion_ypfb_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_exportacion_ypfb_id'				
				
				when(p_tipo_documento_sector_id=25) then --sre_fac_recepciones_exportaciones_mineras
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_mineras
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_exportacion_minera_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)				
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_exportacion_minera_id'
							
				when(p_tipo_documento_sector_id=26) then --sre_fac_recepciones_contingencias_libres_consignaciones_ypfb
				'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones_ypfb
				(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_contingencia_paquete_libre_consignacion_ypfb_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)			 
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_contingencia_libre_consignacion_ypfb_id'				
								
			end);							
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  EXCEPTION
  when others
    then
      --return '-1';
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion_etapa_1_contingencia')) as character varying);

	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
	case
		when p_tipo_documento_sector_id = 1
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_estandares
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_estandar_id';
		--add 20190410 vcg														
		when p_tipo_documento_sector_id = 2
			then 			

			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_colegios
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_colegio_id';
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_alquiler_id';

		when p_tipo_documento_sector_id = 4
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_combustible_id';

		when p_tipo_documento_sector_id = 5
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_servicios
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_servicio_id';
				
		when p_tipo_documento_sector_id = 6
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_embotelladora_id';

		when p_tipo_documento_sector_id = 7
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_bancos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_banco_id';
				
				  
		--add 20190408 vcg			 
		when p_tipo_documento_sector_id = 8
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_hotel_id';
				
				
		when p_tipo_documento_sector_id = 9
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_hospital_id';
				
		when p_tipo_documento_sector_id = 10
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_juegos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_juego_id';

		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_espectaculo_id';
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_exportacion_id';

		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_libre_consignacion_id';

			  
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_zona_franca_id';
			  
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)			
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_espectaculo_nacional_id';
		--add 20190411 rgt
		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_seguridad_alimentaria_id';
								  
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id) 
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_moneda_extranjera_id';

		--add 20190410 jf	
		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id) 
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_nota_credito_debito_id';			
				
		--add 20190410 vcg														
		when p_tipo_documento_sector_id = 19
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_nota_conciliacion_id';			
		
		--add 20190513 rgt	
		when p_tipo_documento_sector_id = 20
			then
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_boleto_aereo_id';		
							
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_turismo_receptivo_id';

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_tasa_cero_id';

				
		when p_tipo_documento_sector_id = 23
			then				
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_hidrocarburo_id';
		
	
	    --add 20190410 rgt														
		when p_tipo_documento_sector_id = 24
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_exportacion_ypfb_id';
		
	    --add 20190729 rgt														
		when p_tipo_documento_sector_id = 25
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_exportacion_minera_id';
		
		--add 20190410 jf														
		when p_tipo_documento_sector_id = 26
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb			
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_exportacion_ypfb_id';
			 
		--add 20190410 vcg														
		when p_tipo_documento_sector_id = 27
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_minera_interna_id';			
				 
		--add 20190410 jf														
		when p_tipo_documento_sector_id = 28
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cuape, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id,tipo_emision_id)		
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_paquete_prevalorada_id';
			 
		--add 20190723 rgt
		when p_tipo_documento_sector_id = 29 --telecomunicaciones
			then 	 
			 v_sql := 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones
			 (usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning recepcion_paquete_telecomunicacion_id';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --nota credito debito sfv
			then 	 
			 v_sql := 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning recepcion_paquete_nota_credito_debito_sfv_id';
		
	    else 
			v_sql:='0';
	end case;
								 		  	    	   	    	 		    
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1_cnt(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Funcion donde se arma la consulta para la insercion de datos en la tabla de recepciones paquete>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para registro en sector 25 (sre_fac_recepciones_contingencias_paquetes_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 25/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para registro en sector 26 (sre_fac_recepciones_contingencias_paquetes_libres_consigna_ypfb)
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 30/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare
	v_sql varchar := '';
begin
	
	case
		--add 20190607 rgt
		when p_tipo_documento_sector_id = 1
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_estandares
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_estandar_id';
														
		when p_tipo_documento_sector_id = 2
			then 			

			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_colegios
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_colegio_id';
			
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_alquileres
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_alquiler_id';
		
		when p_tipo_documento_sector_id = 4
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_combustibles
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)returning  recepcion_contingencia_paquete_combustible_id';
		
		when p_tipo_documento_sector_id = 5
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_servicios
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_servicio_id';
			
		when p_tipo_documento_sector_id = 6
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_embotelladoras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_embotelladora_id';
		
		when p_tipo_documento_sector_id = 7
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_bancos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_banco_id';
								  		 
		when p_tipo_documento_sector_id = 8
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hoteles
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_hotel_id';
				
			
		when p_tipo_documento_sector_id = 9
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hospitales
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_hospital_id';
				
		when p_tipo_documento_sector_id = 10
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_juegos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_juego_id';
		
		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_espectaculo_id';
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_exportacion_id';

		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consigna
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_libre_consignacion_id';
			  
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_zonas_francas
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_zona_franca_id';
		  
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos_nal
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)returning  recepcion_contingencia_paquete_espectaculo_nacional_id';
			
		--add 20190726 rgt
		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_seguridad_aliment
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_seguridad_alimentaria_id';
								  
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_monedas_extranjeras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_moneda_extranjera_id';
		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_turismos_receptivos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_turismo_receptivo_id';
	
		when p_tipo_documento_sector_id = 23
			then				
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hidrocarburos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_hidrocarburo_id';
		
		
	    --add 20190410 rgt														
		when p_tipo_documento_sector_id = 24
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones_ypfb
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_exportacion_ypfb_id';
			
		--add 20191024 eca 
		when p_tipo_documento_sector_id = 25
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_export_mineras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_exportacion_minera_id';
				
		--add 20190410 jf
		--modificado 20191030 eca														
		when p_tipo_documento_sector_id = 26
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consigna_ypfb			
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_contingencia_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_contingencia_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) returning  recepcion_contingencia_paquete_libre_consignacion_ypfb_id';

		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';	
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_recepcion_paquete_etapa_1_cnt')) as character varying);

	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_reg_anulados_rectificados_manual(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta INSERT para las tablas de anulados rectificados segun el tipo sector proporcionado
PARAMETROS INGRESO
tipo documento fiscal, tipo documento sector
PARAMETROS SALIDA
Cadena que representa la consulta INSERT para las tablas de anulados rectificados
SUBSISTEMA : Facturación
FECHA CREACION : 14/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	
	v_campo_venta_id varchar;
	v_tabla_ventas_anulados_rectificados varchar;
	v_campo_venta_anulado_rectificado_id varchar;
	v_campo_venta_anulado_id varchar;
	
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 					
				v_campo_venta_id:= 'venta_estandar_id';
				v_tabla_ventas_anulados_rectificados:='sre_fman_ventas_estandares_anulados_rectificados';			
				v_campo_venta_anulado_id := 'venta_estandar_anulado_id';							  				
				v_campo_venta_anulado_rectificado_id := 'venta_estandar_anulado_rectificado_id';				
				
		when p_tipo_documento_sector_id = 1384 --FACTURA ALQUILER DE BIENES INMUEBLES
			then 			
				v_campo_venta_id:= 'venta_alquiler_id';
				v_tabla_ventas_anulados_rectificados:='sre_fman_ventas_alquileres_rectificados';	
				v_campo_venta_anulado_id	:='';								  				
				v_campo_venta_anulado_rectificado_id := 'venta_alquiler_rectificado_id';

		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			
						
				
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTOR EDUCATIVO
			then 			
				

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then
				

		when p_tipo_documento_sector_id = 1395 --NOTA FISCAL DE ZONA FRANCA
			then
				
				
		when p_tipo_documento_sector_id =1387 --FACTURA ALCANZADA POR ICE
			then

				
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then

		   
		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
			
		   	
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
		
							
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 	

				
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 
				

		when p_tipo_documento_sector_id = 1399 --Nota: NOTA DE CREDITO-DEBITO
			then
				
		   	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then						
		
		   
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:= 'INSERT INTO sre_recaudaciones.'||v_tabla_ventas_anulados_rectificados||'
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				'||v_campo_venta_id||', 
				'||v_campo_venta_anulado_id||', 
				      oficina_id,
				      persona_contribuyente_emisor_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      modalidad_facturacion_id,
				      estado_venta_anulada_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      fecha_emision,
				      fecha_anulacion_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19,
				$20,
				$21,
				$22
				
		    ) returning '||v_campo_venta_anulado_rectificado_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
       return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_reg_anulados_rectificados_manual')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_registro_anulados_manual(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta INSERT para las tablas de anulados por tipo sector
PARAMETROS INGRESO
tipo documento fiscal, tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta INSERT para las tablas de ventas anuladas
SUBSISTEMA : Facturación
FECHA CREACION : 25/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajustes para registro en la nueva estructura de tablas de ANULADOS
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :07/09/2019
AUTOR DE LA MODIFICACION : Susana Escobar Paz
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	
	v_tabla_anulados varchar;
	v_campo_recepcion_correcta_factura_id varchar;
	v_campo_venta_id varchar;
	v_campo_venta_anulado_id varchar;
	
		
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 					
				v_tabla_anulados :='sre_fman_ventas_estandares_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_estandar_id';
				v_campo_venta_anulado_id :='venta_estandar_anulado_id';				
				
		when p_tipo_documento_sector_id = 1384 --FACTURA ALQUILER DE BIENES INMUEBLES
			then 			
				v_tabla_anulados :='sre_fman_ventas_alquileres_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_alquiler_id';
				v_campo_venta_anulado_id :='venta_alquiler_anulado_id';	

		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			
				v_tabla_anulados :='sre_fman_ventas_entidades_financieras_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_entidad_financiera_id';
				v_campo_venta_anulado_id :='venta_entidad_financiera_anulado_id';		
											
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTOR EDUCATIVO
			then 			
				v_tabla_anulados :='sre_fman_ventas_sectores_educativos_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_sector_educativo_id';
				v_campo_venta_anulado_id :='venta_sector_educativo_anulado_id';	
								
		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then
				v_tabla_anulados :='sre_fman_ventas_notas_tasas_cero_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_nota_tasa_cero_id';
				v_campo_venta_anulado_id :='venta_nota_tasa_cero_anulado_id';	
				
		when p_tipo_documento_sector_id = 1395 --NOTA FISCAL DE ZONA FRANCA
			then
				v_tabla_anulados :='sre_fman_ventas_notas_zona_franca_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_nota_zona_franca_id';
				v_campo_venta_anulado_id :='venta_nota_zona_franca_anulado_id';		
							
		when p_tipo_documento_sector_id =1387 --FACTURA ALCANZADA POR ICE
			then
				v_tabla_anulados :='sre_fman_ventas_alcanzadas_ice_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_alcanzada_ice_id';
				v_campo_venta_anulado_id :='venta_alcanzada_ice_anulado_id';	
											
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then
				v_tabla_anulados :='sre_fman_ventas_comerciales_exportaciones_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_comercial_exportacion_id';
				v_campo_venta_anulado_id :='venta_comercial_exportacion_anulado_id';		
								   
		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
				v_tabla_anulados :='sre_fman_ventas_libres_consignaciones_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_libre_consignacion_id';
				v_campo_venta_anulado_id :='venta_libre_consignacion_anulado_id';	
									   	
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
				v_tabla_anulados :='sre_fman_ventas_hidrocarburos_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_hidrocarburo_id';
				v_campo_venta_anulado_id :='venta_hidrocarburo_anulado_id';	
													
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 	
				v_tabla_anulados :='sre_fman_ventas_hospitales_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_hospital_id';
				v_campo_venta_anulado_id :='venta_hospital_anulado_id';	
											
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 
				v_tabla_anulados :='sre_fman_ventas_hoteles_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_hotel_id';
				v_campo_venta_anulado_id :='venta_hotel_anulado_id';	
							
		when p_tipo_documento_sector_id = 1399 --Nota: NOTA DE CREDITO-DEBITO
			then
				v_tabla_anulados :='sre_fman_ventas_notas_credito_debito_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_nota_credito_debito_id';
				v_campo_venta_anulado_id :='venta_nota_credito_debito_anulado_id';	
									   	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then						
				v_tabla_anulados :='sre_fman_ventas_notas_monedas_extranjeras_anulados';
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_anulada_id';
				v_campo_venta_id :='venta_nota_moneda_extranjera_id';
				v_campo_venta_anulado_id :='venta_nota_moneda_extranjera_anulado_id';				
		   
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:= 'INSERT INTO sre_recaudaciones.'||v_tabla_anulados||'
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 	
				'||v_campo_recepcion_correcta_factura_id||',			
				'||v_campo_venta_id||', 
				      persona_contribuyente_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      modalidad_facturacion_id,
				      tipo_documento_sector_id,
				      tipo_documento_fiscal_id,
				      estado_plazo_documento_fiscal_id,
				      estado_anulado_documento_fiscal_id,
				      numero_sucursal,
				      numero_documento_fiscal,
				      codigo_actividad_economica,
				      caed,
				      motivo_anulacion,
				      fecha_emision,
				      fecha_envio,
				      fecha_anulacion,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19,
				$20,
				$21,
				$22,
				$23
				
				
		    ) returning '||v_campo_venta_anulado_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_registro_anulados_manual')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_registro_historico_manual(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta INSERT para las tablas de registros de HISTORICOS, en la seccion de values obtiene los datos de la venta segun el id venta proporcionado y el sector.
PARAMETROS INGRESO
tipo documento fiscal
PARAMETROS SALIDA
Consulta INSERT para tablas de historicos de ventas
SUBSISTEMA : Facturación
FECHA CREACION : 11/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	v_tabla_ventas_historico varchar;
	v_tabla_ventas varchar;
	v_campo_venta_id varchar;
	v_campo_venta_correcta_id varchar;
	v_campo_historico_id varchar;
	v_fecha_envio varchar;
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 					
				v_tabla_ventas_historico:='sre_fman_historicos_ventas_estandares';										  
				v_campo_venta_id:='venta_estandar_id';
				v_campo_historico_id:= 'his_venta_estandar_id'	;	
				v_campo_venta_correcta_id:= 'recepcion_correcta_estandar_id';
				v_tabla_ventas:='sre_fman_ventas_estandares';
					
		when p_tipo_documento_sector_id = 1384 --FACTURA ALQUILER
			then 					
				v_tabla_ventas_historico:='sre_fman_historicos_ventas_alquileres';										  
				v_campo_venta_id:='venta_alquiler_id';
				v_campo_historico_id:= 'his_venta_alquiler_id'	;	  			
				v_campo_venta_correcta_id:= 'recepcion_correcta_alquiler_id';
				v_tabla_ventas:='sre_fman_ventas_alquileres';				

		when p_tipo_documento_sector_id = 1388 --FACTURA ENTIDADES FINANCIERAS
			then 					
				v_tabla_ventas_historico:='sre_fman_historicos_ventas_entidades_financieras';										  
				v_campo_venta_id:='venta_entidad_financiera_id';
				v_campo_historico_id:= 'his_venta_entidad_financiera_id'	;	  			
				v_campo_venta_correcta_id:= 'recepcion_correcta_entidad_financiera_id';
				v_tabla_ventas:='sre_fman_ventas_entidades_financieras';

		when p_tipo_documento_sector_id = 1383 --FACTURA SECTOR EDUCATIVO
			then 					
				v_tabla_ventas_historico:='sre_fman_historicos_ventas_sectores_educativos';										  
				v_campo_venta_id:='venta_sector_educativo_id';
				v_campo_historico_id:= 'his_venta_sector_educativo_id'	;	  			
				v_campo_venta_correcta_id:= 'recepcion_correcta_sector_educativo_id';
				v_tabla_ventas:='sre_fman_ventas_sectores_educativos';

		when p_tipo_documento_sector_id = 1825 --NOTA TASA CERO
			then 					
				v_tabla_ventas_historico:='sre_fman_historicos_ventas_notas_tasas_cero';										  
				v_campo_venta_id:='venta_nota_tasa_cero_id';
				v_campo_historico_id:= 'his_venta_nota_tasa_cero_id'	;	  			
				v_campo_venta_correcta_id:= 'recepcion_correcta_nota_tasa_cero_id';
				v_tabla_ventas:='sre_fman_ventas_notas_tasas_cero';

		when p_tipo_documento_sector_id = 1395 --NOTA ZONA FRANCA
			then 					
				v_tabla_ventas_historico:='sre_fman_historicos_ventas_notas_zona_franca';										  
				v_campo_venta_id:='venta_nota_zona_franca_id';
				v_campo_historico_id:= 'his_venta_nota_zona_franca_id'	;	  			
				v_campo_venta_correcta_id:= 'recepcion_correcta_nota_zona_franca_id';
				v_tabla_ventas:='sre_fman_ventas_notas_zona_franca';
				 							
		when p_tipo_documento_sector_id =1387 --FACTURA ALCANZADA POR ICE
			then							
				v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_alcanzadas_ice
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_alcanzada_ice ,
				 venta_alcanzada_ice_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id,
				 monto_ice 			
				)
			
				select  
				$2,
				$3,
				$4,
				 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_alcanzada_ice ,
				 venta_alcanzada_ice_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id,
				 monto_ice 
				 from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where  venta_alcanzada_ice_id = $1 limit 1
		     returning his_venta_alcanzada_ice_id';
		     return coalesce(v_sql,'0');
		     
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then
			v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_comerciales_exportaciones
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_comercial_exportacion_id ,
				 venta_comercial_exportacion_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	direccion_comprador,
	incoterm,
	puerto_destino,
	lugar_destino,
	codigo_pais,
	monto_total_puerto,
	precio_valor_bruto,
	gastos_transporte_frontera,
	gastos_seguro_frontera,
	total_fob_frontera,
	monto_transporte_frontera,
	monto_seguro_internacional,
	otros_montos,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
							
				)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_comercial_exportacion_id ,
				 venta_comercial_exportacion_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	direccion_comprador,
	incoterm,
	puerto_destino,
	lugar_destino,
	codigo_pais,
	monto_total_puerto,
	precio_valor_bruto,
	gastos_transporte_frontera,
	gastos_seguro_frontera,
	total_fob_frontera,
	monto_transporte_frontera,
	monto_seguro_internacional,
	otros_montos,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where  venta_comercial_exportacion_id = $1 limit 1
		     returning his_venta_comercial_exportacion_id';
		     return coalesce(v_sql,'0');
		     
		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
			v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_libres_consignaciones
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_libre_consignacion_id ,
				 venta_libre_consignacion_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 
				 
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	
	remitente,
	consignatario,
	lugar_destino,
	codigo_pais,
	lugar_acopio_puerto,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id				 		
				)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_libre_consignacion_id ,
				 venta_libre_consignacion_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				
				
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	
	remitente,
	consignatario,
	lugar_destino,
	codigo_pais,
	lugar_acopio_puerto,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_libres_consignaciones where  venta_libre_consignacion_id = $1 limit 1
		     returning his_venta_libre_consignacion_id';
		     return coalesce(v_sql,'0');
				
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
			v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_hidrocarburos
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_hidrocarburo_id ,
				 venta_hidrocarburo_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	codigo_pais,
	placa_vehiculo,
	tipo_envase,
	monto_ley_317,
	monto_total_sujeto_iva,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id				 		
				)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_hidrocarburo_id,
				 venta_hidrocarburo_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	codigo_pais,
	placa_vehiculo,
	tipo_envase,
	monto_ley_317,
	monto_total_sujeto_iva,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_hidrocarburos where  venta_hidrocarburo_id = $1 limit 1
		     returning his_venta_hidrocarburo_id';
		     return coalesce(v_sql,'0');
							
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 	
			v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_hospitales
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_hospital_id ,
				 venta_hospital_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	modalidad_servicio,
	medico,
	paciente,
	especialidad,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id				 		
				)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_hospital_id,
				 venta_hospital_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	modalidad_servicio,
	medico,
	paciente,
	especialidad,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_hospitales where  venta_hospital_id = $1 limit 1
		     returning his_venta_hospital_id';
		     return coalesce(v_sql,'0');
				
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 		
			v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_hoteles
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_hotel_id ,
				 venta_hotel_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	cantidad_huespedes,
	cantidad_habitaciones,
	cantidad_mayores,
	cantidad_menores,
	fecha_ingreso_hospedaje,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id				 		
				)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_hotel_id,
				 venta_hotel_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	cantidad_huespedes,
	cantidad_habitaciones,
	cantidad_mayores,
	cantidad_menores,
	fecha_ingreso_hospedaje,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_hoteles where  venta_hotel_id = $1 limit 1
		     returning his_venta_hotel_id';
		     return coalesce(v_sql,'0');
		     
		when p_tipo_documento_sector_id = 1399 --Nota: NOTA DE CREDITO-DEBITO
			then
		v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_notas_credito_debito
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_nota_credito_debito_id ,
				 venta_nota_credito_debito_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 
				 leyenda ,
	numero_factura,
	numero_autorizacion_caed,
	fecha_emision_factura,
	monto_total_original,
	monto_total_devuelto,
	monto_efectivo_credito_debito,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id				 		
				)
			
				select  
				$2,
				$3,
				$4,
				 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_nota_credito_debito_id,
				 venta_nota_credito_debito_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				
				 leyenda ,
	numero_factura,
	numero_autorizacion_caed,
	fecha_emision_factura,
	monto_total_original,
	monto_total_devuelto,
	monto_efectivo_credito_debito,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where  venta_nota_credito_debito_id = $1 limit 1
		     returning his_venta_nota_credito_debito_id';
		     return coalesce(v_sql,'0');
				
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then						
			v_sql:='INSERT INTO sre_recaudaciones.sre_fman_historicos_ventas_notas_monedas_extranjeras
				(
				 his_usuario_modificacion_id ,
				 his_motivo ,
				 his_fecha_modificacion ,
				 his_fecha_anterior,  
				 his_fecha_final ,
				 his_estado_id ,
				 usuario_registro_id ,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_nota_moneda_extranjera_id ,
				 venta_nota_moneda_extranjera_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	tipo_cambio_oficial,
	tipo_cambio,
				 fecha_emision ,
				 fecha_envio ,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id				 		
				)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 recepcion_correcta_nota_moneda_extranjera_id,
				 venta_nota_moneda_extranjera_id,
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
	tipo_cambio_oficial,
	tipo_cambio,
				 fecha_emision ,
				 $6,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id
				
				 from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where  venta_nota_moneda_extranjera_id = $1 limit 1
		     returning his_venta_nota_moneda_extranjera_id';
		     return coalesce(v_sql,'0');
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:=
			'INSERT INTO sre_recaudaciones.'||v_tabla_ventas_historico||'
			(
			 his_usuario_modificacion_id ,
			 his_motivo ,
			 his_fecha_modificacion ,
			 his_fecha_anterior,  
			 his_fecha_final ,
			 his_estado_id ,
			 usuario_registro_id ,
			 usuario_ultima_modificacion_id ,
			 '||v_campo_venta_correcta_id||' ,
			 '||v_campo_venta_id||',
			 oficina_emisor_id ,
			 persona_contribuyente_emisor_id ,
			 persona_contribuyente_beneficiario_id ,
			 sucursal_contribuyente_id ,
			 actividad_economica_id ,
			 tipo_departamento_id ,
			 tipo_documento_identidad_id ,
			 modalidad_facturacion_id ,
			 tipo_documento_fiscal_id ,
			 tipo_documento_sector_id ,
			 estado_venta_manual_documento_fiscal_id ,
			 estado_plazo_documento_fiscal_id ,
			 nit_emisor ,
			 codigo_actividad_economica ,
			 numero_sucursal ,
			 direccion ,
			 gestion ,
			 periodo ,
			 numero_documento_fiscal ,
			 caed ,
			 numero_documento ,
			 complemento,
			 nombre_razon_social ,
			 cantidad ,
			 descripcion,
			 monto_descuento_total ,
			 monto_total ,
			 leyenda ,
			 fecha_emision ,
			 fecha_envio ,
			 fecha_registro,
			 fecha_ultima_modificacion,
			 estado_id 			
			)
			
				select  
				$2,
				$3,
				$4,
					 fecha_registro,
				now(),
				$5,
				 usuario_registro_id,
				 usuario_ultima_modificacion_id ,
				 '||v_campo_venta_correcta_id||' ,
				 '||v_campo_venta_id||',
				 oficina_emisor_id ,
				 persona_contribuyente_emisor_id ,
				 persona_contribuyente_beneficiario_id ,
				 sucursal_contribuyente_id ,
				 actividad_economica_id ,
				 tipo_departamento_id ,
				 tipo_documento_identidad_id ,
				 modalidad_facturacion_id ,
				 tipo_documento_fiscal_id ,
				 tipo_documento_sector_id ,
				 estado_venta_manual_documento_fiscal_id ,
				 estado_plazo_documento_fiscal_id ,
				 nit_emisor ,
				 codigo_actividad_economica ,
				 numero_sucursal ,
				 direccion ,
				 gestion ,
				 periodo ,
				 numero_documento_fiscal ,
				 caed ,
				 numero_documento ,
				 complemento,
				 nombre_razon_social ,
				 cantidad ,
				 descripcion,
				 monto_descuento_total ,
				 monto_total ,
				 leyenda ,
				 fecha_emision ,
				 $6,
			 fecha_registro,
				 fecha_ultima_modificacion,
				 estado_id 
				 from sre_recaudaciones.'||v_tabla_ventas||' where  '||v_campo_venta_id||' = $1 limit 1
		     returning '||v_campo_historico_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_registro_historico_manual')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_registro_rectificados_manual(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta INSERT para las tablas de ventas rectificados segun el tipo sector proporcionado
PARAMETROS INGRESO
tipo documento fiscal, tipo documento sector
PARAMETROS SALIDA
Cadena que representa la consulta INSERT para las tablas de ventas rectificados
SUBSISTEMA : Facturación
FECHA CREACION : 11/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	v_tabla_recepciones_correctas varchar;
	v_campo_recepcion_correcta_factura_id varchar;
	v_campo_recepcion_paquete_factura_id varchar;
	v_campo_recepcion_factura_id varchar;
	v_campo_venta_id varchar;
	v_tabla_ventas_rectificados varchar;
	v_campo_venta_rectificado_id varchar;
	
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 					
				v_campo_venta_id:= 'venta_estandar_id';
				v_tabla_ventas_rectificados:='sre_fman_ventas_estandares_rectificados';										  
				
				v_campo_venta_rectificado_id := 'venta_estandar_rectificado_id';				
				
		when p_tipo_documento_sector_id = 1384 --FACTURA ALQUILER DE BIENES INMUEBLES
			then 			
				v_campo_venta_id:= 'venta_alquiler_id';
				v_tabla_ventas_rectificados:='sre_fman_ventas_alquileres_rectificados';										  				
				v_campo_venta_rectificado_id := 'venta_alquiler_rectificado_id';

		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			
				v_campo_venta_id:= 'venta_entidad_financiera_id';
				v_tabla_ventas_rectificados:='sre_fman_ventas_entidades_financieras_rectificados';										  				
				v_campo_venta_rectificado_id := 'venta_entidad_financiera_rectificado_id';	 		
				
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTOR EDUCATIVO
			then 			
				v_campo_venta_id:= 'venta_sector_educativo_id';
				v_tabla_ventas_rectificados:='sre_fman_ventas_sectores_educativos_rectificados';										  				
				v_campo_venta_rectificado_id := 'venta_sector_educativo_rectificado_id';	

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then
				v_campo_venta_id:= 'venta_nota_tasa_cero_id';
				v_tabla_ventas_rectificados:='sre_fman_ventas_notas_tasas_cero_rectificados';										  				
				v_campo_venta_rectificado_id := 'venta_nota_tasa_cero_rectificado_id';		

		when p_tipo_documento_sector_id = 1395 --NOTA FISCAL DE ZONA FRANCA
			then
				v_campo_venta_id:= 'venta_nota_zona_franca_id';
				v_tabla_ventas_rectificados:='sre_fman_ventas_notas_zona_franca_rectificados';										  				
				v_campo_venta_rectificado_id := 'venta_nota_zona_franca_rectificado_id';	
				
		when p_tipo_documento_sector_id =1387 --FACTURA ALCANZADA POR ICE
			then
			
		        v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_alcanzadas_ice_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_alcanzada_ice_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
				      monto_ice
			)
			VALUES
			(
				$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,	$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,$32							
		        ) returning venta_alcanzada_ice_rectificado_id';		
		   return coalesce(v_sql,'0');
				
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_comercial_exportacion_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	direccion_comprador,
	incoterm,
	puerto_destino,
	lugar_destino,
	codigo_pais,
	monto_total_puerto,
	precio_valor_bruto,
	gastos_transporte_frontera,
	gastos_seguro_frontera,
	total_fob_frontera,
	monto_transporte_frontera,
	monto_seguro_internacional,
	otros_montos
				     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45							
		        ) returning venta_comercial_exportacion_rectificado_id';		
		   return coalesce(v_sql,'0');
		   
		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_libres_consignaciones_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_libre_consignacion_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      
				      
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	
	remitente,
	consignatario,
	lugar_destino,
	codigo_pais,
	lugar_acopio_puerto				     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,		    	$23,	$24,$25,$26,$27,$28,$29,$30,$31       ,$46, $47,$36,$37,$48							
		        ) returning venta_libre_consignacion_rectificado_id';		
		   return coalesce(v_sql,'0');
		   	
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
		v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_hidrocarburos_rectificados
			(
				usuario_registro_id, 
				 usuario_ultima_modificacion_id, 				
				venta_hidrocarburo_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	codigo_pais,
	placa_vehiculo,
	tipo_envase,
	monto_ley_317,
	monto_total_sujeto_iva		     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,    $37,$49,$50,$51,$52						
		        ) returning venta_hidrocarburo_rectificado_id';		


		return coalesce(v_sql,'0');
							
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 	
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_hospitales_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_hospital_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	modalidad_servicio,
	medico,
	paciente,
	especialidad	     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,    $53,$54,$55,$56						
		        ) returning venta_hospital_rectificado_id';		
		   return coalesce(v_sql,'0');
				
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_hoteles_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_hotel_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	cantidad_huespedes,
	cantidad_habitaciones,
	cantidad_mayores,
	cantidad_menores,
	fecha_ingreso_hospedaje
		     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,    $57,$58,$59,$60,$61						
		        ) returning venta_hotel_rectificado_id';		
		   return coalesce(v_sql,'0');		

		when p_tipo_documento_sector_id = 1399 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_notas_credito_debito_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_nota_credito_debito_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	numero_factura,
	numero_autorizacion_caed,
	fecha_emision_factura,
	monto_total_original,
	monto_total_devuelto,
	monto_efectivo_credito_debito
		     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,    $62,$63,$64,$65,$66,$67						
		        ) returning venta_nota_credito_debito_rectificado_id';		
		   return coalesce(v_sql,'0');		
		   	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then						
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras_rectificados
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				venta_nota_moneda_extranjera_id, 
				oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id,
	tipo_cambio_oficial,
	tipo_cambio
		     
			)
			VALUES
			($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,	$17,	$18,	$19, $20,	$21,	$22,	$23,	$24,$25,$26,$27,$28,$29,$30,$31,    $68,$69						
		        ) returning venta_nota_moneda_extranjera_rectificado_id';		
		   return coalesce(v_sql,'0');
		   
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:= 'INSERT INTO sre_recaudaciones.'||v_tabla_ventas_rectificados||'
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				'||v_campo_venta_id||', 
				      oficina_emisor_id,
				      persona_contribuyente_emisor_id,
				      persona_contribuyente_beneficiario_id,
				      sucursal_contribuyente_id,
				      actividad_economica_id,
				      tipo_departamento_id,
				      tipo_documento_identidad_id,
				      modalidad_facturacion_id,
				      tipo_documento_fiscal_id,
				      tipo_documento_sector_id,
				      estado_venta_rectificatoria_id,
				      estado_plazo_documento_fiscal_id,
				      gestion,
				      periodo,
				      numero_documento_fiscal,
				      caed,
				      numero_documento,
				      complemento,
				      nombre_razon_social,
				      cantidad,
				      descripcion,
				      monto_descuento_total,
				      monto_total,
				      fecha_emision,
				      fecha_envio,
				      fecha_registro,
				      fecha_ultima_modificacion,
				      estado_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19,
				$20,
				$21,
				$22,
				$23,
				$24,
				$25,
				$26,
				$27,
				$28,
				$29,
				$30,
				$31
				
		    ) returning '||v_campo_venta_rectificado_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
       return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_consulta_recepcion_facturacion_manual_etapa_2')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_registro_ventas(p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_recepcion_correcta_id bigint, p_persona_contribuyente_id bigint, p_punto_venta_id integer, p_sucursal_id integer, p_tipo_departamento_id integer, p_tipo_ambiente_id integer, p_tipo_emision_id integer, p_tipo_modalidad_id integer, p_tipo_documento_fiscal_id integer, p_tipo_documento_identidad_id integer, p_tipo_documento_sector_id integer, p_estado_factura_id integer, p_metodo_pago_id integer, p_numero_tarjeta bigint, p_nit_emisor bigint, p_codigo_cliente character varying, p_numero_factura bigint, p_cuf character varying, p_cufd character varying, p_cuis character varying, p_direccion character varying, p_usuario character varying, p_numero_documento character varying, p_complemento character varying, p_nombre_razon_social character varying, p_monto_total numeric, p_monto_descuento numeric, p_leyenda character varying, p_fecha_emision timestamp without time zone, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_tipo_moneda_id integer, p_tipo_cambio numeric, p_monto_total_moneda numeric, p_monto_total_arendamiento numeric, p_monto_diferencia_tipo_cambio numeric, p_placa_vehiculo character varying, p_tipo_envase character varying, p_monto_ley317 numeric, p_monto_total_sujeto_iva numeric, p_codigo_pais_id integer, p_estado_notadc_id integer, p_numero_notadc bigint, p_monto_total_original numeric, p_monto_total_devuelto numeric, p_monto_efectivo_credito_debito numeric, p_numero_autorizacion_cuf character varying, p_fecha_emision_factura timestamp without time zone)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='';	
begin
	if (p_tipo_documento_fiscal_id=v_factura)then 
			if(p_tipo_documento_sector_id=1) then --sre_fac_ventas_estandares		
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_ventas_estandares
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_estandar_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
				VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id, ',',p_recepcion_correcta_id, ',',p_persona_contribuyente_id, ',',	p_punto_venta_id, ',',p_sucursal_id, ',',p_tipo_departamento_id,',', p_tipo_ambiente_id, ',',p_tipo_emision_id, ',',p_tipo_modalidad_id, ',',p_tipo_documento_fiscal_id,',', p_tipo_documento_identidad_id, ',',p_tipo_documento_sector_id, ',',p_estado_factura_id, ',',p_metodo_pago_id, ',',p_numero_tarjeta, ',',p_nit_emisor, ',''',p_codigo_cliente, ''',',p_numero_factura, ',''',p_cuf, ''',''',p_cufd, ''',''',p_cuis, ''',''',p_direccion,''',''', p_usuario, ''',',p_numero_documento,',''', p_complemento, ''',''',p_nombre_razon_social,''',', p_monto_total, ',',p_monto_descuento, ',''',p_leyenda, ''',''',p_fecha_emision,''',''', p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''', p_estado_id, ''',',p_tipo_moneda_id, ',',p_tipo_cambio, ',',p_monto_total_moneda,') returning venta_estandar_id');
	     		v_sql:=replace(v_sql, ',,', ',null,');
			end if;
			
			if(p_tipo_documento_sector_id=2) then --sre_fac_recepciones_colegios
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_colegios
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_colegio_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_colegio_id';
		
			end if;
			
			if(p_tipo_documento_sector_id=3) then --sre_fac_recepciones_alquileres
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_alquileres
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_alquiler_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_alquiler_id';
		
			end if;
			
			if(p_tipo_documento_sector_id=4) then --sre_fac_recepciones_combustibles
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_ventas_combustibles				
		        (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_combustible_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda, placa_vehiculo, tipo_envase, monto_ley317, monto_total_sujeto_iva, codigo_pais_id)
				VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id, ',',p_recepcion_correcta_id, ',',p_persona_contribuyente_id, ',',	p_punto_venta_id, ',',p_sucursal_id, ',',p_tipo_departamento_id,',', p_tipo_ambiente_id, ',',p_tipo_emision_id, ',',p_tipo_modalidad_id, ',',p_tipo_documento_fiscal_id,',', p_tipo_documento_identidad_id, ',',p_tipo_documento_sector_id, ',',p_estado_factura_id, ',',p_metodo_pago_id, ',',p_numero_tarjeta, ',',p_nit_emisor, ',''',p_codigo_cliente, ''',',p_numero_factura, ',''',p_cuf, ''',''',p_cufd, ''',''',p_cuis, ''',''',p_direccion,''',''', p_usuario, ''',',p_numero_documento,',''', p_complemento, ''',''',p_nombre_razon_social,''',', p_monto_total, ',',p_monto_descuento, ',''',p_leyenda, ''',''',p_fecha_emision,''',''', p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''', p_estado_id, ''',',p_tipo_moneda_id, ',',p_tipo_cambio, ',',p_monto_total_moneda,',''',p_placa_vehiculo,''',''',p_tipo_envase,''',',p_monto_ley317,',',p_monto_total_sujeto_iva,',',p_codigo_pais_id,') returning venta_combustible_id');
	     		v_sql:=replace(v_sql, ',,', ',null,');				     						
			end if;			
			
			if(p_tipo_documento_sector_id=23) then --sre_fac_recepciones_hidrocarburos
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_hidrocarburos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_hidrocarburo_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hidrocarburo_id';			
		
			end if;
			
			if(p_tipo_documento_sector_id=5) then --sre_fac_recepciones_servicios
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_servicios
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_servicio_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_servicio_id';		
			end if;		
			
			if(p_tipo_documento_sector_id=6) then --sre_fac_recepciones_embotelladoras			
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_embotelladoras
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_embotelladora_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_embotelladora_id';		
			end if;	
					
			if(p_tipo_documento_sector_id=7) then --sre_fac_ventas_bancos
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_ventas_bancos
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_banco_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_arrendamiento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda)
				VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id, ',',p_recepcion_correcta_id, ',',p_persona_contribuyente_id, ',',	p_punto_venta_id, ',',p_sucursal_id, ',',p_tipo_departamento_id,',', p_tipo_ambiente_id, ',',p_tipo_emision_id, ',',p_tipo_modalidad_id, ',',p_tipo_documento_fiscal_id,',', p_tipo_documento_identidad_id, ',',p_tipo_documento_sector_id, ',',p_estado_factura_id, ',',p_metodo_pago_id, ',',p_numero_tarjeta, ',',p_nit_emisor, ',''',p_codigo_cliente, ''',',p_numero_factura, ',''',p_cuf, ''',''',p_cufd, ''',''',p_cuis, ''',''',p_direccion,''',''', p_usuario, ''',',p_numero_documento,',''', p_complemento, ''',''',p_nombre_razon_social,''',', p_monto_total, ',',p_monto_total_arendamiento, ',''',p_leyenda, ''',''',p_fecha_emision,''',''', p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''', p_estado_id, ''',',p_monto_descuento,',',p_tipo_moneda_id, ',',p_tipo_cambio, ',',p_monto_total_moneda,') returning venta_banco_id');	    		
				v_sql:=replace(v_sql, ',,', ',null,');
			end if;
			
			if(p_tipo_documento_sector_id=8) then --sre_fac_recepciones_hoteles
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_hoteles
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_hotel_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hotel_id';		
			end if;

			if(p_tipo_documento_sector_id=9) then --sre_fac_recepciones_hospitales
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_hospitales
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_hospital_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hospital_id';		
			end if;			

			if(p_tipo_documento_sector_id=10) then --sre_fac_recepciones_juegos
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_juegos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_juego_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_juego_id';		
			end if;
				
	end if;
	
	if (p_tipo_documento_fiscal_id=v_nota_credito_debito)then 
		v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_notas_creditos_debitos
				(usuario_registro_id,usuario_ultima_modificacion_id,recepcion_correcta_nota_credito_debito_id,persona_contribuyente_id,punto_venta_id,sucursal_id,tipo_departamento_id,tipo_ambiente_id,tipo_emision_id,tipo_modalidad_id,tipo_documento_fiscal_id,tipo_documento_identidad_id,tipo_documento_sector_id,estado_notadc_id,nit_emisor,codigo_cliente,numero_notadc,cuf,cufd,cuis,direccion,usuario,numero_documento,complemento,nombre_razon_social,monto_total_original,monto_total_devuelto,monto_efectivo_credito_debito,numero_factura,numero_autorizacion_cuf,leyenda,fecha_emision,fecha_emision_factura,fecha_registro,fecha_ultima_modificacion,estado_id)
				VALUES(',p_usuario_registro_id,',',p_usuario_ultima_modificacion_id,',',p_recepcion_correcta_id,',',p_persona_contribuyente_id,',',p_punto_venta_id,',',p_sucursal_id,',',p_tipo_departamento_id,',',p_tipo_ambiente_id,',',p_tipo_emision_id,',',p_tipo_modalidad_id,',',p_tipo_documento_fiscal_id,',',p_tipo_documento_identidad_id,',',p_tipo_documento_sector_id,',',p_estado_notadc_id,',',p_nit_emisor,',''',p_codigo_cliente,''',',p_numero_notadc,',''',p_cuf,''',''',p_cufd,''',''',p_cuis,''',''',p_direccion,''',''',p_usuario,''',''',p_numero_documento,''',''',p_complemento,''',''',p_nombre_razon_social,''',',p_monto_total_original,',',p_monto_total_devuelto,',',p_monto_efectivo_credito_debito,',',p_numero_factura,',''',p_numero_autorizacion_cuf,''',''',p_leyenda,''',''',p_fecha_emision,''',''',p_fecha_emision_factura,''',''',p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''',p_estado_id,''') returning nota_credito_debito_id');	    		
				v_sql:=replace(v_sql, ',,', ',null,');
	end if;

	
	if (p_tipo_documento_fiscal_id=v_nota_fiscal)then 
			if(p_tipo_documento_sector_id=12) then --sre_fac_recepciones_exportaciones
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_exportaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_exportacion_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_exportacion_id';		
			end if;
			
			if(p_tipo_documento_sector_id=13) then --sre_fac_recepciones_libres_consignaciones
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_libres_consignaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_libre_consignacion_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_libre_consignacion_id';		
			end if;			

			if(p_tipo_documento_sector_id=22) then --sre_fac_recepciones_tasas_ceros
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_tasas_ceros
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_tasa_cero_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_tasa_cero_id';		
			end if;			
			
			if(p_tipo_documento_sector_id=21) then --sre_fac_recepciones_turismos_receptivos
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_turismos_receptivos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_turismo_receptivo_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_turismo_receptivo_id';		
			end if;			
			
			if(p_tipo_documento_sector_id=14) then --sre_fac_recepciones_zonas_francas
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_zonas_francas
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_zona_franca_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_zona_franca_id';
			end if;			

			if(p_tipo_documento_sector_id=11) then --sre_fac_recepciones_espectaculos
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_espectaculos
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_espectaculo_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_espectaculo_id';	
			end if;			
			
			if(p_tipo_documento_sector_id=15) then --sre_fac_recepciones_espectaculos_nacionales
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_espectaculo_nacional_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_espectaculo_nacional_id';
			end if;
			
			if(p_tipo_documento_sector_id=16) then --sre_fac_recepciones_seguridades_alimentarias
			v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, recepcion_paquete_seguridad_alimentaria_id, punto_venta_id, oficina_id, sucursal_id, tipo_modalidad_id, estado_recepcion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cufd, cuis, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_seguridad_alimentaria_id';
			end if;

			if(p_tipo_documento_sector_id=17) then --sre_fac_recepciones_monedas_extranjeras
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_ventas_monedas_extranjeras
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_moneda_extranjera_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_diferencia_tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda)
				VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id, ',',p_recepcion_correcta_id, ',',p_persona_contribuyente_id, ',',	p_punto_venta_id, ',',p_sucursal_id, ',',p_tipo_departamento_id,',', p_tipo_ambiente_id, ',',p_tipo_emision_id, ',',p_tipo_modalidad_id, ',',p_tipo_documento_fiscal_id,',', p_tipo_documento_identidad_id, ',',p_tipo_documento_sector_id, ',',p_estado_factura_id, ',',p_metodo_pago_id, ',',p_numero_tarjeta, ',',p_nit_emisor, ',''',p_codigo_cliente, ''',',p_numero_factura, ',''',p_cuf, ''',''',p_cufd, ''',''',p_cuis, ''',''',p_direccion,''',''', p_usuario, ''',',p_numero_documento,',''', p_complemento, ''',''',p_nombre_razon_social,''',', p_monto_total, ',',p_monto_diferencia_tipo_cambio, ',''',p_leyenda, ''',''',p_fecha_emision,''',''', p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''', p_estado_id, ''',',p_monto_descuento,',',p_tipo_moneda_id,',',p_tipo_cambio, ',',p_monto_total_moneda,') returning venta_moneda_extranjera_id');	    		
				v_sql:=replace(v_sql, ',,', ',null,');	
			end if;			
	end if;	
	
	if (p_tipo_documento_fiscal_id=v_boleta_contingencia)then 
	
	end if;	
	
	if (p_tipo_documento_fiscal_id=v_documento_equivalente)then 
	
	end if;	
				
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_registro_ventas')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_registro_ventas_detalle(p_tipo_documento_sector_id integer, p_tipo_documento_fiscal_id integer, p_usuario_registro_id bigint, p_usuario_ultima_modificacion_id bigint, p_venta_estandar_id bigint, p_producto_id character varying, p_producto_sin_id bigint, p_actividad_economica_id bigint, p_numero_serie character varying, p_descripcion character varying, p_cantidad numeric, p_precio_unitario numeric, p_monto_descuento numeric, p_subtotal numeric, p_fecha_registro timestamp without time zone, p_fecha_ultima_modificacion timestamp without time zone, p_estado_id character varying, p_unidad_medida character varying, p_tipo_detalle_transaccion integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='';	
begin
	if (p_tipo_documento_fiscal_id=v_factura)then 
			if(p_tipo_documento_sector_id=1) then --sre_fac_ventas_estandares		         
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_estandares
				(usuario_registro_id, usuario_ultima_modificacion_id, venta_estandar_id, producto_id, producto_sin_id, actividad_economica_id, numero_serie, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)				    
	            VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id,',', p_venta_estandar_id, ',''',p_producto_id, ''',',p_producto_sin_id, ',',p_actividad_economica_id,',''', p_numero_serie,''',''',p_descripcion,''',',p_cantidad, ',',p_precio_unitario, ',',p_monto_descuento, ',',p_subtotal, ',''',p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''',p_estado_id,''',''',p_unidad_medida,''') returning detalle_venta_estandar_id');			
	     		v_sql:=replace(v_sql, ',,', ',null,');     		
			end if;
			
			if(p_tipo_documento_sector_id=2) then --sre_fac_recepciones_colegios
				v_sql:='';
		
			end if;
			
			if(p_tipo_documento_sector_id=3) then --sre_fac_recepciones_alquileres
				v_sql:='';
		
			end if;
			
			if(p_tipo_documento_sector_id=4) then --sre_fac_recepciones_combustibles
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_combustibles								   
			    (usuario_registro_id, usuario_ultima_modificacion_id, venta_combustible_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)
	            VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id,',', p_venta_estandar_id, ',''',p_producto_id, ''',',p_producto_sin_id, ',',p_actividad_economica_id,',''',p_descripcion,''',',p_cantidad, ',',p_precio_unitario, ',',p_monto_descuento, ',',p_subtotal, ',''',p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''',p_estado_id,''',''',p_unidad_medida,''') returning detalle_venta_combustible_id');
				v_sql:=replace(v_sql, ',,', ',null,');	
			end if;			
			
			if(p_tipo_documento_sector_id=23) then --sre_fac_recepciones_hidrocarburos
				v_sql:='';					
			end if;
			
			if(p_tipo_documento_sector_id=5) then --sre_fac_recepciones_servicios
				v_sql:='';		
			end if;		
			
			if(p_tipo_documento_sector_id=6) then --sre_fac_recepciones_embotelladoras			
				v_sql:='';		
			end if;	
					
			if(p_tipo_documento_sector_id=7) then --sre_fac_ventas_bancos
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_bancos
				(usuario_registro_id, usuario_ultima_modificacion_id, venta_banco_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)				    
	            VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id,',', p_venta_estandar_id, ',''',p_producto_id, ''',',p_producto_sin_id, ',',p_actividad_economica_id,',''',p_descripcion,''',',p_cantidad, ',',p_precio_unitario, ',',p_monto_descuento, ',',p_subtotal, ',''',p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''',p_estado_id,''',''',p_unidad_medida,''') returning detalle_venta_banco_id');
				v_sql:=replace(v_sql, ',,', ',null,');
			end if;
			
			if(p_tipo_documento_sector_id=8) then --sre_fac_recepciones_hoteles
				v_sql:='';		
			end if;

			if(p_tipo_documento_sector_id=9) then --sre_fac_recepciones_hospitales
				v_sql:='';		
			end if;			

			if(p_tipo_documento_sector_id=10) then --sre_fac_recepciones_juegos
				v_sql:='';		
			end if;
				
	end if;
	
	if (p_tipo_documento_fiscal_id=v_nota_credito_debito)then 
		v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_detalles_notas_creditos
		(usuario_registro_id, usuario_ultima_modificacion_id, nota_credito_debito_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida, tipo_detalle_transaccion)				    
        VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id,',', p_venta_estandar_id, ',''',p_producto_id, ''',',p_producto_sin_id, ',',p_actividad_economica_id,',''',p_descripcion,''',',p_cantidad, ',',p_precio_unitario, ',',p_subtotal, ',''',p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''',p_estado_id,''',''',p_unidad_medida,''',',p_tipo_detalle_transaccion,') returning detalle_nota_credito_debito_id');
		v_sql:=replace(v_sql, ',,', ',null,');
	end if;

	
	if (p_tipo_documento_fiscal_id=v_nota_fiscal)then 
			if(p_tipo_documento_sector_id=12) then --sre_fac_recepciones_exportaciones
				v_sql:='';			
			end if;
			
			if(p_tipo_documento_sector_id=13) then --sre_fac_recepciones_libres_consignaciones
				v_sql:='';			
			end if;			

			if(p_tipo_documento_sector_id=22) then --sre_fac_recepciones_tasas_ceros
				v_sql:='';			
			end if;			
			
			if(p_tipo_documento_sector_id=21) then --sre_fac_recepciones_turismos_receptivos
			end if;			
				v_sql:='';			
			if(p_tipo_documento_sector_id=14) then --sre_fac_recepciones_zonas_francas
				v_sql:='';	
			end if;			

			if(p_tipo_documento_sector_id=11) then --sre_fac_recepciones_espectaculos
				v_sql:='';		
			end if;			
			
			if(p_tipo_documento_sector_id=15) then --sre_fac_recepciones_espectaculos_nacionales
				v_sql:='';	
			end if;
			
			if(p_tipo_documento_sector_id=16) then --sre_fac_recepciones_seguridades_alimentarias
				v_sql:='';	
			end if;

			if(p_tipo_documento_sector_id=17) then --sre_fac_recepciones_monedas_extranjeras
				v_sql:= CONCAT('INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_monedas_extranjeras
				(usuario_registro_id, usuario_ultima_modificacion_id, venta_moneda_extranjera_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)				    
	            VALUES(',p_usuario_registro_id,',', p_usuario_ultima_modificacion_id,',', p_venta_estandar_id, ',''',p_producto_id, ''',',p_producto_sin_id, ',',p_actividad_economica_id,',''',p_descripcion,''',',p_cantidad, ',',p_precio_unitario, ',',p_monto_descuento, ',',p_subtotal, ',''',p_fecha_registro,''',''',p_fecha_ultima_modificacion,''',''',p_estado_id,''',''',p_unidad_medida,''') returning detalle_venta_moneda_extranjera_id');
				v_sql:=replace(v_sql, ',,', ',null,');	
			end if;			
	end if;	
	
	if (p_tipo_documento_fiscal_id=v_boleta_contingencia)then 
	
	end if;	
	
	if (p_tipo_documento_fiscal_id=v_documento_equivalente)then 
	
	end if;	
				
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_registro_ventas_detalle')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_registro_ventas_facturacion_manual(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, v_tipo_crud character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Armado de la consulta que representa el script de INSERT o UPDATE para ventas
PARAMETROS INGRESO
numero tipo_documento_sector_id, numero tipo_documento_fiscal_id y tipo de CRUD (C) creacion (U) actualizacion 
PARAMETROS SALIDA
Script de INSERT o UPDATE para las tablas de ventas de acuerdo al sector y el tipo de CRUD
SUBSISTEMA : Facturación
FECHA CREACION : 03/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	
	v_tabla_ventas varchar;
	v_campo_venta_id varchar;
	v_campo_recepcion_correcta_factura_id varchar;
	v_sql varchar:='0';	
begin
	
	case 
		when v_tipo_crud = 'C' then
				case
					when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
						then 	
						
							v_tabla_ventas:='sre_fman_ventas_estandares';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_estandar_id';				
							v_campo_venta_id := 'venta_estandar_id';
							
					when p_tipo_documento_sector_id = 1384 --FACTURA ALQUILERES
						then 	
						
							v_tabla_ventas:='sre_fman_ventas_alquileres';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_alquiler_id';				
							v_campo_venta_id := 'venta_alquiler_id';
							
					when p_tipo_documento_sector_id = 1388 --FACTURA ENTIDADES FINANCIERAS
						then 	
						
							v_tabla_ventas:='sre_fman_ventas_entidades_financieras';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_entidad_financiera_id';				
							v_campo_venta_id := 'venta_entidad_financiera_id';
							
					when p_tipo_documento_sector_id = 1383 --FACTURA SECTOR EDUCATIVO
						then 	
						
							v_tabla_ventas:='sre_fman_ventas_sectores_educativos';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_sector_educativo_id';				
							v_campo_venta_id := 'venta_sector_educativo_id';
							
					when p_tipo_documento_sector_id = 1825 --NOTA TASA CERO
						then 	
						
							v_tabla_ventas:='sre_fman_ventas_notas_tasas_cero';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_tasa_cero_id';				
							v_campo_venta_id := 'venta_nota_tasa_cero_id';
							
					when p_tipo_documento_sector_id = 1395 --NOTA ZONA FRANCA
						then 	
						
							v_tabla_ventas:='sre_fman_ventas_notas_zona_franca';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_zona_franca_id';				
							v_campo_venta_id := 'venta_nota_zona_franca_id';
							
					when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA POR ICE
						then 	
						
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_alcanzadas_ice(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_alcanzada_ice, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
						        monto_ice				
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$37
					    ) returning venta_alcanzada_ice_id';
					   return coalesce(v_sql,'0');	   

					when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
						then 	
						
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_comercial_exportacion_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
						           direccion_comprador,
							   incoterm,
							   puerto_destino,
							   lugar_destino,
							   codigo_pais,
							   monto_total_puerto,
							   precio_valor_bruto,
							   gastos_transporte_frontera,
							   gastos_seguro_frontera,
							   total_fob_frontera,
							   monto_transporte_frontera,
							   monto_seguro_internacional,
							   otros_montos				
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50
					    ) returning venta_comercial_exportacion_id';
					   return coalesce(v_sql,'0');	
					   
					when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACION LIBRE CONSIGNACION
						then 	
						
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_libres_consignaciones(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_libre_consignacion_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							
							numero_documento,
							
							
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
									
									remitente,
									consignatario,
									lugar_destino,
									codigo_pais,
									lugar_acopio_puerto
			
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18    ,$20       ,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $51,$52,$41,$42,$53
					    ) returning venta_libre_consignacion_id';
					   return coalesce(v_sql,'0');	

					when p_tipo_documento_sector_id = 1385 --FACTURA COMERCIALIZACION DE HIDROCARBUROS
						then 	
						
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_hidrocarburos(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_hidrocarburo_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
									codigo_pais,
									placa_vehiculo,
									tipo_envase,
									monto_ley_317,
									monto_total_sujeto_iva
			
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $42,$54,$55,$56,$57
					    ) returning venta_hidrocarburo_id';
					   return coalesce(v_sql,'0');	   

					when p_tipo_documento_sector_id = 1390 --FACTURA HOSPITALES/CLINICAS
						then 	
						
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_hospitales(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_hospital_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
								modalidad_servicio,
								medico,
								paciente,
								especialidad			
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $58,$59,$60,$61
					    ) returning venta_hospital_id';
					   return coalesce(v_sql,'0');	 

				when p_tipo_documento_sector_id = 1389 --FACTURA HOTELES
						then 	
						
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_hoteles(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_hotel_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
								cantidad_huespedes,
								cantidad_habitaciones,
								cantidad_mayores,
								cantidad_menores,
								fecha_ingreso_hospedaje		
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $62,$63,$64,$65,$66
					    ) returning venta_hotel_id';
					   return coalesce(v_sql,'0');	

					when p_tipo_documento_sector_id = 1399 --FACTURA NOTA CREDITO DEBITO 
						then 							
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_notas_credito_debito(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_nota_credito_debito_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
								numero_factura,
								numero_autorizacion_caed,
								fecha_emision_factura,
								monto_total_original,
								monto_total_devuelto,
								monto_efectivo_credito_debito	
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23    ,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $67,$68,$69,$70,$71,$72
					    ) returning venta_nota_credito_debito_id';
					   return coalesce(v_sql,'0');	

				when p_tipo_documento_sector_id = 1398 --FACTURA NOTA COMPRA VENTA DE MONEDA EXTRANJERA
						then 							
						v_sql:='INSERT INTO sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							recepcion_correcta_nota_moneda_extranjera_id, 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id, 
										tipo_cambio_oficial,
										tipo_cambio
						)
						VALUES
						(
							$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,   $73,$74
					    ) returning venta_nota_moneda_extranjera_id';
					   return coalesce(v_sql,'0');	
					   
					else --del case
							v_sql:='0';
				end case;
									
				v_sql:='INSERT INTO sre_recaudaciones.'||v_tabla_ventas||'(
							usuario_registro_id, 
							usuario_ultima_modificacion_id, 
							'||v_campo_recepcion_correcta_factura_id||', 
							persona_contribuyente_emisor_id,
							persona_contribuyente_beneficiario_id,
							sucursal_contribuyente_id,
							tipo_documento_identidad_id,
							tipo_departamento_id,
							modalidad_facturacion_id,
							tipo_documento_fiscal_id,
							tipo_documento_sector_id,
							estado_venta_manual_documento_fiscal_id,
							gestion,
							periodo,
							numero_sucursal,
							nit_emisor,
							numero_documento_fiscal,
							caed,
							direccion,
							numero_documento,
							complemento,
							nombre_razon_social,
							descripcion,
							monto_total,
							leyenda,
							fecha_emision,
							fecha_registro,
							fecha_ultima_modificacion,
							estado_id,
							oficina_emisor_id,
							actividad_economica_id,
							codigo_actividad_economica,
							estado_plazo_documento_fiscal_id							
									
						)
						VALUES
						(
							$1,
							$2,
							$3,
							$4,
							$5,
							$6,
							$7,
							$8,
							$9,
							$10,
							$11,
							$12,
							$13,
							$14,
							$15,
							$16,
							$17,
							$18,
							$19,
							$20,
							$21,
							$22,
							$23,
							$24,
							$25,
							$26,
							$27,
							$28,
							$29,
							$30,
							$31,
							$32,
							$33
													
							
					    ) returning '||v_campo_venta_id;

			
			when v_tipo_crud = 'U' then---------------------ANTES GUARDAR HISTORICO ACTUALIZAR 
				case
					when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
						then 					
							v_tabla_ventas:='sre_fman_ventas_estandares';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_estandar_id';				
							v_campo_venta_id := 'venta_estandar_id';
					when p_tipo_documento_sector_id = 1384 --FACTURA ALQUILERES
						then 				
							v_tabla_ventas:='sre_fman_ventas_alquileres';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_alquiler_id';				
							v_campo_venta_id := 'venta_alquiler_id';
							
					when p_tipo_documento_sector_id = 1388 --FACTURA ENTIDADES FINANCIERAS
						then 	
							v_tabla_ventas:='sre_fman_ventas_entidades_financieras';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_entidad_financiera_id';				
							v_campo_venta_id := 'venta_entidad_financiera_id';
							
					when p_tipo_documento_sector_id = 1383 --FACTURA SECTOR EDUCATIVO
						then 	
							v_tabla_ventas:='sre_fman_ventas_sectores_educativos';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_sector_educativo_id';				
							v_campo_venta_id := 'venta_sector_educativo_id';
							
					when p_tipo_documento_sector_id = 1825 --NOTA TASA CERO
						then 							
							v_tabla_ventas:='sre_fman_ventas_notas_tasas_cero';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_tasa_cero_id';				
							v_campo_venta_id := 'venta_nota_tasa_cero_id';
							
					when p_tipo_documento_sector_id = 1395 --NOTA ZONA FRANCA
						then 							
							v_tabla_ventas:='sre_fman_ventas_notas_zona_franca';										  
							v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_zona_franca_id';				
							v_campo_venta_id := 'venta_nota_zona_franca_id';

					when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA POR ICE
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_alcanzadas_ice
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_alcanzada_ice  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
							
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,
							monto_ice =$37							
					     WHERE venta_alcanzada_ice_id = $36     returning venta_alcanzada_ice_id';
						return coalesce(v_sql,'0');	   

					when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_comercial_exportacion_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
						
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

							   direccion_comprador = $38,
							   incoterm = $39,
							   puerto_destino = $40,
							   lugar_destino = $41,
							   codigo_pais = $42,
							   monto_total_puerto = $43,
							   precio_valor_bruto = $44,
							   gastos_transporte_frontera = $45,
							   gastos_seguro_frontera = $46,
							   total_fob_frontera = $47,
							   monto_transporte_frontera = $48,
							   monto_seguro_internacional = $49,
							   otros_montos = $50
							
					     WHERE venta_comercial_exportacion_id = $36     returning venta_comercial_exportacion_id';
						return coalesce(v_sql,'0');	   

				when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACION EN LIBRE CONSIGNACION
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_libres_consignaciones
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_libre_consignacion_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							
							numero_documento = $20,
							
							
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
							
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

							   
							   remitente =$51,
							   consignatario = $52,
							   lugar_destino = $41,
							   codigo_pais = $42,
							   lugar_acopio_puerto = $53

					     WHERE venta_libre_consignacion_id = $36     returning venta_libre_consignacion_id';
						return coalesce(v_sql,'0');	   

				when p_tipo_documento_sector_id = 1385 --FACTURA COMERCIALIZACION DE HIDROCARBUROS
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_hidrocarburos
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_hidrocarburo_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
							
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

							   	codigo_pais = $42,
								placa_vehiculo = $54,
								tipo_envase = $55,
								monto_ley_317 = $56,
								monto_total_sujeto_iva = $57

					     WHERE venta_hidrocarburo_id = $36     returning venta_hidrocarburo_id';
						return coalesce(v_sql,'0');	   
						
				when p_tipo_documento_sector_id = 1390 --FACTURA HOSPITALES/CLINICAS
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_hospitales
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_hospital_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
							
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

							   	modalidad_servicio = $58,
								medico = $59,
								paciente = $60,
								especialidad = $61
								

					     WHERE venta_hospital_id = $36     returning venta_hospital_id';
						return coalesce(v_sql,'0');	

				when p_tipo_documento_sector_id = 1389 --FACTURA HOTELES
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_hoteles
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_hotel_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
						
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

								cantidad_huespedes = $62,
								cantidad_habitaciones = $63,
								cantidad_mayores = $64,
								cantidad_menores = $65,
								fecha_ingreso_hospedaje = $66

					     WHERE venta_hotel_id = $36  returning venta_hotel_id';
						return coalesce(v_sql,'0');	

				when p_tipo_documento_sector_id = 1399 --NOTA CREDITO DEBITO
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_notas_credito_debito
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_nota_credito_debito_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							
							leyenda = $25,
							fecha_emision = $26,
						
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

								numero_factura = $67,
								numero_autorizacion_caed = $68,
								fecha_emision_factura = $69,
								monto_total_original = $70,
								monto_total_devuelto = $71,
								monto_efectivo_credito_debito = $72

					     WHERE venta_nota_credito_debito_id = $36  returning venta_nota_credito_debito_id';
						return coalesce(v_sql,'0');	

				when p_tipo_documento_sector_id = 1398 --NOTA COMPRA VENTA MONEDA EXTRANJERA
						then 	
						v_sql:='update sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							recepcion_correcta_nota_moneda_extranjera_id  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
							
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33,

									tipo_cambio_oficial = $73,
									tipo_cambio = $74

					     WHERE venta_nota_moneda_extranjera_id = $36  returning venta_nota_moneda_extranjera_id';
						return coalesce(v_sql,'0');	
														
				else --del case
							v_sql:='0';
				end case;

				v_sql:='update sre_recaudaciones.'||v_tabla_ventas||'
							set 
							usuario_registro_id  = $1,
							usuario_ultima_modificacion_id = $2,
							'||v_campo_recepcion_correcta_factura_id||'  = $3,
							persona_contribuyente_emisor_id = $4,
							persona_contribuyente_beneficiario_id = $5,
							sucursal_contribuyente_id = $6,
							tipo_documento_identidad_id = $7,
							tipo_departamento_id = $8,
							modalidad_facturacion_id = $9,
							tipo_documento_fiscal_id = $10,
							tipo_documento_sector_id = $11,
							estado_venta_manual_documento_fiscal_id = $12,
							gestion = $13,
							periodo = $14,
							numero_sucursal = $15,
							nit_emisor = $16,
							numero_documento_fiscal = $17,
							caed = $18,
							direccion = $19,
							numero_documento = $20,
							complemento = $21,
							nombre_razon_social = $22,
							descripcion = $23,
							monto_total = $24,
							leyenda = $25,
							fecha_emision = $26,
							
							fecha_ultima_modificacion = $28,
							estado_id = $29,
							oficina_emisor_id = $30,
							actividad_economica_id = $31,
							codigo_actividad_economica = $32,
							estado_plazo_documento_fiscal_id = $33
							
					     WHERE '||v_campo_venta_id||' = $36
					     returning '||v_campo_venta_id;
			
			else 
			v_sql:='0';
			end case;
	
	return coalesce(v_sql,'0');	   	    	  		    

  EXCEPTION
  when others
    then
            return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_registro_ventas_facturacion_manual')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_total_recepciones_paquetes(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Cuenta recepciones correctas correspondiente al documento sector (ativos)
PARAMETROS INGRESO
 p_tipo_documento_sector_id -> código del documentos sector
PARAMETROS SALIDA
 v_sql -> intruccion sql para la obtención de cantidad de registros en tabla
 v_sql -> cadena '0' en caso de no econtrar documento sector ó excepción 
SUBSISTEMA : Facturación
FECHA CREACION : 07/09/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 
 v_sql varchar:=''; 
begin
 
 case
 when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
  then     
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_estandares where recepcion_paquete_estandar_id=$1 and estado_id=''AC'' limit 1';
     
 when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_colegios where recepcion_paquete_colegio_id=$1 and estado_id=''AC'' limit 1';
  
 when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
  then    
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres where recepcion_paquete_alquiler_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles where recepcion_paquete_combustible_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_servicios where recepcion_paquete_servicio_id=$1 and estado_id=''AC'' limit 1';
  
 when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
  then  
    v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras where recepcion_paquete_embotelladora_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_bancos where recepcion_paquete_banco_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles where recepcion_paquete_hotel_id=$1 and estado_id=''AC'' limit 1';
  
 when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales where recepcion_paquete_hospital_id=$1 and estado_id=''AC'' limit 1';
  
 when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_juegos where recepcion_paquete_juego_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos where recepcion_paquete_espectaculo_id=$1 and estado_id=''AC'' limit 1';
  
 when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones where recepcion_paquete_exportacion_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones where recepcion_paquete_libre_consignacion_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas where recepcion_paquete_zona_franca_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales where recepcion_paquete_espectaculo_nacional_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias where recepcion_paquete_seguridad_alimentaria_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras where recepcion_paquete_moneda_extranjera_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
  then
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos where recepcion_paquete_nota_credito_debito_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
  then
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones where recepcion_paquete_nota_conciliacion_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
  then
    v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos where recepcion_paquete_boleto_aereo_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
  then     
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos where recepcion_paquete_turismo_receptivo_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
  then  
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros where recepcion_paquete_tasa_cero_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
  then   
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos where recepcion_paquete_hidrocarburo_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
  then   
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb where recepcion_paquete_exportacion_ypfb_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
  then   
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras where recepcion_paquete_exportacion_minera_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
  then   
    v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb where recepcion_paquete_libre_consignacion_ypfb_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
  then
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas where recepcion_paquete_minera_interna_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
  then
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas where recepcion_paquete_prevalorada_id=$1 and estado_id=''AC'' limit 1';

 when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
  then
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones where recepcion_paquete_telecomunicacion_id=$1 and estado_id=''AC'' limit 1';
 
 when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
  then
  v_sql:= 'select total_documentos_fiscales, total_validos, total_invalidos from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv where recepcion_paquete_nota_credito_debito_sfv_id=$1 and estado_id=''AC'' limit 1';
 
 else 
  v_sql:='0';

 end case;
 
 return coalesce(v_sql,'0');
 
 EXCEPTION
 when others
 then
  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_contar_recepciones_correctas');
  v_sql:='0';
  return v_sql;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_ventas(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_tabla_ventas varchar;
v_venta_factura_id varchar;                      
                
--Campos: sre_fac_ventas_alquileres
v_alquileres_recepcion_correcta_alquiler_id int8;
v_alquileres_periodo_facturado varchar(50);
  
   --Campos: sre_fac_ventas_bancos
v_bancos_recepcion_correcta_banco_id int8;
v_bancos_monto_total_arrendamiento numeric(20,5);
                
--Campos: sre_fac_ventas_colegios
v_colegios_recepcion_correcta_colegio_id int8;
v_colegios_periodo_facturado varchar(50);
v_colegios_nombre_estudiante varchar(200);
                
--Campos: sre_fac_ventas_combustibles
v_combustible_recepcion_correcta_combustible_id int8;
v_combustible_codigo_pais_id int4; 
v_combustible_placa_vehiculo varchar(12);
v_combustible_tipo_envase varchar(50);
v_combustible_monto_ley317 numeric(20,5);
v_combustible_monto_total_sujeto_iva numeric(20,5);

                
--Campos: sre_fac_ventas_embotelladoras
v_embotelladoras_recepcion_correcta_embotelladora_id int8;
v_embotelladoras_monto_ice numeric(20,5);
                
--Campos: sre_fac_ventas_espectaculos
v_espectaculos_recepcion_correcta_espectaculo_id int8;
v_espectaculos_tipo_evento varchar(100);
v_espectaculos_lugar_evento varchar(100);
v_espectaculos_artista_evento varchar(100);
v_espectaculos_nit_salon int8;
v_espectaculos_direccion_salon varchar(150);
v_espectaculos_fecha_evento timestamp;

           
--Campos: sre_fac_ventas_espectaculos_nacionales
v_espectaculos_nac_recepcion_correcta_espectaculo_nacional_id int8;
v_espectaculos_nac_tipo_evento varchar(100);
v_espectaculos_nac_lugar_evento varchar(100);
v_espectaculos_nac_fecha_evento timestamp;
v_espectaculos_nac_artista_evento varchar(100);
v_espectaculos_nac_nit_salon int8;
v_espectaculos_nac_direccion_salon varchar(100);
                
--Campos: sre_fac_ventas_exportaciones
v_exportaciones_recepcion_correcta_exportacion_id int8;
v_exportaciones_otros_montos numeric(20,5);
v_exportaciones_monto_total_puerto numeric(20,5);
v_exportaciones_precio_valor_bruto numeric(20,5);
v_exportaciones_gastos_transporte_frontera numeric(20,5);
v_exportaciones_gastos_seguro_frontera numeric(20,5);
v_exportaciones_total_fob_frontera numeric(20,5);
v_exportaciones_monto_transporte_frontera numeric(20,5);
v_exportaciones_monto_seguro_internacional numeric(20,5);
v_exportaciones_incoterm varchar(100);
v_exportaciones_lugar_destino varchar(100);
v_exportaciones_puerto_destino varchar(100);
v_exportaciones_tipo_pais_id int4;
v_exportaciones_direccion_comprador varchar(150);

--Campos: sre_fac_ventas_hidrocarburos
v_hidrocarburos_recepcion_correcta_hidrocarburo_id int8;
v_hidrocarburos_ciudad varchar(100);
v_hidrocarburos_nombre_propietario varchar(100);
v_hidrocarburos_nombre_representante_legal varchar(100);
v_hidrocarburos_condicion_pago varchar(150);
v_hidrocarburos_periodo_entrega varchar(150);
v_hidrocarburos_monto_iehd numeric(20,5);

--Excluir
v_hidrocarburos_numero_tarjeta int8;
                
--Campos: sre_fac_ventas_hospitales
v_hospitales_recepcion_correcta_hospital_id int8;
v_hospitales_modalidad_servicio varchar(100);
                
--Campos: sre_fac_ventas_hoteles
v_hoteles_recepcion_correcta_hotel_id int8;
v_hoteles_cantidad_huespedes int4 ;
v_hoteles_cantidad_habitaciones int4 ;
v_hoteles_cantidad_mayores int4;
v_hoteles_cantidad_menores int4;
v_hoteles_fecha_ingreso_hospedaje timestamp;

--Campos: sre_fac_ventas_juegos
v_juegos_recepcion_correcta_juego_id int8;
v_juegos_monto_total_sujeto_ipj numeric(20,5);
v_juegos_monto_total_ij numeric(20,5);
                
--Campos: sre_fac_ventas_libres_consignaciones
v_libres_con_recepcion_correcta_libre_consignacion_id int8;
v_libres_con_remitente varchar(100) ;
v_libres_con_consignatario varchar(100) ;
v_libres_con_tipo_pais_id int4 ;
v_libres_con_lugar_destino varchar(100) ;
v_libres_con_lugar_acopio_puerto varchar(100) ;


--Excluir
v_libres_con_complemento varchar(5);
v_libres_con_nombre_razon_social varchar(200);


--Campos: sre_fac_ventas_monedas_extranjeras
v_monedas_ext_recepcion_correcta_moneda_extranjera_id int8;
v_monedas_ext_monto_diferencia_tipo_cambio numeric(20,5) ;

--Campos: sre_fac_ventas_seguridades_alimentarias
v_seguridades_ali_recepcion_correcta_seguridad_alimentaria_id int8;

--Campos: sre_fac_ventas_servicios
v_servicios_recepcion_correcta_servicio_id int8;
v_servicios_numero_medidor varchar(100);
v_servicios_ciudad varchar(100);
v_servicios_zona varchar(100);
v_servicios_gestion int4;
v_servicios_mes varchar(10);
v_servicios_domicilio_comprador varchar(200);
v_servicios_consumo_kwh numeric(20,5);
v_servicios_consumo_metros_cubicos numeric(20,5);
v_servicios_monto_descuento_ley1886 numeric(20,5);
v_servicios_tasa_aseo numeric(20,5);
v_servicios_tasa_alumbrado numeric(20,5);
v_servicios_monto_total_sujeto_iva numeric(20,5) ;

                
--Campos: sre_fac_ventas_tasas_ceros
v_tasas_ceros_recepcion_correcta_tasa_cero_id int8;

--Campos: sre_fac_ventas_turismos_receptivos
v_turismos_rec_recepcion_correcta_turismo_receptivo_id int8;
v_turismos_rec_cantidad_huespedes int4;
v_turismos_rec_cantidad_habitaciones int4;
v_turismos_rec_cantidad_mayores int4;
v_turismos_rec_cantidad_menores int4;
v_turismos_rec_fecha_ingreso_hospedaje timestamp;
v_turismos_rec_nit_operador_turismo varchar(20);
v_turismos_rec_razon_social_operador varchar(100);

--Campos: sre_fac_ventas_zonas_francas
v_zonas_fra_recepcion_correcta_zona_franca_id int8;
v_zonas_fra_numero_parte_recepcion varchar(100);

--Tipos documentos Fiscales       
v_factura integer:=1;
v_nota_credito_debito integer:=2;
v_nota_fiscal integer:=3;
v_boleta_contingencia integer:=4;
v_documento_equivalente integer:=5;
                
v_sql varchar:='';   
v_campos varchar:='';
v_valores varchar:='';

begin
	
--ADD 27/02/2018
--asicionado para la consulta
                if (p_tipo_documento_fiscal_id=v_factura)then 
                       if(p_tipo_documento_sector_id=1) then --sre_fac_recepciones_correctas_estandares
                                       v_tabla_ventas := 'sre_fac_ventas_estandares';
                                       v_venta_factura_id := 'venta_estandar_id';
                                       v_campos :='recepcion_correcta_estandar_id, numero_tarjeta';
                                       v_valores :='$36,$37';
                       end if;
                       
                       if(p_tipo_documento_sector_id=2) then --sre_fac_recepciones_correctas_colegios
                                       v_tabla_ventas := 'sre_fac_ventas_colegios';
                                       v_venta_factura_id := 'venta_colegio_id';
                                       v_campos :='recepcion_correcta_colegio_id, periodo_facturado, nombre_estudiante, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39';
                                       
                       end if;
                       
                       if(p_tipo_documento_sector_id=3) then --sre_fac_recepciones_correctas_alquileres
                                       v_tabla_ventas := 'sre_fac_ventas_alquileres';
                                       v_venta_factura_id := 'venta_alquiler_id';
                                       v_campos :='recepcion_correcta_alquiler_id, periodo_facturado, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;
                       
                       if(p_tipo_documento_sector_id=4) then --sre_fac_recepciones_correctas_combustibles
                                       v_tabla_ventas := 'sre_fac_ventas_combustibles';
                                       v_venta_factura_id := 'venta_combustible_id';     
                                       v_campos :='recepcion_correcta_combustible_id, codigo_pais_id, placa_vehiculo, tipo_envase, monto_ley317, monto_total_sujeto_iva, numero_tarjeta ';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42';
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=23) then --sre_fac_recepciones_correctas_hidrocarburos
                                       v_tabla_ventas := 'sre_fac_ventas_hidrocarburos';
                                       v_venta_factura_id := 'venta_hidrocarburo_id';    
                                       v_campos :='recepcion_correcta_hidrocarburo_id, ciudad, nombre_propietario, nombre_representante_legal, condicion_pago, periodo_entrega, monto_iehd';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42';
                       end if;
                       
                       if(p_tipo_documento_sector_id=5) then --sre_fac_recepciones_correctas_servicios
                                       v_tabla_ventas := 'sre_fac_ventas_servicios';
                                       v_venta_factura_id := 'venta_servicio_id';
                                       v_campos :='recepcion_correcta_servicio_id, numero_medidor, ciudad, zona, gestion, mes, domicilio_comprador, consumo_kwh, consumo_metros_cubicos, monto_descuento_ley1886, tasa_aseo, tasa_alumbrado, monto_total_sujeto_iva, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49';
                       end if;                   
                       
                       if(p_tipo_documento_sector_id=6) then --sre_fac_recepciones_correctas_embotelladoras
                                       v_tabla_ventas := 'sre_fac_ventas_embotelladoras';
                                       v_venta_factura_id := 'venta_embotelladora_id'; 
                                       v_campos :='recepcion_correcta_embotelladora_id, monto_ice, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;   
                                                       
                       if(p_tipo_documento_sector_id=7) then --sre_fac_recepciones_correctas_bancos
                                       v_tabla_ventas := 'sre_fac_ventas_bancos';
                                       v_venta_factura_id := 'venta_banco_id';   
                                       v_campos :='recepcion_correcta_banco_id, monto_total_arrendamiento, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;
                       
                       if(p_tipo_documento_sector_id=8) then --sre_fac_recepciones_correctas_hoteles
                                       v_tabla_ventas := 'sre_fac_ventas_hoteles';
                                       v_venta_factura_id := 'venta_hotel_id';   
                                       v_campos :='recepcion_correcta_hotel_id, cantidad_huespedes, cantidad_habitaciones, cantidad_mayores, cantidad_menores, fecha_ingreso_hospedaje, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42';
                       end if;

                       if(p_tipo_documento_sector_id=9) then --sre_fac_recepciones_correctas_hospitales
                                       v_tabla_ventas := 'sre_fac_ventas_hospitales';
                                       v_venta_factura_id := 'venta_hospital_id';  
                                       v_campos :='recepcion_correcta_hospital_id, modalidad_servicio, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;                                  

                       if(p_tipo_documento_sector_id=10) then --sre_fac_recepciones_correctas_juegos
                                       v_tabla_ventas := 'sre_fac_ventas_juegos';
                                       v_venta_factura_id := 'venta_juego_id';  
                                       v_campos :='recepcion_correcta_juego_id, monto_total_sujeto_ipj, monto_total_ij, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39';
                       end if;
                                       
                end if;
                
                if (p_tipo_documento_fiscal_id=v_nota_credito_debito)then 
                
                end if;

                
                if (p_tipo_documento_fiscal_id=v_nota_fiscal)then 
                       if(p_tipo_documento_sector_id=12) then --sre_fac_recepciones_correctas_exportaciones
                                       v_tabla_ventas := 'sre_fac_ventas_exportaciones';
                                       v_venta_factura_id := 'venta_exportacion_id';  
                                       v_campos :='recepcion_correcta_exportacion_id, otros_montos, monto_total_puerto, precio_valor_bruto, gastos_transporte_frontera,  gastos_seguro_frontera, total_fob_frontera, monto_transporte_frontera, monto_seguro_internacional, incoterm, lugar_destino, puerto_destino, tipo_pais_id, direccion_comprador,  numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50';
                       end if;
                       
                       if(p_tipo_documento_sector_id=13) then --sre_fac_recepciones_correctas_libres_consignaciones
                                       v_tabla_ventas := 'sre_fac_ventas_libres_consignaciones';
                                       v_venta_factura_id := 'venta_libre_consignacion_id';
                                       v_campos :='recepcion_correcta_libre_consignacion_id, remitente, consignatario, tipo_pais_id, lugar_destino, lugar_acopio_puerto';
                                       v_valores :='$36,$37,$38,$39,$40,$41';
                       end if;                                  

                       if(p_tipo_documento_sector_id=22) then --sre_fac_recepciones_correctas_tasas_ceros
                                       v_tabla_ventas := 'sre_fac_ventas_tasas_ceros';
                                       v_venta_factura_id := 'venta_tasa_cero_id';
                                       v_campos :='recepcion_correcta_tasa_cero_id, numero_tarjeta';
                                       v_valores :='$36,$37';
                                       
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=21) then --sre_fac_recepciones_correctas_turismos_receptivos
                                       v_tabla_ventas := 'sre_fac_ventas_turismos_receptivos';
                                       v_venta_factura_id := 'venta_turismo_receptivo_id';
                                       v_campos :='recepcion_correcta_turismo_receptivo_id, cantidad_huespedes, cantidad_habitaciones, cantidad_mayores, cantidad_menores, fecha_ingreso_hospedaje, nit_operador_turismo, razon_social_operador, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43,$44';
                                       
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=14) then --sre_fac_recepciones_correctas_zonas_francas
                                       v_tabla_ventas := 'sre_fac_ventas_zonas_francas';
                                       v_venta_factura_id := 'venta_zona_franca_id'; 
                                       v_campos :='recepcion_correcta_zona_franca_id, numero_parte_recepcion, numero_tarjeta ';
                                       v_valores :='$36,$37,$38';
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=11) then --sre_fac_recepciones_correctas_espectaculos_nacionales
                                       v_tabla_ventas := 'sre_fac_ventas_espectaculos_nacionales';
                                       v_venta_factura_id := 'venta_espectaculo_nacional_id';   
                                       v_campos :='recepcion_correcta_espectaculo_nacional_id, tipo_evento, lugar_evento, fecha_evento, artista_evento, nit_salon, direccion_salon, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43';
                        end if;                                  
                       
                       if(p_tipo_documento_sector_id=15) then --sre_fac_recepciones_correctas_espectaculos
                                       v_tabla_ventas := 'sre_fac_ventas_espectaculos';
                                       v_venta_factura_id := 'venta_espectaculo_id';     
                                       v_campos :='recepcion_correcta_espectaculo_id, tipo_evento, lugar_evento, artista_evento, nit_salon, direccion_salon, fecha_evento, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43';
                       end if;
                       
                       if(p_tipo_documento_sector_id=16) then --sre_fac_recepciones_correctas_seguridades_alimentarias
                                       v_tabla_ventas := 'sre_fac_ventas_seguridades_alimentarias';
                                       v_venta_factura_id := 'venta_seguridad_alimentaria_id'; 
                                       v_campos :='recepcion_correcta_seguridad_alimentaria_id, numero_tarjeta';
                                       v_valores :='$36,$37';
                       end if;

                       if(p_tipo_documento_sector_id=17) then --sre_fac_recepciones_correctas_monedas_extranjeras
                                       v_tabla_ventas := 'sre_fac_ventas_monedas_extranjeras';
                                       v_venta_factura_id := 'venta_moneda_extranjera_id';
                                       v_campos :='recepcion_correcta_moneda_extranjera_id, monto_diferencia_tipo_cambio, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                       end if;                                  
                end if;   
                
                if (p_tipo_documento_fiscal_id=v_boleta_contingencia)then 
                
                end if;   
                
                if (p_tipo_documento_fiscal_id=v_documento_equivalente)then 
                
                end if;   
                          v_sql:=                                                                                                   
                           'INSERT INTO sre_recaudaciones.'||v_tabla_ventas||'
                           (
                           usuario_registro_id, 
                           usuario_ultima_modificacion_id, 
                           persona_contribuyente_id, 
                           punto_venta_id, 
                           sucursal_id, 
                           tipo_departamento_id, 
                           tipo_ambiente_id, 
                           tipo_emision_id, 
                           tipo_modalidad_id, 
                           tipo_documento_fiscal_id, 
                           tipo_documento_identidad_id, 
                           tipo_documento_sector_id, 
                           estado_factura_id, 
                           metodo_pago_id, 
                           nit_emisor, 
                           codigo_cliente, 
                           numero_factura, 
                           cuf, 
                           cufd, 
                           cuis, 
                           direccion, 
                           usuario, 
                           numero_documento, 
                           complemento, 
                           nombre_razon_social, 
                           monto_total, 
                           monto_descuento, 
                           leyenda, 
                           fecha_emision, 
                           fecha_registro, 
                           fecha_ultima_modificacion, 
                           estado_id, 
                           tipo_moneda_id, 
                           tipo_cambio, 
                           monto_total_moneda,'||v_campos||'
                           )
                           VALUES(
                           $1,
                           $2,
                           $3,
                           $4,
                           $5,
                           $6,
                           $7,
                           $8,
                           $9,
                           $10,
                           $11,
                           $12, 
                           $13,
                           $14,
                           $15,
                           $16,
                           $17,
                           $18,
                           $19,
                           $20,
                           $21,
                           $22,
                           $23,
                           $24,
                           $25,
                           $26,
                           $27,
                           $28,
                           $29,
                           $30,
                           $31,
                           $32,
                           $33,
                           $34,
                           $35,'||v_valores||'
                           )returning '||venta_factura_id||;
                           
               return coalesce(v_sql,'0');

               return v_sql;
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_ventas')) as character varying);
      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_etapa_2(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
v_tabla_ventas varchar;
v_venta_factura_id varchar;                      
                
--Campos: sre_fac_ventas_alquileres
v_alquileres_recepcion_correcta_alquiler_id int8;
v_alquileres_periodo_facturado varchar(50);
  
   --Campos: sre_fac_ventas_bancos
v_bancos_recepcion_correcta_banco_id int8;
v_bancos_monto_total_arrendamiento numeric(20,5);
                
--Campos: sre_fac_ventas_colegios
v_colegios_recepcion_correcta_colegio_id int8;
v_colegios_periodo_facturado varchar(50);
v_colegios_nombre_estudiante varchar(200);
                
--Campos: sre_fac_ventas_combustibles
v_combustible_recepcion_correcta_combustible_id int8;
v_combustible_codigo_pais_id int4; 
v_combustible_placa_vehiculo varchar(12);
v_combustible_tipo_envase varchar(50);
v_combustible_monto_ley317 numeric(20,5);
v_combustible_monto_total_sujeto_iva numeric(20,5);

                
--Campos: sre_fac_ventas_embotelladoras
v_embotelladoras_recepcion_correcta_embotelladora_id int8;
v_embotelladoras_monto_ice numeric(20,5);
                
--Campos: sre_fac_ventas_espectaculos
v_espectaculos_recepcion_correcta_espectaculo_id int8;
v_espectaculos_tipo_evento varchar(100);
v_espectaculos_lugar_evento varchar(100);
v_espectaculos_artista_evento varchar(100);
v_espectaculos_nit_salon int8;
v_espectaculos_direccion_salon varchar(150);
v_espectaculos_fecha_evento timestamp;

           
--Campos: sre_fac_ventas_espectaculos_nacionales
v_espectaculos_nac_recepcion_correcta_espectaculo_nacional_id int8;
v_espectaculos_nac_tipo_evento varchar(100);
v_espectaculos_nac_lugar_evento varchar(100);
v_espectaculos_nac_fecha_evento timestamp;
v_espectaculos_nac_artista_evento varchar(100);
v_espectaculos_nac_nit_salon int8;
v_espectaculos_nac_direccion_salon varchar(100);
                
--Campos: sre_fac_ventas_exportaciones
v_exportaciones_recepcion_correcta_exportacion_id int8;
v_exportaciones_otros_montos numeric(20,5);
v_exportaciones_monto_total_puerto numeric(20,5);
v_exportaciones_precio_valor_bruto numeric(20,5);
v_exportaciones_gastos_transporte_frontera numeric(20,5);
v_exportaciones_gastos_seguro_frontera numeric(20,5);
v_exportaciones_total_fob_frontera numeric(20,5);
v_exportaciones_monto_transporte_frontera numeric(20,5);
v_exportaciones_monto_seguro_internacional numeric(20,5);
v_exportaciones_incoterm varchar(100);
v_exportaciones_lugar_destino varchar(100);
v_exportaciones_puerto_destino varchar(100);
v_exportaciones_tipo_pais_id int4;
v_exportaciones_direccion_comprador varchar(150);

--Campos: sre_fac_ventas_hidrocarburos
v_hidrocarburos_recepcion_correcta_hidrocarburo_id int8;
v_hidrocarburos_ciudad varchar(100);
v_hidrocarburos_nombre_propietario varchar(100);
v_hidrocarburos_nombre_representante_legal varchar(100);
v_hidrocarburos_condicion_pago varchar(150);
v_hidrocarburos_periodo_entrega varchar(150);
v_hidrocarburos_monto_iehd numeric(20,5);

--Excluir
v_hidrocarburos_numero_tarjeta int8;
                
--Campos: sre_fac_ventas_hospitales
v_hospitales_recepcion_correcta_hospital_id int8;
v_hospitales_modalidad_servicio varchar(100);
                
--Campos: sre_fac_ventas_hoteles
v_hoteles_recepcion_correcta_hotel_id int8;
v_hoteles_cantidad_huespedes int4 ;
v_hoteles_cantidad_habitaciones int4 ;
v_hoteles_cantidad_mayores int4;
v_hoteles_cantidad_menores int4;
v_hoteles_fecha_ingreso_hospedaje timestamp;

--Campos: sre_fac_ventas_juegos
v_juegos_recepcion_correcta_juego_id int8;
v_juegos_monto_total_sujeto_ipj numeric(20,5);
v_juegos_monto_total_ij numeric(20,5);
                
--Campos: sre_fac_ventas_libres_consignaciones
v_libres_con_recepcion_correcta_libre_consignacion_id int8;
v_libres_con_remitente varchar(100) ;
v_libres_con_consignatario varchar(100) ;
v_libres_con_tipo_pais_id int4 ;
v_libres_con_lugar_destino varchar(100) ;
v_libres_con_lugar_acopio_puerto varchar(100) ;


--Excluir
v_libres_con_complemento varchar(5);
v_libres_con_nombre_razon_social varchar(200);


--Campos: sre_fac_ventas_monedas_extranjeras
v_monedas_ext_recepcion_correcta_moneda_extranjera_id int8;
v_monedas_ext_monto_diferencia_tipo_cambio numeric(20,5) ;

--Campos: sre_fac_ventas_seguridades_alimentarias
v_seguridades_ali_recepcion_correcta_seguridad_alimentaria_id int8;

--Campos: sre_fac_ventas_servicios
v_servicios_recepcion_correcta_servicio_id int8;
v_servicios_numero_medidor varchar(100);
v_servicios_ciudad varchar(100);
v_servicios_zona varchar(100);
v_servicios_gestion int4;
v_servicios_mes varchar(10);
v_servicios_domicilio_comprador varchar(200);
v_servicios_consumo_kwh numeric(20,5);
v_servicios_consumo_metros_cubicos numeric(20,5);
v_servicios_monto_descuento_ley1886 numeric(20,5);
v_servicios_tasa_aseo numeric(20,5);
v_servicios_tasa_alumbrado numeric(20,5);
v_servicios_monto_total_sujeto_iva numeric(20,5) ;

                
--Campos: sre_fac_ventas_tasas_ceros
v_tasas_ceros_recepcion_correcta_tasa_cero_id int8;

--Campos: sre_fac_ventas_turismos_receptivos
v_turismos_rec_recepcion_correcta_turismo_receptivo_id int8;
v_turismos_rec_cantidad_huespedes int4;
v_turismos_rec_cantidad_habitaciones int4;
v_turismos_rec_cantidad_mayores int4;
v_turismos_rec_cantidad_menores int4;
v_turismos_rec_fecha_ingreso_hospedaje timestamp;
v_turismos_rec_nit_operador_turismo varchar(20);
v_turismos_rec_razon_social_operador varchar(100);

--Campos: sre_fac_ventas_zonas_francas
v_zonas_fra_recepcion_correcta_zona_franca_id int8;
v_zonas_fra_numero_parte_recepcion varchar(100);

--Tipos documentos Fiscales       
v_factura integer:=1;
v_nota_credito_debito integer:=2;
v_nota_fiscal integer:=3;
v_boleta_contingencia integer:=4;
v_documento_equivalente integer:=5;
                
v_sql varchar:='';   
v_campos varchar:='';
v_valores varchar:='';

begin
	
--ADD 27/02/2018
--asicionado para la consulta
                if (p_tipo_documento_fiscal_id=v_factura)then 
                       if(p_tipo_documento_sector_id=1) then --sre_fac_recepciones_correctas_estandares
                           v_sql := 'INSERT INTO sre_recaudaciones.sre_fac_ventas_estandares
						   (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_estandar_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
						    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37) returning venta_estandar_id';

                       end if;
                       
                       if(p_tipo_documento_sector_id=2) then --sre_fac_recepciones_correctas_colegios
                             v_sql := 'INSERT INTO sre_recaudaciones.sre_fac_ventas_colegios
							 (usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_colegio_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, periodo_facturado, nombre_estudiante, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
							 VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39) returning venta_colegio_id';                                 
                                       
                       end if;
                       
                       if(p_tipo_documento_sector_id=3) then --sre_fac_recepciones_correctas_alquileres
                                       v_tabla_ventas := 'sre_fac_ventas_alquileres';
                                       v_venta_factura_id := 'venta_alquiler_id';
                                       v_campos :='recepcion_correcta_alquiler_id, periodo_facturado, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;
                       
                       if(p_tipo_documento_sector_id=4) then --sre_fac_recepciones_correctas_combustibles
                                       v_tabla_ventas := 'sre_fac_ventas_combustibles';
                                       v_venta_factura_id := 'venta_combustible_id';     
                                       v_campos :='recepcion_correcta_combustible_id, codigo_pais_id, placa_vehiculo, tipo_envase, monto_ley317, monto_total_sujeto_iva, numero_tarjeta ';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42';
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=23) then --sre_fac_recepciones_correctas_hidrocarburos
                                       v_tabla_ventas := 'sre_fac_ventas_hidrocarburos';
                                       v_venta_factura_id := 'venta_hidrocarburo_id';    
                                       v_campos :='recepcion_correcta_hidrocarburo_id, ciudad, nombre_propietario, nombre_representante_legal, condicion_pago, periodo_entrega, monto_iehd';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42';
                       end if;
                       
                       if(p_tipo_documento_sector_id=5) then --sre_fac_recepciones_correctas_servicios
                                       v_tabla_ventas := 'sre_fac_ventas_servicios';
                                       v_venta_factura_id := 'venta_servicio_id';
                                       v_campos :='recepcion_correcta_servicio_id, numero_medidor, ciudad, zona, gestion, mes, domicilio_comprador, consumo_kwh, consumo_metros_cubicos, monto_descuento_ley1886, tasa_aseo, tasa_alumbrado, monto_total_sujeto_iva, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49';
                       end if;                   
                       
                       if(p_tipo_documento_sector_id=6) then --sre_fac_recepciones_correctas_embotelladoras
                                       v_tabla_ventas := 'sre_fac_ventas_embotelladoras';
                                       v_venta_factura_id := 'venta_embotelladora_id'; 
                                       v_campos :='recepcion_correcta_embotelladora_id, monto_ice, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;   
                                                       
                       if(p_tipo_documento_sector_id=7) then --sre_fac_recepciones_correctas_bancos
                                       v_tabla_ventas := 'sre_fac_ventas_bancos';
                                       v_venta_factura_id := 'venta_banco_id';   
                                       v_campos :='recepcion_correcta_banco_id, monto_total_arrendamiento, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;
                       
                       if(p_tipo_documento_sector_id=8) then --sre_fac_recepciones_correctas_hoteles
                                       v_tabla_ventas := 'sre_fac_ventas_hoteles';
                                       v_venta_factura_id := 'venta_hotel_id';   
                                       v_campos :='recepcion_correcta_hotel_id, cantidad_huespedes, cantidad_habitaciones, cantidad_mayores, cantidad_menores, fecha_ingreso_hospedaje, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42';
                       end if;

                       if(p_tipo_documento_sector_id=9) then --sre_fac_recepciones_correctas_hospitales
                                       v_tabla_ventas := 'sre_fac_ventas_hospitales';
                                       v_venta_factura_id := 'venta_hospital_id';  
                                       v_campos :='recepcion_correcta_hospital_id, modalidad_servicio, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                                       
                       end if;                                  

                       if(p_tipo_documento_sector_id=10) then --sre_fac_recepciones_correctas_juegos
                                       v_tabla_ventas := 'sre_fac_ventas_juegos';
                                       v_venta_factura_id := 'venta_juego_id';  
                                       v_campos :='recepcion_correcta_juego_id, monto_total_sujeto_ipj, monto_total_ij, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39';
                       end if;
                                       
                end if;
                
                if (p_tipo_documento_fiscal_id=v_nota_credito_debito)then 
                
                end if;

                
                if (p_tipo_documento_fiscal_id=v_nota_fiscal)then 
                       if(p_tipo_documento_sector_id=12) then --sre_fac_recepciones_correctas_exportaciones
                                       v_tabla_ventas := 'sre_fac_ventas_exportaciones';
                                       v_venta_factura_id := 'venta_exportacion_id';  
                                       v_campos :='recepcion_correcta_exportacion_id, otros_montos, monto_total_puerto, precio_valor_bruto, gastos_transporte_frontera,  gastos_seguro_frontera, total_fob_frontera, monto_transporte_frontera, monto_seguro_internacional, incoterm, lugar_destino, puerto_destino, tipo_pais_id, direccion_comprador,  numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50';
                       end if;
                       
                       if(p_tipo_documento_sector_id=13) then --sre_fac_recepciones_correctas_libres_consignaciones
                                       v_tabla_ventas := 'sre_fac_ventas_libres_consignaciones';
                                       v_venta_factura_id := 'venta_libre_consignacion_id';
                                       v_campos :='recepcion_correcta_libre_consignacion_id, remitente, consignatario, tipo_pais_id, lugar_destino, lugar_acopio_puerto';
                                       v_valores :='$36,$37,$38,$39,$40,$41';
                       end if;                                  

                       if(p_tipo_documento_sector_id=22) then --sre_fac_recepciones_correctas_tasas_ceros
                                       v_tabla_ventas := 'sre_fac_ventas_tasas_ceros';
                                       v_venta_factura_id := 'venta_tasa_cero_id';
                                       v_campos :='recepcion_correcta_tasa_cero_id, numero_tarjeta';
                                       v_valores :='$36,$37';
                                       
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=21) then --sre_fac_recepciones_correctas_turismos_receptivos
                                       v_tabla_ventas := 'sre_fac_ventas_turismos_receptivos';
                                       v_venta_factura_id := 'venta_turismo_receptivo_id';
                                       v_campos :='recepcion_correcta_turismo_receptivo_id, cantidad_huespedes, cantidad_habitaciones, cantidad_mayores, cantidad_menores, fecha_ingreso_hospedaje, nit_operador_turismo, razon_social_operador, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43,$44';
                                       
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=14) then --sre_fac_recepciones_correctas_zonas_francas
                                       v_tabla_ventas := 'sre_fac_ventas_zonas_francas';
                                       v_venta_factura_id := 'venta_zona_franca_id'; 
                                       v_campos :='recepcion_correcta_zona_franca_id, numero_parte_recepcion, numero_tarjeta ';
                                       v_valores :='$36,$37,$38';
                       end if;                                  
                       
                       if(p_tipo_documento_sector_id=11) then --sre_fac_recepciones_correctas_espectaculos_nacionales
                                       v_tabla_ventas := 'sre_fac_ventas_espectaculos_nacionales';
                                       v_venta_factura_id := 'venta_espectaculo_nacional_id';   
                                       v_campos :='recepcion_correcta_espectaculo_nacional_id, tipo_evento, lugar_evento, fecha_evento, artista_evento, nit_salon, direccion_salon, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43';
                        end if;                                  
                       
                       if(p_tipo_documento_sector_id=15) then --sre_fac_recepciones_correctas_espectaculos
                                       v_tabla_ventas := 'sre_fac_ventas_espectaculos';
                                       v_venta_factura_id := 'venta_espectaculo_id';     
                                       v_campos :='recepcion_correcta_espectaculo_id, tipo_evento, lugar_evento, artista_evento, nit_salon, direccion_salon, fecha_evento, numero_tarjeta';
                                       v_valores :='$36,$37,$38,$39,$40,$41,$42,$43';
                       end if;
                       
                       if(p_tipo_documento_sector_id=16) then --sre_fac_recepciones_correctas_seguridades_alimentarias
                                       v_tabla_ventas := 'sre_fac_ventas_seguridades_alimentarias';
                                       v_venta_factura_id := 'venta_seguridad_alimentaria_id'; 
                                       v_campos :='recepcion_correcta_seguridad_alimentaria_id, numero_tarjeta';
                                       v_valores :='$36,$37';
                       end if;

                       if(p_tipo_documento_sector_id=17) then --sre_fac_recepciones_correctas_monedas_extranjeras
                                       v_tabla_ventas := 'sre_fac_ventas_monedas_extranjeras';
                                       v_venta_factura_id := 'venta_moneda_extranjera_id';
                                       v_campos :='recepcion_correcta_moneda_extranjera_id, monto_diferencia_tipo_cambio, numero_tarjeta';
                                       v_valores :='$36,$37,$38';
                       end if;                                  
                end if;   
                
                if (p_tipo_documento_fiscal_id=v_boleta_contingencia)then 
                
                end if;   
                
                if (p_tipo_documento_fiscal_id=v_documento_equivalente)then 
                
                end if;   
                                                 
               return coalesce(v_sql,'0');

               return v_sql;
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_ventas_etapa_2')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cuf character varying, p_select boolean)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito las sentecias if para cada uno de los documentos y se agrego el case para el mejor rendimiento de la funcion
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<07/05/2019>
AUTOR DE LA MODIFICACION : :<Peter Flores>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	v_select varchar:=''; 
	v_sql varchar:='';	
begin
 	if (p_select=true) then
 		v_select:='select count(1) from';
 	else
 		v_select:='select estado_factura_id from';
 	end if;
 
	v_sql:=(case		
			when p_tipo_documento_sector_id = 1 then 					
					   CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_estandares r
										 WHERE r.cuf=''',p_cuf,'''')		
		 	when p_tipo_documento_sector_id = 11 then 		 		
		 			   CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_espectaculos r
										 WHERE r.cuf=''',p_cuf,'''')
			
			when p_tipo_documento_sector_id = 2 then --sre_fac_ventas_colegios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_colegios r
										 WHERE r.cuf=''',p_cuf,'''')				
			
			when p_tipo_documento_sector_id = 3 then --sre_fac_ventas_alquileres
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_alquileres r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 4 then --sre_fac_ventas_combustibles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_combustibles r
										 WHERE r.cuf=''',p_cuf,'''')							
			
			when p_tipo_documento_sector_id = 23 then --sre_fac_ventas_hidrocarburos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_hidrocarburos r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 5 then --sre_fac_ventas_servicios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_servicios r
										 WHERE r.cuf=''',p_cuf,'''')		
			
			when p_tipo_documento_sector_id = 6 then --sre_fac_ventas_embotelladoras			
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_embotelladoras r
										 WHERE r.cuf=''',p_cuf,'''')
					
			when p_tipo_documento_sector_id = 7 then --sre_fac_ventas_bancos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_bancos r
										 WHERE r.cuf=''',p_cuf,'''')		
			
			when p_tipo_documento_sector_id = 8 then --sre_fac_ventas_hoteles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_hoteles r
										 WHERE r.cuf=''',p_cuf,'''')				

			when p_tipo_documento_sector_id = 9 then --sre_fac_ventas_hospitales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_hospitales r
										 WHERE r.cuf=''',p_cuf,'''')							

			when p_tipo_documento_sector_id = 10 then --sre_fac_ventas_juegos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_juegos r
										 WHERE r.cuf=''',p_cuf,'''')						
			
			when p_tipo_documento_sector_id = 11 then --sre_fac_ventas_espectaculos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_espectaculos r
										 WHERE r.cuf=''',p_cuf,'''')	

			when p_tipo_documento_sector_id = 12 then --sre_fac_ventas_exportaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_exportaciones r
										 WHERE r.cuf=''',p_cuf,'''')			
			
			when p_tipo_documento_sector_id = 13 then --sre_fac_ventas_libres_consignaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_libres_consignaciones r
										 WHERE r.cuf=''',p_cuf,'''')	
		
			when p_tipo_documento_sector_id = 18 AND p_select=true then --sre_fac_notas_creditos_debitos
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 18 AND p_select=false then --sre_fac_notas_creditos_debitos
					       CONCAT('select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos r
										 WHERE r.cuf=''',p_cuf,'''')	

			when p_tipo_documento_sector_id = 19 AND p_select=true then --sre_fac_notas_conciliaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_conciliaciones r
										 WHERE r.cuf=''',p_cuf,'''')	
										 
			when p_tipo_documento_sector_id = 19 AND p_select=false then --sre_fac_notas_conciliaciones
					       CONCAT('select estado_nota_conciliacion_id from sre_recaudaciones.sre_fac_notas_conciliaciones r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 22 then --sre_fac_ventas_tasas_ceros
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_tasas_ceros r
										 WHERE r.cuf=''',p_cuf,'''')				
			
			when p_tipo_documento_sector_id = 21 then -- sre_fac_ventas_turismos_receptivos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_turismos_receptivos r
										 WHERE r.cuf=''',p_cuf,'''')					
			
			when p_tipo_documento_sector_id = 14 then --sre_fac_ventas_zonas_francas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_zonas_francas r
										 WHERE r.cuf=''',p_cuf,'''')			
	
			when p_tipo_documento_sector_id = 15 then --sre_fac_ventas_espectaculos_nacionales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 16 then --sre_fac_ventas_seguridades_alimentarias
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias r
										 WHERE r.cuf=''',p_cuf,'''')	

			when p_tipo_documento_sector_id = 17 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_monedas_extranjeras r
										 WHERE r.cuf=''',p_cuf,'''')	
			--add 20190514 rgt							 
			when p_tipo_documento_sector_id = 20 then --sre_fac_ventas_boletos_aereos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_boletos_aereos r
										 WHERE r.cuf=''',p_cuf,'''')

			when p_tipo_documento_sector_id = 24 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 25 then --sre_fac_ventas_exportaciones_mineras add 20190729
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_exportaciones_mineras r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 26 then --sre_fac_ventas_libres_consignaciones_ypfb
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 27 then --sre_fac_ventas_mineras_internas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_mineras_internas r
										 WHERE r.cuf=''',p_cuf,'''')	
		
			when p_tipo_documento_sector_id = 28 then --sre_fac_prevaloradas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_prevaloradas r
										 WHERE r.cufp=''',p_cuf,'''')		
			
		    when p_tipo_documento_sector_id = 29 then --sre_fac_ventas_telecomunicaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_telecomunicaciones r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 30 AND p_select=true then --sre_fac_notas_creditos_debitos_sfv 2019/07/26
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 30 AND p_select=false then --sre_fac_notas_creditos_debitos_sfv 2019/07/26
					       CONCAT('select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv r
										 WHERE r.cuf=''',p_cuf,'''')
		
			else ''
		end);

	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_ventas_factura')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_cuf character varying, p_select boolean)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito las sentecias if para cada uno de los documentos y se agrego el case para el mejor rendimiento de la funcion
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<07/05/2019>
AUTOR DE LA MODIFICACION : :<Peter Flores>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	v_select varchar:=''; 
	v_sql varchar:='';	
begin
 	if (p_select=true) then
 		v_select:='select count(1) from';
 	else
 		v_select:='select estado_factura_id from';
 	end if;
 
	v_sql:=(case		
			when p_tipo_documento_sector_id = 1 then 					
					   CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_estandares r
										 WHERE r.cuf=''',p_cuf,'''')		
		 	when p_tipo_documento_sector_id = 11 then 		 		
		 			   CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos r
										 WHERE r.cuf=''',p_cuf,'''')
			
			when p_tipo_documento_sector_id = 2 then --sre_fac_ventas_colegios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_colegios r
										 WHERE r.cuf=''',p_cuf,'''')				
			
			when p_tipo_documento_sector_id = 3 then --sre_fac_ventas_alquileres
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_alquileres r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 4 then --sre_fac_ventas_combustibles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_combustibles r
										 WHERE r.cuf=''',p_cuf,'''')							
			
			when p_tipo_documento_sector_id = 23 then --sre_fac_ventas_hidrocarburos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 5 then --sre_fac_ventas_servicios
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_servicios r
										 WHERE r.cuf=''',p_cuf,'''')		
			
			when p_tipo_documento_sector_id = 6 then --sre_fac_ventas_embotelladoras			
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras r
										 WHERE r.cuf=''',p_cuf,'''')
					
			when p_tipo_documento_sector_id = 7 then --sre_fac_ventas_bancos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_bancos r
										 WHERE r.cuf=''',p_cuf,'''')		
			
			when p_tipo_documento_sector_id = 8 then --sre_fac_ventas_hoteles
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_hoteles r
										 WHERE r.cuf=''',p_cuf,'''')				

			when p_tipo_documento_sector_id = 9 then --sre_fac_ventas_hospitales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_hospitales r
										 WHERE r.cuf=''',p_cuf,'''')							

			when p_tipo_documento_sector_id = 10 then --sre_fac_ventas_juegos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_juegos r
										 WHERE r.cuf=''',p_cuf,'''')						
			
			when p_tipo_documento_sector_id = 11 then --sre_fac_ventas_espectaculos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos r
										 WHERE r.cuf=''',p_cuf,'''')	

			when p_tipo_documento_sector_id = 12 then --sre_fac_ventas_exportaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones r
										 WHERE r.cuf=''',p_cuf,'''')			
			
			when p_tipo_documento_sector_id = 13 then --sre_fac_ventas_libres_consignaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones r
										 WHERE r.cuf=''',p_cuf,'''')	
		
			when p_tipo_documento_sector_id = 18 AND p_select=true then --sre_fac_notas_creditos_debitos
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 18 AND p_select=false then --sre_fac_notas_creditos_debitos
					       CONCAT('select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos r
										 WHERE r.cuf=''',p_cuf,'''')	

			when p_tipo_documento_sector_id = 19 AND p_select=true then --sre_fac_notas_conciliaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_conciliaciones r
										 WHERE r.cuf=''',p_cuf,'''')	
										 
			when p_tipo_documento_sector_id = 19 AND p_select=false then --sre_fac_notas_conciliaciones
					       CONCAT('select estado_nota_conciliacion_id from sre_recaudaciones.sre_fac_notas_conciliaciones r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 22 then --sre_fac_ventas_tasas_ceros
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_tasas_ceros r
										 WHERE r.cuf=''',p_cuf,'''')				
			
			when p_tipo_documento_sector_id = 21 then -- sre_fac_ventas_turismos_receptivos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos r
										 WHERE r.cuf=''',p_cuf,'''')					
			
			when p_tipo_documento_sector_id = 14 then --sre_fac_ventas_zonas_francas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas r
										 WHERE r.cuf=''',p_cuf,'''')			
	
			when p_tipo_documento_sector_id = 15 then --sre_fac_ventas_espectaculos_nacionales
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 16 then --sre_fac_ventas_seguridades_alimentarias
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias r
										 WHERE r.cuf=''',p_cuf,'''')	

			when p_tipo_documento_sector_id = 17 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras r
										 WHERE r.cuf=''',p_cuf,'''')	
			--add 20190514 rgt							 
			when p_tipo_documento_sector_id = 20 then --sre_fac_ventas_boletos_aereos
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_boletos_aereos r
										 WHERE r.cuf=''',p_cuf,'''')

			when p_tipo_documento_sector_id = 24 then --sre_fac_ventas_monedas_extranjeras
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 25 then --sre_fac_ventas_exportaciones_mineras add 20190729
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 26 then --sre_fac_ventas_libres_consignaciones_ypfb
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones_ypfb r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 27 then --sre_fac_ventas_mineras_internas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_mineras_internas r
										 WHERE r.cuf=''',p_cuf,'''')	
		
			when p_tipo_documento_sector_id = 28 then --sre_fac_prevaloradas
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_prevaloradas r
										 WHERE r.cufp=''',p_cuf,'''')		
			
		    when p_tipo_documento_sector_id = 29 then --sre_fac_ventas_telecomunicaciones
				       CONCAT(v_select,' sre_recaudaciones.sre_fac_ventas_contingencias_telecomunicaciones r
										 WHERE r.cuf=''',p_cuf,'''')	
			
			when p_tipo_documento_sector_id = 30 AND p_select=true then --sre_fac_notas_creditos_debitos_sfv 2019/07/26
 					       CONCAT(v_select,' sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv r
										 WHERE r.cuf=''',p_cuf,'''')
										 
			when p_tipo_documento_sector_id = 30 AND p_select=false then --sre_fac_notas_creditos_debitos_sfv 2019/07/26
					       CONCAT('select estado_notadc_id from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv r
										 WHERE r.cuf=''',p_cuf,'''')
		
			else ''
		end);

	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_ventas_factura_contingencia')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_cuf(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 							 
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_estandares where cuf = $1 limit 1';
														
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_colegios where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_alquileres where cuf = $1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_combustibles where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_servicios where cuf = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_embotelladoras	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 7
			then 			 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_bancos	where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_hoteles where cuf = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_hospitales where cuf = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_juegos where cuf = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_espectaculos	where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_exportaciones	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_exportaciones	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_zonas_francas	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 15 --NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias	where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 18 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_notas_creditos_debitos where cuf = $1 limit 1';			
				
		when p_tipo_documento_sector_id = 19 --NOTA DE CONCILIACION
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_notas_conciliaciones where cuf = $1	limit 1';			

		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --BOLETO AEREO
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_boletos_aereos where cuf = $1	limit 1';		
			
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_turismos_receptivos	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_tasas_ceros	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_hidrocarburos	where cuf = $1	limit 1';	
 			
 		when p_tipo_documento_sector_id = 24 --FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb where cuf = $1	limit 1';	
 			
 		when p_tipo_documento_sector_id = 25 --FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras where cuf = $1	limit 1';	
 			
 		when p_tipo_documento_sector_id = 26 --FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb where cuf = $1	limit 1';
 			
 		when p_tipo_documento_sector_id = 27 --FACTURA VENTA INTERNA MINERALES
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_mineras_internas	where cuf = $1	limit 1'; 			

 		when p_tipo_documento_sector_id = 28 --FACTURA PREVALORADA DIGITAL
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_prevaloradas	where cufp = $1	limit 1';
 		
		when p_tipo_documento_sector_id = 29 --FACTURA TELECOMUNICACIONES
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_telecomunicaciones	where cuf = $1	limit 1';	
 			
 		when p_tipo_documento_sector_id = 30 --NOTA CREDITO DEBITO SFV 20190725
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv	where cuf = $1	limit 1';	
		else 
				v_sql:='0';
					
	end case;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_cuf')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_cuf_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para sector 25 - sre_fac_ventas_contingencias_exportaciones_mineras
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 21/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 							 
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_estandares where cuf = $1 limit 1';
														
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_colegios where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_alquileres where cuf = $1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_combustibles where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_servicios where cuf = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_embotelladoras	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 7
			then 			 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_bancos	where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_hoteles where cuf = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_hospitales where cuf = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_juegos where cuf = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos	where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 		
			raise notice 'ingreso zona franca';
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_libres_consignaciones	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_zonas_francas	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 15 --NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_espectaculos_nacionales	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_seguridades_alimentarias	where cuf = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_monedas_extranjeras	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 18 --NOTA DE CREDITO-DEBITO
			then
			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_notas_creditos_debitos where cuf = $1 limit 1';			
			v_sql:= '0';	
		when p_tipo_documento_sector_id = 19 --NOTA DE CONCILIACION
			then
			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_notas_conciliaciones where cuf = $1	limit 1';			
			v_sql:= '0';
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --BOLETO AEREO
			then
			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_boletos_aereos where cuf = $1	limit 1';		
			v_sql:= '0';
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_turismos_receptivos	where cuf = $1	limit 1';	

		when p_tipo_documento_sector_id = 22
			then 			
			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_tasas_ceros	where cuf = $1	limit 1';	
			v_sql:= '0';
		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_hidrocarburos	where cuf = $1	limit 1';	
 			
 		when p_tipo_documento_sector_id = 24 --FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_ypfb where cuf = $1	limit 1';	
 			
 		when p_tipo_documento_sector_id = 25 --FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_contingencias_exportaciones_mineras where cuf = $1	limit 1';
 			
 		when p_tipo_documento_sector_id = 26 --FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb where cuf = $1	limit 1';
 			v_sql:= '0';
 		when p_tipo_documento_sector_id = 27 --FACTURA VENTA INTERNA MINERALES
			then				 
 			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_mineras_internas	where cuf = $1	limit 1'; 			
			v_sql:= '0';
 		when p_tipo_documento_sector_id = 28 --FACTURA PREVALORADA DIGITAL
			then				 
 			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_prevaloradas	where cufp = $1	limit 1';
 			v_sql:= '0';
		when p_tipo_documento_sector_id = 29 --FACTURA TELECOMUNICACIONES
			then				 
 			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_ventas_telecomunicaciones	where cuf = $1	limit 1';	
 			v_sql:= '0';
 		when p_tipo_documento_sector_id = 30 --NOTA CREDITO DEBITO SFV 20190725
			then				 
 			--v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv	where cuf = $1	limit 1';	
			v_sql:= '0';
 		else 
				v_sql:='0';
					
	end case;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';		
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_cuf_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_existe_ventas_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta SELECT para identificar una venta en la tabla respectiva de acuerdo al sector filtrado por el numero de documento fiscal (numero factura) y numero CAED
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
Cadena que contiene la consulta SELECT
SUBSISTEMA : Facturación
FECHA CREACION : 10/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select venta_estandar_id from sre_recaudaciones.sre_fman_ventas_estandares where caed=$1 and numero_documento_fiscal = $2  limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select venta_alcanzada_ice_id from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where caed=$1 and numero_documento_fiscal = $2  limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --ACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select venta_alquiler_id from sre_recaudaciones.sre_fman_ventas_alquileres where caed=$1	and numero_documento_fiscal = $2  limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select venta_comercial_exportacion_id from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where caed=$1   and numero_documento_fiscal = $2  limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select venta_libre_consignacion_id from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  where caed=$1  and numero_documento_fiscal = $2  limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select venta_hidrocarburo_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos where caed=$1	and numero_documento_fiscal = $2  limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select venta_entidad_financiera_id from sre_recaudaciones.sre_fman_ventas_entidades_financieras where caed=$1	and numero_documento_fiscal = $2  limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select venta_hospital_id from sre_recaudaciones.sre_fman_ventas_hospitales where caed=$1 and numero_documento_fiscal = $2  limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select venta_hotel_id from sre_recaudaciones.sre_fman_ventas_hoteles where caed=$1	and numero_documento_fiscal = $2  limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select venta_sector_educativo_id from sre_recaudaciones.sre_fman_ventas_sectores_educativos where caed=$1	and numero_documento_fiscal = $2  limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select venta_nota_credito_debito_id from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where caed=$1	and numero_documento_fiscal = $2  limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select venta_nota_moneda_extranjera_id from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where caed=$1	and numero_documento_fiscal = $2  limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select venta_nota_tasa_cero_id from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero where caed=$1	and numero_documento_fiscal = $2  limit 1';
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select venta_nota_zona_franca_id from sre_recaudaciones.sre_fman_ventas_notas_zona_franca where caed=$1	and numero_documento_fiscal = $2  limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_existe_ventas_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_rec_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'select recepcion_contingencia_estandar_id from sre_recaudaciones.sre_fac_recepciones_contingencias_estandares	where recepcion_contingencia_estandar_id=$1	limit 1';	 
														
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select recepcion_contingencia_colegio_id from sre_recaudaciones.sre_fac_recepciones_contingencias_colegios where recepcion_contingencia_colegio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select recepcion_contingencia_alquiler_id from sre_recaudaciones.sre_fac_recepciones_contingencias_alquileres where recepcion_contingencia_alquiler_id = $1 limit 1';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select recepcion_contingencia_combustible_id from sre_recaudaciones.sre_fac_recepciones_contingencias_combustibles where recepcion_contingencia_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select recepcion_contingencia_servicio_id from sre_recaudaciones.sre_fac_recepciones_contingencias_servicios	where recepcion_contingencia_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select recepcion_contingencia_embotelladora_id from sre_recaudaciones.sre_fac_recepciones_contingencias_embotelladoras where recepcion_contingencia_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select recepcion_contingencia_banco_id from sre_recaudaciones.sre_fac_recepciones_contingencias_bancos where recepcion_contingencia_banco_id = $1	limit 1';	
		
 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select recepcion_contingencia_hotel_id from sre_recaudaciones.sre_fac_recepciones_contingencias_hoteles where recepcion_contingencia_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select recepcion_contingencia_hospital_id from sre_recaudaciones.sre_fac_recepciones_contingencias_hospitales	where recepcion_contingencia_hospital_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select recepcion_contingencia_juego_id from sre_recaudaciones.sre_fac_recepciones_contingencias_juegos where recepcion_contingencia_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select recepcion_contingencia_espectaculo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos where recepcion_contingencia_espectaculo_id=$1	limit 1';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select recepcion_contingencia_exportacion_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones where recepcion_contingencia_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select recepcion_contingencia_libre_consignacion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones where recepcion_contingencia_libre_consignacion_id = $1 limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select recepcion_contingencia_zona_franca_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_zonas_francas	where recepcion_contingencia_zona_franca_id = $1	limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select recepcion_contingencia_espectaculo_nacional_id from sre_recaudaciones.sre_fac_recepciones_contingencias_espectaculos_nacionales	where recepcion_contingencia_espectaculo_nacional_id = $1	limit 1';

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select recepcion_contingencia_seguridad_alimentaria_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_seguridades_alimentarias where recepcion_contingencia_seguridad_alimentaria_id=$1 limit 1';	
				
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select recepcion_contingencia_moneda_extranjera_id  from sre_recaudaciones.sre_fac_recepciones_contingencias_monedas_extranjeras where recepcion_contingencia_moneda_extranjera_id=$1 limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select recepcion_contingencia_nota_credito_debito_id  from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos where recepcion_contingencia_nota_credito_debito_id=$1 limit 1';
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select recepcion_contingencia_nota_conciliacion_id 	from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_conciliaciones		where recepcion_contingencia_nota_conciliacion_id=$1	limit 1';			

		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select recepcion_contingencia_boleto_aereo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_boletos_aereos		where recepcion_contingencia_boleto_aereo_id = $1	limit 1';			
		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select recepcion_contingencia_turismo_receptivo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_turismos_receptivos where recepcion_contingencia_turismo_receptivo_id=$1 limit 1';	
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select recepcion_contingencia_tasa_cero_id from sre_recaudaciones.sre_fac_recepciones_contingencias_tasas_ceros	where recepcion_contingencia_tasa_cero_id=$1 limit 1';	
		-- add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select recepcion_contingencia_hidrocarburo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_hidrocarburos	where recepcion_contingencia_hidrocarburo_id=$1	limit 1';	
		-- add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_contingencia_exportacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_ypfb	where recepcion_contingencia_exportacion_ypfb_id = $1	limit 1';
 		
 		-- add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select recepcion_contingencia_exportacion_minera_id from sre_recaudaciones.sre_fac_recepciones_contingencias_exportaciones_mineras	where recepcion_contingencia_exportacion_minera_id = $1	limit 1';
 		
 		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_contingencia_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_contingencias_libres_consignaciones_ypfb	where recepcion_contingencia_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg
 		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select recepcion_contingencia_minera_interna_id 	from sre_recaudaciones.sre_fac_recepciones_contingencias_mineras_internas			where recepcion_contingencia_minera_interna_id=$1	limit 1';			 			
 			
		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then				 
 			v_sql:= 'select recepcion_contingencia_prevalorada_id from sre_recaudaciones.sre_fac_recepciones_contingencias_prevaloradas where recepcion_contingencia_prevalorada_id = $1	limit 1';
 		
 		-- add 20190524 rgt
 		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then				 
 			v_sql:= 'select recepcion_contingencia_telecomunicacion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_telecomunicaciones where recepcion_contingencia_telecomunicacion_id = $1	limit 1';
 		
 		-- add 20190525 rgt
 		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then				 
 			v_sql:= 'select recepcion_contingencia_nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_recepciones_contingencias_notas_creditos_debitos_sfv where recepcion_contingencia_nota_credito_debito_sfv_id = $1	limit 1';
 		
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_id_rec_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_rec_cor_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para sector 25 (sre_fac_recepciones_contingencias_correctas_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 24/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para sector 13 - sre_fac_recepciones_contingencias_correctas_libres_consig, 
				sector 16 - sre_fac_recepciones_contingencias_correctas_seguridad_alimen
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 18/11/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'select recepcion_contingencia_correcta_estandar_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_estandares	where recepcion_contingencia_estandar_id=$1	limit 1';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select recepcion_contingencia_correcta_colegio_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_colegios where recepcion_contingencia_colegio_id=$1	limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select recepcion_contingencia_correcta_alquiler_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_alquileres where recepcion_contingencia_alquiler_id=$1 limit 1';

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select recepcion_contingencia_correcta_combustible_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_combustibles where recepcion_contingencia_combustible_id=$1	limit 1';

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_servicio_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_servicios	where recepcion_contingencia_servicio_id=$1 limit 1';
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select recepcion_contingencia_correcta_embotelladora_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_embotelladoras	where recepcion_contingencia_embotelladora_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
			v_sql:= 'select recepcion_contingencia_correcta_banco_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_bancos	where recepcion_contingencia_banco_id = $1	limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select recepcion_contingencia_correcta_hotel_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_hoteles where recepcion_contingencia_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select recepcion_contingencia_correcta_hospital_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_hospitales	where recepcion_contingencia_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select recepcion_contingencia_correcta_juego_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_juegos	where recepcion_contingencia_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_espectaculo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_espectaculos where recepcion_contingencia_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_exportacion_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_exportaciones where recepcion_contingencia_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_libre_consignacion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_libres_consig where recepcion_contingencia_libre_consignacion_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_zona_franca_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_zonas_francas	where recepcion_contingencia_zona_franca_id=$1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_espectaculo_nacional_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_espectaculos_nacionales	where recepcion_contingencia_espectaculo_nacional_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_seguridad_alimentaria_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_seguridad_alimen where recepcion_contingencia_seguridad_alimentaria_id = $1 limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_moneda_extranjera_id  from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_monedas_extranjeras where recepcion_contingencia_moneda_extranjera_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select recepcion_contingencia_correcta_nota_credito_debito_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_notas_creditos_debitos where recepcion_contingencia_nota_credito_debito_id = $1 limit 1';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select recepcion_contingencia_correcta_nota_conciliacion_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_notas_conciliaciones	where recepcion_contingencia_nota_conciliacion_id=$1	limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select recepcion_contingencia_correcta_boleto_aereo_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_boletos_aereos	where recepcion_contingencia_boleto_aereo_id = $1	limit 1';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select recepcion_contingencia_correcta_turismo_receptivo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_turismos_receptivos where recepcion_contingencia_turismo_receptivo_id = $1 limit 1';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select recepcion_contingencia_correcta_tasa_cero_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_tasas_ceros	where recepcion_contingencia_tasa_cero_id = $1 limit 1';	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select recepcion_contingencia_correcta_hidrocarburo_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_hidrocarburos	where recepcion_contingencia_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_contingencia_correcta_exportacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_exportaciones_ypfb	where recepcion_contingencia_exportacion_ypfb_id = $1	limit 1';
 		
 		--add 20190729 rgt
 		--modificacion 20192510 eca
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select recepcion_contingencia_correcta_exportacion_minera_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_export_mineras	where recepcion_contingencia_exportacion_minera_id = $1	limit 1';
 			
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_contingencia_correcta_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_libres_consignaciones_ypfb where recepcion_contingencia_correcta_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select recepcion_contingencia_correcta_minera_interna_id	from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_mineras_internas		where recepcion_contingencia_minera_interna_id=$1	limit 1'; 					
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select recepcion_contingencia_correcta_prevalorada_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_prevaloradas where recepcion_contingencia_prevalorada_id=$1	limit 1';
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select recepcion_contingencia_correcta_telecomunicacion_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_telecomunicaciones where recepcion_contingencia_telecomunicacion_id = $1	limit 1';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select recepcion_contingencia_correcta_nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_recepciones_contingencias_correctas_notas_creditos_debitos_sfv where recepcion_contingencia_nota_credito_debito_sfv_id = $1	limit 1';
		
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';		
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_id_rec_cor_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_recepcion(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'select recepcion_estandar_id from sre_recaudaciones.sre_fac_recepciones_estandares	where recepcion_estandar_id=$1	limit 1';	 
														
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select recepcion_colegio_id from sre_recaudaciones.sre_fac_recepciones_colegios where recepcion_colegio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select recepcion_alquiler_id from sre_recaudaciones.sre_fac_recepciones_alquileres where recepcion_alquiler_id = $1 limit 1';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select recepcion_combustible_id from sre_recaudaciones.sre_fac_recepciones_combustibles where recepcion_combustible_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= 'select recepcion_servicio_id from sre_recaudaciones.sre_fac_recepciones_servicios	where recepcion_servicio_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select recepcion_embotelladora_id from sre_recaudaciones.sre_fac_recepciones_embotelladoras where recepcion_embotelladora_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select recepcion_banco_id from sre_recaudaciones.sre_fac_recepciones_bancos where recepcion_banco_id = $1	limit 1';	
		
 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select recepcion_hotel_id from sre_recaudaciones.sre_fac_recepciones_hoteles where recepcion_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select recepcion_hospital_id from sre_recaudaciones.sre_fac_recepciones_hospitales	where recepcion_hospital_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select recepcion_juego_id from sre_recaudaciones.sre_fac_recepciones_juegos where recepcion_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select recepcion_espectaculo_id from sre_recaudaciones.sre_fac_recepciones_espectaculos where recepcion_espectaculo_id=$1	limit 1';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select recepcion_exportacion_id	from sre_recaudaciones.sre_fac_recepciones_exportaciones where recepcion_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select recepcion_libre_consignacion_id from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones where recepcion_libre_consignacion_id = $1 limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select recepcion_zona_franca_id	from sre_recaudaciones.sre_fac_recepciones_zonas_francas	where recepcion_zona_franca_id = $1	limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select recepcion_espectaculo_nacional_id from sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales	where recepcion_espectaculo_nacional_id = $1	limit 1';

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select recepcion_seguridad_alimentaria_id	from sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias where recepcion_seguridad_alimentaria_id=$1 limit 1';	
				
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select recepcion_moneda_extranjera_id  from sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras where recepcion_moneda_extranjera_id=$1 limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select recepcion_nota_credito_debito_id  from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos where recepcion_nota_credito_debito_id=$1 limit 1';
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select recepcion_nota_conciliacion_id 	from sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones		where recepcion_nota_conciliacion_id=$1	limit 1';			

		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select recepcion_boleto_aereo_id from sre_recaudaciones.sre_fac_recepciones_boletos_aereos		where recepcion_boleto_aereo_id = $1	limit 1';			
		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select recepcion_turismo_receptivo_id from sre_recaudaciones.sre_fac_recepciones_turismos_receptivos where recepcion_turismo_receptivo_id=$1 limit 1';	
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select recepcion_tasa_cero_id from sre_recaudaciones.sre_fac_recepciones_tasas_ceros	where recepcion_tasa_cero_id=$1 limit 1';	
		-- add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select recepcion_hidrocarburo_id from sre_recaudaciones.sre_fac_recepciones_hidrocarburos	where recepcion_hidrocarburo_id=$1	limit 1';	
		-- add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_exportacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb	where recepcion_exportacion_ypfb_id = $1	limit 1';
 		
 		-- add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select recepcion_exportacion_minera_id from sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras	where recepcion_exportacion_minera_id = $1	limit 1';
 		
 		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb	where recepcion_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg
 		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select recepcion_minera_interna_id 	from sre_recaudaciones.sre_fac_recepciones_mineras_internas			where recepcion_minera_interna_id=$1	limit 1';			 			
 			
		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then				 
 			v_sql:= 'select recepcion_prevalorada_id from sre_recaudaciones.sre_fac_recepciones_prevaloradas where recepcion_prevalorada_id = $1	limit 1';
 		
 		-- add 20190524 rgt
 		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then				 
 			v_sql:= 'select recepcion_telecomunicacion_id from sre_recaudaciones.sre_fac_recepciones_telecomunicaciones where recepcion_telecomunicacion_id = $1	limit 1';
 		
 		-- add 20190525 rgt
 		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then				 
 			v_sql:= 'select recepcion_nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv where recepcion_nota_credito_debito_sfv_id = $1	limit 1';
 		
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_id_recepcion')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_recepcion_correcta(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
			v_sql:= 'select recepcion_correcta_estandar_id	from sre_recaudaciones.sre_fac_recepciones_correctas_estandares	where recepcion_estandar_id=$1	limit 1';	 
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select recepcion_correcta_colegio_id from sre_recaudaciones.sre_fac_recepciones_correctas_colegios where recepcion_colegio_id=$1	limit 1';	
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select recepcion_correcta_alquiler_id	from sre_recaudaciones.sre_fac_recepciones_correctas_alquileres where recepcion_alquiler_id=$1 limit 1';		

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select recepcion_correcta_combustible_id from sre_recaudaciones.sre_fac_recepciones_correctas_combustibles where recepcion_combustible_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
			v_sql:= 'select recepcion_correcta_servicio_id from sre_recaudaciones.sre_fac_recepciones_correctas_servicios	where recepcion_servicio_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= 'select recepcion_correcta_embotelladora_id from sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras	where recepcion_embotelladora_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
			v_sql:= 'select recepcion_correcta_banco_id from sre_recaudaciones.sre_fac_recepciones_correctas_bancos	where recepcion_banco_id = $1	limit 1';	

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= 'select recepcion_correcta_hotel_id from sre_recaudaciones.sre_fac_recepciones_correctas_hoteles where recepcion_hotel_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select recepcion_correcta_hospital_id from sre_recaudaciones.sre_fac_recepciones_correctas_hospitales	where recepcion_hospital_id = $1 limit 1';	
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= 'select recepcion_correcta_juego_id from sre_recaudaciones.sre_fac_recepciones_correctas_juegos	where recepcion_juego_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			v_sql:= 'select recepcion_correcta_espectaculo_id from sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos where recepcion_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			v_sql:= 'select recepcion_correcta_exportacion_id	from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones where recepcion_exportacion_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select recepcion_correcta_libre_consignacion_id from sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones	where recepcion_libre_consignacion_id = $1 limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select recepcion_correcta_zona_franca_id	from sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas	where recepcion_zona_franca_id=$1	limit 1';	
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			v_sql:= 'select recepcion_correcta_espectaculo_nacional_id from sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales	where recepcion_espectaculo_nacional_id = $1	limit 1';	

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			v_sql:= 'select recepcion_correcta_seguridad_alimentaria_id	from sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias where recepcion_seguridad_alimentaria_id = $1 limit 1';	
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select recepcion_correcta_moneda_extranjera_id  from sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras where recepcion_moneda_extranjera_id = $1 limit 1';	

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			v_sql:='select recepcion_correcta_nota_credito_debito_id from sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos where recepcion_nota_credito_debito_id = $1 limit 1';		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			v_sql:= 'select recepcion_correcta_nota_conciliacion_id	from sre_recaudaciones.sre_fac_recepciones_correctas_notas_conciliaciones	where recepcion_nota_conciliacion_id=$1	limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			v_sql:= 'select recepcion_correcta_boleto_aereo_id	from sre_recaudaciones.sre_fac_recepciones_correctas_boletos_aereos	where recepcion_boleto_aereo_id = $1	limit 1';			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
			v_sql:= 'select recepcion_correcta_turismo_receptivo_id from sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos where recepcion_turismo_receptivo_id = $1 limit 1';	

		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select recepcion_correcta_tasa_cero_id from sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros	where recepcion_tasa_cero_id = $1 limit 1';	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= 'select recepcion_correcta_hidrocarburo_id from sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos	where recepcion_hidrocarburo_id = $1	limit 1';	
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_correcta_exportacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb	where recepcion_exportacion_ypfb_id = $1	limit 1';
 		
 		--add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= 'select recepcion_correcta_exportacion_minera_id from sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras	where recepcion_exportacion_minera_id = $1	limit 1';
 			
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= 'select recepcion_correcta_libre_consignacion_ypfb_id from sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb where recepcion_correcta_libre_consignacion_ypfb_id = $1 limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
			v_sql:= 'select recepcion_correcta_minera_interna_id	from sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas		where recepcion_minera_interna_id=$1	limit 1'; 					
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
			v_sql:= 'select recepcion_correcta_prevalorada_id from sre_recaudaciones.sre_fac_recepciones_correctas_prevaloradas where recepcion_prevalorada_id=$1	limit 1';
		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
			v_sql:= 'select recepcion_correcta_telecomunicacion_id from sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones where recepcion_telecomunicacion_id = $1	limit 1';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
			v_sql:= 'select recepcion_correcta_nota_credito_debito_sfv_id from sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv where recepcion_nota_credito_debito_sfv_id = $1	limit 1';
		
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_id_recepcion_correcta')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_recepcion_paquete(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';
	v_estado_procesado varchar:='706';
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_estandares	where  recepcion_paquete_estandar_id=$1	limit 1';	 
		--add 20190410 vcg												
		when p_tipo_documento_sector_id = 2
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_colegios where  recepcion_paquete_colegio_id=$1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres where  recepcion_paquete_alquiler_id=$1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles where recepcion_paquete_combustible_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_servicios	where  recepcion_paquete_servicio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras	where   recepcion_paquete_embotelladora_id = $1	limit 1';	

		--add 20190408 vcg
		 when p_tipo_documento_sector_id = 7
			then			
  			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_bancos	where  recepcion_paquete_banco_id = $1	limit 1';					
		--add 20190408 vcg		
 		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles where  recepcion_paquete_hotel_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales	where recepcion_paquete_hospital_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_juegos	where recepcion_paquete_juego_id=$1 limit 1';	
	
		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos	where  recepcion_paquete_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select 1000	from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones where recepcion_paquete_exportacion_id=$1	limit 1';	
		-- add 20190409
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones	where  recepcion_paquete_libre_consignacion_id = $1	limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas	where   recepcion_paquete_zona_franca_id=$1	limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales where   recepcion_paquete_espectaculo_nacional_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias where  recepcion_paquete_seguridad_alimentaria_id = $1 limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras where  recepcion_paquete_moneda_extranjera_id=$1 limit 1';	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos where  recepcion_paquete_nota_credito_debito_id=$1 limit 1';
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones	where  recepcion_paquete_nota_conciliacion_id=$1	limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos	where  recepcion_paquete_boleto_aereo_id=$1	limit 1';			
			
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos where  recepcion_paquete_turismo_receptivo_id=$1 limit 1';	

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros where  recepcion_paquete_tasa_cero_id=$1 limit 1';	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos	where  recepcion_paquete_hidrocarburo_id = $1	limit 1';					
		--add 20190410 rgt 
 		when p_tipo_documento_sector_id = 24
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb	where  recepcion_paquete_exportacion_ypfb_id = $1	limit 1';
 		
 		--add 20190729 rgt 
 		when p_tipo_documento_sector_id = 25
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras	where  recepcion_paquete_exportacion_minera_id = $1	limit 1';
 			
 		--add 20190410 jf 
 		when p_tipo_documento_sector_id = 26
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb	where  recepcion_paquete_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas		where  recepcion_paquete_minera_interna_id=$1	limit 1'; 			
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas where  recepcion_paquete_prevalorada_id=$1	limit 1';
		
		--add 20190724 rgt				
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones where  recepcion_paquete_telecomunicacion_id=$1	limit 1';
		
		--add 20190729 rgt				
		when p_tipo_documento_sector_id = 30
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv where  recepcion_paquete_nota_credito_debito_sfv_id = $1	limit 1';
			
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_id_recepcion_paquete')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_rec_paq_contingencia(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para el sector 25 (sre_fac_recepciones_contingencias_paquetes_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 25/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';
	v_estado_procesado varchar:='706';
begin 	
	case
		when p_tipo_documento_sector_id = 1
			then 						
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_estandares	where  recepcion_contingencia_paquete_estandar_id=$1	limit 1';	 
		--add 20190410 vcg												
		when p_tipo_documento_sector_id = 2
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_colegios where  recepcion_contingencia_paquete_colegio_id=$1	limit 1';	
				
		when p_tipo_documento_sector_id = 3
			then 								
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_alquileres where  recepcion_contingencia_paquete_alquiler_id=$1 limit 1';	

		when p_tipo_documento_sector_id = 4
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_combustibles where recepcion_contingencia_paquete_combustible_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 5
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_servicios	where  recepcion_contingencia_paquete_servicio_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 6
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_embotelladoras	where   recepcion_contingencia_paquete_embotelladora_id = $1	limit 1';	

		--add 20190408 vcg
		 when p_tipo_documento_sector_id = 7
			then			
  			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_bancos	where  recepcion_contingencia_paquete_banco_id = $1	limit 1';					
		--add 20190408 vcg		
 		when p_tipo_documento_sector_id = 8
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hoteles where  recepcion_contingencia_paquete_hotel_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 9
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hospitales	where recepcion_contingencia_paquete_hospital_id=$1 limit 1';	
				
		when p_tipo_documento_sector_id = 10
			then 			
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_juegos	where recepcion_contingencia_paquete_juego_id=$1 limit 1';	
	
		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos	where  recepcion_contingencia_paquete_espectaculo_id = $1	limit 1';	
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'select 1000	from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones where recepcion_contingencia_paquete_exportacion_id=$1	limit 1';	
		-- add 20190409
		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consignaciones	where  recepcion_contingencia_paquete_libre_consignacion_id = $1	limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_zonas_francas	where   recepcion_contingencia_paquete_zona_franca_id=$1	limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_espectaculos_nacionales where   recepcion_contingencia_paquete_espectaculo_nacional_id=$1	limit 1';	

		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_seguridades_alimentarias where  recepcion_contingencia_paquete_seguridad_alimentaria_id = $1 limit 1';	

		--add 20190408 vcg
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_monedas_extranjeras where  recepcion_contingencia_paquete_moneda_extranjera_id=$1 limit 1';	

		--add 20190410 jf
		when p_tipo_documento_sector_id = 18
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_creditos_debitos where  recepcion_contingencia_paquete_nota_credito_debito_id=$1 limit 1';
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_conciliaciones	where  recepcion_contingencia_paquete_nota_conciliacion_id=$1	limit 1';			
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_boletos_aereos	where  recepcion_contingencia_paquete_boleto_aereo_id=$1	limit 1';			
			
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 21
			then 										
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_turismos_receptivos where  recepcion_contingencia_paquete_turismo_receptivo_id=$1 limit 1';	

		--add 20190410 vcg
		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_tasas_ceros where  recepcion_contingencia_paquete_tasa_cero_id=$1 limit 1';	
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_hidrocarburos	where  recepcion_contingencia_paquete_hidrocarburo_id = $1	limit 1';					
		--add 20190410 rgt 
 		when p_tipo_documento_sector_id = 24
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_exportaciones_ypfb	where  recepcion_contingencia_paquete_exportacion_ypfb_id = $1	limit 1';
 		
 		--add 20190729 rgt 
 		--actualizado 20191025 eca
 		when p_tipo_documento_sector_id = 25
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_export_mineras where  recepcion_contingencia_paquete_exportacion_minera_id = $1	limit 1';
 			
 		--add 20190410 jf 
 		when p_tipo_documento_sector_id = 26
			then				 
 			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_libres_consignaciones_ypfb	where  recepcion_contingencia_paquete_libre_consignacion_ypfb_id = $1	limit 1';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_mineras_internas		where  recepcion_contingencia_paquete_minera_interna_id=$1	limit 1'; 			
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_prevaloradas where  recepcion_contingencia_paquete_prevalorada_id=$1	limit 1';
		
		--add 20190724 rgt				
		when p_tipo_documento_sector_id = 29
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_telecomunicaciones where  recepcion_contingencia_paquete_telecomunicacion_id=$1	limit 1';
		
		--add 20190729 rgt				
		when p_tipo_documento_sector_id = 30
			then
			v_sql:= 'select 1000 from sre_recaudaciones.sre_fac_recepciones_contingencias_paquetes_notas_creditos_debitos_sfv where  recepcion_contingencia_paquete_nota_credito_debito_sfv_id = $1	limit 1';
			
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      --return '-1';	
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_rec_paq_contingencia')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_calcular_porcentaje_prueba(p_cantidad_intento bigint, p_cantidad_correctos_errores bigint)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	--TODO: verificar el calculo del pocentaje 
	v_resultado numeric(3,2):=0.0;	
		
begin			 			
	  											
	if( (cast(p_cantidad_correctos_errores as decimal)  * cast(p_cantidad_intento as decimal) /100) > 1.00) then
		v_resultado:= 1.00;
	else 
		v_resultado:=(cast(p_cantidad_correctos_errores as decimal)  * cast(p_cantidad_intento as decimal) /100);
	end if;
							
  return v_resultado;
			
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_combinaciones_cuf(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, hash character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar las combinaciones de generacion de cuf a partir de los 
                parametros de entrada  
PARAMETROS INGRESO
    		p_sistema_id
    		p_nit
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
	v_nro_casos_prueba_punto_venta integer := 0;
	p_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	v_nro_casos_prueba integer :=0;
begin
	
	---1 COMBINACIONES PARA SUCURSALES
	--====================================
	/*
	 * CUANDO SE GENERA EL CUF POR SUCURSAL EL PUNTO DE VENTA VA POR DEFECTO CON 0 (CERO)
	 * 
	 * */
	drop table if exists tabla1; --tabla1 casos de prueba CUF de sucursales
	create temp table tabla1 as
	select nit_emisor as nit, sucursales.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta as pos,
	       md5(nit_emisor||'|'||sucursales.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta)::varchar as hash
	from
	(
	select b.contribuyente_id, a.sistema_id, c.codigo_clasificador as codigo_sector, e.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes b
	on a.sistema_id=b.sistema_id
	inner join sre_recaudaciones.sre_fac_clasificadores c
	on tipo_documento_factura_id = c.codigo_clasificador_equivalente and c.agrupador = 'TIPO DOCUMENTO SECTOR'
	inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores d
	on tipo_documento_factura_id = d.tipo_documento_sector_id
	inner join sre_recaudaciones.sre_fac_clasificadores e
	on d.tipo_documento_fiscal_id = e.codigo_clasificador_equivalente and e.agrupador = 'TIPO DOCUMENTO FISCAL'
	) as sectores -- tipo documento sector  y documento fiscal
	cross join 
	(
	select persona_contribuyente_id as contribuyente_id, numero_sucursal 
	from scn_contribuyentes.scn_emp_sucursales_contribuyentes
	) as  sucursales -- sucursales
	cross join
	(
	select a.contribuyente_id, a.sistema_id, b.codigo_clasificador as codigo_modalidad
	from sre_recaudaciones.sre_fac_sistemas_contribuyentes a, sre_recaudaciones.sre_fac_clasificadores b
	where b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION'
	) as emision -- emision
	cross join unnest
	(
	ARRAY[0]
	) as punto_venta  -- punto de venta por defecto 0 para todas las sucursales
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id = 17  
	sectores.sistema_id = p_sistema_id and
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	sucursales.contribuyente_id = p_contribuyente_id;


	---2 COMBINACIONES PARA PUNTOS DE VENTA
	--=====================================
	/**
	 * CUANDO SE TIENE PUNTOS DE VENTA
	 * 
	 * EN LA GENERACION DEL CUF VA EL PUNTO DE VENTA Y LA SUCURSAL CON LA CUAL SE CREO EL PUNTO DE VENTA 
	 * 
	 */

	drop table if exists tabla2; --casos de prueba con puntos de venta
	create temp table tabla2 as
	select nit_emisor as nit, punto_venta.numero_sucursal as sucursal, sistemas.codigo_modalidad as modalidad, emision.codigo_emision as emision, sectores.codigo_documento_fiscal as documento_fiscal, sectores.codigo_sector as sector, punto_venta.numero_pos as pos,
	   md5(nit_emisor||'|'||punto_venta.numero_sucursal||'|'||sistemas.codigo_modalidad||'|'||emision.codigo_emision||'|'||sectores.codigo_documento_fiscal||'|'||sectores.codigo_sector||'|'||punto_venta.numero_pos)::varchar as hash
	from
	(
	select b.contribuyente_id, a.sistema_id, c.codigo_clasificador as codigo_sector, e.codigo_clasificador as codigo_documento_fiscal
	from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes b
	on a.sistema_id=b.sistema_id
	inner join sre_recaudaciones.sre_fac_clasificadores c
	on tipo_documento_factura_id = c.codigo_clasificador_equivalente and c.agrupador = 'TIPO DOCUMENTO SECTOR'
	inner join sre_recaudaciones.sre_fac_documentos_fiscales_sectores d
	on tipo_documento_factura_id = d.tipo_documento_sector_id
	inner join sre_recaudaciones.sre_fac_clasificadores e
	on d.tipo_documento_fiscal_id = e.codigo_clasificador_equivalente and e.agrupador = 'TIPO DOCUMENTO FISCAL'
	) as sectores -- tipo documento sector y documento fiscal
	cross join  
	(
	select contribuyente_id as contribuyente_id, sucursal_id as numero_sucursal, numero_pos 
	from sre_recaudaciones.sre_fac_puntos_ventas
	) as  punto_venta -- puntos de venta
	cross join
	(
	select a.contribuyente_id, a.sistema_id, b.codigo_clasificador as codigo_modalidad
	from sre_recaudaciones.sre_fac_sistemas_contribuyentes a, sre_recaudaciones.sre_fac_clasificadores b
	where b.agrupador = 'TIPO MODALIDAD' and a.modalidad_facturacion_id = b.codigo_clasificador_equivalente
	) as sistemas -- sistema y modalidades
	cross join
	(
	select codigo_clasificador as codigo_emision
	from sre_recaudaciones.sre_fac_clasificadores
	where agrupador = 'TIPO EMISION'
	) as emision -- emision 
	cross join unnest
	(
	ARRAY[p_nit]
	) as nit_emisor -- obtener el nit 
	where
	sistemas.sistema_id = p_sistema_id and --sistema_id prueba  17
	sectores.sistema_id = p_sistema_id and  --sistema_id prueba  17
	sistemas.contribuyente_id = p_contribuyente_id and
	sectores.contribuyente_id = p_contribuyente_id and 
	punto_venta.contribuyente_id = p_contribuyente_id;
	
	---Nota: Se obtiene el nro de registros  de la  tabla2 (si se tiene puntos de venta )
	v_nro_casos_prueba_punto_venta := (select count(*) from tabla2);
	

	---Nota: Se debe unir las tablas de casos de pruebas: tabla1(sucursales) y tabla2(sucursales y punto de venta) - en caso de que se tengan puntos de venta
	---      caso contrario se mantiene los casos de prueba de la tabla1(sucursales)
	drop table if exists casos_prueba_etapa0; 
	if(v_nro_casos_prueba_punto_venta > 0)then	
	
	    create temp table casos_prueba_etapa0 as
		select *
		from tabla1
		union all
		select *
		from tabla2;
	else
		create temp table casos_prueba_etapa0 as
		select *
		from tabla1;
	end if;
	
	--Nota: Obtenemos el numero de registros de casos de prueba
	v_nro_casos_prueba := (select count(*) from casos_prueba_etapa0);
	
	--Nota: Consultamos si el numero de casos de prueba es mayor a 0
	if (v_nro_casos_prueba > 0)then
		return query select * from  casos_prueba_etapa0;
	else 
		drop table if exists casos_prueba_etapa0; 
	    create temp table casos_prueba_etapa0(nit bigint, sucursal integer, modalidad integer, emision integer, documento_fiscal integer, sector integer, pos bigint, hash varchar) ;
		return query select * from  casos_prueba_etapa0;
	end if;

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_concatenar_respuesta_verificacion_paquete(v_json json, respuesta_verificacion_individual json)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar:='';
   --v_json json;
begin		
	v_resultado:=(
	SELECT lhs::jsonb || rhs::jsonb
	FROM ( VALUES 
  	(
	    v_json->'resultado_individual',
	    respuesta_verificacion_individual	    
  	)
	) AS t(lhs,rhs)
	);
			
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_concatenar_respuesta_verificacion_paquete'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_actualizar_fecha_consolidacion_etapa_2(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta UPDATE para la actualizacion de la fecha de consolidacion de las tablas de ventas, que se ejecuta despues de la etapa 2 para denotar que se consolido el registro
PARAMETROS INGRESO
tipo documento sector, tipo documento fiscal
PARAMETROS SALIDA
cadena que representa la consulta UPDATE para el campo fecha_consolidacion de las tablas de ventas
SUBSISTEMA : Facturación
FECHA CREACION : 24/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : 
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='';	
begin 	 	
	v_sql := (case			
				when(p_tipo_documento_sector_id=1382) then --sre_fman_recepciones_estandares
				'update sre_recaudaciones.sre_fman_recepciones_estandares
				set fecha_consolidacion=$1 where recepcion_estandar_id =$2'				
		
				when(p_tipo_documento_sector_id=1387) then --sre_fman_recepciones_alcanzadas_ice
				'update sre_recaudaciones.sre_fman_recepciones_alcanzadas_ice
				set fecha_consolidacion=$1 where recepcion_alcanzada_ice_id =$2'
				
				when(p_tipo_documento_sector_id=1384) then --sre_fman_recepciones_alquileres
				'update sre_recaudaciones.sre_fman_recepciones_alquileres
				set fecha_consolidacion=$1 where recepcion_alquiler_id =$2'	

				when(p_tipo_documento_sector_id=1393) then --sre_fman_recepciones_exportaciones
				'update sre_recaudaciones.sre_fman_recepciones_comerciales_exportaciones
				set fecha_consolidacion=$1 where recepcion_comercial_exportacion_id =$2'		
				
				when(p_tipo_documento_sector_id=1394) then --sre_fman_recepciones_libres_consignaciones
				'update sre_recaudaciones.sre_fman_recepciones_libres_consignaciones
				set fecha_consolidacion=$1 where recepcion_libre_consignacion_id =$2'	

				when(p_tipo_documento_sector_id=1385) then --sre_fman_recepciones_hidrocarburos
				'update sre_recaudaciones.sre_fman_recepciones_hidrocarburos
				set fecha_consolidacion=$1 where recepcion_hidrocarburo_id =$2'	

				when(p_tipo_documento_sector_id=1388) then --sre_fman_recepciones_entidades_financieras
				'update sre_recaudaciones.sre_fman_recepciones_entidades_financieras
				set fecha_consolidacion=$1 where recepcion_entidad_financiera_id =$2'	

				when(p_tipo_documento_sector_id=1390) then --sre_fman_recepciones_hospitales
				'update sre_recaudaciones.sre_fman_recepciones_hospitales
				set fecha_consolidacion=$1 where recepcion_hospital_id =$2'	

				when(p_tipo_documento_sector_id=1389) then --sre_fman_recepciones_hoteles
				'update sre_recaudaciones.sre_fman_recepciones_hoteles
				set fecha_consolidacion=$1 where recepcion_hotel_id =$2'		

				when(p_tipo_documento_sector_id=1383) then --sre_fman_recepciones_colegios
				'update sre_recaudaciones.sre_fman_recepciones_sectores_educativos
				set fecha_consolidacion=$1 where recepcion_sector_educativo_id =$2'	

				when(p_tipo_documento_sector_id=1399) then --sre_fman_recepciones_notas_creditos_debitos
				'update sre_recaudaciones.sre_fman_recepciones_notas_credito_debito
				set fecha_consolidacion=$1 where recepcion_nota_credito_debito_id =$2'	

				when(p_tipo_documento_sector_id=1398) then --sre_fman_recepciones_monedas_extranjeras
				'update sre_recaudaciones.sre_fman_recepciones_notas_monedas_extranjeras
				set fecha_consolidacion=$1 where recepcion_nota_moneda_extranjera_id =$2'	

				when(p_tipo_documento_sector_id=1825) then --sre_fman_recepciones_tasas_ceros
				'update sre_recaudaciones.sre_fman_recepciones_notas_tasa_cero
				set fecha_consolidacion=$1 where recepcion_nota_tasa_cero_id =$2'	
				
				when(p_tipo_documento_sector_id=1395) then --sre_fman_recepciones_zonas_francas
				'update sre_recaudaciones.sre_fman_recepciones_notas_zona_franca
				set fecha_consolidacion=$1 where recepcion_nota_zona_franca_id =$2'		
	
			end);							
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_ope_consulta_actualizar_fecha_consolidacion_etapa_2')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_errores_detalles_facturacion_manual(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_tipo_crud character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta INSERT para detalles errores dependiento del tipo sector proporcionado
PARAMETROS INGRESO
tipo documento fiscal, tipo documento sector y tipo de crud (C) create (U) update
PARAMETROS SALIDA
cadna que representa el INSERT para las tablas de detalles errores
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	v_tabla_errores_detalles varchar;
	v_campo_recepcion_error_id varchar;
	v_campo_recepcion_errores_detalles varchar;

	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --Nota: FACTURA ESTANDAR
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_estandares';										  
				v_campo_recepcion_error_id := 'recepcion_error_estandar_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_estandar_id';		

		when p_tipo_documento_sector_id = 1387 --Nota: FACTURA ALCANZADA POR ICE
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_alcanzadas_ice';										  
				v_campo_recepcion_error_id := 'recepcion_error_alcanzada_ice_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_alcanzada_ice_id';	

		when p_tipo_documento_sector_id = 1384 --Nota: FACTURA ALQUILER BIENES
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_alquileres';										  
				v_campo_recepcion_error_id := 'recepcion_error_alquiler_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_alquiler_id';	
				
		when p_tipo_documento_sector_id = 1393 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_exportaciones';										  
				v_campo_recepcion_error_id := 'recepcion_error_comercial_exportacion_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_comercial_exportacion_id';	
				
		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL EXPORTACION LIBRE CONSIG
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_libres_consigna';										  
				v_campo_recepcion_error_id := 'recepcion_error_libre_consignacion_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_libre_consigna_id';
				
		when p_tipo_documento_sector_id = 1385 --Nota: FACTURA COMERCIALIZACION DE HIDROCARBUROS
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_hidrocarburos';										  
				v_campo_recepcion_error_id := 'recepcion_error_hidrocarburo_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_hidrocarburo_id';
				
		when p_tipo_documento_sector_id = 1388 --Nota: FACTURA ENTIDADES FINANCIERAS
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_entidades_financieras';										  
				v_campo_recepcion_error_id := 'recepcion_error_entidad_financiera_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_entidad_financiera_id';		

		when p_tipo_documento_sector_id = 1390 --Nota: FACTURA HOSPITALES CLINICAS
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_hospitales';										  
				v_campo_recepcion_error_id := 'recepcion_error_hospital_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_hospital_id';	

		when p_tipo_documento_sector_id = 1389 --Nota: FACTURA HOTELES
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_hoteles';										  
				v_campo_recepcion_error_id := 'recepcion_error_hotel_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_hotel_id';	

		when p_tipo_documento_sector_id = 1383 --Nota: FACTURA SECTOR EDUCATIVO
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_sectores_educativos';										  
				v_campo_recepcion_error_id := 'recepcion_error_sector_educativo_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_sector_educativo_id';	

		when p_tipo_documento_sector_id = 1399 --NOTA DEBITO CREDITO
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_notas_credito_debito';										  
				v_campo_recepcion_error_id := 'recepcion_error_nota_credito_debito_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_nota_credito_debito_id';	

		when p_tipo_documento_sector_id = 1398 --NOTA COMPRA VENTA MONEDA EXTRANJERA
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_monedas_extranjeras';										  
				v_campo_recepcion_error_id := 'recepcion_error_nota_moneda_extranjera_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_moneda_extranjera_id';	
				
		when p_tipo_documento_sector_id = 1825 --NOTA TASA CERO
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_notas_tasas_cero';										  
				v_campo_recepcion_error_id := 'recepcion_error_nota_tasa_cero_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_nota_tasa_cero_id';	

		when p_tipo_documento_sector_id = 1395 --NOTA ZONA FRANCA
			then 					
				v_tabla_errores_detalles:='sre_fman_recepciones_errores_detalles_notas_zona_franca';										  
				v_campo_recepcion_error_id := 'recepcion_error_nota_zona_franca_id';	
				v_campo_recepcion_errores_detalles:= 'recepcion_error_detalle_nota_zona_franca_id';	
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:=
			'INSERT INTO sre_recaudaciones.'||v_tabla_errores_detalles||'
			(	
				'||v_campo_recepcion_error_id||',
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 
				codigo_error_id,
				fecha_registro,
				fecha_ultima_modificacion_id,
				estado_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7
		    ) returning '||v_campo_recepcion_errores_detalles;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_consulta_errores_detalles_facturacion_manual')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_errores_facturacion_manual_etapa_2(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_tipo_crud character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta dinamico por sector, que representa el INSERT  de registro de errores
PARAMETROS INGRESO
Tipo documento fiscal, tipo documento sector y tipo de CRUD (C) create (U) update
PARAMETROS SALIDA
Cadena que representa el insert para las tablas de errores.
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	v_tabla_errores varchar;
	v_campo_recepcion_factura_id varchar;
	v_campo_recepcion_errores_id varchar;

	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --Nota: FACTURA ESTANDAR
			then 					
				v_tabla_errores:='sre_fman_recepciones_errores_estandares';										  
				v_campo_recepcion_factura_id := 'recepcion_estandar_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_estandar_id';			
				
		when p_tipo_documento_sector_id = 1383 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
				v_tabla_errores:='sre_fman_recepciones_errores_sectores_educativos';										  
				v_campo_recepcion_factura_id := 'recepcion_sector_educativo_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_sector_educativo_id';			
				
		when p_tipo_documento_sector_id = 1384 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 			
				v_tabla_errores:='sre_fman_recepciones_errores_alquileres';										  
				v_campo_recepcion_factura_id := 'recepcion_alquiler_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_alquiler_id';					
				
		when p_tipo_documento_sector_id = 1385 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
				v_tabla_errores:='sre_fman_recepciones_errores_hidrocarburos';										  
				v_campo_recepcion_factura_id := 'recepcion_hidrocarburo_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_hidrocarburo_id';				
						
		when p_tipo_documento_sector_id = 1388 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			
				v_tabla_errores:='sre_fman_recepciones_errores_entidades_financieras';										  
				v_campo_recepcion_factura_id := 'recepcion_entidad_financiera_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_entidad_financiera_id';									
			
		when p_tipo_documento_sector_id = 1389 --Nota: FACTURA DE HOTELES
			then 		
				v_tabla_errores:='sre_fman_recepciones_errores_hoteles';										  
				v_campo_recepcion_factura_id := 'recepcion_hotel_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_hotel_id';			
 							
		when p_tipo_documento_sector_id = 1390 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
				v_tabla_errores:='sre_fman_recepciones_errores_hospitales';										  
				v_campo_recepcion_factura_id := 'recepcion_hospital_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_hospital_id';				
				 							
		when p_tipo_documento_sector_id = 1393 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then
				v_tabla_errores:='sre_fman_recepciones_errores_comerciales_exportaciones';										  
				v_campo_recepcion_factura_id := 'recepcion_comercial_exportacion_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_comercial_exportacion_id';						
 							
		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
				v_tabla_errores:='sre_fman_recepciones_errores_libres_consignaciones';										  
				v_campo_recepcion_factura_id := 'recepcion_libre_consignacion_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_libre_consignacion_id';				
 							
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
				v_tabla_errores:='sre_fman_recepciones_errores_notas_zona_franca';										  
				v_campo_recepcion_factura_id := 'recepcion_nota_zona_franca_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_nota_zona_franca_id';					
 							
		when p_tipo_documento_sector_id = 1387 --Nota: NOTA FISCAL ALCANZADA POR ICE
			then
				v_tabla_errores:='sre_fman_recepciones_errores_alcanzadas_ice';										  
				v_campo_recepcion_factura_id := 'recepcion_alcanzada_ice_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_alcanzada_ice_id';						
 							
		when p_tipo_documento_sector_id = 1398 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then
				v_tabla_errores:='sre_fman_recepciones_errores_notas_monedas_extranjeras';										  
				v_campo_recepcion_factura_id := 'recepcion_nota_moneda_extranjera_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_nota_moneda_extranjera_id';							
 							
		when p_tipo_documento_sector_id = 1399 --Nota: NOTA DE CREDITO-DEBITO
			then
				v_tabla_errores:='sre_fman_recepciones_errores_notas_credito_debito';										  
				v_campo_recepcion_factura_id := 'recepcion_nota_credito_debito_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_nota_credito_debito_id';					
 							
		when p_tipo_documento_sector_id = 1825 --Nota: NOTA FISCAL TASA CERO
			then
				v_tabla_errores:='sre_fman_recepciones_errores_notas_tasas_cero';										  				
				v_campo_recepcion_factura_id := 'recepcion_nota_tasa_cero_id';	
				v_campo_recepcion_errores_id:= 'recepcion_error_nota_tasa_cero_id';						
		
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:=
			'INSERT INTO sre_recaudaciones.'||v_tabla_errores||'
			(	usuario_registro_id, 
				usuario_ultima_modificacion_id, 
				'||v_campo_recepcion_factura_id||',
				sucursal_contribuyente_id,
				persona_contribuyente_id, 
				actividad_economica_id,
				modalidad_facturacion_id,
				tipo_documento_sector_id, 
				tipo_documento_fiscal_id, 
				estado_recepcion_documento_fiscal_id,
				codigo_actividad_economica,
				numero_sucursal, 
				numero_documento_fiscal, 
				caed, 
				fecha_emision,
				fecha_envio, 
				fecha_recepcion, 
				fecha_consolidacion,
				fecha_registro, 
				fecha_ultima_modificacion,
				estado_id
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19,
				$20,
				$21				
		    ) returning '||v_campo_recepcion_errores_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_consulta_errores_facturacion_manual_etapa_2')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_modificacion_monto_ventas_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la consulta SELECT para obtener el registro de  venta 
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta SELECT
SUBSISTEMA : Facturación
FECHA CREACION : 15/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_estandares where venta_estandar_id=$1 limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where venta_alcanzada_ice_id=$1 limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_alquileres where venta_alquiler_id=$1  limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where venta_comercial_exportacion_id=$1  limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  where venta_libre_consignacion_id=$1  limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_hidrocarburos where venta_hidrocarburo_id=$1	limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_entidades_financieras where venta_entidad_financiera_id=$1 limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_hospitales where venta_hospital_id=$1 limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_hoteles where venta_hotel_id=$1  limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_sectores_educativos where venta_sector_educativo_id=$1	  limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select 0 from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where venta_nota_credito_debito_id=$1  limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where venta_nota_moneda_extranjera_id=$1 limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero where venta_nota_tasa_cero_id=$1 limit 1';
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select monto_total from sre_recaudaciones.sre_fman_ventas_notas_zona_franca where venta_nota_zona_franca_id=$1	limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_consulta_modificacion_monto_ventas_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_recepcion_facturacion_manual_etapa_1(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la cadena que representa el script a ser ejecutado para el registro de la recpcion de acuerdo al tipo documento sector.
PARAMETROS INGRESO
Numero de tipo_documento_fiscal_id y numero de tipo_documento_sector_id
PARAMETROS SALIDA
Cadena que representa el script de INSERT en las tablas de recepcion de acuerdo al sector
SUBSISTEMA : Facturación
FECHA CREACION : 28/05/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : 
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='';	
begin 	 	
	v_sql := (case			
				when(p_tipo_documento_sector_id=1382) then --sre_fman_recepciones_estandares
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_estandares
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_estandar_id'	

				when(p_tipo_documento_sector_id=1383) then --sre_fman_recepciones_colegios
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_sectores_educativos
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_sector_educativo_id'

				when(p_tipo_documento_sector_id=1387) then --sre_fman_recepciones_alcanzadas_ice
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_alcanzadas_ice
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_alcanzada_ice_id'		
		
				when(p_tipo_documento_sector_id=1384) then --sre_fman_recepciones_alquileres
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_alquileres
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_alquiler_id'	

				when(p_tipo_documento_sector_id=1393) then --sre_fman_recepciones_comerciales_exportaciones
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_comerciales_exportaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_comercial_exportacion_id'		
				
				when(p_tipo_documento_sector_id=1394) then --sre_fman_recepciones_libres_consignaciones
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_libres_consignaciones
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_libre_consignacion_id'		

				when(p_tipo_documento_sector_id=1385) then --sre_fman_recepciones_hidrocarburos
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_hidrocarburos
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hidrocarburo_id'

				when(p_tipo_documento_sector_id=1388) then --sre_fman_recepciones_entidades_financieras
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_entidades_financieras
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_entidad_financiera_id'			

				when(p_tipo_documento_sector_id=1390) then --sre_fman_recepciones_hospitales
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_hospitales
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hospital_id'	

				when(p_tipo_documento_sector_id=1389) then --sre_fman_recepciones_hoteles
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_hoteles
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_hotel_id'	
				
				when(p_tipo_documento_sector_id=1399) then --sre_fman_recepciones_notas_creditos_debitos
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_notas_credito_debito
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_credito_debito_id'	

				when(p_tipo_documento_sector_id=1398) then --sre_fman_recepciones_monedas_extranjeras
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_notas_monedas_extranjeras
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_moneda_extranjera_id'	

				when(p_tipo_documento_sector_id=1825) then --sre_fman_recepciones_tasas_ceros
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_notas_tasa_cero
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_tasa_cero_id'
				
				when(p_tipo_documento_sector_id=1395) then --sre_fman_recepciones_zonas_francas
				'INSERT INTO sre_recaudaciones.sre_fman_recepciones_notas_zona_franca
				(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_paquete_id, persona_contribuyente_id, modalidad_facturacion_id, tipo_documento_fiscal_id, tipo_documento_sector_id, estado_recepcion_documento_fiscal_id, sucursal_contribuyente_id, numero_sucursal, numero_documento_fiscal, caed, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, actividad_economica_id, codigo_actividad_economica, fecha_emision)
				VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) returning recepcion_nota_zona_franca_id'			

								
			end);							
	return coalesce(v_sql,'0');	  	    	   	    	  		    
	
  EXCEPTION
  when others
    then
     
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fman_ope_armar_consulta_recepcion_etapa_1')) as character varying);
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_recepcion_facturacion_manual_etapa_2(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Armado de consulta que representa el script de INSERT para el CRUD de recepciones correctas
PARAMETROS INGRESO
numero tipo_documento_fiscal_id, numero tipo_documento_sector_id
PARAMETROS SALIDA
Script de INSERT para las tablas de recepciones correctas de acuerdo al sector
SUBSISTEMA : Facturación
FECHA CREACION : 03/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	v_tabla_recepciones_correctas varchar;
	v_campo_recepcion_correcta_factura_id varchar;
	v_campo_recepcion_paquete_factura_id varchar;
	v_campo_recepcion_factura_id varchar;
	

	v_factura integer:=1;
 	v_nota_credito_debito integer:=2;
 	v_nota_fiscal integer:=3;
 	v_boleta_contingencia integer:=4;
 	v_documento_equivalente integer:=5;
	
	v_sql varchar:='0';	
begin
	case
		when p_tipo_documento_sector_id = 1382 --Nota: FACTURA ESTANDAR
			then 					
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_estandares';										  						
				v_campo_recepcion_factura_id := 'recepcion_estandar_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_estandar_id';
				
		when p_tipo_documento_sector_id = 1387 --Nota: FACTURA ALCANZADA ICE
			then
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_alcanzadas_ice';										  						
				v_campo_recepcion_factura_id := 'recepcion_alcanzada_ice_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_alcanzada_ice';	

		when p_tipo_documento_sector_id = 1384 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 			
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_alquileres';										  						
				v_campo_recepcion_factura_id := 'recepcion_alquiler_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_alquiler_id';
								
		when p_tipo_documento_sector_id = 1393 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_comerciales_exportaciones';										  						
				v_campo_recepcion_factura_id := 'recepcion_comercial_exportacion_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_comercial_exportacion_id';	

		when p_tipo_documento_sector_id = 1394 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_libres_consignaciones';										  						
				v_campo_recepcion_factura_id := 'recepcion_libre_consignacion_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_libre_consignacion_id';

		when p_tipo_documento_sector_id = 1385 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_hidrocarburos';										  						
				v_campo_recepcion_factura_id := 'recepcion_hidrocarburo_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_hidrocarburo_id';
				
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_entidades_financieras';										  						
				v_campo_recepcion_factura_id := 'recepcion_entidad_financiera_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_entidad_financiera_id';	
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_hospitales';										  						
				v_campo_recepcion_factura_id := 'recepcion_hospital_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_hospital_id';	
				
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 		
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_hoteles';										  						
				v_campo_recepcion_factura_id := 'recepcion_hotel_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_hotel_id';	
				
		when p_tipo_documento_sector_id = 1383 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_sectores_educativos';										  						
				v_campo_recepcion_factura_id := 'recepcion_sector_educativo_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_sector_educativo_id';
				
		when p_tipo_documento_sector_id = 1399 --Nota: NOTA DE CREDITO-DEBITO
			then
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_notas_credito_debito';										  						
				v_campo_recepcion_factura_id := 'recepcion_nota_credito_debito_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_credito_debito_id';										
			
 		when p_tipo_documento_sector_id = 1398 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_notas_monedas_extranjeras';										  						
				v_campo_recepcion_factura_id := 'recepcion_nota_moneda_extranjera_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_moneda_extranjera_id';	
									
		when p_tipo_documento_sector_id = 1825 --Nota: NOTA FISCAL TASA CERO
			then
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_notas_tasas_cero';										  						
				v_campo_recepcion_factura_id := 'recepcion_nota_tasa_cero_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_tasa_cero_id';	
				
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then
				v_tabla_recepciones_correctas:='sre_fman_recepciones_correctas_notas_zona_franca';										  						
				v_campo_recepcion_factura_id := 'recepcion_nota_zona_franca_id';				
				v_campo_recepcion_correcta_factura_id :='recepcion_correcta_nota_zona_franca_id';				
 
		else 
				v_sql:='0';
	end case;
		 	 			
		 	v_sql:=
			'INSERT INTO sre_recaudaciones.'||v_tabla_recepciones_correctas||'
			(
				usuario_registro_id, 
				usuario_ultima_modificacion_id, 				
				'||v_campo_recepcion_factura_id||', 
				persona_contribuyente_id, 
				sucursal_contribuyente_id, 
				modalidad_facturacion_id, 
				tipo_documento_sector_id, 
				tipo_documento_fiscal_id, 
				numero_sucursal,
				caed,	
				numero_documento_fiscal,
				fecha_envio, 
				fecha_recepcion, 
				fecha_consolidacion, 
				fecha_registro, 
				fecha_ultima_modificacion, 
				estado_id,
				actividad_economica_id,
				codigo_actividad_economica,
				fecha_emision,
				estado_recepcion_documento_fiscal_id				
			)
			VALUES
			(
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19,
				$20,
				$21
		    ) returning '||v_campo_recepcion_correcta_factura_id;

	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_consulta_recepcion_facturacion_manual_etapa_2')) as character varying);		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_verificar_existe_venta_anulado_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select venta_estandar_id from sre_recaudaciones.sre_fman_ventas_estandares where caed=$1 and numero_documento_fiscal = $2  limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select venta_alcanzada_ice_id from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where caed=$1 and numero_documento_fiscal = $2  limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --ACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select venta_alquiler_id from sre_recaudaciones.sre_fman_ventas_alquileres where caed=$1	and numero_documento_fiscal = $2  limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select venta_comercial_exportacion_id from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where caed=$1   and numero_documento_fiscal = $2  limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select venta_libre_consignacion_id from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  where caed=$1  and numero_documento_fiscal = $2  limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select venta_hidrocarburo_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos where caed=$1	and numero_documento_fiscal = $2  limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select venta_entidad_financiera_id from sre_recaudaciones.sre_fman_ventas_entidades_financieras where caed=$1	and numero_documento_fiscal = $2  limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select venta_hospital_id from sre_recaudaciones.sre_fman_ventas_hospitales where caed=$1 and numero_documento_fiscal = $2  limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select venta_hotel_id from sre_recaudaciones.sre_fman_ventas_hoteles where caed=$1	and numero_documento_fiscal = $2  limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select venta_sector_educativo_id from sre_recaudaciones.sre_fman_ventas_sectores_educativos where caed=$1	and numero_documento_fiscal = $2  limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select venta_nota_credito_debito_id from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where caed=$1	and numero_documento_fiscal = $2  limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select venta_nota_moneda_extranjera_id from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where caed=$1	and numero_documento_fiscal = $2  limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select venta_nota_tasa_cero_id from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero where caed=$1	and numero_documento_fiscal = $2  limit 1';
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select venta_nota_zona_franca_id from sre_recaudaciones.sre_fman_ventas_notas_zona_franca where caed=$1	and numero_documento_fiscal = $2  limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_existe_ventas_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_consulta_verificar_existe_ventas_estado_manual(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Operacion que arma la consulta SELECT dinamicamente dependiendo el sector ingresado como parametro
PARAMETROS INGRESO
tipo documento sector
PARAMETROS SALIDA
cadena que representa la consulta SELECT
SUBSISTEMA : Facturación
FECHA CREACION : 14/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1382 --FACTURA ESTANDAR
			then 						
			v_sql:= 'select venta_estandar_id from sre_recaudaciones.sre_fman_ventas_estandares where caed=$1 and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	 
														
		when p_tipo_documento_sector_id = 1387 --FACTURA ALCANZADA ICE
			then 			
 			v_sql:= 'select venta_alcanzada_ice_id from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice where caed=$1 and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	
 			
		when p_tipo_documento_sector_id = 1384 --ACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
			v_sql:= 'select venta_alquiler_id from sre_recaudaciones.sre_fman_ventas_alquileres where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	
			
		when p_tipo_documento_sector_id = 1393 --FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= 'select venta_comercial_exportacion_id from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones where caed=$1   and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	 
 			
 		when p_tipo_documento_sector_id = 1394 --FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= 'select venta_libre_consignacion_id from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  where caed=$1  and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';
 			
		when p_tipo_documento_sector_id = 1385 --FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= 'select venta_hidrocarburo_id from sre_recaudaciones.sre_fman_ventas_hidrocarburos where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	
 			
		when p_tipo_documento_sector_id = 1388 --FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= 'select venta_entidad_financiera_id from sre_recaudaciones.sre_fman_ventas_entidades_financieras where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	 		 
				
		when p_tipo_documento_sector_id = 1390 --FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= 'select venta_hospital_id from sre_recaudaciones.sre_fman_ventas_hospitales where caed=$1 and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';
 			
		when p_tipo_documento_sector_id = 1389 --FACTURA DE HOTELES
			then 			
 			v_sql:= 'select venta_hotel_id from sre_recaudaciones.sre_fman_ventas_hoteles where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	 
							 	
		when p_tipo_documento_sector_id = 1383 --FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= 'select venta_sector_educativo_id from sre_recaudaciones.sre_fman_ventas_sectores_educativos where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';			
		 
		when p_tipo_documento_sector_id = 1399 --NOTA DE CREDITO-DEBITO
			then
			v_sql:= 'select venta_nota_credito_debito_id from sre_recaudaciones.sre_fman_ventas_notas_credito_debito where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	
				 	
		when p_tipo_documento_sector_id = 1398 --NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			v_sql:= 'select venta_nota_moneda_extranjera_id from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';

		when p_tipo_documento_sector_id = 1825 --NOTA FISCAL TASA CERO
			then 			
			v_sql:= 'select venta_nota_tasa_cero_id from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';
			
		when p_tipo_documento_sector_id = 1395 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			v_sql:= 'select venta_nota_zona_franca_id from sre_recaudaciones.sre_fman_ventas_notas_zona_franca where caed=$1	and numero_documento_fiscal = $2 and estado_venta_manual_documento_fiscal_id = $3 limit 1';	 
	
		else 
			v_sql:='0';
	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
         return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_armar_consulta_verificar_existe_ventas_manual')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_convertir_md5(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_moneda_id   Integer:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda' as Integer));
  p_tipo_emision_id Integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as integer));
  v_resultado      smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_moneda'));
  p_fecha_emision timestamp := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as timestamp));
  v_agrupador varchar :='';
  v_agrupador_md5 varchar :='';
  c_funciones_validacion       refcursor;
  r_funciones                  record;
 
 c_funciones_validacion1       refcursor;
  r_funciones1                  record;
 
  v_cantidad integer;
  p_log integer;
  p_casos integer;
  v_agrupador_consulta_like character varying;

begin
 --28 - Tipo de  Moneda Invalido 
	
  v_agrupador := 'tipo_moneda_id'; --Cordinar este parametro con Fernando  
  if(p_fecha_emision notnull) then
  	v_agrupador_md5:='sre_fac_val_fecha_emision'||'|'||'17'||'|'||p_tipo_emision_id;
  end if;
	drop table if exists tbl;
  	CREATE TEMP TABLE tbl AS
	SELECT * FROM sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd ;

	drop table if exists tbl1;
  	CREATE TEMP TABLE tbl1 AS
	SELECT * FROM sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd ;

	update tbl
	set hash=(
	SELECT 
		a[1] AS DiskInfo
	FROM (
	    SELECT regexp_split_to_array( (replace(hash_descripcion,'|',':')), ':')
	) AS dt(a)
	);
	truncate table tbl1;

	ALTER TABLE tbl1
	ADD "porcentaje" decimal(5,2) NOT null;

	--ALTER TABLE tbl DROP COLUMN hash_descripcion, DROP COLUMN log_id;
	open c_funciones_validacion for (select * from tbl);
	loop
		fetch c_funciones_validacion into r_funciones;
	    exit when not found;
	   	v_cantidad:=(select count (1) from tbl1 where hash = r_funciones.hash);

	   if(v_cantidad=0) then
	   		v_agrupador_consulta_like:=r_funciones.hash||'%';			
		  	p_casos:=(select count(1) from sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd where hash_descripcion like v_agrupador_consulta_like);
		    p_log:=(select count (1) from  (
			select hash from sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd a
			where a.hash_descripcion like v_agrupador_consulta_like
			and a.estado_match=1			
			group by hash
			having count(*)>0
			) tbl);
			insert into tbl1 values (r_funciones.caso_prueba_id, r_funciones.hash, r_funciones.hash_descripcion, r_funciones.caso_prueba, r_funciones.documento_fiscal_id, r_funciones.documento_sector_id, r_funciones.estado_id, r_funciones.fecha_registro, r_funciones.fecha_ultima_modificacion, r_funciones.usuario_registro_id, r_funciones.usuario_ultima_modificacion,(p_log/p_casos ::double precision*100));
	   end if;
	end loop;

open c_funciones_validacion1 for (select * from tbl1);
	loop
		fetch c_funciones_validacion1 into r_funciones1;
	    exit when not found;
   		
	end loop;

  return v_resultado;

  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_moneda'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_efectuar_validacion_compra_especifica(p_json json)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   

begin
	
	 --El resultado de la funcion tienen los campos: nombre_funcion_validacion varchar, resultado_ejecucion smallint
	 return query
	 (
	 select cast('prueba' as varchar),cast(1000 as smallint)
	 --FYB AQUI LAS VALIDACIONES ESPECIFICAS DE LAS COMPRAS PENDIENTES
	 /*select * from  sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 2) --add 20190401: 2=validar la seccion cabecera de la factura
	 union all
	 select * from  sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 3) --add 20190401: 3=validar la seccion detalle de la factura*/	  
	 );
	 
	
	 
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion especifica' as varchar), cast(-1001 as smallint);
	 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_efectuar_validacion_especifica(p_json json)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   

begin
	
	 --El resultado de la funcion tienen los campos: nombre_funcion_validacion varchar, resultado_ejecucion smallint
	 return query
	 (
	 select * from  sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 2) --add 20190401: 2=validar la seccion cabecera de la factura
	 union all
	 select * from  sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 3) --add 20190401: 3=validar la seccion detalle de la factura
	 );	  
	 
	 
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion especifica' as varchar), cast(-1001 as smallint);
	 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_insertar_detalle_ventas(p_json json, p_id_ventas bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_id_detalles_ventas_estandares bigint;
	p_tipo_documento_fiscal_id integer;
	p_tipo_documento_sector_id integer; 
	i json;
	
	v_detalle varchar;
begin
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	
		
	if(p_tipo_documento_sector_id <> 20) then			
		v_detalle := (p_json->'XmlFactura'->'factura'->'detalle')::varchar;

		
		if(left(v_detalle, 1) = '[')
		then
				for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
				loop
					p_id_detalles_ventas_estandares:=(sre_recaudaciones.sre_fac_crud_detalles_ventas_dinamico(i,p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_id_ventas));											
					if(p_id_detalles_ventas_estandares<0) then
						return -1;
					end if;
				end loop;
		else										
				p_id_detalles_ventas_estandares:=(sre_recaudaciones.sre_fac_crud_detalles_ventas_dinamico(p_json->'XmlFactura'->'factura'->'detalle',p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_id_ventas)); 
				if(p_id_detalles_ventas_estandares<0) then
					return -1;
				end if;

		end if;
		
	else 
		p_id_detalles_ventas_estandares := 1;
	end if;
	
	return p_id_detalles_ventas_estandares;
	
	  EXCEPTION
	  when others
	    then	
	      return ( sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_insertar_detalle_ventas'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_insertar_detalle_ventas_contingencia(p_json json, p_id_ventas bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <10/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_id_detalles_ventas_estandares bigint;
	p_tipo_documento_fiscal_id integer;
	p_tipo_documento_sector_id integer; 
	i json;
begin
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	
	
	if(p_tipo_documento_sector_id <> 20) then
	
		if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))
		then
				for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
				loop
					p_id_detalles_ventas_estandares:=(sre_recaudaciones.sre_fac_crud_detalles_ventas_contingencia(i,p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_id_ventas));											
				end loop;
		else										
					p_id_detalles_ventas_estandares:=(sre_recaudaciones.sre_fac_crud_detalles_ventas_contingencia(p_json->'XmlFactura'->'factura'->'detalle',p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_id_ventas)); 
		end if;
		
	else 
		p_id_detalles_ventas_estandares := 1;
	end if;
	
	return p_id_detalles_ventas_estandares;
	
	  EXCEPTION
	  when others
	    then	
	      return ( sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_insertar_detalle_ventas_contingencia'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_insertar_detalle_ventas_estandares(p_json json, p_id_ventas_estandares bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	--p_json->DetallesVentas 
	p_usuario_registro_id_detalles_ventas_estandares int8;
	p_usuario_ultima_modificacion_id_detalles_ventas_estandares int8;
	p_venta_estandar_id int8:=p_id_ventas_estandares;
	p_producto_id varchar(50);
	p_producto_sin_id int8;
	p_actividad_economica_id int8;
	p_numero_serie varchar(50);
	p_descripcion varchar(200);
	p_cantidad numeric(20,5);
	p_precio_unitario numeric(20,5);
	p_monto_descuento_detalles_ventas_estandares numeric(20,5);
	p_subtotal numeric(20,5);
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp;
	p_estado_id_detalles_ventas_estandares varchar(2);
	p_unidad_medida varchar(50);

	p_tipo_crud_crear varchar(2):='C';

	p_id_detalles_ventas_estandares bigint;
	
	v_fecha_actual timestamp:=now();

	v_usuario_registro_id_detalles_ventas_estandares int8:=1000;
	v_usuario_ultima_modificacion_id_detalles_ventas_estandares int8:=1000;
	
	i json;
begin
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))
	then
			for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
			loop
			
				--p_json->DetallesVentas 
				p_usuario_registro_id_detalles_ventas_estandares :=v_usuario_registro_id_detalles_ventas_estandares;
				p_usuario_ultima_modificacion_id_detalles_ventas_estandares :=v_usuario_ultima_modificacion_id_detalles_ventas_estandares;
				p_venta_estandar_id := p_venta_estandar_id; --ID
				p_producto_id :=(select cast(i->>'codigoProducto' as varchar(50)));
				p_producto_sin_id :=(select cast(i->>'codigoProductoSin' as int8));
				p_actividad_economica_id :=(select cast(i->>'actividadEconomica' as int8));
				p_numero_serie :=(select cast(i->>'numeroSerie' as varchar(50)));
				p_descripcion :=(select cast(i->>'descripcion' as varchar(200)));
				p_cantidad :=(select cast(i->>'cantidad' as numeric(20,5)));
				p_precio_unitario :=(select cast(i->>'precioUnitario' as numeric(20,5)));
				p_monto_descuento_detalles_ventas_estandares :=(select cast(i->>'montoDescuento' as numeric(20,5)));
				p_subtotal :=(select cast(i->>'subTotal' as numeric(20,5)));
				p_fecha_registro :=v_fecha_actual;
				p_fecha_ultima_modificacion :=v_fecha_actual;
				p_estado_id_detalles_ventas_estandares :='AC';
				p_unidad_medida :=(select cast(i->>'unidadMedida' as varchar(50)));
				
				
				
				p_id_detalles_ventas_estandares:=(
					select sre_recaudaciones.sre_fac_crud_detalles_ventas_estandares
					(
						p_usuario_registro_id_detalles_ventas_estandares,		
						p_usuario_ultima_modificacion_id_detalles_ventas_estandares,			
						p_venta_estandar_id, --ID				 
						p_producto_id, --json				
						p_producto_sin_id, --json				
						p_actividad_economica_id, --json			
						p_numero_serie,				
						p_descripcion,				
						p_cantidad,				
						p_precio_unitario,				
						p_monto_descuento_detalles_ventas_estandares,				
						p_subtotal,
						p_fecha_registro,
						p_fecha_ultima_modificacion,				
						p_estado_id_detalles_ventas_estandares, --json
						p_unidad_medida,				
						p_tipo_crud_crear
					)
				);
																
			end loop;
	
	else
		p_usuario_registro_id_detalles_ventas_estandares :=v_usuario_registro_id_detalles_ventas_estandares;
				p_usuario_ultima_modificacion_id_detalles_ventas_estandares :=v_usuario_ultima_modificacion_id_detalles_ventas_estandares;
				p_venta_estandar_id := p_venta_estandar_id; --ID
				p_producto_id :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoProducto' as varchar(50)));
				p_producto_sin_id :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoProductoSin' as int8));
				p_actividad_economica_id :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'actividadEconomica' as int8));
				p_numero_serie :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'numeroSerie' as varchar(50)));
				p_descripcion :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'descripcion' as varchar(200)));
				p_cantidad :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'cantidad' as numeric(20,5)));
				p_precio_unitario :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'precioUnitario' as numeric(20,5)));
				p_monto_descuento_detalles_ventas_estandares :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5)));
				p_subtotal :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
				p_fecha_registro :=v_fecha_actual;
				p_fecha_ultima_modificacion :=v_fecha_actual;
				p_estado_id_detalles_ventas_estandares :='AC';
				p_unidad_medida :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'unidadMedida' as varchar(50)));
				
				
				
				p_id_detalles_ventas_estandares:=(
					select sre_recaudaciones.sre_fac_crud_detalles_ventas_estandares
					(
						p_usuario_registro_id_detalles_ventas_estandares,		
						p_usuario_ultima_modificacion_id_detalles_ventas_estandares,			
						p_venta_estandar_id, --ID				 
						p_producto_id, --json				
						p_producto_sin_id, --json				
						p_actividad_economica_id, --json			
						p_numero_serie,				
						p_descripcion,				
						p_cantidad,				
						p_precio_unitario,				
						p_monto_descuento_detalles_ventas_estandares,				
						p_subtotal,
						p_fecha_registro,
						p_fecha_ultima_modificacion,				
						p_estado_id_detalles_ventas_estandares, --json
						p_unidad_medida,				
						p_tipo_crud_crear
					)
				);
	end if;
	
	return 1;
	
	
	  EXCEPTION
	  when others
	    then	
	      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_insertar_detalle_ventas_estandares'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_insertar_recepciones_errores_detalles(p_json json, p_json_errores json, p_id_recepciones_errores bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_usuario_registro_id_recepciones_errores_detalles int8;
	p_usuario_ultima_modificacion_id_recepciones_errores_detalles int8;
	p_recepcion_error_id int8:=p_id_recepciones_errores; --'ID_RECEPCION_ERROR'
	p_codigo_error_id int4;--'CODIGO_FUNCION'
	p_fecha_registro_recepciones_errores_detalles timestamp;-- :=v_fecha_actual;--ERROR
	p_fecha_ultima_modificacion_recepciones_errores_detalles timestamp; --:=v_fecha_actual;--ERROR
	p_estado_id_recepciones_errores_detalles varchar(2);
	
	p_tipo_crud_crear varchar(2):='C';	

	p_id_recepciones_errores_detalles bigint:=0;	
	
	i json;
	
	v_usuario_registro_id_recepciones_errores_detalles int8:=1000;
	v_usuario_ultima_modificacion_id_recepciones_errores_detalles int8:=1000;
	
	v_fecha_actual timestamp:=now();
begin	
	--Insercion
	for i in select * from json_array_elements(p_json_errores->'resultados')
	loop	
		p_codigo_error_id := (i->>'resultado_ejecucion');--'CODIGO_FUNCION'
		
		if (p_codigo_error_id <> 1000) then
			p_usuario_registro_id_recepciones_errores_detalles:=v_usuario_registro_id_recepciones_errores_detalles;
			p_usuario_ultima_modificacion_id_recepciones_errores_detalles:=v_usuario_ultima_modificacion_id_recepciones_errores_detalles;					
			p_fecha_registro_recepciones_errores_detalles :=v_fecha_actual;
			p_fecha_ultima_modificacion_recepciones_errores_detalles :=v_fecha_actual;
			p_estado_id_recepciones_errores_detalles :='AC';
					
			
			p_id_recepciones_errores_detalles:=(
			select  sre_recaudaciones.sre_fac_crud_recepciones_errores_detalles
			(
				p_usuario_registro_id_recepciones_errores_detalles, --json
				p_usuario_ultima_modificacion_id_recepciones_errores_detalles, --json
				p_recepcion_error_id, --ID
				p_codigo_error_id, --ID DEL ERROR (FUNCION)
				p_fecha_registro_recepciones_errores_detalles,
				p_fecha_ultima_modificacion_recepciones_errores_detalles,
				p_estado_id_recepciones_errores_detalles, --json
				p_tipo_crud_crear
			)
			);		
		end if;					
	end loop;

	return 1;	
	
	 EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_insertar_recepciones_errores_detalles'));
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_limpiar_objeto_json(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : FacturaciÃ³n
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

begin
	--TODO: limpi las cadenas buscadas, pero consultar a Chambi como se genera la cadena xsi:nil puesto que en algunas pruebas incluia espacios
	
	--add 20190410 rgt 
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaComercialExportacionYPFB','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaComercialExportacionYPFB','factura');	
	
	--add 20190411 vcg
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaComercialExportacionMinera','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaComercialExportacionMinera','factura');
	
	--add 20190725 rgt
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaCreditoDebitoSfv','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaCreditoDebitoSfv','factura');	

	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaAlcanzadaIce','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaAlquilerBienInmueble','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaArtistaInternacional','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaComercialExportacion','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaComercializacionHidrocarburo','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaEntidadFinanciera','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaEstandar','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaHidrocarburo','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaHospitalClinicas','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaHospitalClinica','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaHotel','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaJuegoAzar','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaPrevalorada','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaSectorEducativo','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaServicioBasico','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaArtistaNacional','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaConciliacion','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaCreditoDebito','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaExportacionServicioTuristicoHospedaje','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaLibreConsignacion','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaMonedaExtranjera','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaSeguridadAlimentaria','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaTasaCero','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaZonaFranca','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaAlcanzadaIce','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaAlquilerBienInmueble','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaArtistaInternacional','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaComercialExportacion','factura'); --modificado: 20190920
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaComercializacionHidrocarburo','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaEntidadFinanciera','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaEstandar','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaHidrocarburo','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaHospitalClinica','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaHotel','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaJuegoAzar','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaPrevalorada','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaSectorEducativo','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaServicioBasico','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaArtistaNacional','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaConciliacion','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaCreditoDebito','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaExportacionServicioTuristicoHospedaje','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaLibreConsignacion','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaMonedaExtranjera','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaSeguridadAlimentaria','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaTasaCero','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaZonaFranca','factura');
	
	--add 20190411 vcg
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaComercialMinera','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaComercialMinera','factura');
	--add 20190411 jf
	p_json_varchar:=replace(p_json_varchar,'notaFiscalComputarizadaLibreConsignacionYPFB','factura');
	p_json_varchar:=replace(p_json_varchar,'notaFiscalElectronicaLibreConsignacionYPFB','factura');	
	
	--add 20190513 rgt
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaBoletoAereo','factura');	
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaBoletoAereo','factura');
	
	--add 20190724 rgt
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaTelecomunicacion','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaTelecomunicacion','factura');
	
	--add 20190729rgt
	p_json_varchar:=replace(p_json_varchar,'facturaComputarizadaVentaMineral','factura');
	p_json_varchar:=replace(p_json_varchar,'facturaElectronicaVentaMineral','factura');
	
    p_json_varchar:=replace(p_json_varchar,'{"xsi:nil":true}','null');
    p_json_varchar:=replace(p_json_varchar,'{"xsi:nil":false}','null');
   	        
  return p_json_varchar;		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_limpiar_objeto_json_archivo(p_json json)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

begin
	p_json:= ((p_json)::jsonb #- '{xmlRecepcionGenerica,v_archivo}'::text[]);	
	p_json:= ((p_json)::jsonb #- '{xmlRecepcionGenerica,v_hash_archivo}'::text[]);
   	
  return p_json;		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_codigo_equivalente_clasificador(p_codigo_clasificador integer, p_agrupador character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_resultado smallint:=0;			
begin		 		
  v_resultado :=coalesce((select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador = p_agrupador and codigo_clasificador=p_codigo_clasificador),0); 		
	
  return v_resultado;
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_codigo_equivalente_clasificador'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_codigo_error(p_funcion_validacion character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se aumento mas parametricas de error
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<07/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado bigint:=0;
begin		
	v_resultado := (case
		when p_funcion_validacion = 'sre_fac_val_solicitud_proceso_masivo' then 129
		when p_funcion_validacion = 'sre_fac_val_horario_mas' then 127
		when p_funcion_validacion = 'sre_fac_val_cantidad_documento_paquete_mas' then 126		
		when p_funcion_validacion = 'sre_fac_val_unidad_medida' then 125
		when p_funcion_validacion = 'sre_fac_ope_obtener_oficina_id' then 925
		when p_funcion_validacion = 'sre_fac_ope_validar_nit_padron' then 9		
		when p_funcion_validacion = 'sre_fac_val_nombre_razon_social' then 94
		when p_funcion_validacion = 'sre_fac_val_est_validar_nit_casos_especiales' then 94
		when p_funcion_validacion = 'sre_fac_val_numero_documento_nit' then 94
		when p_funcion_validacion = 'sre_fac_val_fecha_emision' then 18
		when p_funcion_validacion = 'sre_fac_val_codigo_tipo_documento_identidad' then 19
		when p_funcion_validacion = 'sre_fac_val_cuf' then 122
		when p_funcion_validacion = 'sre_fac_val_numero_documento' then 98 
		when p_funcion_validacion = 'sre_fac_val_numero_documento_ci' then 15		
		when p_funcion_validacion = 'sre_fac_val_codigo_sucursal' then 8
		when p_funcion_validacion = 'sre_fac_val_codigo_punto_venta_cabecera' then 82
		when p_funcion_validacion = 'sre_fac_val_monto_total' then 54
		when p_funcion_validacion = 'sre_fac_val_codigo_documento_sector' then 81
		when p_funcion_validacion = 'sre_fac_val_nit_emisor' then 99
		when p_funcion_validacion = 'sre_fac_val_codigo_metodo_pago' then 96
		when p_funcion_validacion = 'sre_fac_val_numero_tarjeta' then 100
		when p_funcion_validacion = 'sre_fac_val_codigo_moneda' then 28
		when p_funcion_validacion = 'sre_fac_val_monto_total_moneda' then 101
		when p_funcion_validacion = 'sre_fac_val_actividad_economica' then 53
		when p_funcion_validacion = 'sre_fac_val_codigo_producto_sin' then 102
		when p_funcion_validacion = 'sre_fac_val_subtotal' then 55
		when p_funcion_validacion = 'sre_fac_val_codigo_sistema' then 2
		when p_funcion_validacion = 'sre_fac_val_codigo_ambiente' then 1
		when p_funcion_validacion = 'sre_fac_val_codigo_emision' then 6
		when p_funcion_validacion = 'sre_fac_val_codigo_modalidad' then 7
		when p_funcion_validacion = 'sre_fac_val_nit' then 95
		when p_funcion_validacion = 'sre_fac_val_cufd' then 123
		when p_funcion_validacion = 'sre_fac_val_cuis' then 3
		when p_funcion_validacion = 'sre_fac_val_codigo_documento_fiscal' then 5		
		when p_funcion_validacion = 'sre_fac_val_fecha_envio' then 85
		when p_funcion_validacion = 'sre_fac_val_codigo_punto_venta_recepcion' then 82
		when p_funcion_validacion = 'sre_fac_val_codigo_recepcion' then 13
		when p_funcion_validacion = 'sre_fac_val_motivo_anulacion' then 62		
		when p_funcion_validacion = 'sre_fac_val_cuf_recepcion' then 116	
		when p_funcion_validacion = 'sre_fac_val_codigo_recepcion_anulacion' then 114
		when p_funcion_validacion = 'sre_fac_val_codigo_pais' then 43
		when p_funcion_validacion = 'sre_fac_val_monto_ley317' then 56
		when p_funcion_validacion = 'sre_fac_val_monto_total_sujeto_iva' then 57
		when p_funcion_validacion = 'sre_fac_val_monto_ice' then 60
		when p_funcion_validacion = 'sre_fac_val_monto_total_ij' then 59
		when p_funcion_validacion = 'sre_fac_val_monto_total_sujeto_ipj' then 58
		when p_funcion_validacion = 'sre_fac_val_codigo_producto_corresponda_actividad_economica_1' then 51
		when p_funcion_validacion = 'sre_fac_val_codigo_producto_corresponda_actividad_economica' then 52
		when p_funcion_validacion = 'sre_fac_val_factura_duplicada' then 14
		when p_funcion_validacion = 'sre_fac_val_factura_sin_registro' then 86
		when p_funcion_validacion = 'sre_fac_val_factura_anulada' then 87
		when p_funcion_validacion = 'sre_fac_val_factura_existe_solicitud_anulacion' then 910
		when p_funcion_validacion = 'sre_fac_val_factura_no_disponible_anulacion' then 97
		when p_funcion_validacion = 'sre_fac_val_documento_sector_incorrecto' then 89
		when p_funcion_validacion = 'sre_fac_val_fecha_emision_normativa_mayor_definido' then 17
		when p_funcion_validacion = 'sre_fac_val_estado_recepcion_anularion_incorrecta' then 115
		when p_funcion_validacion = 'sre_fac_val_gestion' then 912
		when p_funcion_validacion = 'sre_fac_val_fecha_ingreso_hospedaje' then 913
		when p_funcion_validacion = 'sre_fac_val_nit_documento_medico' then 914
		when p_funcion_validacion = 'sre_fac_val_nit_salon' then 915
		when p_funcion_validacion = 'sre_fac_val_fecha_evento' then 916
		when p_funcion_validacion = 'sre_fac_val_monto_total_puerto' then 917
		when p_funcion_validacion = 'sre_fac_val_total_fob_frontera' then 918
		when p_funcion_validacion = 'sre_fac_val_codigo_nandina' then 919
		when p_funcion_validacion = 'sre_fac_val_monto_total_devuelto' then 920
		when p_funcion_validacion = 'sre_fac_val_monto_efectivo_credito_debito' then 921
		when p_funcion_validacion = 'sre_fac_val_monto_original' then 922
		when p_funcion_validacion = 'sre_fac_val_monto_iehd' then 923
		when p_funcion_validacion = 'sre_fac_val_ingreso_diferencia_cambio' then 924
		when p_funcion_validacion = 'sre_fac_val_nit_emisor_modalidad_diferente' then 75
		when p_funcion_validacion = 'sre_fac_ope_verificar_rango_fechas_evento_significativo' then 132
					
		when p_funcion_validacion = 'sre_fac_val_nombre_razon_social_factura_manual' then 1003--agregado por equipo Tully
		when p_funcion_validacion = 'sre_fac_val_numero_factura_manual' then 1004
		when p_funcion_validacion = 'sre_fac_val_caed_factura_manual' then 1005
		when p_funcion_validacion = 'sre_fac_val_fecha_emision_factura_manual' then 1006
		when p_funcion_validacion = 'sre_fac_val_fecha_envio_factura_manual' then 1007			
		when p_funcion_validacion = 'sre_fac_val_tipo_envase_recepcion_manual' then 1008
		when p_funcion_validacion = 'sre_fac_val_cuf_recepcion_numero_fiscal' then 15
		when p_funcion_validacion = 'sre_fac_val_fecha_envio_anulados_facturacion_manual' then 1009		
		when p_funcion_validacion = 'sre_fac_val_existe_venta_anulado_facturacion_manual' then 1010		
		else 0
	end);
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_codigo_error'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_consulta_detalles_ventas(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_estandares
(usuario_registro_id, usuario_ultima_modificacion_id, venta_estandar_id, producto_id, producto_sin_id, actividad_economica_id, numero_serie, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning  detalle_venta_estandar_id';
														
		when p_tipo_documento_sector_id = 2
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_colegios
(usuario_registro_id, usuario_ultima_modificacion_id, venta_colegio_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, monto_descuento, subtotal, cantidad, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida, precio_unitario)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_colegio_id';
				
		when p_tipo_documento_sector_id = 3
			then 								
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_alquileres
(usuario_registro_id, usuario_ultima_modificacion_id, venta_alquiler_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, precio_unitario, unidad_medida, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_alquiler_id';

		when p_tipo_documento_sector_id = 4
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_combustibles
(usuario_registro_id, usuario_ultima_modificacion_id, venta_combustible_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_combustible_id';

		when p_tipo_documento_sector_id = 5
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_servicios
(usuario_registro_id, usuario_ultima_modificacion_id, venta_servicio_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida, cantidad, precio_unitario)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_servicio_id';
				
		when p_tipo_documento_sector_id = 6
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_embotelladoras
(usuario_registro_id, usuario_ultima_modificacion_id, venta_embotelladora_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, marca_ice, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning  detalle_venta_embotelladora_id';

		when p_tipo_documento_sector_id = 7
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_bancos
(usuario_registro_id, usuario_ultima_modificacion_id, venta_banco_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_banco_id';

				
		when p_tipo_documento_sector_id = 8
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_hoteles
(usuario_registro_id, usuario_ultima_modificacion_id, venta_hotel_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, precio_unitario, subtotal, codigo_tipo_habitacion, cantidad_dias, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning detalle_venta_hotel_id';
				
		when p_tipo_documento_sector_id = 9
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_hospitales
(usuario_registro_id, usuario_ultima_modificacion_id, venta_hospital_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, espcecialidad, especialidad_detalle, nro_quirofano_sala_operaciones, especialidad_medico, nombre_apellido_medico, nit_documento_medico, nro_matricula_medico, nro_factura_medico, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23) returning  detalle_venta_hospital_id';

				
		when p_tipo_documento_sector_id = 10
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_juegos
(usuario_registro_id, usuario_ultima_modificacion_id, venta_juego_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_juego_id';


		when p_tipo_documento_sector_id = 11
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_espectaculos_nacionales
(usuario_registro_id, usuario_ultima_modificacion_id, venta_espectaculo_nacional_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_espectaculo_nacional_id';
				
		when p_tipo_documento_sector_id = 12
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_exportaciones
(usuario_registro_id, usuario_ultima_modificacion_id, venta_exportacion_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida, codigo_nandina)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning  detalle_venta_exportacion_id';

		when p_tipo_documento_sector_id = 13
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_libres_consignaciones
(usuario_registro_id, usuario_ultima_modificacion_id, venta_libre_consignacion_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_libre_consignacion_id';

		when p_tipo_documento_sector_id = 14
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_zonas_francas
(usuario_registro_id, usuario_ultima_modificacion_id, venta_zona_franca_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning detalle_venta_zona_franca_id';

		when p_tipo_documento_sector_id = 15
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_espectaculos
(usuario_registro_id, usuario_ultima_modificacion_id, venta_espectaculo_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_espectaculo_id';

		when p_tipo_documento_sector_id = 16
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_seguridades_alimentarias
(usuario_registro_id, usuario_ultima_modificacion_id, venta_seguridad_alimentaria_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_seguridad_alimentaria_id';
				
		when p_tipo_documento_sector_id = 17
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_monedas_extranjeras
(usuario_registro_id, usuario_ultima_modificacion_id, venta_moneda_extranjera_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_moneda_extranjera_id';



		when p_tipo_documento_sector_id = 18
			then
v_sql:='0';			
				
		when p_tipo_documento_sector_id = 19
			then
v_sql:='0';			

		when p_tipo_documento_sector_id = 20
			then
v_sql:='0';			
			
		when p_tipo_documento_sector_id = 21
			then 										
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_turismos_receptivos
(usuario_registro_id, usuario_ultima_modificacion_id, venta_turismo_receptivo_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, precio_unitario, subtotal, codigo_tipo_habitacion, cantidad_dias, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida, pasaporte_documento, nacionalidad)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) returning  detalle_venta_turismo_receptivo_id';

		when p_tipo_documento_sector_id = 22
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_tasas_ceros
(usuario_registro_id, usuario_ultima_modificacion_id, venta_tasa_cero_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, monto_descuento, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, precio_unitario, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning  detalle_venta_tasa_cero_id';

				
		when p_tipo_documento_sector_id = 23
			then				
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_detalles_ventas_hidrocarburos
(usuario_registro_id, usuario_ultima_modificacion_id, venta_hidrocarburo_id, producto_id, producto_sin_id, actividad_economica_id, descripcion, cantidad, precio_unitario, subtotal, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, unidad_medida)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) returning detalle_venta_hidrocarburo_id';
				
		else 
				v_sql:='0';
	end case;
								 		  	    	   	    	 		    
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return '-1';		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_consulta_recepciones_correctas(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_estandares
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_estandar_id, recepcion_paquete_estandar_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_estandar_id';
														
		when p_tipo_documento_sector_id = 2
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_colegios
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_colegio_id, recepcion_paquete_colegio_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_colegio_id';			
				
		when p_tipo_documento_sector_id = 3
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_alquileres
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_alquiler_id, recepcion_paquete_alquiler_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_alquiler_id';						
				
		when p_tipo_documento_sector_id = 4
			then 			

v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_combustibles
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_combustible_id, recepcion_paquete_combustible_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_combustible_id';				

		when p_tipo_documento_sector_id = 5
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_servicios
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_servicio_id, recepcion_paquete_servicio_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_servicio_id';						
				
		when p_tipo_documento_sector_id = 6
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_embotelladora_id, recepcion_paquete_embotelladora_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_embotelladora_id';			

		when p_tipo_documento_sector_id = 7
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_bancos
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_banco_id, recepcion_paquete_banco_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_banco_id';			
				
		when p_tipo_documento_sector_id = 8
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_hoteles
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_hotel_id, recepcion_paquete_hotel_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_hotel_id';			
				
		when p_tipo_documento_sector_id = 9
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_hospitales
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_hospital_id, recepcion_paquete_hospital_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_hospital_id';							
				
		when p_tipo_documento_sector_id = 10
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_juegos
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_juego_id, recepcion_paquete_juego_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_juego_id';			
				
		when p_tipo_documento_sector_id = 11
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_espectaculo_nacional_id, recepcion_paquete_espectaculo_nacional_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_espectaculo_nacional_id';							
				
		when p_tipo_documento_sector_id = 12
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_exportacion_id, recepcion_paquete_exportacion_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_exportacion_id';			

		when p_tipo_documento_sector_id = 13
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_libre_consignacion_id, recepcion_paquete_libre_consignacion_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_libre_consignacion_id';							

		when p_tipo_documento_sector_id = 14
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_zona_franca_id, recepcion_paquete_zona_franca_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_zona_franca_id';							

		when p_tipo_documento_sector_id = 15
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_espectaculo_id, recepcion_paquete_espectaculo_id, tipo_emision_id, tipo_documento_fiscal_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_espectaculo_id';			

		when p_tipo_documento_sector_id = 16
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_seguridad_alimentaria_id, recepcion_paquete_seguridad_alimentaria_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_seguridad_alimentaria_id';			
				
		when p_tipo_documento_sector_id = 17
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_moneda_extranjera_id, recepcion_paquete_moneda_extranjera_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_moneda_extranjera_id';							

		when p_tipo_documento_sector_id = 18
			then
v_sql:='0';			
				
		when p_tipo_documento_sector_id = 19
			then
v_sql:='0';			

		when p_tipo_documento_sector_id = 20
			then
v_sql:='0';			
			
		when p_tipo_documento_sector_id = 21
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_turismo_receptivo_id, recepcion_paquete_turismo_receptivo_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_turismo_receptivo_id';							

		when p_tipo_documento_sector_id = 22
			then 			
v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_tasa_cero_id, recepcion_paquete_tasa_cero_id, tipo_documento_sector_id, cuf, numero_factura, tipo_emision_id, tipo_documento_fiscal_id, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning v_campo_recepcion_correcta_factura_id';							
				
		when p_tipo_documento_sector_id = 23
			then
				v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos
(usuario_registro_id, usuario_ultima_modificacion_id, archivo_xml_valido_id, recepcion_hidrocarburo_id, recepcion_paquete_hidrocarburo_id, tipo_documento_sector_id, cuf, numero_factura, cufd, cuis, nombre_archivo, fecha_envio, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_emision_id, tipo_documento_fiscal_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) returning recepcion_correcta_hidrocarburo_id';			
				
		else 
				v_sql:='0';
	end case;
								 		  	    	   	    	 		    
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return '-1';		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_consulta_ventas(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_estandares
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_estandar_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37) returning venta_estandar_id';
														
		when p_tipo_documento_sector_id = 2
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_colegios
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_colegio_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, periodo_facturado, nombre_estudiante, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17,$18, $19,$20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39) returning venta_colegio_id';			
				
		when p_tipo_documento_sector_id = 3
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_alquileres
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_alquiler_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, tipo_cambio, periodo_facturado, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38) returning venta_alquiler_id';						
				
		when p_tipo_documento_sector_id = 4
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_combustibles
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_combustible_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, codigo_pais_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, leyenda, placa_vehiculo, tipo_envase, monto_ley317, monto_total_sujeto_iva, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38, $39, $40, $41, $42) returning venta_combustible_id';				

		when p_tipo_documento_sector_id = 5
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_servicios
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_servicio_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, numero_medidor, nit_emisor, codigo_cliente, ciudad, zona, numero_factura, gestion, mes, cuf, cufd, cuis, direccion, domicilio_comprador, consumo_kwh, consumo_metros_cubicos, monto_descuento_ley1886, tasa_aseo, tasa_alumbrado, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, monto_total_sujeto_iva, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, monto_total_moneda, tipo_cambio)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49) returning venta_servicio_id';						
				
		when p_tipo_documento_sector_id = 6
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_embotelladoras
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_embotelladora_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, monto_ice, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38) returning venta_embotelladora_id';			

		when p_tipo_documento_sector_id = 7
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_bancos
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_banco_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_arrendamiento, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38) returning venta_banco_id';			
				
		when p_tipo_documento_sector_id = 8
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_hoteles
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_hotel_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_moneda_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, tipo_cambio, cantidad_huespedes, cantidad_habitaciones, cantidad_mayores, cantidad_menores, leyenda, fecha_ingreso_hospedaje, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38, $39, $40, $41, $42) returning venta_hotel_id';			
				
		when p_tipo_documento_sector_id = 9
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_hospitales
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_hospital_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, complemento, modalidad_servicio, nombre_razon_social, monto_total, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, tipo_cambio, monto_total_moneda, numero_documento)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38) returning venta_hospital_id';							
				
		when p_tipo_documento_sector_id = 10
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_juegos
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_juego_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, leyenda, monto_total_sujeto_ipj, monto_total_ij, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, tipo_moneda_id, monto_total_moneda, tipo_cambio)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38, $39) returning venta_juego_id';			
				
		when p_tipo_documento_sector_id = 11
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_espectaculo_nacional_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, tipo_evento, lugar_evento, fecha_evento, artista_evento, nit_salon, direccion_salon, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, monto_descuento, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,$33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43) returning venta_espectaculo_nacional_id';							
				
		when p_tipo_documento_sector_id = 12
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_exportaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_exportacion_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, otros_montos, monto_total, monto_total_moneda, monto_total_puerto, precio_valor_bruto, gastos_transporte_frontera, gastos_seguro_frontera, total_fob_frontera, monto_transporte_frontera, monto_seguro_internacional, monto_descuento, tipo_cambio, incoterm, lugar_destino, puerto_destino, tipo_pais_id, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, direccion_comprador)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50) returning venta_exportacion_id';			

		when p_tipo_documento_sector_id = 13
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_libres_consignaciones
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_libre_consignacion_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, remitente, consignatario, usuario, monto_total, monto_total_moneda, monto_descuento, tipo_cambio, lugar_destino, lugar_acopio_puerto, tipo_pais_id, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_documento_identidad_id, numero_documento, direccion)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40) returning venta_libre_consignacion_id';							

		when p_tipo_documento_sector_id = 14
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_zonas_francas
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_zona_franca_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_parte_recepcion, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, monto_descuento, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38) returning venta_zona_franca_id';							

		when p_tipo_documento_sector_id = 15
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_espectaculos
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_espectaculo_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_descuento, leyenda, tipo_evento, lugar_evento, artista_evento, nit_salon, direccion_salon, fecha_evento, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_moneda_id, tipo_cambio, monto_total_moneda)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43) returning venta_espectaculo_id';			

		when p_tipo_documento_sector_id = 16
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_seguridad_alimentaria_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, monto_descuento, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37) returning venta_seguridad_alimentaria_id';			
				
		when p_tipo_documento_sector_id = 17
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_monedas_extranjeras
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_moneda_extranjera_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, monto_diferencia_tipo_cambio, monto_descuento, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38) returning venta_moneda_extranjera_id';							

		when p_tipo_documento_sector_id = 18
			then
			v_sql:='0';			
				
		when p_tipo_documento_sector_id = 19
			then
			v_sql:='0';			

		when p_tipo_documento_sector_id = 20
			then
			v_sql:='0';			
			
		when p_tipo_documento_sector_id = 21
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_turismos_receptivos
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_turismo_receptivo_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_moneda_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, tipo_cambio, cantidad_huespedes, cantidad_habitaciones, cantidad_mayores, cantidad_menores, leyenda, fecha_ingreso_hospedaje, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento, nit_operador_turismo, razon_social_operador)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44) returning venta_turismo_receptivo_id';							

		when p_tipo_documento_sector_id = 22
			then 			
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_tasas_ceros
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_tasa_cero_id, persona_contribuyente_id, punto_venta_id, sucursal_id, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_moneda_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, numero_tarjeta, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, monto_descuento, tipo_cambio, leyenda, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37) returning venta_tasa_cero_id';							
				
		when p_tipo_documento_sector_id = 23
			then
			v_sql:= 'INSERT INTO sre_recaudaciones.sre_fac_ventas_hidrocarburos
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_correcta_hidrocarburo_id, persona_contribuyente_id, punto_venta_id, sucursal_id, ciudad, tipo_departamento_id, tipo_ambiente_id, tipo_emision_id, tipo_modalidad_id, tipo_moneda_id, tipo_documento_fiscal_id, tipo_documento_identidad_id, tipo_documento_sector_id, estado_factura_id, metodo_pago_id, nit_emisor, codigo_cliente, numero_factura, cuf, cufd, cuis, nombre_propietario, nombre_representante_legal, condicion_pago, periodo_entrega, direccion, usuario, numero_documento, complemento, nombre_razon_social, monto_total, monto_total_moneda, tipo_cambio, leyenda, monto_iehd, fecha_emision, fecha_registro, fecha_ultima_modificacion, estado_id, monto_descuento)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42) returning venta_hidrocarburo_id';			
				
		else 
				v_sql:='0';
	end case;
								 		  	    	   	    	 		    
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then
      return '-1';		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_cuf(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado varchar:='0';
	v_sql varchar:='0';
begin
	
    v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_cuf(p_tipo_documento_sector_id));

 
    execute v_sql  
    using 
    	p_venta_id			
    into v_resultado;
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_cuf')) as varchar);	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_cuf_contingencia(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado varchar:='0';
	v_sql varchar:='0';
begin
	
    v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_cuf_contingencia(p_tipo_documento_sector_id));

    
    execute v_sql  
    using 
    	p_venta_id			
    into v_resultado;
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_cuf_contingencia')) as varchar);	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_cuf_error(p_codigo_recepcion bigint, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar := '0';  
begin
	  v_resultado := coalesce(
						  (select a.cuf
                           from sre_recaudaciones.sre_fac_recepciones_errores as a
                           where a.recepcion_id = p_codigo_recepcion and a.tipo_documento_sector_id = p_tipo_documento_sector_id
                           limit 1)
                           ,
                           '0'
                         );						 
							 
	return v_resultado;	
	
	EXCEPTION
		  when others
		    then
		      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_cuf_error')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_departamento_id(p_nit bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado integer:=0;
    v_persona_contribuyente_id bigint:= (select sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit)); 
begin

	v_resultado:= ( SELECT departamento_id FROM scn_contribuyentes.scn_emp_sucursales_contribuyentes SUC
					INNER JOIN scn_contribuyentes.scn_emp_domicilios_sucursales DOMSUC
					ON SUC.sucursal_contribuyente_id=DOMSUC.sucursal_contribuyente_id
					INNER JOIN scn_contribuyentes.scn_emp_domicilios DOM
					ON DOMSUC.domicilio_id=DOM.domicilio_id
					WHERE SUC.persona_contribuyente_id=v_persona_contribuyente_id limit 1);
				
	return coalesce(v_resultado,0) :: integer;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_departamento_id'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_descripcion_codigo_error(p_codigos_errores character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el rollback, por solo afectar auna tabla y el rollback automaticamente se aplica si hay algun problema.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<14/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_mensajes_descripcion varchar;
   v_mensajes_descripcionb varchar;
   v_sql varchar;
begin
	
	v_sql:='select string_agg(descripcion, '', '') 
			from sre_recaudaciones.sre_fac_mensajes_servicios 	
			where mensaje_servicio_id in ('||p_codigos_errores||')';	
			
	execute v_sql  into v_mensajes_descripcion;
			
	return coalesce(v_mensajes_descripcion,'Sin descripción');			
		
	EXCEPTION
		  when others
		    then
		      return ((sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_descripcion_codigo_error'))::varchar);	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_inicial_observados_manual(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene el estado de la venta, ejecutando la consulta enviando como parametro el id venta
PARAMETROS INGRESO
tipo documento sector, venta id
PARAMETROS SALIDA
clasificador_id (estado_venta_manual_documento_fiscal_id) de las tablas de ventas encontrado
SUBSISTEMA : Facturación
FECHA CREACION : 27/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	
begin

	v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_venta_manual(p_tipo_documento_sector_id));    
	
	    execute v_sql  
	    using 
	    	p_venta_id		
	    into v_resultado;
	    	
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_inicial_observados_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a otra funcion v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
		--Nota: Retorna el estado de la recepcion
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_recepcion_id(p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion
	    into v_resultado;
	    
	    return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_recepcion'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a otra funcion v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
		--Nota: Retorna el estado de la recepcion
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_rec_contingencia(p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion
	    into v_resultado;
	    
	    return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_recepcion_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(p_estado_recepcion integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD :  Se recupera el estado equivalente de base de datos a los codigos de estado para el contribuyente
PARAMETROS INGRESO
    p_estado_recepcion :  es el estado de Base de Datos
PARAMETROS SALIDA
    v_resultado : codigo estado que se visualiza para el contribuynete
SUBSISTEMA : Facturación
FECHA CREACION : <06/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: 
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :00/00/0000
AUTOR DE LA MODIFICACION : 
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare

       v_estado_recepcion_pendiente smallint := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_pendiente_bd')); 
       v_estado_recepcion_valida smallint := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_valida_bd'));
       v_estado_recepcion_observada smallint := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_observada_bd'));
       v_estado_recepcion_rechazada smallint := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_rechazada_bd'));
       v_estado_recepcion_procesada smallint := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_procesada_bd'));
       v_estado_factura_valida smallint := (sre_recaudaciones.sre_fac_par_estado('estado_factura_valida'));
       v_resultado smallint;     
begin
       
       case
             when p_estado_recepcion = v_estado_recepcion_pendiente  then --pendiente bd 709
                    v_resultado := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_pendiente'));--901
                    
             when p_estado_recepcion =  v_estado_recepcion_valida or p_estado_recepcion =  v_estado_factura_valida  then -- valida bd 705
                    v_resultado := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_valida'));--908
                    
             when p_estado_recepcion = v_estado_recepcion_observada then -- observada bd 708
                    v_resultado := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_observada'));--904
                    
             when p_estado_recepcion = v_estado_recepcion_rechazada then -- rechazada bd 707
                    v_resultado := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_rechazada')); --903
             
             when p_estado_recepcion = v_estado_recepcion_procesada then -- rechazada bd 706
                    v_resultado := (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_procesada'));
             
             else
                    v_resultado := 0;
       end case;
       
       return v_resultado;
       
       EXCEPTION
     when others
     then
          return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_recepcion_equivalente'));
       
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_tipo_documento_sector_id integer, p_codigo_recepcion_paquete bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a la funcion sre_fac_ope_armar_consulta_obtener_estado_recepcion_id_pq
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
		-- Nota: Retorna el estado de la recepcion paquete
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_recepcion_id_pq(p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion_paquete
	    into v_resultado;
	    
	    return coalesce(v_resultado,0);	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_recepcion_paquete'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion_paquete bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a la funcion sre_fac_ope_armar_consulta_obtener_estado_recepcion_id_pq
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
		-- Nota: Retorna el estado de la recepcion paquete
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_est_rec_pq_contingencia(p_tipo_documento_sector_id));
	    execute v_sql  
	    using 
	    	p_codigo_recepcion_paquete
	    into v_resultado;
	    
	    return coalesce(v_resultado,0);	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_recepcion_paquete_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_rectificado_factura_manual(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Determina el estado para las tablas de  rectificados segu nel monto y si la venta asociada esta anulada
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
clasificador_id del estado_venta_rectificatoria_id, (FAKE NO EXISTEN AUN LOS CLASIFICADORES)
SUBSISTEMA : Facturación
FECHA CREACION : 27/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
		
	v_resultado_monto integer;
	v_resultado_anulado bigint;
	v_estado_rectificado_id bigint;
begin

	v_estado_rectificado_id := (select clasificador_id from str_transversales.str_cps_clasificadores 
						where tipo_clasificador = 'estado_venta_rectificatoria_id' and descripcion ='SIN AFECTACION'); 
	v_resultado_monto := sre_recaudaciones.sre_fac_val_modificacion_monto_factura_manual(p_json);
	v_resultado_anulado:= sre_recaudaciones.sre_fac_ope_verificar_existe_venta_anulado_factura_manual(p_json);
	
	if(v_resultado_monto=1000 or v_resultado_anulado>0) then 
		v_estado_rectificado_id := (select clasificador_id from str_transversales.str_cps_clasificadores 
						where tipo_clasificador = 'estado_venta_rectificatoria_id' and descripcion = 'PENDIENTE DE FISCALIZACION'); 
	end if;
	v_estado_rectificado_id:=1000;--fake no existe en los clasificadores
        return v_estado_rectificado_id;
        								
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_rectificado_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a la funcion sre_fac_ope_armar_consulta_obtener_estado_venta_id de v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
		--Nota: Retorna el estado de la venta
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_venta_id(p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_venta_id
	    into v_resultado;
	    
	    return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_venta_id'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_estado_venta_id_contingencia(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a la funcion sre_fac_ope_armar_consulta_obtener_estado_venta_id de v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
		--Nota: Retorna el estado de la venta
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_estado_venta_contingencia(p_tipo_documento_sector_id));
	    
	    execute v_sql  
	    using 
	    	p_venta_id
	    into v_resultado;
	    
	    return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_estado_venta_id_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_fecha_emision_venta_factura_manual(p_venta_id bigint, p_tipo_documento_sector_id bigint)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Ejecuta la consulta para obtener la fecha de emision de la factura desde la tabla dependiendo el tipo sector
PARAMETROS INGRESO
tipo documento sector, id de venta
PARAMETROS SALIDA
fecha emision en formato timestamp
SUBSISTEMA : Facturación
FECHA CREACION : 12/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado timestamp;
	v_sql varchar:='0';
	
begin
	if(p_venta_id is not null and p_venta_id >0) then
	v_sql:=(sre_recaudaciones.sre_fac_armar_obt_fecha_emision_venta_facturacion_manual(p_tipo_documento_sector_id));    
	
	    execute v_sql  
	    using 
	    	p_venta_id	    	
	    into v_resultado;
	end if;    	
	return v_resultado;							
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_fecha_emision_venta_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_id_recepcion_correcta(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin	
	    v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_id_recepcion_correcta(p_tipo_documento_sector_id));
	 
	    execute v_sql  
	    using 
	    	p_codigo_recepcion			
	    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_id_recepcion_correcta'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_limite_envio_anulados_fact_manual(p_fecha_emision timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene la fec ha limite de envio segun la normativa (hasta el 8 del mes siguiente de la emision), respecto la fecha de emision de la factura
PARAMETROS INGRESO
fecha de emision de la factura o nota
PARAMETROS SALIDA
fecha limite de envio segun normativa
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  v_periodo_normativa integer:= 1;
  v_dias_limite_normativa varchar := '7 days';--8vo dia segun normativa
  v_resultado timestamp without time zone;   
  v_periodo_mes integer;
  v_fecha_base timestamp without time zone;
  v_fecha_base_texto varchar;
  v_fecha_limite timestamp without time zone;
  v_fecha_limite_total timestamp without time zone;
  v_gestion varchar;
begin		
	v_periodo_mes:= (select date_part('month',p_fecha_emision));
	v_gestion:= extract(year from p_fecha_emision);
	v_periodo_mes:=v_periodo_mes+v_periodo_normativa;
	case
  		when v_periodo_mes =2
  				then 
  				v_fecha_base_texto:=v_gestion||'-02-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;				
				return v_fecha_limite_total;
  		when v_periodo_mes =3
  				then 
  				v_fecha_base_texto:=v_gestion||'-03-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =4
  				then 
  				v_fecha_base_texto:=v_gestion||'-04-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =5
  				then 
  				v_fecha_base_texto:=v_gestion||'-05-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =6
  				then 
  				v_fecha_base_texto:=v_gestion||'-06-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =7
  				then 
  				v_fecha_base_texto:=v_gestion||'-07-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =8
  				then 
  				v_fecha_base_texto:=v_gestion||'-08-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =9
  				then 
  				v_fecha_base_texto:=v_gestion||'-09-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =10
  				then 
  				v_fecha_base_texto:=v_gestion||'-10-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =11
  				then 
  				v_fecha_base_texto:=v_gestion||'-11-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				
				return v_fecha_limite_total;
  		when v_periodo_mes =12
  				then   				
  				v_fecha_base_texto:=v_gestion||'-12-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
		when v_periodo_mes =13
  				then 
  				v_fecha_base_texto:=v_gestion||'-01-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		else
		v_resultado :=p_fecha_emision;
	end case;		
	  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_limite_envio_anulados_fact_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_limite_envio_facturacion_manual(p_fecha_emision timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene la fec ha limite de envio segun la normativa (hasta el 8 del mes siguiente de la emision), respecto la fecha de emision de la factura
PARAMETROS INGRESO
fecha de emision de la factura o nota
PARAMETROS SALIDA
fecha limite de envio segun normativa
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  v_periodo_normativa integer:= 1;
  v_dias_limite_normativa varchar := '7 days';
  v_resultado timestamp without time zone;   
  v_periodo_mes integer;
  v_fecha_base timestamp without time zone;
  v_fecha_base_texto varchar;
  v_fecha_limite timestamp without time zone;
  v_fecha_limite_total timestamp without time zone;
  v_gestion varchar;
begin		
	v_periodo_mes:= (select date_part('month',p_fecha_emision));
	v_gestion:= extract(year from p_fecha_emision);
	v_periodo_mes:=v_periodo_mes+v_periodo_normativa;
	case
  		when v_periodo_mes =2
  				then 
  				v_fecha_base_texto:=v_gestion||'-02-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;				
				return v_fecha_limite_total;
  		when v_periodo_mes =3
  				then 
  				v_fecha_base_texto:=v_gestion||'-03-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =4
  				then 
  				v_fecha_base_texto:=v_gestion||'-04-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =5
  				then 
  				v_fecha_base_texto:=v_gestion||'-05-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =6
  				then 
  				v_fecha_base_texto:=v_gestion||'-06-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =7
  				then 
  				v_fecha_base_texto:=v_gestion||'-07-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =8
  				then 
  				v_fecha_base_texto:=v_gestion||'-08-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =9
  				then 
  				v_fecha_base_texto:=v_gestion||'-09-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =10
  				then 
  				v_fecha_base_texto:=v_gestion||'-10-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		when v_periodo_mes =11
  				then 
  				v_fecha_base_texto:=v_gestion||'-11-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				
				return v_fecha_limite_total;
  		when v_periodo_mes =12
  				then   				
  				v_fecha_base_texto:=v_gestion||'-12-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
		when v_periodo_mes =13
  				then 
  				v_fecha_base_texto:=v_gestion||'-01-01 00:00:00';
  				v_fecha_base := (SELECT TO_TIMESTAMP(v_fecha_base_texto,'YYYY-MM-DD HH24:MI:SS'));				
				v_fecha_limite:= v_fecha_base+v_dias_limite_normativa::interval;				
				v_fecha_limite_total:= v_fecha_limite+ INTERVAL '59' SECOND;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '59' MINUTE;
				v_fecha_limite_total:= v_fecha_limite_total+ INTERVAL '23' HOUR;
				return v_fecha_limite_total;
  		else
		v_resultado :=p_fecha_emision;
	end case;		
	  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_limite_envio_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_lista_errores(p_id_recepcion bigint, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a dar formato la consulta y se agregó el filtro del estado de la factura
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<18/06/2019>
AUTOR DE LA MODIFICACION :  Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar := '0';
   
begin
							 
    v_resultado:=(select array_to_string 
                         (array
							  (select distinct b.codigo_error_id
							   from sre_recaudaciones.sre_fac_recepciones_errores as a inner join sre_recaudaciones.sre_fac_recepciones_errores_detalles as b
							   on a.recepcion_error_id=b.recepcion_error_id
							   where a.recepcion_id = p_id_recepcion 
							   and a.recepcion_error_id = b.recepcion_error_id 
							   and a.tipo_documento_sector_id = p_tipo_documento_sector_id 
							   and a.estado_id='AC'	),',')
				  );							 
							 
	return v_resultado;	
	
	EXCEPTION
		  when others
		    then
		      return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_lista_errores')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_modalidad_prioritaria(p_modalidades_facturacion_proveedor character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion realiza la asignacion de NITs a un sistema proveedor.
PARAMETROS INGRESO
    		p_sistema_id    	
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/08/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare 

 	v_contador INTEGER = 0;
 	v_switch INTEGER = 1;
 	v_valor character varying;
 	v_contador_ele INTEGER = 0;
	v_contador_com INTEGER = 0;
	v_contador_pre_ele INTEGER = 0;
	v_contador_pre_com INTEGER = 0;
begin		
	    WHILE v_switch = 1 loop
		    v_contador:=v_contador+1;
		   	v_valor := split_part(p_modalidades_facturacion_proveedor, '-',v_contador)::varchar;
			if(v_valor!='') then
				if (trim(v_valor) like 'ELECTRONICA') then
					v_contador_ele=v_contador_ele+1;		
				end if;
				if (trim(v_valor) like 'COMPUTARIZADA') then
					v_contador_com=v_contador_com+1;
				end if;
				if (trim(v_valor) like 'PREVALORADA ELECTRONICA') then
					v_contador_pre_ele=v_contador_pre_ele+1;
				end if;
				if (trim(v_valor) like 'PREVALORADA COMPUTARIZADA') then
					v_contador_pre_com=v_contador_pre_com+1;
				end if;			
			else
				v_switch:=0;
			end if;
	    END LOOP;
	   
		if (v_contador_ele>0) then
			return (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador='modalidad_facturacion_id' and descripcion='ELECTRONICA');
		elsif (v_contador_com>0) then
			return (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador='modalidad_facturacion_id' and descripcion='COMPUTARIZADA');
		elsif (v_contador_pre_ele>0) then
			return (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador='modalidad_facturacion_id' and descripcion='PREVALORADA ELECTRONICA');
		elsif (v_contador_pre_com>0) then
			return (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador='modalidad_facturacion_id' and descripcion='PREVALORADA COMPUTARIZADA');
		else
			return 0;
		end if;
	
	EXCEPTION
	when others
		then		  
		  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_modalidad_prioritaria');
	      return 0;		  	   
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_motivo_evento(p_sistema_id integer, p_sucursal_id integer, p_cufd character varying, p_cuis character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_resultado integer :=0;
begin
  
  v_resultado :=coalesce((select distinct motivo_evento_id 
				 from sre_recaudaciones.sre_fac_eventos_significativos 
				 where 
				 sistema_id   = p_sistema_id AND	
				 sucursal_id  = p_sucursal_id AND 
				 cufd = p_cufd AND 
				 cuis=p_cuis and
				 estado_id = 'AC' 
				 limit 1),0);
				   
  return v_resultado;
  
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_motivo_evento'));
  
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_nit(p_contribuyente_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_nit bigint := 0;
begin
                     
   -- se debe cambiar a la tabla scn_emp_contribuyentes / siguiente Sprint          
   v_nit := coalesce(
					   (select a.nit 
					   from scn_contribuyentes.scn_emp_contribuyentes as a 
					   where a.persona_contribuyente_id = p_contribuyente_id limit 1),0   
   					);
   
  return v_nit;
  
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_nit'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_nit_apartir_sistema_id(p_sistema_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion obtien el nit apartir del sistema_id
PARAMETROS INGRESO
    		p_sistema_id    	
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/08/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_nit bigint:=0;
begin			
		
	v_nit:= coalesce((select distinct(nit) 
					  from sre_recaudaciones.sre_fac_sistemas_contribuyentes contribuyentes
					  inner join sre_recaudaciones.sre_fac_contribuyentes_modalidades modalidades
					  on modalidades.persona_contribuyente_id=contribuyentes.contribuyente_id
					  and sistema_id=p_sistema_id
					 ),0
					);
	return v_nit; 
	
	EXCEPTION
	when others
		then		  
		  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_nit_apartir_sistema_id');
	      return 0;		  	   
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_nit_especiales(p_razon_social character varying)
 RETURNS TABLE(nit_especial character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene lista de nit especiales segun razon social
PARAMETROS INGRESO
  p_razon_social : razon social.
PARAMETROS SALIDA
  query : Tabla de una columna (nit_especial)
SUBSISTEMA : Facturacion
FECHA CREACION : 21/12/2018
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <DescripciÃƒÂ³n>
NUMERO SECUENCIAL : <nÃƒÂºmero secuencial>
FECHA DE MODIFICACION :< dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <nÃƒÂºmero VersiÃƒÂ³n secuencial>
**************************************************************************************************************************************************/
declare
  v_razon_social_exportacion_libre_consignacion       varchar := upper('notas de exportacion o libre consignacion');
  v_razon_social_notas_facturas_espectaculos_publicos varchar := upper('notas y facturas de espectaculos publicos');
  v_razon_social_consumidor_final                     varchar :=upper('consumidor final');
  v_razon_social_control_tributario                   varchar :=upper('control tributario');

begin
  p_razon_social := upper(p_razon_social);
  
  if p_razon_social = v_razon_social_exportacion_libre_consignacion
  then
    return query (select cast('99001' as varchar) as nit_especial
                  union
                  select cast('99002' as varchar)
                  union
                  select cast('9903' as varchar)
                  union
                  select cast('9904' as varchar)
                  union
                  select cast('99005' as varchar));
  end if;

  if p_razon_social = v_razon_social_notas_facturas_espectaculos_publicos
  then
    return query (select cast('99001' as bigint) as nit_especial);
  end if;

  if p_razon_social = v_razon_social_consumidor_final
  then
    return query (select cast('99002' as bigint) as nit_especial);
  end if;

  if p_razon_social = v_razon_social_control_tributario
  then
    return query (select cast('99004' as bigint) as nit_especial);
  end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_numero_factura(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin
	-- se retorna el numero de factura
	
    v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_numero_factura(p_tipo_documento_sector_id));

    
    execute v_sql  
    using 
    	p_venta_id			
    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_numero_factura'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_numero_factura_contingencia(p_tipo_documento_sector_id integer, p_venta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin
	-- se retorna el numero de factura
	
    v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_numero_fac_contingencia(p_tipo_documento_sector_id));

    
    execute v_sql  
    using 
    	p_venta_id			
    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_numero_factura_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_numero_factura_error(p_codigo_recepcion bigint, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar := '0';  
begin
	  v_resultado := coalesce(
						  (select a.numero_factura
                           from sre_recaudaciones.sre_fac_recepciones_errores as a
                           where a.recepcion_id = p_codigo_recepcion and tipo_documento_sector_id = p_tipo_documento_sector_id
                           limit 1)
                           ,
                           '0'
                         );						 
							 
	return v_resultado;	
	
	EXCEPTION
		  when others
		    then
		      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_numero_factura_error')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_oficina_id(p_nit bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado integer;
begin

	v_resultado:= (select oficina_registro_id from scn_contribuyentes.scn_emp_contribuyentes where nit=p_nit limit 1);  
    return coalesce(v_resultado,sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_obtener_oficina_id')) :: smallint;
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_oficina_id'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_ifc bigint := 0;
begin
                     
   v_ifc := coalesce(
					   (select a.persona_contribuyente_id 
					   from scn_contribuyentes.scn_emp_contribuyentes as a 
					   where a.nit = p_nit limit 1),0   
   					);
   
  return v_ifc;
  
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_persona_contribuyente_id'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id_ben(p_codigotipodocumentoidentidad integer, p_nit bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_persona_contribuyente_id bigint := 0;  
begin
	
	case
		when p_codigoTipoDocumentoIdentidad = 5 then --NUMERO DE IDENTIFICACION TRIBUTARIA
			v_persona_contribuyente_id := coalesce(
					  	(
							select a.persona_contribuyente_id 
							from scn_contribuyentes.scn_emp_contribuyentes as a 
							where a.nit = p_nit 
							limit 1
	                     ),0);
		else 
			v_persona_contribuyente_id:=0;
	end case;
		                    
  return v_persona_contribuyente_id;
  
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_persona_contribuyente_id_ben'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id_ben(p_nit bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_ifc bigint := 0;
begin
 	
  v_ifc := coalesce(
				  	(select a.ifc 
				     from scn_contribuyentes.scn_vpdr_datos_contribuyentes_vw as a 
				     where a.nit_nb = p_nit
                     limit 1)
                     ,
                     0
                     );
                        
  return v_ifc;
  
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_persona_contribuyente_id'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_recepcion_correctas_factura_manual(p_venta_id bigint, p_tipo_documento_sector_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Ejecuta la consulta para obtener el registro de recpcion correcta si existe
PARAMETROS INGRESO
tipo documento sector, id de venta
PARAMETROS SALIDA
id de recepcion correcta encontrada
SUBSISTEMA : Facturación
FECHA CREACION : 25/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	
begin

	v_sql:=(sre_recaudaciones.sre_fac_armar_obt_recepcion_correcta_manual(p_tipo_documento_sector_id));    
	
	    execute v_sql  
	    using 
	    	p_venta_id
	    		
	    into v_resultado;
	    	
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_recepcion_correctas_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_recepcioncompraid(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare   
   p_recepcionPaqueteId bigint:=0;
   p_tipo_emision_id integer:=0;
   
   v_resultado bigint:=0;
begin				
	p_recepcionPaqueteId:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId' as bigint));
	p_tipo_emision_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as integer));
	
	if(p_tipo_emision_id=2 or p_tipo_emision_id=3) then
		if((p_recepcionPaqueteId is not null) and p_recepcionPaqueteId>0 and (p_tipo_emision_id is not null) and p_tipo_emision_id>0) then
			v_resultado:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1(p_json,'2');				
		end if;
	else 	
			v_resultado:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as bigint));
	end if;	
				
  	return v_resultado;
		
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_recepcionid'));
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_recepcionid(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare   
   p_recepcionPaqueteId bigint:=0;
   p_tipo_emision_id integer:=0;
   p_tipo_documento_fiscal_id integer :=0;
   
   v_resultado bigint:=0;
   v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5
begin				
	p_recepcionPaqueteId:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId' as bigint));
	p_tipo_emision_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as integer));
	p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));

	if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
			v_documento_fiscal := 2;
	end if;

	if (v_documento_fiscal = 1 )then
		if(p_tipo_emision_id=2 or p_tipo_emision_id=3) then
			if((p_recepcionPaqueteId is not null) and p_recepcionPaqueteId>0 and (p_tipo_emision_id is not null) and p_tipo_emision_id>0) then
				v_resultado:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1(p_json,'2');				
			end if;
		else 	
				v_resultado:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as bigint));
		end if;	
	else
		if(p_tipo_emision_id=2) then
			if((p_recepcionPaqueteId is not null) and p_recepcionPaqueteId>0 and (p_tipo_emision_id is not null) and p_tipo_emision_id>0) then
				v_resultado:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1_contingencia(p_json,'2');				
			end if;
		else 	
				v_resultado:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as bigint));
		end if;	

	end if;
	
	
				
  	return v_resultado;
		
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_recepcionid'));
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_recepcionid_contingencia(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare   
   p_recepcionPaqueteId bigint:=0;
   p_tipo_emision_id integer:=0;
   
   v_resultado bigint:=0;
begin				
	p_recepcionPaqueteId:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId' as bigint));
	p_tipo_emision_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as integer));
	
	if(p_tipo_emision_id=2) then
		if((p_recepcionPaqueteId is not null) and p_recepcionPaqueteId>0 and (p_tipo_emision_id is not null) and p_tipo_emision_id>0) then
			v_resultado:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1_contingencia(p_json,'2');				
		end if;
	else 	
			v_resultado:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as bigint));
	end if;	
				
  	return v_resultado;
		
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_recepcionid_contingencia'));
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 
  v_sistema_id bigint := 0; 
  begin
 	
		v_sistema_id := coalesce(
						  (select a.sistema_id 
						   from sre_recaudaciones.sre_fac_sistemas as a 
						   where a.codigo_sistema = p_codigo_sistema limit 1)
                           ,
                           0
                         );
  return v_sistema_id;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_sistema_id'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_tipo_documento_facturacion_manual(p_json json)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene el tipo de documento de identidad a partir del numero de documento, tomando en cuenta los casos especiales y el registro en padron, si el numero no es especial y no esta en 
padron, o no puede ser identificado retorna NO ESPECIFICADO.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
clasificador_id de tipo documento identidad
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_numero_documento varchar:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
     	
 -- v_id_documento_identidad_ci integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('CI') as integer); --par 1
  v_id_documento_identidad_nit integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('NIT') as integer); --719

  v_resultado_validar_nit_razon_social smallint := (sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));
  v_resultado_validar_nit_padron smallint :=(sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));
  v_resultado integer :=(select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador ='tipo_documento_identidad_id' and descripcion ='NO ESPECIFICADO');--NO ESPECIFICADO
begin	
			
			--1. Validar numero el numero de documento igual a cero											
			if(p_numero_documento='0') then 
				return v_resultado;
			end if;
			--2. Validar numero el numero de documento inexistente (segip) FAKE
			--if(validar_existencia del nro de ci en el segip) then 
			--v_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_documento_ci'));
			--end if;
			--3. validar NIT y razon social (casos especiales)
			if (p_numero_documento in ('99002','99003','99004')) then
					return v_id_documento_identidad_nit;--nit
			end if;
			--4. validar existencia del NIT mediante padron
			
			v_resultado_validar_nit_padron :=(sre_recaudaciones.sre_fac_ope_validar_nit_padron_facturacion_manual(v_id_documento_identidad_nit, p_numero_documento));		
			if(v_resultado_validar_nit_padron=1000) then
			return v_id_documento_identidad_nit;
			end if;	
	return v_resultado;		
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_tipo_documento_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_venta_id(p_tipo_documento_sector_id integer, p_recepcion_correcta_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el "select"  de v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado varchar:='0';
	v_sql varchar:='0';
begin
	-- Nota: Retorna el numero de factura
    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_venta_id(p_tipo_documento_sector_id));
    
    execute v_sql  
    using 
    	p_recepcion_correcta_id			
    into v_resultado;
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return cast ( (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_venta_id')) as varchar);	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_obtener_venta_id_contingencia(p_tipo_documento_sector_id integer, p_recepcion_correcta_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el "select"  de v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado varchar:='0';
	v_sql varchar:='0';
begin
	-- Nota: Retorna el numero de factura
    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_venta_id_contingencia(p_tipo_documento_sector_id));
    
    execute v_sql  
    using 
    	p_recepcion_correcta_id			
    into v_resultado;
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return cast ( (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_obtener_venta_id_contingencia')) as varchar);	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_registrar_errores_detalles_anulados_manual(p_json json, p_json_errores json, p_id_recepciones_errores bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del JSON de datos de la factura y datos de detalles de error y los prepara para ser enviados al CRUD
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
Detalle de errores en formato JSON
id de error
PARAMETROS SALIDA
id de registro de detalle de error
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_recepcion_error_id bigint:=p_id_recepciones_errores; --'ID_RECEPCION_ERROR'
	p_usuario_registro_id bigint;
	p_usuario_ultima_modificacion_id bigint;		
	p_codigo_error_id integer;--'CODIGO_FUNCION'
	p_fecha_registro timestamp;-- :=v_fecha_actual;--ERROR
	p_fecha_ultima_modificacion timestamp; --:=v_fecha_actual;--ERROR
	p_estado_id varchar(2);
	p_tipo_crud_crear varchar(2):='C';	
	p_tipo_documento_sector_id integer;
	p_tipo_documento_fiscal_id integer;
	v_id_recepciones_errores_detalles bigint:=0;		
	i json;
	v_sql varchar :='0';
	v_fecha_actual timestamp:=now();
begin	
	--Insercion
		p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
		p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
		p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
		p_tipo_documento_fiscal_id:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		
	for i in select * from json_array_elements(p_json_errores->'resultados')
	loop	
		p_codigo_error_id := (i->>'resultado_ejecucion');--'CODIGO_FUNCION'
		p_fecha_registro :=v_fecha_actual;
		p_fecha_ultima_modificacion :=v_fecha_actual;
		p_estado_id :='AC';
						
		

	v_sql:= 'INSERT INTO sre_recaudaciones.sre_fman_recepciones_errores_detalles_anuladas
			(usuario_registro_id, usuario_ultima_modificacion_id, recepcion_error_anulada_id, codigo_error_id, fecha_registro, fecha_ultima_modificacion, estado_id)
				VALUES($1,$2,$3,$4,$5,$6,$7) returning recepcion_error_detalle_anulada_id';
				
	 
	execute v_sql  
	    using 
				
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_id_recepciones_errores,
				p_codigo_error_id,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id
	 into v_id_recepciones_errores_detalles;

					
	end loop;
	return v_id_recepciones_errores_detalles;		
	 EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_registrar_errores_detalles_anulados_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_registrar_recepciones_errores_detalles_manual(p_json json, p_json_errores json, p_id_recepciones_errores bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del JSON de datos de la factura y datos de detalles de error y los prepara para ser enviados al CRUD
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
Detalle de errores en formato JSON
id de error
PARAMETROS SALIDA
id de registro de detalle de error
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_recepcion_error_id bigint:=p_id_recepciones_errores; --'ID_RECEPCION_ERROR'
	p_usuario_registro_id bigint;
	p_usuario_ultima_modificacion_id bigint;		
	p_codigo_error_id integer;--'CODIGO_FUNCION'
	p_fecha_registro timestamp;-- :=v_fecha_actual;--ERROR
	p_fecha_ultima_modificacion timestamp; --:=v_fecha_actual;--ERROR
	p_estado_id varchar(2);
	p_tipo_crud_crear varchar(2):='C';	
	p_tipo_documento_sector_id integer;
	p_tipo_documento_fiscal_id integer;
	v_id_recepciones_errores_detalles bigint:=0;		
	i json;

	v_fecha_actual timestamp:=now();
begin	
	--Insercion
		p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
		p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
		p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
		p_tipo_documento_fiscal_id:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		
	for i in select * from json_array_elements(p_json_errores->'resultados')
	loop	
		p_codigo_error_id := (i->>'resultado_ejecucion');--'CODIGO_FUNCION'
		p_fecha_registro :=v_fecha_actual;
		p_fecha_ultima_modificacion :=v_fecha_actual;
		p_estado_id :='AC';
						
		v_id_recepciones_errores_detalles:=(
		select  sre_recaudaciones.sre_fac_crud_recepciones_errores_detalles_facturacion_manual
		(
			p_id_recepciones_errores,--ID DEL ERROR (FUNCION)
			p_usuario_registro_id, --json
			p_usuario_ultima_modificacion_id, --json
			p_codigo_error_id, 
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_tipo_crud_crear,
			p_tipo_documento_sector_id,
			p_tipo_documento_fiscal_id
		)
		);			
	end loop;
	return v_id_recepciones_errores_detalles;		
	 EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_registrar_recepciones_errores_detalles_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_respuesta_validacion_anulacion(p_estado_anulacion_recepcion bigint, p_recepcion_anulacion_id bigint, p_resultado_defecto character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Arma la respuesta en formato JSON de acuerdo al resultado de la transaccion realizada.
PARAMETROS INGRESO
    		p_estado_anulacion_recepcion: Estado de la recepción anulación 
    		p_id_recepcion_anulacion: Identificador unico de la tabla sre_fac_recepciones_anulaciones.
    		p_resultado_defecto: Formato JSON por defecto con los parametros de salida: codigorecepcionanulacion, codigoestado y listacodigoserror
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare   
   v_resultado varchar:=p_resultado_defecto;
   v_lista_codigo_serror varchar(3)='[]';
begin		
	
	if(p_estado_anulacion_recepcion>0) then				
		p_resultado_defecto:=(select row_to_json(tbl) 
      from
	     (
	      select p_estado_anulacion_recepcion codigoestado, p_recepcion_anulacion_id codigorecepcionanulacion, v_lista_codigo_serror listacodigoserror
	     ) tbl);
	else
		p_resultado_defecto :=(cast(p_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror','[65]'));
	end if;
	
	return p_resultado_defecto ;			
		
	EXCEPTION
		  when others
		    then
		      return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_respuesta_validacion_anulacion')) as varchar) ;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(codigorecepcionindividual bigint, codigoestado smallint, numerofactura bigint, cuf character varying, listacodigoserror character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado_defecto varchar:='{"codigorecepcionindividual": 0,   "codigoestado": 0,   "numerofactura": 0,   "cuf": "-",   "listacodigoserror": "0"}';
   v_resultado varchar:=v_resultado_defecto;

begin		

	v_resultado:=(select row_to_json(tbl) 
      from
	     (
	      select codigorecepcionindividual, codigoestado, numerofactura, cuf,listacodigoserror 
	     ) tbl);
	
	
	return coalesce(v_resultado,v_resultado_defecto) ;			
		
	EXCEPTION
		  when others
		    then
		      return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_respuesta_verificacion_individual')) as varchar) ;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_codigo_recepcion_paquete bigint, codigo_estado_paquete integer, p_lista_respuesta_verificacion_individual json)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado_defecto varchar:='{"codigoestado": 0,   "codigorecepcion": 0,   "recepcionerrordetalle": [     {       "cuf": "-",       "codigoestado": 0,       "numerofactura": 0,       "listacodigoserror": "0",       "codigorecepcionindividual": 0}]}';
   v_resultado varchar:=v_resultado_defecto;
begin
		
  	v_resultado:= concat('{"codigorecepcion":0, "codigoestado":0, "recepcionerrordetalle":', cast(p_lista_respuesta_verificacion_individual as varchar) ,'}');
	
  	v_resultado:=(cast(v_resultado as jsonb) || jsonb_build_object('codigorecepcion', p_codigo_recepcion_paquete));
  	v_resultado:=(cast(v_resultado as jsonb) || jsonb_build_object('codigoestado', codigo_estado_paquete));

	
	return coalesce(v_resultado,v_resultado_defecto) ;			
		
	EXCEPTION
		  when others
		    then
		      return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_respuesta_verificacion_paquete')) as varchar) ;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_sql_actualizar_estado_paquete(p_tipo_documento_sector_id integer, p_estado_recepcion_id integer, p_recepcion_paquete_id bigint, p_sistema_id bigint, p_documento_sector_id integer, p_cuis character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Actualiza el estado de un paquete.
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <17/12/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: 
NUMERO SECUENCIAL : 
FECHA DE MODIFICACION : 
AUTOR DE LA MODIFICACION : 
VERSION : 1.0
**************************************************************************************************************************************************/

declare 
                v_sql varchar:='';              
begin
               
                case
                               when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
                                               then                                                                                     
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_estandares 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_estandar_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis; 

                                               return 1;                                             
                               --add 20190410 vcg                                                                                                                                                                                                                    
                               when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_colegios 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_colegio_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                                            
                               when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
                                               then                                                                                                                    
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_alquileres 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_alquiler_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_combustibles 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_combustible_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_servicios 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_servicio_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_embotelladoras 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_embotelladora_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;
                               
                                               return 1;

                               when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
                                               then                                       
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_bancos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_banco_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               --add 20190408 vcg                                       
                               when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_hoteles 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_hotel_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                                execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                                                               
                                               return 1;                                                                                                            
                               when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_hospitales 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_hospital_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                                                               
                                               return 1;                                                                                                            
                               when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_juegos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_juego_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_espectaculo_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                                               
                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_exportacion_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_libre_consignacion_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                 
                               
                                               return 1;                                                                             
                               when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_zonas_francas 
                                               set 
                                                               estado_recepcion_id= $1     
                                                where recepcion_paquete_zona_franca_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                                               
                                               return 1;                                             
                               when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_espectaculos_nacionales 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_espectaculo_nacional_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_seguridades_alimentarias 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_seguridad_alimentaria_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_monedas_extranjeras 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_moneda_extranjera_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_nota_credito_debito_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_notas_conciliaciones 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_nota_conciliacion_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_boletos_aereos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_boleto_aereo_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                 

                                               return 1;                                                                                             
                               when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
                                               then                                                                                                                                                    
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_turismos_receptivos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_turismo_receptivo_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                             
                               when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
                                               then                                      
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_tasas_ceros 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_tasa_cero_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                 
                               
                                               return 1;                                                                             
                               when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
                                               then                                                     
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_hidrocarburos 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_hidrocarburo_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 

                                               return 1;                                                                                             
                              when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
                                               then                                                     
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_ypfb 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_exportacion_ypfb_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                 
                              
                                               return 1;                                             
                              when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
                                               then                                                     
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_exportaciones_mineras 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_exportacion_minera_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                 
                                              
                                               return 1;                                             
                              when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
                                               then                                                     
                                               v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_libres_consignaciones_ypfb 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_libre_consignacion_ypfb_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                              
                                               return 1;                                             
                               when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_mineras_internas 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_minera_interna_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                               
                                               return 1;                                             
                               when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_prevaloradas 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_prevalorada_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis; 
                               
                                               return 1;                                             
                               when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_telecomunicaciones 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_telecomunicacion_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                               
                                               return 1;                                             
                               when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
                                               then
                                              v_sql:= '--ACTUALIZACION FISICA TABLA PAQUETE
                                               update sre_recaudaciones.sre_fac_recepciones_paquetes_notas_creditos_debitos_sfv 
                                               set 
                                                               estado_recepcion_id= $1     
                                               where recepcion_paquete_nota_credito_debito_sfv_id=$2 and
                                               sistema_id=$3 and 
                                               tipo_documento_sector_id=$4 and 
                                               cuis=$5 and
                                               estado_id=''AC'';';           
                               
                                               
                                               execute v_sql
                                               using 
                                               p_estado_recepcion_id,
                                               p_recepcion_paquete_id,
                                               p_sistema_id,
                                               p_documento_sector_id,
                                               p_cuis;                                 
                               
                              else 
                                                               v_sql:='0';
                                                               return 1;                                              

                end case;
                
                
  
  EXCEPTION
  when others
    then  
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_sql_actualizar_estado_paquete')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_sql_actualizar_recepcion_ventas_paquetes(p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Actualiza masivamente la tabla de recepcion y ventas de un paquete.
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <17/12/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: 
NUMERO SECUENCIAL : 
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : 
VERSION : 1.0
**************************************************************************************************************************************************/

declare	
	v_sql varchar:='';	
begin
 	
	case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_estandares as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_estandar_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_estandar_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_estandares as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_estandar_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190410 vcg 														
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_colegios as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_colegio_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_colegio_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_colegios as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_colegio_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_alquileres as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_alquiler_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_alquiler_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_alquileres as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_alquiler_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_combustibles as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_combustible_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_combustible_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_combustibles as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_combustible_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_servicios as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_servicio_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_servicio_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_servicios as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_servicio_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_embotelladoras as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_embotelladora_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_embotelladora_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_embotelladoras as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_embotelladora_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';	

		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_bancos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_banco_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_banco_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_bancos as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_banco_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_hoteles as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_hotel_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_hotel_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_hoteles as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_hotel_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_hospitales as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_hospital_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_hospital_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_hospitales as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_hospital_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_juegos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_juego_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_juego_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_juegos as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_juego_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_espectaculos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_espectaculo_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_espectaculo_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_espectaculos as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_espectaculo_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
				
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_exportaciones as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_exportacion_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_exportacion_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_exportaciones as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_exportacion_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_libres_consignaciones as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_libre_consignacion_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_libre_consignacion_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_libres_consignaciones as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_libre_consignacion_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_zonas_francas as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_zona_franca_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_zona_franca_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_zonas_francas as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_zona_franca_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190408 vcg
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_espectaculo_nacional_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_espectaculo_nacional_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_espectaculo_nacional_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_seguridad_alimentaria_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_seguridad_alimentaria_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_seguridad_alimentaria_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190408 vcg				
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_moneda_extranjera_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_moneda_extranjera_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_monedas_extranjeras as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_moneda_extranjera_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_nota_credito_debito_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_nota_credito_debito_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_notas_creditos_debitos as TABLA_VENTAS
			SET
				estado_notadc_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.nota_credito_debito_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_nota_conciliacion_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_nota_conciliacion_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_notas_conciliaciones as TABLA_VENTAS
			SET
				estado_nota_conciliacion_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.nota_conciliacion_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190513 rgt
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_boletos_aereos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_boleto_aereo_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_boleto_aereo_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_boletos_aereos as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_boleto_aereo_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_turismos_receptivos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_turismo_receptivo_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_turismo_receptivo_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_turismos_receptivos as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_turismo_receptivo_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';


		--add 20190410 vcg 
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_tasas_ceros as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_tasa_cero_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_tasa_cero_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_tasas_ceros as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_tasa_cero_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190409 rgt	
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_hidrocarburos as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_hidrocarburo_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_hidrocarburo_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_hidrocarburos as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_hidrocarburo_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		--add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_exportacion_ypfb_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_exportacion_ypfb_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_exportacion_ypfb_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
 		
 		--add 20190729 rgt
 		--modificacion 20192510 eca
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_exportacion_minera_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_exportacion_minera_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_exportaciones_mineras as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_exportacion_minera_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
 			
 		--add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_libre_consignacion_ypfb_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_libre_consignacion_ypfb_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_libre_consignacion_ypfb_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
 		
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_mineras_internas as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_minera_interna_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_minera_interna_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_mineras_internas as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_minera_interna_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		
		--add 20190410 jf				
		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_prevaloradas as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_prevalorada_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_prevalorada_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_prevaloradas as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.prevalorada_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';

		
		--add 20190724 rgt
		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_telecomunicaciones as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_telecomunicacion_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_telecomunicacion_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_ventas_telecomunicaciones as TABLA_VENTAS
			SET
				estado_factura_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.venta_telecomunicacion_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		
		--add 20190725 rgt
		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then
 			v_sql:= '--ACTUALIZACION FISICA TABLA RECEPCION			
			UPDATE sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv as TABLA_RECEPCION
			SET
				estado_recepcion_id = TMP.estado_recepcion_id
			from tbl_documentos_paquetes TMP
			where TABLA_RECEPCION.recepcion_nota_credito_debito_sfv_id = TMP.recepcion_id AND
			TABLA_RECEPCION.recepcion_paquete_nota_credito_debito_sfv_id=TMP.recepcion_paquete_id;				
			
			--ACTUALIZACION FISICA TABLA VENTAS
			
			UPDATE sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv as TABLA_VENTAS
			SET
				estado_notadc_id = TMP.estado_factura_id
			from tbl_documentos_paquetes TMP
			where TABLA_VENTAS.nota_credito_debito_sfv_id = TMP.venta_id AND
			TABLA_VENTAS.tipo_documento_sector_id=TMP.tipo_documento_sector_id;';
		
 		else 
				v_sql:='0';

	end case;
	
	return coalesce(v_sql,'0');
  
  EXCEPTION
  when others
    then      	
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_sql_actualizar_recepcion_ventas_paquetes')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_sql_obtener_facturas_errores_paquetes(p_tipo_documento_sector_id integer, p_recepcion_paquete_id bigint, p_documento_sector_id integer, p_cuis character varying)
 RETURNS TABLE(recepcion_error_id bigint, recepcion_paquete_id bigint, recepcion_id bigint, tipo_documento_sector_id integer, estado_id character varying, numero_factura bigint, cuf character varying, lista_errores character varying, resultado_json character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene todas las facturas con errores de validacion.
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <17/12/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste consulta para sector 25 (sre_fac_recepciones_contingencias_correctas_export_mineras)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 24/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.0
**************************************************************************************************************************************************/

declare      
       v_sql varchar:=''; 
begin
      
       case
             when p_tipo_documento_sector_id >= 1 and p_tipo_documento_sector_id <= 30 
                    then                                    
                    v_sql:= 'select 
                                  ERRORES.recepcion_error_id,
                                  ERRORES.recepcion_paquete_id,
                                  ERRORES.recepcion_id,
                                  ERRORES.tipo_documento_sector_id,
                                  ERRORES.estado_id,
                                  ERRORES.numero_factura,
                                  ERRORES.cuf,
                                  (select array_to_string 
                         (array
                                                 (select distinct ERRORES_DETALLES.codigo_error_id
                                                  from sre_recaudaciones.sre_fac_recepciones_errores_detalles as ERRORES_DETALLES
                                                  where 
                                                  ERRORES_DETALLES.recepcion_error_id=ERRORES.recepcion_error_id AND
                                                  ERRORES_DETALLES.estado_id=''AC'' 
                                        ),'','')
                               )::varchar(1000) as lista_errores,
                                  ''{}''::varchar(1000) resultado_json
                                  from sre_recaudaciones.sre_fac_recepciones_errores as ERRORES 
                                  where ERRORES.recepcion_paquete_id = $1  
                                  and ERRORES.tipo_documento_sector_id = $2 
                                  and ERRORES.estado_id=''AC'' 
                                  and ERRORES.cuis=$3;
                                  ';     
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_documento_sector_id,
                           p_cuis;             
             
            else 
                           v_sql:='0';

       end case;
       
  
  EXCEPTION
  when others
    then

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_sql_obtener_facturas_paquetes(p_tipo_documento_sector_id integer, p_recepcion_paquete_id bigint, p_sistema_id bigint, p_cuis character varying, p_documento_sector_id integer)
 RETURNS TABLE(recepcion_id bigint, recepcion_paquete_id bigint, estado_recepcion_id integer, recepcion_correcta_id bigint, estado_id character varying, venta_id bigint, estado_factura_id integer, tipo_documento_sector_id integer, numero_factura bigint, cuf character varying, resultado_json character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene todas las facturas de un paquete.
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <17/12/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: 
NUMERO SECUENCIAL : 
FECHA DE MODIFICACION : 
AUTOR DE LA MODIFICACION : Equipo Tyrell 
VERSION : 1.0
**************************************************************************************************************************************************/

declare      
       v_sql varchar:=''; 
begin
      
       case
             when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
                    then                                    
                    v_sql:= 'select    
                                  RECEPCION.recepcion_estandar_id recepcion_id,
                                  RECEPCION.recepcion_paquete_estandar_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_estandar_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_estandar_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_estandares as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_estandares as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_estandar_id=RECEPCION_CORRECTA.recepcion_estandar_id inner join sre_recaudaciones.sre_fac_ventas_estandares VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_estandar_id=VENTAS.recepcion_correcta_estandar_id
                                  where 
                                  RECEPCION.recepcion_paquete_estandar_id=$1 AND                                
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_estandar_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';
                                  
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                    
             when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_colegio_id recepcion_id,
                                  RECEPCION.recepcion_paquete_colegio_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_colegio_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_colegio_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_colegios as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_colegios as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_colegio_id=RECEPCION_CORRECTA.recepcion_colegio_id inner join sre_recaudaciones.sre_fac_ventas_colegios VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_colegio_id=VENTAS.recepcion_correcta_colegio_id
                                  where 
                                  RECEPCION.recepcion_paquete_colegio_id=$1 AND                           
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_colegio_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
                    then                                                  
                    v_sql:= 'select    
                                  RECEPCION.recepcion_alquiler_id recepcion_id,
                                  RECEPCION.recepcion_paquete_alquiler_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_alquiler_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_alquiler_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_alquileres as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_alquileres as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_alquiler_id=RECEPCION_CORRECTA.recepcion_alquiler_id inner join sre_recaudaciones.sre_fac_ventas_alquileres VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_alquiler_id=VENTAS.recepcion_correcta_alquiler_id
                                  where 
                                  RECEPCION.recepcion_paquete_alquiler_id=$1 AND                                
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_alquiler_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_combustible_id recepcion_id,
                                  RECEPCION.recepcion_paquete_combustible_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_combustible_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_combustible_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_combustibles as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_combustibles as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_combustible_id=RECEPCION_CORRECTA.recepcion_combustible_id inner join sre_recaudaciones.sre_fac_ventas_combustibles VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_combustible_id=VENTAS.recepcion_correcta_combustible_id
                                 where 
                                  RECEPCION.recepcion_paquete_combustible_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_combustible_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_servicio_id recepcion_id,
                                  RECEPCION.recepcion_paquete_servicio_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_servicio_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_servicio_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_servicios as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_servicios as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_servicio_id=RECEPCION_CORRECTA.recepcion_servicio_id inner join sre_recaudaciones.sre_fac_ventas_servicios VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_servicio_id=VENTAS.recepcion_correcta_servicio_id
                                  where 
                                  RECEPCION.recepcion_paquete_servicio_id=$1 AND                                
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_servicio_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
                    then         
                    v_sql:= 'select    
                                  RECEPCION.recepcion_embotelladora_id recepcion_id,
                                  RECEPCION.recepcion_paquete_embotelladora_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_embotelladora_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_embotelladora_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_embotelladoras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_embotelladora_id=RECEPCION_CORRECTA.recepcion_embotelladora_id inner join sre_recaudaciones.sre_fac_ventas_embotelladoras VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_embotelladora_id=VENTAS.recepcion_correcta_embotelladora_id
                                  where 
                                  RECEPCION.recepcion_paquete_embotelladora_id=$1 AND                           
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_embotelladora_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
                    then                 
                    v_sql:= 'select    
                                  RECEPCION.recepcion_banco_id recepcion_id,
                                  RECEPCION.recepcion_paquete_banco_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_banco_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_banco_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_bancos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_bancos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_banco_id=RECEPCION_CORRECTA.recepcion_banco_id inner join sre_recaudaciones.sre_fac_ventas_bancos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_banco_id=VENTAS.recepcion_correcta_banco_id
                                  where 
                                  RECEPCION.recepcion_paquete_banco_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_banco_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             --add 20190408 vcg               
             when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_hotel_id recepcion_id,
                                  RECEPCION.recepcion_paquete_hotel_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_hotel_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_hotel_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_hoteles as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hoteles as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_hotel_id=RECEPCION_CORRECTA.recepcion_hotel_id inner join sre_recaudaciones.sre_fac_ventas_hoteles VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_hotel_id=VENTAS.recepcion_correcta_hotel_id
                                  where 
                                  RECEPCION.recepcion_paquete_hotel_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_hotel_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_hospital_id recepcion_id,
                                  RECEPCION.recepcion_paquete_hospital_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_hospital_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_hospital_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_hospitales as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hospitales as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_hospital_id=RECEPCION_CORRECTA.recepcion_hospital_id inner join sre_recaudaciones.sre_fac_ventas_hospitales VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_hospital_id=VENTAS.recepcion_correcta_hospital_id
                                  where 
                                  RECEPCION.recepcion_paquete_hospital_id=$1 AND                                
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_hospital_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_juego_id recepcion_id,
                                  RECEPCION.recepcion_paquete_juego_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_juego_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_juego_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_juegos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_juegos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_juego_id=RECEPCION_CORRECTA.recepcion_juego_id inner join sre_recaudaciones.sre_fac_ventas_juegos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_juego_id=VENTAS.recepcion_correcta_juego_id
                                  where 
                                  RECEPCION.recepcion_paquete_juego_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_juego_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_espectaculo_id recepcion_id,
                                  RECEPCION.recepcion_paquete_espectaculo_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_espectaculo_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_espectaculo_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_espectaculos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_espectaculo_id=RECEPCION_CORRECTA.recepcion_espectaculo_id inner join sre_recaudaciones.sre_fac_ventas_espectaculos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_espectaculo_id=VENTAS.recepcion_correcta_espectaculo_id
                                  where 
                                  RECEPCION.recepcion_paquete_espectaculo_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_espectaculo_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_exportacion_id recepcion_id,
                                  RECEPCION.recepcion_paquete_exportacion_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_exportacion_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_exportacion_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_exportaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_exportacion_id=RECEPCION_CORRECTA.recepcion_exportacion_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_exportacion_id=VENTAS.recepcion_correcta_exportacion_id
                                  where 
                                  RECEPCION.recepcion_paquete_exportacion_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_exportacion_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_libre_consignacion_id recepcion_id,
                                  RECEPCION.recepcion_paquete_libre_consignacion_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_libre_consignacion_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_libre_consignacion_id=RECEPCION_CORRECTA.recepcion_libre_consignacion_id inner join sre_recaudaciones.sre_fac_ventas_libres_consignaciones VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_id=VENTAS.recepcion_correcta_libre_consignacion_id
                                  where 
                                  RECEPCION.recepcion_paquete_libre_consignacion_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_libre_consignacion_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_zona_franca_id recepcion_id,
                                  RECEPCION.recepcion_paquete_zona_franca_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_zona_franca_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_zona_franca_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_zonas_francas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_zona_franca_id=RECEPCION_CORRECTA.recepcion_zona_franca_id inner join sre_recaudaciones.sre_fac_ventas_zonas_francas VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_zona_franca_id=VENTAS.recepcion_correcta_zona_franca_id
                                  where 
                                  RECEPCION.recepcion_paquete_zona_franca_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_zona_franca_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_espectaculo_nacional_id recepcion_id,
                                  RECEPCION.recepcion_paquete_espectaculo_nacional_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_espectaculo_nacional_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_espectaculo_nacional_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_espectaculos_nacionales as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_espectaculo_nacional_id=RECEPCION_CORRECTA.recepcion_espectaculo_nacional_id inner join sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_espectaculo_nacional_id=VENTAS.recepcion_correcta_espectaculo_nacional_id
                                  where 
                                  RECEPCION.recepcion_paquete_espectaculo_nacional_id=$1 AND                                  
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_espectaculo_nacional_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_seguridad_alimentaria_id recepcion_id,
                                  RECEPCION.recepcion_paquete_seguridad_alimentaria_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_seguridad_alimentaria_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_seguridad_alimentaria_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_seguridades_alimentarias as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_seguridad_alimentaria_id=RECEPCION_CORRECTA.recepcion_seguridad_alimentaria_id inner join sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_seguridad_alimentaria_id=VENTAS.recepcion_correcta_seguridad_alimentaria_id
                                  where 
                                  RECEPCION.recepcion_paquete_seguridad_alimentaria_id=$1 AND                                 
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_seguridad_alimentaria_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_moneda_extranjera_id recepcion_id,
                                  RECEPCION.recepcion_paquete_moneda_extranjera_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_moneda_extranjera_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_moneda_extranjera_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_monedas_extranjeras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_moneda_extranjera_id=RECEPCION_CORRECTA.recepcion_moneda_extranjera_id inner join sre_recaudaciones.sre_fac_ventas_monedas_extranjeras VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_moneda_extranjera_id=VENTAS.recepcion_correcta_moneda_extranjera_id
                                  where 
                                  RECEPCION.recepcion_paquete_moneda_extranjera_id=$1 AND                              
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_moneda_extranjera_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_nota_credito_debito_id recepcion_id,
                                  RECEPCION.recepcion_paquete_nota_credito_debito_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.nota_credito_debito_id venta_id,
                                  VENTAS.estado_notadc_id estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_notadc numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_nota_credito_debito_id=RECEPCION_CORRECTA.recepcion_nota_credito_debito_id inner join sre_recaudaciones.sre_fac_ventas_notas_creditos_debitos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_id=VENTAS.recepcion_correcta_nota_credito_debito_id
                                  where 
                                  RECEPCION.recepcion_paquete_nota_credito_debito_id=$1 AND                            
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_nota_credito_debito_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_nota_conciliacion_id recepcion_id,
                                  RECEPCION.recepcion_paquete_nota_conciliacion_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_nota_conciliacion_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.nota_conciliacion_id venta_id,
                                  VENTAS.estado_nota_conciliacion_id estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_nota_conciliacion numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_notas_conciliaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_conciliaciones as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_nota_conciliacion_id=RECEPCION_CORRECTA.recepcion_nota_conciliacion_id inner join sre_recaudaciones.sre_fac_ventas_notas_conciliaciones VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_nota_conciliacion_id=VENTAS.recepcion_correcta_nota_conciliacion_id
                                  where 
                                  RECEPCION.recepcion_paquete_nota_conciliacion_id=$1 AND                              
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_nota_conciliacion_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_boleto_aereo_id recepcion_id,
                                  RECEPCION.recepcion_paquete_boleto_aereo_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_boleto_aereo_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_boleto_aereo_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                 VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_boletos_aereos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_boletos_aereos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_boleto_aereo_id=RECEPCION_CORRECTA.recepcion_boleto_aereo_id inner join sre_recaudaciones.sre_fac_ventas_boletos_aereos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_boleto_aereo_id=VENTAS.recepcion_correcta_boleto_aereo_id
                                  where 
                                  RECEPCION.recepcion_paquete_boleto_aereo_id=$1 AND                            
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_boleto_aereo_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
                    then                                                               
                    v_sql:= 'select    
                                  RECEPCION.recepcion_turismo_receptivo_id recepcion_id,
                                  RECEPCION.recepcion_paquete_turismo_receptivo_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_turismo_receptivo_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_turismo_receptivo_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_turismos_receptivos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_turismo_receptivo_id=RECEPCION_CORRECTA.recepcion_turismo_receptivo_id inner join sre_recaudaciones.sre_fac_ventas_turismos_receptivos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_turismo_receptivo_id=VENTAS.recepcion_correcta_turismo_receptivo_id
                                  where 
                                  RECEPCION.recepcion_paquete_turismo_receptivo_id=$1 AND                              
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_turismo_receptivo_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;

             --add 20190410 vcg 
             when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
                    then                
                    v_sql:= 'select    
                                  RECEPCION.recepcion_tasa_cero_id recepcion_id,
                                  RECEPCION.recepcion_paquete_tasa_cero_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_tasa_cero_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_tasa_cero_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_tasas_ceros as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_tasa_cero_id=RECEPCION_CORRECTA.recepcion_tasa_cero_id inner join sre_recaudaciones.sre_fac_ventas_tasas_ceros VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_tasa_cero_id=VENTAS.recepcion_correcta_tasa_cero_id
                                  where 
                                  RECEPCION.recepcion_paquete_tasa_cero_id=$1 AND                               
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_tasa_cero_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
             when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
                    then                       
                    v_sql:= 'select    
                                  RECEPCION.recepcion_hidrocarburo_id recepcion_id,
                                  RECEPCION.recepcion_paquete_hidrocarburo_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_hidrocarburo_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_hidrocarburo_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_hidrocarburos as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_hidrocarburo_id=RECEPCION_CORRECTA.recepcion_hidrocarburo_id inner join sre_recaudaciones.sre_fac_ventas_hidrocarburos VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_hidrocarburo_id=VENTAS.recepcion_correcta_hidrocarburo_id
                                  where 
                                  RECEPCION.recepcion_paquete_hidrocarburo_id=$1 AND                            
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_hidrocarburo_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                           
            when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
                    then                       
                    v_sql:= 'select    
                                  RECEPCION.recepcion_exportacion_ypfb_id recepcion_id,
                                  RECEPCION.recepcion_paquete_exportacion_ypfb_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_exportacion_ypfb_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_exportacion_ypfb_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_exportaciones_ypfb as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_exportacion_ypfb_id=RECEPCION_CORRECTA.recepcion_exportacion_ypfb_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_exportacion_ypfb_id=VENTAS.recepcion_correcta_exportacion_ypfb_id
                                  where 
                                  RECEPCION.recepcion_paquete_exportacion_ypfb_id=$1 AND                               
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_exportacion_ypfb_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                          
             when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
                    then                       
                    v_sql:= 'select    
                                  RECEPCION.recepcion_exportacion_minera_id recepcion_id,
                                  RECEPCION.recepcion_paquete_exportacion_minera_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_exportacion_minera_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_exportacion_minera_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_exportaciones_mineras as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_exportacion_minera_id=RECEPCION_CORRECTA.recepcion_exportacion_minera_id inner join sre_recaudaciones.sre_fac_ventas_exportaciones_mineras VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_exportacion_minera_id=VENTAS.recepcion_correcta_exportacion_minera_id
                                  where 
                                  RECEPCION.recepcion_paquete_exportacion_minera_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_exportacion_minera_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
                                
             when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
                    then                       
                    v_sql:= 'select    
                                  RECEPCION.recepcion_libre_consignacion_ypfb_id recepcion_id,
                                  RECEPCION.recepcion_paquete_libre_consignacion_ypfb_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_ypfb_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_libre_consignacion_ypfb_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_libres_consignaciones_ypfb as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_libre_consignacion_ypfb_id=RECEPCION_CORRECTA.recepcion_libre_consignacion_ypfb_id inner join sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_libre_consignacion_ypfb_id=VENTAS.recepcion_correcta_libre_consignacion_ypfb_id
                                  where 
                                  RECEPCION.recepcion_paquete_libre_consignacion_ypfb_id=$1 AND                               
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_libre_consignacion_ypfb_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
            
             --add 20190410 vcg                      
             when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_minera_interna_id recepcion_id,
                                  RECEPCION.recepcion_paquete_minera_interna_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_minera_interna_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_minera_interna_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_mineras_internas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_minera_interna_id=RECEPCION_CORRECTA.recepcion_minera_interna_id inner join sre_recaudaciones.sre_fac_ventas_mineras_internas VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_minera_interna_id=VENTAS.recepcion_correcta_minera_interna_id
                                  where 
                                  RECEPCION.recepcion_paquete_minera_interna_id=$1 AND                                 
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_minera_interna_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
             
             --add 20190410 jf                       
             when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_prevalorada_id recepcion_id,
                                  RECEPCION.recepcion_paquete_prevalorada_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_prevalorada_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.prevalorada_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cufp cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_prevaloradas as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_prevaloradas as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_prevalorada_id=RECEPCION_CORRECTA.recepcion_prevalorada_id inner join sre_recaudaciones.sre_fac_ventas_prevaloradas VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_prevalorada_id=VENTAS.recepcion_correcta_prevalorada_id
                                  where 
                                  RECEPCION.recepcion_paquete_prevalorada_id=$1 AND                             
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_prevalorada_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
             
             --add 20190724 rgt
             when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_telecomunicacion_id recepcion_id,
                                  RECEPCION.recepcion_paquete_telecomunicacion_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_telecomunicacion_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.venta_telecomunicacion_id venta_id,
                                  VENTAS.estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_telecomunicaciones as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_telecomunicacion_id=RECEPCION_CORRECTA.recepcion_telecomunicacion_id inner join sre_recaudaciones.sre_fac_ventas_telecomunicaciones VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_telecomunicacion_id=VENTAS.recepcion_correcta_telecomunicacion_id
                                  where 
                                  RECEPCION.recepcion_paquete_telecomunicacion_id=$1 AND                               
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_telecomunicacion_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
             
             when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
                    then
                   v_sql:= 'select    
                                  RECEPCION.recepcion_nota_credito_debito_sfv_id recepcion_id,
                                  RECEPCION.recepcion_paquete_nota_credito_debito_sfv_id recepcion_paquete_id,
                                  RECEPCION.estado_recepcion_id,
                                  RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_sfv_id recepcion_correcta_id,
                                  RECEPCION_CORRECTA.estado_id,
                                  VENTAS.nota_credito_debito_sfv_id venta_id,
                                  VENTAS.estado_notadc_id estado_factura_id,
                                  VENTAS.tipo_documento_sector_id,
                                  VENTAS.numero_notadc numero_factura,
                                  VENTAS.cuf, 
                                  ''{}''::varchar(1000) resultado_json 
                                  from sre_recaudaciones.sre_fac_recepciones_notas_creditos_debitos_sfv as RECEPCION inner join sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv as RECEPCION_CORRECTA
                                  on RECEPCION.recepcion_nota_credito_debito_sfv_id=RECEPCION_CORRECTA.recepcion_nota_credito_debito_sfv_id inner join sre_recaudaciones.sre_fac_ventas_notas_creditos_debitos_sfv VENTAS 
                                  on RECEPCION_CORRECTA.recepcion_correcta_nota_credito_debito_sfv_id=VENTAS.recepcion_correcta_nota_credito_debito_sfv_id
                                  where 
                                  RECEPCION.recepcion_paquete_nota_credito_debito_sfv_id=$1 AND                               
                                  RECEPCION.estado_id=''AC'' and                             
                                  RECEPCION.sistema_id=$2 and
                                  RECEPCION.cuis=$3 and
                                  RECEPCION.tipo_documento_sector_id=$4 and
                                  RECEPCION_CORRECTA.recepcion_paquete_nota_credito_debito_sfv_id=$1 and
                                  RECEPCION_CORRECTA.cuis=$3 and
                                  RECEPCION_CORRECTA.estado_id=''AC'' and                                  
                                  RECEPCION_CORRECTA.tipo_documento_sector_id=$4;';   
                           
                           return query 
                           execute v_sql
                           using 
                           p_recepcion_paquete_id,
                           p_sistema_id,
                           p_cuis,
                           p_documento_sector_id;
             
            else 
                           v_sql:='0';

       end case;
       
       return ;
  
  EXCEPTION
  when others
    then
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_tolerancia_fecha_emision(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Realiza la validación para la fecha de emisión online y ofline
				FUERA DE LINEA:
					1. Identificar los eventos significados de inicio y fin.
					2. Obtener motivo de evento
					3. Control de tolerancia
						Para los eventos 970,972,973,974,975,976 controlar 3 dias de tolerancia
						Para el evento 977 controlar 15 dias de tolerancia.
				EN LINEA:
					El control del tiempo se tendra que realizar en minutos de acuerdo a los parámetros
PARAMETROS INGRESO
    Formato JSON con parametros de entrada para la falidación de las fechas 
PARAMETROS SALIDA
    Valor entero de la consulta:
    Satisfactorio:1000
    Error: diferente de 1000 
SUBSISTEMA : Facturación
FECHA CREACION : <15/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_tipo_emision_id Integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as integer));
	p_fecha_emision  timestamp:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as timestamp));
	p_fecha_fin_evento_significativo timestamp;
	p_sistema_id integer:=sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');
	p_sucursal_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id' as integer)); 
	
	p_cufd varchar:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd' as varchar));
	
	p_cuis varchar:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_cuis' as varchar)); 	
	p_persona_contribuyente_id bigint := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint));
	v_motivo_evento_id integer;
	v_fecha_actual date := now();
  	
  	--Nota:Tolerancia fuera de línea
  	v_tolerancia_dias_minima_ofline smallint:=(sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_emision_dias_minimo_offline'));
  	v_tolerancia_dias_maxima_ofline smallint:=(sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_emision_dias_maximo_offline'));
  
  	--Nota: Tolerancia en línea
  	v_minuto_posterior_online smallint:=(sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_emision_minuto_posterior_online'));
 	v_minuto_anterior_online smallint:=(sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_emision_minuto_anterior_online'));
 	
 	--Nota: Tolerancia envio masivo
  	v_minuto_posterior_masivo smallint:=(sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_emision_minuto_posterior_masivo'));
 	v_minuto_anterior_masivo smallint:=(sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_emision_minuto_anterior_masivo'));
 	
 	--Nota: Variable considerada como marca para fac. Contingencia /  su valor debe ser  v_origen_servicio = 7
 	v_codigo_documento_fiscal integer := 1;--para los tipos de documentos fiscales: 1, 2, 3, 5
 	p_tipo_documento_fiscal_id integer :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
  	 
	v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));
	
begin

	if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then
		v_codigo_documento_fiscal := 2;
	end if;

	case 
	--Nota: (En línea).	
	when (p_tipo_emision_id=1 and v_codigo_documento_fiscal = 1) then 
	
	  	v_resultado := (case 
						   when (p_fecha_emision >= (now() + CAST(v_minuto_posterior_online||' minute' AS INTERVAL)))   then
						       (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision_normativa_mayor_definido'))
 				           when (p_fecha_emision  <= (now() - CAST(v_minuto_anterior_online||' minute' AS INTERVAL)))   then
						       (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision')) 
						   else
							   1000
						end);

	--Nota: Identificar los eventos significados de inicio y fin (fuera de línea).
	when (p_tipo_emision_id=2 and v_codigo_documento_fiscal = 1) then

		v_resultado:=1000;--TODO: Quitar cuando se encuentra agregada la validación 132 = Registro de evento significativo inexistente
	--Nota: (Masivo).	
	when (p_tipo_emision_id=3 and v_codigo_documento_fiscal = 1) then 	
		
		v_resultado:=1000;
			
	--Nota: Contingencia / pasa la validacion
	when v_codigo_documento_fiscal = 2 then -- 2 modalidad de factura de contingencia 
		v_resultado := 1000;
	
	else		
	end case;
  	
	return coalesce(v_resultado,(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision')));	
	
	EXCEPTION
  	when others
	then  
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_tolerancia_fecha_emision');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_val_nit(p_nit bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint := 0;
	
begin
	
	 -- add 20190426	 
	 -- 0 establecer codigo de error
	 
	 v_resultado := coalesce(
							    (
									select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
				 				    from str_transversales.str_cps_clasificadores
				 				    where abreviatura = cast(p_nit as varchar) 
				 				    and tipo_clasificador = 'codigo_especiales_nit'
								)
	                           ,
	                           0
	                        );
	                        
	 if (v_resultado <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
	 	v_resultado := coalesce (
	 							   (
	 							   	select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
									from scn_contribuyentes.scn_emp_contribuyentes as a 
									where a.nit = p_nit --indexar el campo nit 
									limit 1
				 				   ),
				 				0);
	 end if;
	 
	 return v_resultado;
	 	 								
	EXCEPTION
	 when others
	    then
		  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_val_nit'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json json, p_seccion_documento_fiscal_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
	p_tipo_documento_sector_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
begin
	
		
		
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   REL.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND --add 20190401:1=Estandar; 2=Colegios; 3=Alquileres,...
	                                   TVA.seccion_documento_fiscal_id=p_seccion_documento_fiscal_id); --add 20190401: 1=Validar la Recepcion; 2=Validar Cabecera Factura; 3=Validar Detalle Factura; 
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
	    exit when not found;
	
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );
	    
	    v_resultado_ejecucion_funcion:=0;
	    
	  end loop;
	  
	
	  close c_funciones_validacion;
		  		
	  return query select * from tbl_resultado_ejecucion;
	  
	  
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion recepcion' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_compra(p_json json, p_seccion_documento_fiscal_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
	p_tipo_documento_sector_id integer:=19; --(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
	p_seccion_documento_fiscal_id integer := 1;
begin
	
		
		
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   REL.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND --add 20190401:1=Estandar; 2=Colegios; 3=Alquileres,...
	                                   TVA.seccion_documento_fiscal_id=p_seccion_documento_fiscal_id); --add 20190401: 1=Validar la Recepcion; 2=Validar Cabecera Factura; 3=Validar Detalle Factura; 
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
	    exit when not found;
	
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );
	    
	    v_resultado_ejecucion_funcion:=0;
	    
	  end loop;
	  
	
	  close c_funciones_validacion;
		  		
	  return query select * from tbl_resultado_ejecucion;
	  
	  
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion recepcion compra' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_manual(p_json json, p_seccion_documento_fiscal_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Validacion de la etapa 1 de acuerdo a la configuracion de parametricas
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
Seccion del documento a validar 1 recepcion 2 cabecera
PARAMETROS SALIDA
Tabla temporal con los resultados de las validaciones.
SUBSISTEMA : Facturación
FECHA CREACION : 28/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;	
	p_tipo_documento_sector_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
begin	
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   REL.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND --add 20190528:1382=Estandar; 2=Colegios; 3=Alquileres,...
	                                   TVA.seccion_documento_fiscal_id=p_seccion_documento_fiscal_id); --add 20190401: 1=Validar la Recepcion; 2=Validar Cabecera Factura; 6= Validar Verificacion de la recepcion
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
	    exit when not found;
		
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );	    
	    v_resultado_ejecucion_funcion:=0;	    
	  end loop;	  
	  	 
	  close c_funciones_validacion;		  		
	  return query select * from tbl_resultado_ejecucion;

	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;		
		      return query select cast('error validacion recepcion facturacion manual' as varchar), cast(-1 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_obs_mas_san_con(p_json json, p_tipo_documento_sector_id integer, p_seccion_documento_fiscal_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
	--p_tipo_documento_sector_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
begin
	
		
		
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   REL.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND 
	                                   TVA.seccion_documento_fiscal_id=p_seccion_documento_fiscal_id); 
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
	    exit when not found;
	
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );
	    
	    v_resultado_ejecucion_funcion:=0;
	    
	  end loop;
	  
	
	  close c_funciones_validacion;
		  		
	  return query select * from tbl_resultado_ejecucion;
	  
	  
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion recepcion' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_factura_cabecera(p_json json, p_tipo_documento_sector_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
begin
	
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND 
	                                   TVA.seccion_documento_fiscal_id=1); --adicionar un campo para saber si la validacion se efectuara a la cabecer, detalle o recepcion de la factura.
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
		exit when not found;
	
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );	    
	    
	    v_resultado_ejecucion_funcion:=0;
	    
	  end loop;
	
	  close c_funciones_validacion;
		  		
	  return query select * from tbl_resultado_ejecucion;
	  
	  EXCEPTION
	  when others
	    then
	      RAISE INFO 'Error Name:%', SQLERRM;
	      RAISE INFO 'Error State:%', SQLSTATE;
	
	      return query select cast('error validacion cabecera' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_factura_detalle(p_json json, p_tipo_documento_sector_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
begin
	
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND 
	                                   TVA.seccion_documento_fiscal_id=2); --adicionar un campo para saber si la validacion se efectuara a la cabecer, detalle o recepcion de la factura.
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
	    exit when not found;
	
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );
	    
	    v_resultado_ejecucion_funcion:=0;
	    
	  end loop;
	
	  close c_funciones_validacion;
		  		
	  return query select * from tbl_resultado_ejecucion;
	  
	  
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion detalle' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_factura_recepcion(p_json json, p_seccion_documento_fiscal_id integer)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
	p_tipo_documento_sector_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
begin
	
		
		
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	
	  --Obtencion de las funciones segun el tipo de validacion
	  open c_funciones_validacion for (SELECT DISTINCT FUN.nombre, FUN.funcion
	                                   FROM sre_recaudaciones.sre_fac_tipos_validaciones_servicios TVA
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_tipos_validaciones_servicios REL
	                                            ON TVA.tipo_validacion_servicio_id = REL.tipo_validacion_servicio_id
	                                          INNER JOIN sre_recaudaciones.sre_fac_funciones_validaciones_servicios FUN
	                                            ON FUN.funcion_validacion_servicio_id =
	                                               REL.funcion_validacion_servicio_id
	                                   where
	                                   FUN.estado_id='AC' AND
	                                   TVA.tipo_documento_sector_id = p_tipo_documento_sector_id AND --add:1=Estandar; 2=Colegios; 3=Alquileres,...
	                                   TVA.seccion_documento_fiscal_id=p_seccion_documento_fiscal_id); --add: 1=Validar Cabecera Factura; 2=Validar Detalle Factura; 3=Validar la Recepcion (vcg 20190401);
	
	  loop
	    fetch c_funciones_validacion into r_funciones;
	    exit when not found;
	
	    v_funcion := r_funciones.funcion;
	
	    execute v_funcion  into v_resultado_ejecucion_funcion using p_json;
	
	
	    insert into tbl_resultado_ejecucion values(r_funciones.nombre, v_resultado_ejecucion_funcion );
	    
	    v_resultado_ejecucion_funcion:=0;
	    
	  end loop;
	
	  close c_funciones_validacion;
		  		
	  return query select * from tbl_resultado_ejecucion;
	  
	  
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('error validacion recepcion' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_nit_padron(p_tipo_documento_identidad integer, p_numero_documento character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_numero_documento numeric:=0;  
  v_documento_identidad integer :=(select cast(sre_recaudaciones.sre_fac_par_tipos_documentos('nit') as integer)); --5
  
  v_resultado smallint:=0;  
begin
  --Validar la existencia del NIT en padron	fake
  v_numero_documento := cast(p_numero_documento as numeric);
  
  v_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron'));
  
  if(v_documento_identidad = p_tipo_documento_identidad)
  then  	
   	v_resultado := coalesce(
  							(
  							select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
							from scn_contribuyentes.scn_emp_contribuyentes as a 
							where a.nit = v_numero_documento --indexar el campo nit 
							limit 1
                             )
                              ,
                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron'))
  						    );
   end if;
    							   
  return v_resultado;

  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_validar_nit_padron'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_nit_padron_facturacion_manual(p_tipo_documento_identidad integer, p_numero_documento character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el numero y tipo  de documento de identidad proporcionados estan registrados en tablas de padron
PARAMETROS INGRESO
Tipo de documento de identidad NIT, numero de documento de identidad
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_numero_documento numeric:=0;  
  --v_documento_identidad integer :=(select cast(sre_recaudaciones.sre_fac_par_tipos_documentos('nit') as integer)); --5
  v_documento_identidad integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('NIT') as integer); 
  
  v_resultado smallint:=0;  
begin
  
  v_numero_documento := cast(p_numero_documento as numeric);
  
  v_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron'));
  --Validar la existencia del NIT en padron
  if(v_documento_identidad = p_tipo_documento_identidad)
  then  	
   	v_resultado := coalesce(
  							(
  							select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
							from scn_contribuyentes.scn_emp_contribuyentes as a 
							where a.nit = v_numero_documento --indexar el campo nit 
							limit 1
                             )
                              ,
                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron'))
  						    );
   end if;
    							   
  return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_validar_nit_padron_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_validar_observados_facturacion_manual(p_json json)
 RETURNS TABLE(nombre_funcion_validacion character varying, resultado_ejecucion smallint)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Operacion que ejecuta las reglas de negocio establecidas para el registro de observados, guarda los resultados en una tabla temporal
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
tabla temporal con los resultados de la ejecutcion de las reglas de negocio.
SUBSISTEMA : Facturación
FECHA CREACION : 15/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado_ejecucion_funcion smallint:=0;
	
	c_funciones_validacion       refcursor;
  	r_funciones                  record;
	v_funcion                    sre_recaudaciones.sre_fac_funciones_validaciones_servicios.funcion%type;
	
	p_tipo_documento_sector_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
	p_seccion_documento_fiscal_id INTEGER;
begin
	
		
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	

	  insert into tbl_resultado_ejecucion values('sre_fac_val_fecha_emision_factura_manual', (select sre_recaudaciones.sre_fac_val_fecha_emision_factura_manual(p_json )));
	  insert into tbl_resultado_ejecucion values('sre_fac_val_modificacion_monto_factura_manual', (select sre_recaudaciones.sre_fac_val_modificacion_monto_factura_manual(p_json )));
	  insert into tbl_resultado_ejecucion values('sre_fac_val_caed_numero_documento_fiscal_manual', (select sre_recaudaciones.sre_fac_val_caed_numero_documento_fiscal_manual(p_json )));--del autorizado, si no es estado AUTORIZADO
	  insert into tbl_resultado_ejecucion values('sre_fac_val_existe_inhabilitado_factura_manual', (select sre_recaudaciones.sre_fac_val_existe_inhabilitado_factura_manual(p_json )));
	  insert into tbl_resultado_ejecucion values('sre_fac_val_modificacion_fuera_plazo_factura_manual', (select sre_recaudaciones.sre_fac_val_modificacion_fuera_plazo_factura_manual(p_json )));

	  return query select * from tbl_resultado_ejecucion;
	   
	  EXCEPTION
		  when others
		    then
		      RAISE INFO 'Error Name:%', SQLERRM;
		      RAISE INFO 'Error State:%', SQLSTATE;
		
		      return query select cast('sre_fac_ope_validar_observados_facturacion_manual' as varchar), cast(1001 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verifica_marca_ice(p_marca_ice character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_resultado bool :=  false;
	v_marca_ice varchar(1) := '1';
	
begin
	
	if( p_marca_ice = v_marca_ice )then
		v_resultado := true;
	end if;
	
	return v_resultado;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verifica_monto_devuelto(p_monto_total_devuelto numeric, p_suma_total_devuelto numeric, p_monto_total_original numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_devuelto'));
begin
	-- establecer codigo respuesta de monto total devuelto
	
	if p_monto_total_devuelto = p_suma_total_devuelto and p_monto_total_devuelto <= p_monto_total_original then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verifica_monto_devuelto'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verifica_monto_ice(p_monto_ice numeric, p_sumatoria_alicuota_especifica numeric, p_sumatoria_alicuota_porcentual numeric, p_tolerancia_minima numeric, p_tolerancia_maxima numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
declare
	v_resultado smallint := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_ice')); 
begin
	  if(((p_sumatoria_alicuota_especifica - p_tolerancia_minima) + p_sumatoria_alicuota_porcentual) <= p_monto_ice and
		((p_sumatoria_alicuota_especifica + p_tolerancia_maxima) + p_sumatoria_alicuota_porcentual) >= p_monto_ice)then		  		
		  		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');	  	
      end if;
      
    return v_resultado;
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verifica_monto_ice');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_ice'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verifica_monto_original(p_suma_total_original numeric, p_monto_total_original numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_original'));
begin
	-- establecer codigo respuesta de monto total devuelto
	
	if p_suma_total_original = p_monto_total_original then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_tolerancia_fecha_emision');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_original'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verifica_registros_en_casos_prueba(p_etapa integer, p_tipo_documento_sector_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_tabla_casos_de_prueba varchar;
	v_sql varchar;

begin
	
	case
		when p_etapa = 0
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_0_cuf
						 where sistema_id = $1';		
			
		when p_etapa = 1
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_1_consumo_servicio
						 where sistema_id = $1';	

		when p_etapa = 2
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
						 where sistema_id = $1 and estado_match = 1';	
		
		when p_etapa = 3
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogos
						 where sistema_id = $1';	
		
		when p_etapa = 4
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora
						 where sistema_id = $1';	
		
		when p_etapa = 5
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_5_validacion_generales_xml_xsd
						 where sistema_id = $1';
		
		when p_etapa = 6
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_6_envio_paquetes
						 where sistema_id = $1';	
				
		when p_etapa = 7
			then
				v_sql:= 'select count(*)
						 from sre_recaudaciones.sre_fac_log_7_firma_digital
						 where sistema_id = $1';	
		
		else 
			v_sql :=  '0';
	end case;

 		 
  	return coalesce(v_sql,'0');
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_correcta_venta_facturacion_manual(p_recepcion_id bigint, p_tipo_documento_sector_id bigint)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Ejecuta la consulta SELECT y devuelve el 1 si los registros son correctos y 0 si no, se usa en las funciones de TEST de la etapa 2
PARAMETROS INGRESO
id de recpcion y tipo documento sector
PARAMETROS SALIDA
1 si los registros son correctos y 0 si no.
SUBSISTEMA : Facturación
FECHA CREACION : 30/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado integer:=0;
	v_sql varchar:='0';
	
begin

	v_sql:=(sre_recaudaciones.sre_fac_armar_verificar_correcta_venta_manual(p_tipo_documento_sector_id));    
	    execute v_sql  
	    using 
	    	p_recepcion_id	    		
	    into v_resultado;	   

	if(v_resultado<=0 or v_resultado is null) then 
	return 0;
	     	else
	return 1;	
		end if;			
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_correcta_venta_facturacion_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json json)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bool:=false;
	v_json_factura json;
begin

    v_json_factura  := (p_json->'XmlFactura'->'factura'->'detalle');
	if(cast (v_json_factura as varchar) like '%[%')
	then
		v_resultado := true;
	end if;
	
	return v_resultado;	
						
	--EXCEPTION
		--  when others
		--    then
		--      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_detalle'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_existe_venta_estado_factura_manual(p_json json, p_estado character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Operacion que busca una venta en estado enviado como parametro
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
id venta encontrado
SUBSISTEMA : Facturación
FECHA CREACION : 14/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	p_tipo_documento_sector_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_caed character varying(100);
	p_numero_factura bigint; 
	v_estado bigint;
begin

	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	v_estado := (  select clasificador_id from str_transversales.str_cps_clasificadores 
  where tipo_clasificador like 'estado_venta_manual_documento_fiscal_id' and descripcion =p_estado);
	v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_verificar_existe_ventas_estado_manual(p_tipo_documento_sector_id));    
	
	    execute v_sql  
	    using 
	    	p_caed,
	    	p_numero_factura,
	        v_estado			--ESTADO 
	    into v_resultado;
	    	
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_existe_recpcion_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_existe_venta_facturacion_manual(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene un id de venta registrado sin importar el estado en el que se encuentre, segun el CAED y numero de factura ejecuta la consulta que se arma dinamicamente mediante el numero de sector.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 08/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	p_tipo_documento_sector_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_caed character varying(100);
	p_numero_factura bigint; 
	v_estado_anulado bigint;
begin

	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	
	v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_verificar_existe_venta_anulado_manual(p_tipo_documento_sector_id));    
	
	    execute v_sql  
	    using 
	    	p_caed,
	    	p_numero_factura
	        
	    into v_resultado;
	    	
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_existe_recpcion_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_existe_ventas_factura_manual(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos necesarios del JSON para realizar la validacion y ejecuta la consulta.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
venta_id si existe
SUBSISTEMA : Facturación
FECHA CREACION : 10/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
	p_tipo_documento_sector_id integer; 
	p_tipo_documento_fiscal_id integer; 
	p_caed character varying(100);
	p_numero_factura bigint; 
	v_estado_anulado bigint;
begin

	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	
	v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_existe_ventas_manual(p_tipo_documento_sector_id));    
	
	    execute v_sql  
	    using 
	    	p_caed,
	    	p_numero_factura
	    into v_resultado;
	    	
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_existe_recpcion_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_recepcion(p_tipo_documento_sector_id));    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion			
	    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin
	    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_rec_contingencia(p_tipo_documento_sector_id));    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion			
	    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_correcta(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a la funcion, de v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin
	
	-- Nota: Retorna el id de la recepcion correcta	
    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_recepcion_correcta(p_tipo_documento_sector_id));

    execute v_sql  
    using 
    	p_codigo_recepcion			
    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion_correcta'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_correcta_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select que llama a la funcion, de v_sql
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bigint:=0;
	v_sql varchar:='0';
begin
	
	-- Nota: Retorna el id de la recepcion correcta	
    v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_rec_cor_contingencia(p_tipo_documento_sector_id));

    execute v_sql  
    using 
    	p_codigo_recepcion			
    into v_resultado;
	    
	return coalesce(v_resultado,0);
		
	return v_resultado;	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion_correcta_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
	
	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_id_recepcion_paquete(p_tipo_documento_sector_id));

	    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion			
	    into v_resultado;
	    
	return coalesce(v_resultado,0);		
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion_paquete'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint:=0;
	v_sql varchar:='0';
begin
	
	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_rec_paq_contingencia(p_tipo_documento_sector_id));

	    
	    execute v_sql  
	    using 
	    	p_codigo_recepcion			
	    into v_resultado;
	    
	return coalesce(v_resultado,0);		
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion_paquete_contingencia'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_push(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado json;
	v_final varchar;
	v_sql varchar:='0';
 	reg RECORD;
begin
case
		when p_tipo_documento_sector_id = 1 --Nota: FACTURA ESTANDAR
			then 						
		v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id, a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_estandares a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_estandares c on (c.recepcion_correcta_estandar_id = a.recepcion_correcta_estandar_id) 
				where c.recepcion_estandar_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);			
			
														
		--add 20190410 vcg
		when p_tipo_documento_sector_id = 2 --Nota: FACTURA SECTORES EDUCATIVOS
			then 			

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_colegios a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_colegios c on (c.recepcion_correcta_colegio_id = a.recepcion_correcta_colegio_id) 
				where c.recepcion_colegio_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 				
				
		when p_tipo_documento_sector_id = 3 --Nota: FACTURA DE ALQUILER DE BIENES INMUEBLES
			then 								

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_alquileres a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_alquileres c on (c.recepcion_correcta_alquiler_id = a.recepcion_correcta_alquiler_id) 
				where c.recepcion_alquiler_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);					

		when p_tipo_documento_sector_id = 4 --Nota: FACTURA DE COMERCIALIZACION DE HIDROCARBUROS
			then 			

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_combustibles a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_combustibles c on (c.recepcion_correcta_combustible_id = a.recepcion_correcta_combustible_id) 
				where c.recepcion_combustible_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 				

		when p_tipo_documento_sector_id = 5 --Nota: FACTURA DE SERVICIOS BASICOS
			then 			
 			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_servicios a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_servicios c on (c.recepcion_correcta_servicio_id = a.recepcion_correcta_servicio_id) 
				where c.recepcion_servicio_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 				
				
		when p_tipo_documento_sector_id = 6 --Nota: FACTURA DE EMBOTELLADORAS
			then 			
 			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_embotelladoras a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_embotelladoras c on (c.recepcion_correcta_embotelladora_id = a.recepcion_correcta_embotelladora_id) 
				where c.recepcion_embotelladora_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);		
			
		when p_tipo_documento_sector_id = 7 --Nota: FACTURA DE ENTIDADES FINANCIERAS
			then 			 
 			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_bancos a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_bancos c on (c.recepcion_correcta_banco_id = a.recepcion_correcta_banco_id) 
				where c.recepcion_banco_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 				
		
 		--add 20190408 vcg
		when p_tipo_documento_sector_id = 8 --Nota: FACTURA DE HOTELES
			then 			
 			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura
				from sre_recaudaciones.sre_fac_ventas_hoteles a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_hoteles c on (c.recepcion_correcta_hotel_id = a.recepcion_correcta_hotel_id) 
				where c.recepcion_hotel_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 	 				
				
		when p_tipo_documento_sector_id = 9 --Nota: FACTURAS DE HOSPITALES/CLINICAS
			then 			
 			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_hospitales a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_hospitales c on (c.recepcion_correcta_hospital_id = a.recepcion_correcta_hospital_id) 
				where c.recepcion_hospital_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 			
				
		when p_tipo_documento_sector_id = 10 --Nota: FACTURA DE JUEGOS DE AZAR
			then 			
 			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_juegos a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_juegos c on (c.recepcion_correcta_juego_id = a.recepcion_correcta_juego_id) 
				where c.recepcion_juego_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 	 				

		when p_tipo_documento_sector_id = 11 --Nota: FACTURA DE ARTISTAS INTERNACIONALES
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_espectaculos a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos c on (c.recepcion_correcta_espectaculo_id = a.recepcion_correcta_espectaculo_id) 
				where c.recepcion_espectaculo_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);
			
		when p_tipo_documento_sector_id = 12 --Nota: FACTURA COMERCIAL DE EXPORTACION
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura
				from sre_recaudaciones.sre_fac_ventas_exportaciones a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones c on (c.recepcion_correcta_exportacion_id = a.recepcion_correcta_exportacion_id) 
				where c.recepcion_exportacion_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);				

		when p_tipo_documento_sector_id = 13 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN EN LIBRE CONSIGNACION
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, null as complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_libres_consignaciones a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones c on (c.recepcion_correcta_libre_consignacion_id = a.recepcion_correcta_libre_consignacion_id) 
				where c.recepcion_libre_consignacion_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);					

		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 14 --Nota: NOTA FISCAL DE ZONA FRANCA
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_zonas_francas a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_zonas_francas c on (c.recepcion_correcta_zona_franca_id = a.recepcion_correcta_zona_franca_id) 
				where c.recepcion_zona_franca_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);	
			
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 15 --Nota: NOTA FISCAL DE ARTISTAS NACIONALES
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura
				from sre_recaudaciones.sre_fac_ventas_espectaculos_nacionales a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_espectaculos_nacionales c on (c.recepcion_correcta_espectaculo_nacional_id = a.recepcion_correcta_espectaculo_nacional_id) 
				where c.recepcion_espectaculo_nacional_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);	
			
		when p_tipo_documento_sector_id = 16 --Nota: NOTA FISCAL DE COMERCIALIZACIÓN DE ALIMENTOS – SEGURIDAD ALIMENTARIA Y ABASTECIMIENTO
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura
				from sre_recaudaciones.sre_fac_ventas_seguridades_alimentarias a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_seguridades_alimentarias c on (c.recepcion_correcta_seguridad_alimentaria_id = a.recepcion_correcta_seguridad_alimentaria_id) 
				where c.recepcion_seguridad_alimentaria_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);				
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 17 --Nota: NOTA FISCAL DE COMPRA Y VENTA DE MONEDA EXTRANJERA
			then 			
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura
				from sre_recaudaciones.sre_fac_ventas_monedas_extranjeras a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_monedas_extranjeras c on (c.recepcion_correcta_moneda_extranjera_id = a.recepcion_correcta_moneda_extranjera_id) 
				where c.recepcion_moneda_extranjera_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);
			
		when p_tipo_documento_sector_id = 18 --Nota: NOTA DE CREDITO-DEBITO
			then
			
			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_efectivo_credito_debito as monto_total, a.numero_notadc as numero_factura
				from sre_recaudaciones.sre_fac_notas_creditos_debitos a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos c on (c.recepcion_correcta_nota_credito_debito_id = a.recepcion_correcta_nota_credito_debito_id) 
				where c.recepcion_nota_credito_debito_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);			
		--add 20190410 vcg				
		when p_tipo_documento_sector_id = 19 --Nota: NOTA DE CONCILIACION
			then
			
			v_resultado	:= null;
			
		when p_tipo_documento_sector_id = 20 --Nota: BOLETO AEREO
			then
			
			v_resultado	:= null;		
		--add 20190408 vcg			
		when p_tipo_documento_sector_id = 21 --Nota: NOTA FISCAL TURISMO RECEPTIVO
			then 										

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_turismos_receptivos a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_turismos_receptivos c on (c.recepcion_correcta_turismo_receptivo_id = a.recepcion_correcta_turismo_receptivo_id) 
				where c.recepcion_turismo_receptivo_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);			
			--add 20190410 vcg
		when p_tipo_documento_sector_id = 22 --Nota: NOTA FISCAL TASA CERO
			then 			

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_tasas_ceros a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_tasas_ceros c on (c.recepcion_correcta_tasa_cero_id = a.recepcion_correcta_tasa_cero_id) 
				where c.recepcion_tasa_cero_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);				
		-- add 20190409 rgt		
		when p_tipo_documento_sector_id = 23 --Nota: FACTURA HIDROCARBUROS
			then				 

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_hidrocarburos a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_hidrocarburos c on (c.recepcion_correcta_hidrocarburo_id = a.recepcion_correcta_hidrocarburo_id) 
				where c.recepcion_hidrocarburo_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);		 				
		-- add 20190410 rgt
 		when p_tipo_documento_sector_id = 24 --Nota: FACTURA COMERCIAL DE EXPORTACIÓN YPFB
			then				 

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_exportaciones_ypfb a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_ypfb c on (c.recepcion_correcta_exportacion_ypfb_id = a.recepcion_correcta_exportacion_ypfb_id) 
				where c.recepcion_exportacion_ypfb_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);	 		
 		-- add 20190729 rgt
 		when p_tipo_documento_sector_id = 25 --Nota: FACTURA EXPORTACION MINERA
			then				 

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_exportaciones_mineras a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_exportaciones_mineras c on (c.recepcion_correcta_exportacion_minera_id = a.recepcion_correcta_exportacion_minera_id) 
				where c.recepcion_exportacion_minera_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);
			
 		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 26 --Nota: FACTURA COMERCIAL DE LIBRE CONSIGNACIÓN YPFB
			then				 

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_libres_consignaciones_ypfb a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_libres_consignaciones_ypfb c on (c.recepcion_correcta_libre_consignacion_ypfb_id = a.recepcion_correcta_libre_consignacion_ypfb_id) 
				where c.recepcion_libre_consignacion_ypfb_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);
			
		--add 20190410 vcg
 		when p_tipo_documento_sector_id = 27 --Nota: FACTURA VENTA INTERNA MINERALES
			then

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_mineras_internas a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_mineras_internas c on (c.recepcion_correcta_minera_interna_id = a.recepcion_correcta_minera_interna_id) 
				where c.recepcion_minera_interna_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);						 			
 			
		-- add 20190410 jf
 		when p_tipo_documento_sector_id = 28 --Nota: FACTURA PREVALORADA DIGITAL
			then				 

			v_resultado	:=null;
 		-- add 20190524 rgt
 		when p_tipo_documento_sector_id = 29 --Nota: FACTURA TELECOMUNICACIONES
			then				 

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_total, a.numero_factura 
				from sre_recaudaciones.sre_fac_ventas_telecomunicaciones a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_telecomunicaciones c on (c.recepcion_correcta_telecomunicacion_id = a.recepcion_correcta_telecomunicacion_id) 
				where c.recepcion_telecomunicacion_id = p_codigo_recepcion limit 1) row) tbl_resultado
			);	 			
 		
 		-- add 20190525 rgt
 		when p_tipo_documento_sector_id = 30 --Nota: NOTA CREDITO DEBITO SFV
			then				 

			v_resultado	:=(
				select row_to_json(tbl_resultado)
				from (					
				select array_to_json(array_agg(row_to_json(row))) as resultados 
				from  (select (select codigo_clasificador_equivalente from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO IDENTIDAD' and codigo_clasificador = a.tipo_documento_identidad_id limit 1) documento_identidad_id,
				a.numero_documento, a.complemento, a.cuf, a.nit_emisor, a.monto_efectivo_credito_debito_sfv as monto_total, a.numero_notadc as numero_factura 
				from sre_recaudaciones.sre_fac_notas_creditos_debitos_sfv a inner join 
				sre_recaudaciones.sre_fac_recepciones_correctas_notas_creditos_debitos_sfv c on (c.recepcion_correcta_nota_credito_debito_sfv_id = a.recepcion_correcta_nota_credito_debito_sfv_id) 
				where c.recepcion_nota_credito_debito_sfv_id = p_codigo_recepcion limit 1) row) tbl_resultado
			); 		
		else 
			v_resultado:=null;
	end case;	
	
   	v_final := replace(replace(v_resultado::varchar,'"resultados":[{',''),']}','');		
   
	return v_final; 	
						
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_id_recepcion'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_parametros(p_json_varchar character varying, p_etapa character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare 
	v_json json;		
	v_facturaCabeceraGenerica json;
	v_facturaDetalleGenerica json;
	v_xmlRecepcionGenerica json;
	
	v_resultado smallint:=0;
begin	
	
	
	v_json := cast(p_json_varchar as json); 
				
	return 1;
  
  EXCEPTION
  when others
    then
		RAISE INFO 'estado %', SQLSTATE;
		RAISE INFO 'errm %', SQLERRM;
		
    	return '-1';	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_rango_fechas_evento_significativo(p_sistema_id bigint, p_persona_contribuyente_id bigint, p_sucursal_id integer, p_cufd character varying, p_cuis character varying, p_fecha_emision timestamp without time zone)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_resultado smallint :=0;
  v_fecha_menor timestamp;
  v_fecha_mayor timestamp;
    
begin	

	v_fecha_menor:=(
  	select min(fecha_inicio_evento) as fecha_evento_menor 
	from sre_recaudaciones.sre_fac_eventos_significativos
	where sistema_id=p_sistema_id and
	contribuyente_id=p_persona_contribuyente_id and
	sucursal_id=p_sucursal_id and
	cufd=p_cufd and
	cuis=p_cuis and
	estado_id='AC' 
	and tipo_evento_id=1297
	); --Codigo de inicio del evento
	
	v_fecha_mayor:=(
	select max(fecha_fin_evento) as fecha_evento_mayor 
	from sre_recaudaciones.sre_fac_eventos_significativos
	where sistema_id=p_sistema_id and
	contribuyente_id=p_persona_contribuyente_id and
	sucursal_id=p_sucursal_id and
	cufd=p_cufd and
	cuis=p_cuis and
	estado_id='AC' and
	tipo_evento_id=1297); --Codigo de fin del evento
	if((p_fecha_emision >= v_fecha_menor) and (p_fecha_emision <= v_fecha_mayor)) then
		v_resultado :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	elseif ((select count(1) 
							from sre_recaudaciones.sre_fac_eventos_significativos
							where sistema_id=p_sistema_id and
							contribuyente_id=p_persona_contribuyente_id and
							sucursal_id=p_sucursal_id and
							cufd=p_cufd and
							cuis=p_cuis and
							estado_id='AC' 
							and tipo_evento_id=1297)=0) then 
		v_resultado :=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_verificar_rango_fechas_evento_significativo');
	end if;
  return v_resultado;

  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_rango_fechas_evento_significativo'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_recepcion_individual(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llaman a las funciones: sre_fac_ope_verificar_id_recepcion_correcta, sre_fac_ope_obtener_venta_id
				 sre_fac_ope_obtener_venta_id, sre_fac_ope_actualizar_estado_recepcion_ventas, sre_fac_ope_obtener_numero_factura,
				 sre_fac_ope_obtener_cuf
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :15/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado_recepcion bigint := 0;
   v_resultado_recepcion_correcta bigint := 0;
   v_estado_recepcion smallint := 0;
   v_estado_recepcion_factura smallint:= 0;
   v_numero_factura bigint := 0;
   v_venta_id bigint := 0;
   v_cuf varchar := 0;
   v_lista_errores varchar := '0';
   v_resultado varchar := '0';
   
   v_estado_recepcion_observada integer := 708;
   
begin
	-- Nota :: Se obtiene el ID de la recepcion de la funcion sre_fac_ope_verificar_id_recepcion
	v_resultado_recepcion := (sre_recaudaciones.sre_fac_ope_verificar_id_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
	
	if(v_resultado_recepcion != 0)
	then
	     -- Nota :: Se obtiene el ID de la recepcion correcta de la funcion sre_fac_ope_verificar_id_recepcion_correcta
		 v_resultado_recepcion_correcta := (sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_correcta(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
		 if(v_resultado_recepcion_correcta != 0)
		 then
		 	-- Nota :: ACTUALIZAR EL ESTADO DE LA RECEPCION		
		    v_venta_id := cast((sre_recaudaciones.sre_fac_ope_obtener_venta_id(p_tipo_documento_sector_id,v_resultado_recepcion_correcta)) as bigint); --*
		 	--add 20190606 obtencion de estado equivalente - contribuyente 
		    v_estado_recepcion := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente ( cast (sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_ventas(p_tipo_documento_sector_id,p_codigo_recepcion, v_resultado_recepcion_correcta, v_venta_id ) as smallint)));--*
		 	
		    v_lista_errores := '0';
			v_numero_factura := (sre_recaudaciones.sre_fac_ope_obtener_numero_factura(p_tipo_documento_sector_id,v_venta_id)); --*
		 	v_cuf := (sre_recaudaciones.sre_fac_ope_obtener_cuf(p_tipo_documento_sector_id, v_venta_id));--*
			v_resultado := (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(p_codigo_recepcion, v_estado_recepcion, v_numero_factura, v_cuf, v_lista_errores));
		 			
		 else
		 	-- Nota :: OBTENER DATOS DE LA TABLA ERRORES
		   	v_estado_recepcion_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion)));
		   	if(v_estado_recepcion_factura = (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_pendiente')))then
		   		v_estado_recepcion_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion, v_estado_recepcion_observada)));
		   	end if;
		 	v_lista_errores := (sre_recaudaciones.sre_fac_ope_obtener_lista_errores(p_codigo_recepcion, p_tipo_documento_sector_id));
		    v_numero_factura := cast((select sre_recaudaciones.sre_fac_ope_obtener_numero_factura_error(p_codigo_recepcion, p_tipo_documento_sector_id)) as bigint);
		    v_cuf := (sre_recaudaciones.sre_fac_ope_obtener_cuf_error(p_codigo_recepcion, p_tipo_documento_sector_id));
		 	v_resultado :=  (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(p_codigo_recepcion, v_estado_recepcion_factura, v_numero_factura, v_cuf, v_lista_errores));
		    
		 end if;
	else
		v_resultado := 'Codigo Recepcion Incorrecto';
	end if;
	
	return v_resultado;
						
	EXCEPTION
		  when others
		    then
		      return cast( (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_recepcion_individual')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_recepcion_individual_contingencia(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llaman a las funciones: sre_fac_ope_verificar_id_recepcion_correcta, sre_fac_ope_obtener_venta_id
				 sre_fac_ope_obtener_venta_id, sre_fac_ope_actualizar_estado_recepcion_ventas, sre_fac_ope_obtener_numero_factura,
				 sre_fac_ope_obtener_cuf
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :15/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado_recepcion bigint := 0;
   v_resultado_recepcion_correcta bigint := 0;
   v_estado_recepcion smallint := 0;
   v_estado_recepcion_factura smallint:= 0;
   v_numero_factura bigint := 0;
   v_venta_id bigint := 0;
   v_cuf varchar := 0;
   v_lista_errores varchar := '0';
   v_resultado varchar := '0';
   
   v_estado_recepcion_observada integer := 708;
   
begin
	-- Nota :: Se obtiene el ID de la recepcion de la funcion sre_fac_ope_verificar_id_recepcion
	v_resultado_recepcion := (sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
	
	if(v_resultado_recepcion != 0)
	then
	     -- Nota :: Se obtiene el ID de la recepcion correcta de la funcion sre_fac_ope_verificar_id_recepcion_correcta
		 v_resultado_recepcion_correcta := (sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_correcta_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
		 if(v_resultado_recepcion_correcta != 0)
		 then
		 	-- Nota :: ACTUALIZAR EL ESTADO DE LA RECEPCION		
		    v_venta_id := cast((sre_recaudaciones.sre_fac_ope_obtener_venta_id_contingencia(p_tipo_documento_sector_id,v_resultado_recepcion_correcta)) as bigint); --*
		 	--add 20190606 obtencion de estado equivalente - contribuyente 
		 		    		    
		    v_estado_recepcion := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente ( cast (sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_ventas_contingencia(p_tipo_documento_sector_id,p_codigo_recepcion, v_resultado_recepcion_correcta, v_venta_id ) as smallint)));--*
		    v_lista_errores := '0';
			v_numero_factura := (sre_recaudaciones.sre_fac_ope_obtener_numero_factura_contingencia(p_tipo_documento_sector_id,v_venta_id)); --*
		 	v_cuf := (sre_recaudaciones.sre_fac_ope_obtener_cuf_contingencia(p_tipo_documento_sector_id, v_venta_id));--*
			v_resultado := (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(p_codigo_recepcion, v_estado_recepcion, v_numero_factura, v_cuf, v_lista_errores));
		 			
		 else
		 	-- Nota :: OBTENER DATOS DE LA TABLA ERRORES
		   	v_estado_recepcion_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)));
		   	if(v_estado_recepcion_factura = (sre_recaudaciones.sre_fac_par_estado('estado_recepcion_pendiente')))then
		   		v_estado_recepcion_factura := (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion, v_estado_recepcion_observada)));
		   	end if;
		 	v_lista_errores := (sre_recaudaciones.sre_fac_ope_obtener_lista_errores(p_codigo_recepcion, p_tipo_documento_sector_id));
		    v_numero_factura := cast((select sre_recaudaciones.sre_fac_ope_obtener_numero_factura_error(p_codigo_recepcion, p_tipo_documento_sector_id)) as bigint);
		    v_cuf := (sre_recaudaciones.sre_fac_ope_obtener_cuf_error(p_codigo_recepcion, p_tipo_documento_sector_id));
		 	v_resultado :=  (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(p_codigo_recepcion, v_estado_recepcion_factura, v_numero_factura, v_cuf, v_lista_errores));
		    
		 end if;
	else
		v_resultado := 'Codigo Recepcion Incorrecto';
	end if;
	
	return v_resultado;
						
	EXCEPTION
		  when others
		    then
		      return cast( (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_recepcion_individual_contingencia')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_recepcion_paquete(p_tipo_documento_fiscal integer, p_documento_sector_id integer, p_recepcion_paquete_id bigint, p_sistema_id bigint, p_cuis character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a las funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  La funcion se modifico para devolver como respuesta el formato JSON con el codigo de error 13 cuando no existen facturas para el id_paquete.  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :12/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  La funcion se modifico para verificar si el paquete fue procesado completamente en la recepcion.  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :13/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se optimizo la funcion para la validacion de la recepcion paquete. Se modifico la logica completa de la validacion. Se utilizaron
                           tablas temporales para procesar las facturas del paquete para finalmente actualizar en las tablas: recepciones_paquetes, recepciones
                           y ventas.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/12/2019
AUTOR DE LA MODIFICACION : Victor Cruz Gomez
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se modifico la funcion para que retorne solo facturas invalidas. Antes devolvia las facturas validas e invalidas.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :19/12/2019
AUTOR DE LA MODIFICACION : Victor Cruz Gomez
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
       v_sql varchar:='0'; 
       v_json json; 
       i json;      
       
       v_resultado_defecto varchar:='{"codigoestado": 0,   "codigorecepcion": 0,   "recepcionerrordetalle": [     {       "cuf": "-",       "codigoestado": 0,       "numerofactura": 0,       "listacodigoserror": "0",       "codigorecepcionindividual": 0}]}';    
       v_resultado_recepcion_individual varchar:=v_resultado_defecto;                
       v_resultado_validacion_id_paquete smallint:=0;
       v_sw_recepcion_individual smallint:=0;
       
       v_total_facturas_recepcion_paquete integer:=0;

       v_total_facturas integer:=0;
       v_total_facturas_validos integer:=0;
       v_total_facturas_invalidos integer:=0; 
       
       arow record;
       v_total_errores integer:=0;
       v_codigo_estado_paquete integer:=0;
       v_vector json [];
       v_resultado varchar:='0'; 

       v_estado_recepcion_paquete_procesada smallint := 706;     
       v_estado_recepcion_valida integer:=705; 
       v_estado_recepcion_observada integer:=708;
       v_estado_recepcion_pendiente integer:=709; 
       v_estado_factura_valida integer:=690;
       v_estado_factura_pendiente integer:=1495;
       v_estado_estado_paquete_observado integer:=708;
       v_estado_estado_paquete_valida integer:=705;


begin                                                       
       --Si el estado del paquete es 709 (PENDIENTE) o 705 (VALIDADA) no validar los datos del xml de envio.
       v_codigo_estado_paquete:= sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_documento_sector_id, p_recepcion_paquete_id);
       
       case 
             when v_codigo_estado_paquete=v_estado_recepcion_pendiente then
                    v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_codigo_estado_paquete));
                 v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[{"cuf": "-","codigoestado": 0,"numerofactura": 0,"listacodigoserror": "0","codigorecepcionindividual": 0}]' as json)));
                 return coalesce(v_resultado,v_resultado_defecto);
             when v_codigo_estado_paquete=v_estado_recepcion_valida then                   
                   v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_codigo_estado_paquete));
             v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[]' as json)));
                 return coalesce(v_resultado,v_resultado_defecto);
             else                
                    v_resultado:='0';
       end case;
             
v_resultado_validacion_id_paquete:=(sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete(p_documento_sector_id, p_recepcion_paquete_id)); 
             
       if(v_resultado_validacion_id_paquete>0) then       
             drop table if exists tbl_documentos_paquetes;       
             create temp table tbl_documentos_paquetes as 
             select * from sre_recaudaciones.sre_fac_ope_sql_obtener_facturas_paquetes(
             p_documento_sector_id,
             p_recepcion_paquete_id,
             p_sistema_id,
             p_cuis,
             p_documento_sector_id
             );
             
         
           
            
             drop table if exists tbl_errores_documentos_paquetes;            
             create temp table tbl_errores_documentos_paquetes as
             select *
             from sre_recaudaciones.sre_fac_ope_sql_obtener_facturas_errores_paquetes(
                    p_documento_sector_id::integer,
                    p_recepcion_paquete_id::bigint,
                    p_documento_sector_id::integer,
                    p_cuis::varchar    
             );
                    
             --ACTUALIZAR TMP RECEPCION
             update tbl_documentos_paquetes 
             set    
                    estado_recepcion_id=v_estado_recepcion_valida                    
             where 
             recepcion_paquete_id=p_recepcion_paquete_id and 
             (estado_recepcion_id=v_estado_recepcion_pendiente and estado_factura_id=v_estado_factura_pendiente);
            
             --ACTUALIZAR TMP VENTAS
             update tbl_documentos_paquetes
             set
                    estado_factura_id=v_estado_factura_valida                  
             where 
             recepcion_paquete_id=p_recepcion_paquete_id and
             ((estado_recepcion_id=v_estado_recepcion_pendiente or estado_recepcion_id=v_estado_recepcion_valida)  and estado_factura_id=v_estado_factura_pendiente);            
                    
             --OBTENER JSON FACTURAS CORRECTAS      
             update tbl_documentos_paquetes
             set
             resultado_json=sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(recepcion_id::bigint, sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(estado_factura_id::smallint), numero_factura::bigint, cuf::varchar, '0'::varchar)              
             where 
             recepcion_paquete_id=p_recepcion_paquete_id; 
            
             --OBTENER JSON FACTURAS INCORRECTAS
             update tbl_errores_documentos_paquetes
             set
             resultado_json=sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(recepcion_id::bigint, sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_estado_recepcion_observada::smallint), numero_factura::bigint, cuf::varchar, lista_errores::varchar)                 
             where 
             recepcion_paquete_id=p_recepcion_paquete_id;
             
             v_total_errores     := (select count(*) from tbl_errores_documentos_paquetes);
             
       
             if v_total_errores > 0 then     
                    v_codigo_estado_paquete:= sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_estado_estado_paquete_observado::smallint);                     
             else
                    v_codigo_estado_paquete:= sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_estado_estado_paquete_valida::smallint); 
             end if;
                    
             --UNION DE LAS FACTURAS VALIDAS DEL PAQUETE
             /*
             for arow in select resultado_json from  tbl_documentos_paquetes loop                                                                      
                           v_vector := (select array_append (v_vector, cast(arow.resultado_json as json)));
             end loop;
             */    
             
             --UNION DE LAS FACTURAS INVALIDAS DEL PAQUETE
            for arow in select resultado_json from  tbl_errores_documentos_paquetes loop                                                                           
                           v_vector := (select array_append (v_vector, cast(arow.resultado_json as json)));  
             end loop;    
             
            if v_total_errores > 0 then
            v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, array_to_json(v_vector)));
            else
                    v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[]' as json)));     
            end if;
                            
      
             --ACTUALIZACION FISICA TABLA RECEPCION y VENTAS           
       v_sql:=sre_recaudaciones.sre_fac_ope_sql_actualizar_recepcion_ventas_paquetes(p_documento_sector_id);
             execute v_sql;
             
             --ACTUALIZACION FISICA TABLA PAQUETE
             perform sre_recaudaciones.sre_fac_ope_sql_actualizar_estado_paquete(
             p_documento_sector_id,
             v_codigo_estado_paquete,
             p_recepcion_paquete_id,
             p_sistema_id,
             p_documento_sector_id,
             p_cuis
           );                         
       
            
             if (v_resultado='-1' or v_resultado='-2' or v_resultado='0') then
            
                    v_resultado := (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(0::bigint, 0::smallint, 0::bigint, '0'::varchar, (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion')::varchar))); 
             end if;                                 
       else
                    
                 v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[{"cuf": "-","codigoestado": 0,"numerofactura": 0,"listacodigoserror": "0","codigorecepcionindividual": 0}]' as json)));             
       end if;
                                 
       return coalesce(v_resultado,v_resultado_defecto);         
                                        
       EXCEPTION
               when others
                 then
                   return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_recepcion_paquete')) as varchar) ; 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_recepcion_paquete_(p_tipo_documento_fiscal integer, p_documento_sector_id integer, p_recepcion_paquete_id bigint, p_sistema_id bigint, p_cuis character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a las funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  La funcion se modifico para devolver como respuesta el formato JSON con el codigo de error 13 cuando no existen facturas para el id_paquete.  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :12/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  La funcion se modifico para verificar si el paquete fue procesado completamente en la recepcion.  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :13/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se optimizo la funcion para la validacion de la recepcion paquete. Se modifico la logica completa de la validacion. Se utilizaron
                           tablas temporales para procesar las facturas del paquete para finalmente actualizar en las tablas: recepciones_paquetes, recepciones
                           y ventas.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/12/2019
AUTOR DE LA MODIFICACION : Victor Cruz Gomez
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se modifico la funcion para que retorne solo facturas invalidas. Antes devolvia las facturas validas e invalidas.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :19/12/2019
AUTOR DE LA MODIFICACION : Victor Cruz Gomez
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
       v_sql varchar:='0'; 
       v_json json; 
       i json;      
       
       v_resultado_defecto varchar:='{"codigoestado": 0,   "codigorecepcion": 0,   "recepcionerrordetalle": [     {       "cuf": "-",       "codigoestado": 0,       "numerofactura": 0,       "listacodigoserror": "0",       "codigorecepcionindividual": 0}]}';    
       v_resultado_recepcion_individual varchar:=v_resultado_defecto;                
       v_resultado_validacion_id_paquete smallint:=0;
       v_sw_recepcion_individual smallint:=0;
       
       v_total_facturas_recepcion_paquete integer:=0;

       v_total_facturas integer:=0;
       v_total_facturas_validos integer:=0;
       v_total_facturas_invalidos integer:=0; 
       
       arow record;
       v_total_errores integer:=0;
       v_codigo_estado_paquete integer:=0;
       v_vector json [];
       v_resultado varchar:='0'; 

       v_estado_recepcion_paquete_procesada smallint := 706;     
       v_estado_recepcion_valida integer:=705; 
       v_estado_recepcion_observada integer:=708;
       v_estado_recepcion_pendiente integer:=709; 
       v_estado_factura_valida integer:=690;
       v_estado_factura_pendiente integer:=1495;
       v_estado_estado_paquete_observado integer:=708;
       v_estado_estado_paquete_valida integer:=705;


begin                                                       
       --Si el estado del paquete es 709 (PENDIENTE) o 705 (VALIDADA) no validar los datos del xml de envio.
       v_codigo_estado_paquete:= sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete(p_documento_sector_id, p_recepcion_paquete_id);
       
       case 
             when v_codigo_estado_paquete=v_estado_recepcion_pendiente then
                    v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_codigo_estado_paquete));
                 v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[{"cuf": "-","codigoestado": 0,"numerofactura": 0,"listacodigoserror": "0","codigorecepcionindividual": 0}]' as json)));
                 return coalesce(v_resultado,v_resultado_defecto);
             when v_codigo_estado_paquete=v_estado_recepcion_valida then                   
                   v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_codigo_estado_paquete));
             v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[]' as json)));
                 return coalesce(v_resultado,v_resultado_defecto);
             else                
                    v_resultado:='0';
       end case;
             
v_resultado_validacion_id_paquete:=(sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete(p_documento_sector_id, p_recepcion_paquete_id)); 
             
       if(v_resultado_validacion_id_paquete>0) then       
             drop table if exists tbl_documentos_paquetes;       
             create temp table tbl_documentos_paquetes as 
             select * from sre_recaudaciones.sre_fac_ope_sql_obtener_facturas_paquetes(
             p_documento_sector_id,
             p_recepcion_paquete_id,
             p_sistema_id,
             p_cuis,
             p_documento_sector_id
             );
             
         
           
            
             drop table if exists tbl_errores_documentos_paquetes;            
             create temp table tbl_errores_documentos_paquetes as
             select *
             from sre_recaudaciones.sre_fac_ope_sql_obtener_facturas_errores_paquetes(
                    p_documento_sector_id::integer,
                    p_recepcion_paquete_id::bigint,
                    p_documento_sector_id::integer,
                    p_cuis::varchar    
             );
                    
             --ACTUALIZAR TMP RECEPCION
             update tbl_documentos_paquetes 
             set    
                    estado_recepcion_id=v_estado_recepcion_valida                    
             where 
             recepcion_paquete_id=p_recepcion_paquete_id and 
             (estado_recepcion_id=v_estado_recepcion_pendiente and estado_factura_id=v_estado_factura_pendiente);
            
             --ACTUALIZAR TMP VENTAS
             update tbl_documentos_paquetes
             set
                    estado_factura_id=v_estado_factura_valida                  
             where 
             recepcion_paquete_id=p_recepcion_paquete_id and
             ((estado_recepcion_id=v_estado_recepcion_pendiente or estado_recepcion_id=v_estado_recepcion_valida)  and estado_factura_id=v_estado_factura_pendiente);            
                    
             --OBTENER JSON FACTURAS CORRECTAS      
             update tbl_documentos_paquetes
             set
             resultado_json=sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(recepcion_id::bigint, sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(estado_factura_id::smallint), numero_factura::bigint, cuf::varchar, '0'::varchar)              
             where 
             recepcion_paquete_id=p_recepcion_paquete_id; 
            
             --OBTENER JSON FACTURAS INCORRECTAS
             update tbl_errores_documentos_paquetes
             set
             resultado_json=sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(recepcion_id::bigint, sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_estado_recepcion_observada::smallint), numero_factura::bigint, cuf::varchar, lista_errores::varchar)                 
             where 
             recepcion_paquete_id=p_recepcion_paquete_id;
             
             v_total_errores     := (select count(*) from tbl_errores_documentos_paquetes);
             
       
             if v_total_errores > 0 then     
                    v_codigo_estado_paquete:= sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_estado_estado_paquete_observado::smallint);                     
             else
                    v_codigo_estado_paquete:= sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(v_estado_estado_paquete_valida::smallint); 
             end if;
                    
             --UNION DE LAS FACTURAS VALIDAS DEL PAQUETE
             /*
             for arow in select resultado_json from  tbl_documentos_paquetes loop                                                                      
                           v_vector := (select array_append (v_vector, cast(arow.resultado_json as json)));
             end loop;
             */    
             
             --UNION DE LAS FACTURAS INVALIDAS DEL PAQUETE
            for arow in select resultado_json from  tbl_errores_documentos_paquetes loop                                                                           
                           v_vector := (select array_append (v_vector, cast(arow.resultado_json as json)));
                           raise notice 'arow %',arow;
             end loop;    
             
            if v_total_errores > 0 then
            v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, array_to_json(v_vector)));
            else
                    v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[]' as json)));     
            end if;
                            
      
             --ACTUALIZACION FISICA TABLA RECEPCION y VENTAS           
       v_sql:=sre_recaudaciones.sre_fac_ope_sql_actualizar_recepcion_ventas_paquetes(p_documento_sector_id);
             execute v_sql;
             
             --ACTUALIZACION FISICA TABLA PAQUETE
             perform sre_recaudaciones.sre_fac_ope_sql_actualizar_estado_paquete(
             p_documento_sector_id,
             v_codigo_estado_paquete,
             p_recepcion_paquete_id,
             p_sistema_id,
             p_documento_sector_id,
             p_cuis
           );                         
       
            
             if (v_resultado='-1' or v_resultado='-2' or v_resultado='0') then
            
                    v_resultado := (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(0::bigint, 0::smallint, 0::bigint, '0'::varchar, (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion')::varchar))); 
             end if;                                 
       else
                    
                 v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_recepcion_paquete_id,v_codigo_estado_paquete, cast('[{"cuf": "-","codigoestado": 0,"numerofactura": 0,"listacodigoserror": "0","codigorecepcionindividual": 0}]' as json)));             
       end if;
                                 
       return coalesce(v_resultado,v_resultado_defecto);         
                                        
       EXCEPTION
               when others
                 then
                   return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_recepcion_paquete')) as varchar) ; 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_recepcion_paquete_contingencia(p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a las funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  La funcion se modifico para devolver como respuesta el formato JSON con el codigo de error 13 cuando no existen facturas para el id_paquete.  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :12/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  La funcion se modifico para verificar si el paquete fue procesado completamente en la recepcion.  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :13/09/2019
AUTOR DE LA MODIFICACION : vcg
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='0';	
	v_json json;	
	i json;	
	
	v_resultado varchar:='0';
	v_resultado_defecto varchar:='{"codigoestado": 0,   "codigorecepcion": 0,   "recepcionerrordetalle": [     {       "cuf": "-",       "codigoestado": 0,       "numerofactura": 0,       "listacodigoserror": "0",       "codigorecepcionindividual": 0}]}';	
	v_resultado_recepcion_individual varchar:=v_resultado_defecto;		
	v_codigo_estado_paquete smallint:=0;	
	v_vector json [];
	v_resultado_validacion_id_paquete smallint:=0;
	v_sw_recepcion_individual smallint:=0;
		
begin			
	
	--Nota: Si el estado del paquetes es 709 (PENDIENTE) no validar la recepcion de facturas.
	if sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)=709 then
			v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)));--*
		    v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_codigo_recepcion,v_codigo_estado_paquete, cast('[{"cuf": "-","codigoestado": 0,"numerofactura": 0,"listacodigoserror": "0","codigorecepcionindividual": 0}]' as json)));
		    return coalesce(v_resultado,v_resultado_defecto);
	end if;
	
	v_resultado_validacion_id_paquete:=(sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
	
	if(v_resultado_validacion_id_paquete>0) then		 
				v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_lista_rec_contingencia(p_tipo_documento_sector_id)); --*			
				execute v_sql using p_codigo_recepcion into v_json;
				
				
				if( (v_json->'recepciones_id')::text <> 'null') then
					for i in select * from json_array_elements(v_json->'recepciones_id') 
					loop								
						v_resultado_recepcion_individual := (select (sre_recaudaciones.sre_fac_ope_verificar_recepcion_individual_contingencia(p_tipo_documento_sector_id, cast(i->>'recepciones_id_i' as bigint)))); --add 20190408 vcg
						
						if(cast(cast(v_resultado_recepcion_individual as json)->>'codigoestado' as integer)  <> sre_recaudaciones.sre_fac_par_estado('estado_recepcion_valida')) then --908
							v_sw_recepcion_individual=1;
						end if;					
						v_vector := (select array_append (v_vector, cast(v_resultado_recepcion_individual as json)));								
				 	end loop;			 							 				 	
				 	
				 	--Estados: 
				 	--Correcto: 705 (908)
				 	--Observado: 708 (904)
				 	--Pendiente: 709
				 	
				 	if(v_sw_recepcion_individual=0) then --Si todas las facturas son validas
				 		v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_paq_contingencia(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_codigo_recepcion, sre_recaudaciones.sre_fac_par_estado('estado_recepcion_valida_bd'))));--*705
				 		v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_codigo_recepcion,v_codigo_estado_paquete, cast('[]' as json)));--*			 		
				 	else
						v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_paq_contingencia(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_codigo_recepcion, sre_recaudaciones.sre_fac_par_estado('estado_recepcion_observada_bd'))));--* 708
						v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_codigo_recepcion,v_codigo_estado_paquete, array_to_json(v_vector)));--*
				 	end if;
				 	
				end if;
		
				
				if (v_resultado='-1' or v_resultado='-2' or v_resultado='0') then
					v_resultado := (sre_recaudaciones.sre_fac_ope_respuesta_verificacion_individual(0::bigint, 0::smallint, 0::bigint, '0'::varchar, (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion')::varchar))); --modificado: 20190912 vcg
				end if;
	else
		    v_codigo_estado_paquete:= (sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_equivalente(sre_recaudaciones.sre_fac_ope_obtener_estado_recepcion_paquete_contingencia(p_tipo_documento_sector_id, p_codigo_recepcion)));--*
		    v_resultado:=(sre_recaudaciones.sre_fac_ope_respuesta_verificacion_paquete(p_codigo_recepcion,v_codigo_estado_paquete, cast('[{"cuf": "-","codigoestado": 0,"numerofactura": 0,"listacodigoserror": "0","codigorecepcionindividual": 0}]' as json)));		    
	end if;
				 	
	return coalesce(v_resultado,v_resultado_defecto);		
						
	EXCEPTION
		  when others
		    then
		      return cast((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_recepcion_paquete_contingencia')) as varchar) ;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_sistema_nit_proveedor(p_sistema_id bigint, p_nit bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion verifica si el sistema_id es un proveedor y si la prueba corresponde a un nit asociado al proveedor.
PARAMETROS INGRESO
    		p_sistema_id bigint, 
    		persona_contribuyente_id bigint per
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	v_es_proveedor boolean:=false;
	v_es_nit_asignado_proveedor boolean:=false;
begin	
	
	v_es_proveedor:= (
		select true 
		from sre_recaudaciones.sre_fac_sistemas
		where 
		estado_id='AC' and 
		tipo_sistema_id=sre_recaudaciones.sre_fac_par_tipo_sistema('proveedor') and
		sistema_id=p_sistema_id
		limit 1
	);
			
	v_es_nit_asignado_proveedor :=(
		select true
		from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor PROVEEDOR inner join sre_recaudaciones.sre_fac_nits_pruebas_proveedores NITS
		on PROVEEDOR.nit_prueba_proveedor_id=NITS.nit_prueba_proveedor_id
		where PROVEEDOR.estado_id='AC' and
		NITS.estado_id='AC' and
		PROVEEDOR.sistema_id_proveedor=p_sistema_id and NITS.nit=p_nit
		limit 1
	); 
	
	if (v_es_proveedor and v_es_nit_asignado_proveedor) then
		return true;
	else	
		return false;
	end if;
														
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_ope_verificar_sistema_nit_proveedor');
			return false;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_ope_verificar_sub_detalle(p_json json, p_documento_sector integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado bool:=false;
	v_json_factura json;
begin
	case
		when p_documento_sector=8 then
		    v_json_factura  := (p_json->'XmlFactura'->'factura'->'detalle'->'detalleDocumentos');
		    
			if(left(v_json_factura::varchar, 1) = '[')
			then
				v_resultado := true;
			end if;
		else
			v_resultado:=false;	
	end case;
	
	return v_resultado;							
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_codigo_respuesta(p_codigo_respuesta character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
declare
	v_resultado smallint := 0;
begin
	v_resultado := (case
						when p_codigo_respuesta = 'codigo_exito' then 1000
						when p_codigo_respuesta = 'codigo_excepcion_bd_recaudaciones' then 1001
						when p_codigo_respuesta = 'codigo_excepcion_bd_transversales' then 1002
						else 0
					end);
					
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_codigo_respuesta'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_estado(p_funcion_parametrica character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene los estados de todas las tablas correspondiente al Sistema de Facturacion Electronica.
PARAMETROS INGRESO
    Cadena de texto de busqueda
PARAMETROS SALIDA
   Numero entero de acuerdo al estado de la tabla
SUBSISTEMA : Facturación
FECHA CREACION : <06/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se actualizó los estados segun los códigos equivalentes para estado_recepcion_anulacion_pendiente_bd
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<30/10/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell <junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/
declare
   v_resultado smallint:=0;
begin		
	v_resultado := (case		
		when p_funcion_parametrica = 'estado_factura_valida' then 690
		when p_funcion_parametrica = 'estado_factura_anulada' then 691
		when p_funcion_parametrica = 'estado_factura_anulado_no_confirmado' then 2170
		when p_funcion_parametrica = 'estado_recepcion_anulacion_confirmada' then 905
		when p_funcion_parametrica = 'estado_recepcion_anulacion_pendiente' then 1496
		
		when p_funcion_parametrica = 'estado_recepcion_anulacion_confirmada_bd' then 1501
		when p_funcion_parametrica = 'estado_recepcion_anulacion_rechazada' then 906
		
		when p_funcion_parametrica = 'estado_sistema_certificado' then 617
		when p_funcion_parametrica = 'estado_sistema_observado' then 618
		when p_funcion_parametrica = 'estado_sistema_baja' then 619
		when p_funcion_parametrica = 'estado_sistema_cancelado' then 1287
		when p_funcion_parametrica = 'estado_solicitud_proceso_masivo_aprobado' then 2682
				
		when p_funcion_parametrica = 'estado_cronograma_proceso_masivo_activo' then 2680
		when p_funcion_parametrica = 'estado_horario_disponible_activo' then 2685
		
		when p_funcion_parametrica = 'estado_recepcion_pendiente' then 901
		when p_funcion_parametrica = 'estado_recepcion_rechazada' then 902
		when p_funcion_parametrica = 'estado_recepcion_procesada' then 903
		when p_funcion_parametrica = 'estado_recepcion_observada' then 904
		when p_funcion_parametrica = 'estado_recepcion_valida' then 908
		
		when p_funcion_parametrica = 'estado_recepcion_pendiente_bd' then 709
		when p_funcion_parametrica = 'estado_recepcion_rechazada_bd' then 707
		when p_funcion_parametrica = 'estado_recepcion_procesada_bd' then 706
		when p_funcion_parametrica = 'estado_recepcion_observada_bd' then 708
		when p_funcion_parametrica = 'estado_recepcion_valida_bd' then 705
				
		when p_funcion_parametrica = 'estado_horario_disponible_activo' then 2685
		
		when p_funcion_parametrica = 'estado_porcentaje_caso_prueba_aprobado' then 95		
		
		when p_funcion_parametrica = 'estado_sistema_contribuyente_aprobado' then 637
		
		when p_funcion_parametrica = 'estado_recepcion_anulacion_pendiente_bd' then 907
		else 0
	end);
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_estado'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_fecha_hora(p_agrupador character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Provee los identificadores del tiempo para las validaciones de las fechas
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <16/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
      v_resultado smallint;
begin	
	
	v_resultado := (case		
		when p_agrupador = 'tolerancia_fecha_emision_dias_minimo_offline' then 3
		when p_agrupador = 'tolerancia_fecha_emision_dias_maximo_offline' then 15
		when p_agrupador = 'tolerancia_fecha_emision_minuto_anterior_online' then 10
		when p_agrupador = 'tolerancia_fecha_emision_minuto_posterior_online' then 10
		when p_agrupador = 'tolerancia_fecha_emision_minuto_anterior_masivo' then 10
		when p_agrupador = 'tolerancia_fecha_emision_minuto_posterior_masivo' then 10		
		when p_agrupador = 'tolerancia_fecha_envio_recepcion_minuto_anterior' then 10
		when p_agrupador = 'tolerancia_fecha_envio_recepcion_minuto_posterior' then 10
		else 0
	end);
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_fecha_hora'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_modalidad_sistema(p_agrupador character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste modalidades 4 y 5 (Correspondiente a prevalorada electronica - 1424 y prevalorada computarizada - 1425)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 01/10/2019
AUTOR DE LA MODIFICACION : Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
   v_resultado smallint;
begin        
       v_resultado := (case             
             when p_agrupador = 'modalidad_computarizada' then 600
             when p_agrupador = 'modalidad_electronica' then 601
             when p_agrupador = 'modalidad_manual' then 602
             when p_agrupador = 'modalidad_web' then 1244
             when p_agrupador = 'modalidad_prevalorada_electronica' then 1424
             when p_agrupador = 'modalidad_prevalorada_computarizada' then 1425             
             else '0'
       end);
                           
       return v_resultado;
       
  EXCEPTION
  when others
    then
         return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_modalidad_sistema'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_nit_casos_especiales(p_agrupador character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar;
begin		
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_nit_casos_especiales'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_porcentaje_iva(p_agrupador character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar;
begin		
	v_resultado := (case 
		-- SECTOR :: COMERCIALIZACION DE HIDROCARBUROS
		when p_agrupador = 'porcentaje_ley317' then '0.70'--antes 0.30 segun inge 20190709
		when p_agrupador = 'porcentaje_iva_combustible' then '0.13' --antes 0.70 segun inge 20190709 --este porcentaje ya no se utiliza 20190823
		-- SECTOR :: JUEGOS AL AZAR
		when p_agrupador = 'porcentaje_iva_juegos_azar' then '0.30'
		when p_agrupador = 'porcentaje_iva_juegos_promociones' then '0.10'
		when p_agrupador = 'porcentaje_alicuota_juegos' then '0.15'
		-- SECTOR :: embotelladora
		when p_agrupador = 'porcentaje_iva_ice' then '0.13'
		-- SECTOR :: servicios basicos
		when p_agrupador = 'porcentaje_iva_servicios' then '0.13'
		-- SECTOR :: nota credito debito
		when p_agrupador = 'porcentaje_iva_credito_debito' then '0.13'
		
		else '0'
	end);
	
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_porcentaje_iva'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_razon_social(p_agrupador character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar;
begin		
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_nit_casos_especiales'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_tipo_sistema(p_agrupador character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
declare
	v_resultado smallint := 0;
begin
	v_resultado := (case
						when p_agrupador = 'propio' then 614
						when p_agrupador = 'proveedor' then 615						
						else 0
					end);
					
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_tipo_sistema'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_tipos_documentos(p_agrupador character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado varchar;
begin		
	v_resultado := (case		
		when p_agrupador = 'ci' then '1'
		when p_agrupador = 'nit' then '5'
		else '0'
	end);
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_par_tipos_documentos'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_par_tipos_documentos_manual(p_agrupador character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Encuentra el clasificador_id de los tipos de documentos CI y NIT, si no encuentra alguno retorna 0.
PARAMETROS INGRESO
Agrupador "CI" o "NIT"
PARAMETROS SALIDA
clasificador_id, sino lo encuentra retorna 0
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado bigint;
begin		
	v_resultado := (case		
		when p_agrupador =(select abreviatura from str_transversales.str_cps_clasificadores WHERE descripcion like 'NUMERO DE IDENTIFICACION TRIBUTARIO') then --nit
						(select clasificador_id from str_transversales.str_cps_clasificadores WHERE descripcion like 'NUMERO DE IDENTIFICACION TRIBUTARIO')
		when p_agrupador = (select abreviatura from str_transversales.str_cps_clasificadores WHERE descripcion like 'CEDULA DE IDENTIDAD') then --ci
						(select clasificador_id from str_transversales.str_cps_clasificadores WHERE descripcion like 'CEDULA DE IDENTIDAD')
		else 0
	end);
				
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion_facturacion_manual (SQLSTATE, SQLERRM, 'sre_fac_par_tipos_documentos'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_porcentaje_log_caso_pruebas_por_etapas(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Se encarga en obtener el porcentaje del consumo de los servicios. El porcentaje se lo obtendra a partir de la fecha inicio hasta la fecha actual 
PARAMETROS INGRESO
              No aplica
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <28/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/09/2019>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial> 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/09/2019>
AUTOR DE LA MODIFICACION : junior.flores
VERSION : <Numero Version secuencial> 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  De acuerdo a ordenes de Jefatura se esta quitando la visualización de la Etapa XI – Sistema Proveedor 
				 para todos los tipos de sistema PROVEEDOR.
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION :<20/04/2020>
AUTOR DE LA MODIFICACION : junior.flores
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare        
v_es_modalidad_electronica boolean;
--v_es_tipo_sistema_proveedor boolean;
v_es_etapa_concluida_antes_de_proveedores boolean;
v_numero_etapas_antes_de_proveedores integer:=12;
begin


       v_es_modalidad_electronica:=coalesce(( select true 
                                                                         from str_transversales.str_cps_clasificadores 
                                                                         where tipo_clasificador='modalidad_facturacion_id' 
                                                                         and descripcion='ELECTRONICA' 
                                                                         and clasificador_id in ( select distinct(modalidad_facturacion_id) 
                                                                                                                      from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones




                                                                                                                     where sistema_id=p_sistema_id
                                                                                                                     and estado_id='AC'
                                                                                                                 )



                                                                       ),false
                                                                     );

/*
       v_es_tipo_sistema_proveedor:=coalesce(( select true 
                                                                           from str_transversales.str_cps_clasificadores 
                                                                           where tipo_clasificador='tipo_sistema_id' and descripcion='PROVEEDOR'
                                                                           and clasificador_id = ( select tipo_sistema_id 
                                                                                                                     from sre_recaudaciones.sre_fac_sistemas 
                                                                                                                     where sistema_id=p_sistema_id
                                                                                                                     and estado_id='AC')
                                                                       ),false
                                                                     );
          */                                                           
       v_es_etapa_concluida_antes_de_proveedores:=( select case when count(1)=v_numero_etapas_antes_de_proveedores then true when count(1)=(v_numero_etapas_antes_de_proveedores-1) and v_es_modalidad_electronica=false then true else false end 
                                                                            from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas
                                                                           where prueba_etapa_certificacion_id in (1,2,3,4,5,6,7,8,9,10,11,13)
                                                                           and fecha_fin_prueba is not null
                                                                           and etapa_completada=true
                                                                           and sistema_id=p_sistema_id
                                                                           and estado_id='AC'
                                                                        );
                                                                       
       --v_es_tipo_sistema_proveedor:=v_es_tipo_sistema_proveedor and v_es_etapa_concluida_antes_de_proveedores;
       --v_es_tipo_sistema_proveedor:=true; --TODO: Se tiene que quitar para subir a PRE PRODUCCIÓN OJO!!!:..
                                                                     
    return query 
    
    select tbl.json_resultado from (
    
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_0(2850,p_sistema_id,p_nit) json_resultado, 1 orden--add 20190626
             
              union
              
              select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_obtencion_cufd(3016,p_sistema_id) json_resultado, 2 orden
           
              union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_1(2851,p_sistema_id) json_resultado, 3 orden
            
           union
            
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_2(2852, p_sistema_id)  json_resultado, 4 orden
                      
              union        
          
           select  sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_3(2853, p_sistema_id), 5 orden
          
              union        
              
           select  sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_4(2854, p_sistema_id), 6 orden
             
           union
                 
              select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_5(2855,p_sistema_id), 7 orden--add 20190718
             
           union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_6(2856, p_sistema_id)  json_resultado, 8 orden
           
           union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_7(2857,p_sistema_id), 9 orden
           
           union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_8(3069, p_sistema_id)  json_resultado, 10 orden
           
           union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_11(3141, p_sistema_id)  json_resultado, 11 orden --Etapa IX – Anulaciones    
           
           union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_10(3053, p_sistema_id)  json_resultado, 12 orden --Etapa X – Envio Masivo
           
           --union
           
           --select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_9(3052, p_sistema_id, 0)  json_resultado, 13 orden
           
           union
           
           select sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_12(3142, p_sistema_id)  json_resultado, 14 orden
                           
                                                              ) tbl where case when v_es_modalidad_electronica!=true then orden!=9 else 1=1 end
                                                                      --and case when v_es_tipo_sistema_proveedor!=true then orden!=13 else 1=1 end
                                                                      order by orden;

       EXCEPTION
                when others
                  then
                    RAISE INFO 'Error Name:%', SQLERRM;
                    RAISE INFO 'Error State:%', SQLSTATE;
              
                    return query select cast('error validacion recepcion' as varchar), cast(-1 as smallint);
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_calcular_porcentaje_total_etapa_9(p_sistema_id bigint)
 RETURNS TABLE(porcentaje_etapa integer, total_nits integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Calcula el porcentaje total de la etapa proveedor
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema. 
    p_etapa : Identificador de la etapa
PARAMETROS SALIDA
    tabla con los totales de la etapa (total de pruebas, total de pruebas exitosas, total de pruebas pendientes, porcentaje de la etapa)
SUBSISTEMA : Facturación
FECHA CREACION : <18/09/2019>
AUTOR : Victor Cruz Gomez
VERSION : 1.0
**************************************************************************************************************************************************/

declare		
	v_porcentaje_total_nits integer:=0;
	v_porcentaje_total integer:=0;
	v_porcentaje_etapa integer:=0;
	v_total_nits integer:=0;			
begin	
	select sum(sre_recaudaciones.sre_fac_obtener_porcentaje_casos_prueba_etapa_9_por_nit(proveedor.nit, p_sistema_id)) porcentaje_total_nits, count(*) as total_nits into v_porcentaje_total_nits, v_total_nits
	from sre_recaudaciones.sre_fac_nits_pruebas_proveedores proveedor
	inner join sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor asignados
	on proveedor.nit_prueba_proveedor_id=asignados.nit_prueba_proveedor_id
	where sistema_id_proveedor=p_sistema_id
	and proveedor.estado_id = 'AC'
	and asignados.estado_id = 'AC';	
	
	v_porcentaje_total := v_total_nits * 100;
	
	v_porcentaje_etapa := ((v_porcentaje_total_nits * 100)/v_porcentaje_total); 							
	
	v_porcentaje_etapa := case	
							when v_porcentaje_etapa>=100 then 100
							when v_porcentaje_etapa<=0 then 0
							else v_porcentaje_etapa
						  end;	
	
	return QUERY
		(			
			select v_porcentaje_etapa, v_total_nits  
			
		);
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_calcular_porcentaje_total_etapa_9');
			return;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_calcular_totales_etapa_x(p_sistema_id bigint, p_etapa integer, p_nit bigint)
 RETURNS TABLE(totalcasospruebas integer, totalcasospruebasexitosos integer, totalcasospruebapendientes integer, porcentajeetapa integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Calcula los total de una etapa cualquiera.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema. 
    p_etapa : Identificador de la etapa
PARAMETROS SALIDA
    tabla con los totales de la etapa (total de pruebas, total de pruebas exitosas, total de pruebas pendientes, porcentaje de la etapa)
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_totalcasospruebas integer:=0; 
	v_totalcasospruebasexitosos integer:=0; 
	v_totalcasospruebapendientes integer:=0; 
	v_porcentajeetapa integer:=0;
	
	
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
	
	v_total_casos_pruebas integer:=0;
	v_total_casos_pruebas_logs integer:=0;
	v_porcentaje integer:=0;	
begin	
	v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa_2(p_sistema_id, 'I');
	v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa_2(p_sistema_id, 'F');

	drop table if exists tbl_etapa_x;		 
	create temp table tbl_etapa_x(
			estadomatch integer, 
			opcional smallint,
			totalpruebasesperadas integer, 
			totalpruebascorrectas integer,
			totalpruebasincorrectas integer,
			porcentajecasoprueba integer
			);
				
	case 
		when p_etapa=2852 then --Etapa 2 - Validaciones XML/XSD
			select  
			total_casos_pruebas,
			total_casos_pruebas_exitosos,
			total_casos_pruebas_pendientes,
			porcentaje_etapa into
			v_totalcasospruebas,
			v_totalcasospruebasexitosos,
			v_totalcasospruebapendientes,
			v_porcentajeetapa
			from sre_recaudaciones.sre_fac_pru_calcular_totales_por_etapa(p_sistema_id, p_etapa);
			
		when p_etapa=3069 then --Etapa 8 - Gestion de sucrusales
			select  
			total_casos_pruebas,
			total_casos_pruebas_exitosos,
			total_casos_pruebas_pendientes,
			porcentaje_etapa into
			v_totalcasospruebas,
			v_totalcasospruebasexitosos,
			v_totalcasospruebapendientes,
			v_porcentajeetapa
			from sre_recaudaciones.sre_fac_pru_calcular_totales_por_etapa(p_sistema_id, p_etapa);	
			
		when p_etapa=2856 then  --Etapa 6 - Paquetes
			select  
			total_casos_pruebas,
			total_casos_pruebas_exitosos,
			total_casos_pruebas_pendientes,
			porcentaje_etapa into
			v_totalcasospruebas,
			v_totalcasospruebasexitosos,
			v_totalcasospruebapendientes,
			v_porcentajeetapa
			from sre_recaudaciones.sre_fac_pru_calcular_totales_por_etapa(p_sistema_id, p_etapa);
			
		when p_etapa=3052 then  --Etapa proveedor							
			select porcentaje_etapa, total_nits into v_porcentajeetapa, v_totalcasospruebas 
			from sre_recaudaciones.sre_fac_pru_calcular_porcentaje_total_etapa_9(p_sistema_id);
			
			v_totalcasospruebasexitosos:=0;
			v_totalcasospruebapendientes:=0;																	
		else 
			v_totalcasospruebas := 0; 
			v_totalcasospruebasexitosos :=0; 
			v_totalcasospruebapendientes :=0; 
			v_porcentajeetapa :=0;	
	end case;
	v_porcentajeetapa := (select sre_recaudaciones.sre_fac_actualiza_pruebas_certificacion_sistemas(v_porcentajeetapa,p_sistema_id,p_etapa));		 							
	
	return QUERY
			(			
				select  coalesce(v_totalcasospruebas, 0) , 
						coalesce(v_totalcasospruebasexitosos,0), 
						coalesce(v_totalcasospruebapendientes,0), 
						coalesce(v_porcentajeetapa,0) 						 					
			);
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_calcular_totales_etapa_x');
			return;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_calcular_totales_por_etapa(p_sistema_id bigint, p_etapa integer)
 RETURNS TABLE(total_casos_pruebas integer, total_casos_pruebas_exitosos integer, total_casos_pruebas_pendientes integer, porcentaje_etapa integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Calcula los total de una etapa cualquiera.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema. 
    p_etapa : Identificador de la etapa
PARAMETROS SALIDA
    tabla con los totales de la etapa (total de pruebas, total de pruebas exitosas, total de pruebas pendientes, porcentaje de la etapa)
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciona la validacion para solo considerara sectores dentro de las fechas de pruebas.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/09/2019>
AUTOR DE LA MODIFICACION : :<vcg>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_total_casos_pruebas integer:=0; 
	v_total_casos_pruebas_exitosos integer:=0; 
	v_total_casos_pruebas_pendientes integer:=0; 
	v_porcentaje_etapa integer:=0;
	
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
	
	v_suma_total_casos_pruebas integer:=0;
	v_suma_total_casos_pruebas_logs integer:=0;	
		
begin	

	drop table if exists tbl_totales_logs;		 
	create temp table tbl_totales_logs (documento_sector_id int4, hash varchar, total_log integer, total_pruebas integer, porcentaje integer);	
	
	case
	when p_etapa=2852 then  --Etapa 2 - Validaciones XML/XSD
			v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa, p_sistema_id, 'I');
			v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa, p_sistema_id, 'F');
							
			--Nota: La tabla almacena los "casos de prueba" y la "cantidad de veces" que fueron emparejados.		
			insert into tbl_totales_logs (documento_sector_id, hash, total_log, total_pruebas, porcentaje)
			(
				select LOGS.documento_sector_id, LOGS.hash,  COUNT(LOGS.*) as total_log, pruebas.total_pruebas, 0 as porcentaje
				from sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd PRUEBAS								
				on (LOGS.hash=PRUEBAS.hash and LOGS.documento_sector_id=PRUEBAS.documento_sector_id) 
				where LOGS.sistema_id=p_sistema_id and 
				LOGS.estado_match=1 and
				LOGS.estado_id='AC' and
				PRUEBAS.estado_id='AC' and
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
				PRUEBAS.documento_sector_id in (
													select CLA.codigo_clasificador 
													from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOC inner join sre_recaudaciones.sre_fac_clasificadores CLA 
													on DOC.tipo_documento_factura_id=CLA.codigo_clasificador_equivalente			
													where DOC.sistema_id=p_sistema_id and
														DOC.estado_id='AC' and 
														CLA.estado_id='AC' and 
														DOC.estado_tipo_documento_sistema_id = 1380 and
														DOC.fecha_ultima_modificacion <= v_fecha_inicio_etapa
													)
				group by LOGS.documento_sector_id, LOGS.hash, pruebas.total_pruebas				
			);
												
			--Nota: Limpiando los "totales de los casos de pruebas" que sobre pasa la "cantidad de pruebas definidos" para cada caso.						
			update tbl_totales_logs
			set total_log =(case 
								when tbl_totales_logs.total_log >= tbl_totales_logs.total_pruebas then tbl_totales_logs.total_pruebas
								else tbl_totales_logs.total_log
							end);

			--Nota: Obteniendo el procentaje por cada caso de prueba
			update tbl_totales_logs
			set porcentaje=(total_log*100)/total_pruebas;
											
			--Nota: Calculo de la cantidad de pruebas de la etapa					
			v_total_casos_pruebas := (
				select count(*)
				from sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd PRUEBAS				
				where PRUEBAS.estado_id='AC' and
				PRUEBAS.documento_sector_id in (	select CLA.codigo_clasificador 
													from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOC inner join sre_recaudaciones.sre_fac_clasificadores CLA 
													on DOC.tipo_documento_factura_id=CLA.codigo_clasificador_equivalente			
													where DOC.sistema_id=p_sistema_id and
														DOC.estado_id='AC' and 
														CLA.estado_id='AC' and 
														DOC.estado_tipo_documento_sistema_id = 1380 and
														DOC.fecha_ultima_modificacion <= v_fecha_inicio_etapa
											 )
			);  
										
			--Nota: Calculo de la cantidad de casos de prueba "exitosos" de la etapa
			v_total_casos_pruebas_exitosos :=(			
				select count(*)
				from tbl_totales_logs
				where porcentaje=100								
			);
			
			--Nota: Obtiene la suma total por caso de prueba de la tabla "CASOS DE PRUEBA"
			select sum(total_pruebas)  into v_suma_total_casos_pruebas
			from tbl_totales_logs;							
				
			--Nota: Obtiene la suma total por caso de prueba de la tabla "LOGS"
			select sum(total_log)  into v_suma_total_casos_pruebas_logs 
			from tbl_totales_logs;
			
			--Nota: Obtiene porcentaje total de la etapa 
			select sum(porcentaje)/v_total_casos_pruebas  into v_porcentaje_etapa 
			from tbl_totales_logs;
						
			--Nota: Calculo de la cantidad de casos de pruebas pendientes.
			v_total_casos_pruebas_pendientes :=v_total_casos_pruebas - v_total_casos_pruebas_exitosos;
						
			
			
			
		when p_etapa=3069 then --Etapa 8 - Gestion de sucursales
			v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa, p_sistema_id, 'I');
			v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa, p_sistema_id, 'F');	
			
			--Nota: La tabla almacena los "casos de prueba" y la "cantidad de veces" que fueron emparejados.		
			insert into tbl_totales_logs (documento_sector_id, hash, total_log, total_pruebas, porcentaje)	
			(										
				select 0::int4, LOGS.hash,  COUNT(LOGS.*) as total_log, pruebas.total_pruebas, 0 as porcentaje
				from sre_recaudaciones.sre_fac_log_8_gestion_sucursales LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_8_gestion_sucursales PRUEBAS
				on (LOGS.hash=PRUEBAS.hash) 
				where LOGS.sistema_id= p_sistema_id and 
				LOGS.estado_match=1 and
				LOGS.estado_id='AC' and
				PRUEBAS.estado_id='AC'  and
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa
				group by 0::int4, LOGS.hash, pruebas.total_pruebas
			);
				
			--Nota: Limpiando los "totales de los casos de pruebas" que sobre pasa la "cantidad de pruebas definidos" para cada caso.						
			update tbl_totales_logs
			set total_log =(case 
								when tbl_totales_logs.total_log >= tbl_totales_logs.total_pruebas then tbl_totales_logs.total_pruebas
								else tbl_totales_logs.total_log
							end);

			--Nota: Obteniendo el procentaje por cada caso de prueba
			update tbl_totales_logs
			set porcentaje=(total_log*100)/total_pruebas;
											
			--Nota: Calculo de la cantidad de pruebas de la etapa					
			v_total_casos_pruebas := (
				select count(*)
				from sre_recaudaciones.sre_fac_casos_prueba_8_gestion_sucursales PRUEBAS				
				where PRUEBAS.estado_id='AC'
			);  
										
			--Nota: Calculo de la cantidad de casos de prueba "exitosos" de la etapa
			v_total_casos_pruebas_exitosos :=(			
				select count(*)
				from tbl_totales_logs
				where porcentaje=100								
			);
			
			--Nota: Obtiene la suma total por caso de prueba de la tabla "CASOS DE PRUEBA"
			select sum(total_pruebas)  into v_suma_total_casos_pruebas
			from tbl_totales_logs;							
				
			--Nota: Obtiene la suma total por caso de prueba de la tabla "LOGS"
			select sum(total_log)  into v_suma_total_casos_pruebas_logs 
			from tbl_totales_logs;
			
			--Nota: Obtiene porcentaje total de la etapa 
			select sum(porcentaje)/v_total_casos_pruebas  into v_porcentaje_etapa 
			from tbl_totales_logs;
						
			--Nota: Calculo de la cantidad de casos de pruebas pendientes.
			v_total_casos_pruebas_pendientes :=v_total_casos_pruebas - v_total_casos_pruebas_exitosos;
						
								
			
		when p_etapa=2856 then --Etapa 6 - Paquetes
			v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa, p_sistema_id, 'I');
			v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa, p_sistema_id, 'F');	
			
			--Nota: La tabla almacena los "casos de prueba" y la "cantidad de veces" que fueron emparejados.		
			insert into tbl_totales_logs (documento_sector_id, hash, total_log, total_pruebas, porcentaje)	
			(										
				select 0::int4, LOGS.hash,  COUNT(LOGS.*) as total_log, pruebas.total_pruebas, 0 as porcentaje
				from sre_recaudaciones.sre_fac_log_6_envio_paquetes LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_6_envio_paquetes PRUEBAS
				on (LOGS.hash=PRUEBAS.hash) 
				where LOGS.sistema_id= p_sistema_id and 
				LOGS.estado_match=1 and
				LOGS.estado_id='AC' and
				PRUEBAS.estado_id='AC'  and
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa
				group by 0::int4, LOGS.hash, pruebas.total_pruebas
			);
				
			--Nota: Limpiando los "totales de los casos de pruebas" que sobre pasa la "cantidad de pruebas definidos" para cada caso.						
			update tbl_totales_logs
			set total_log =(case 
								when tbl_totales_logs.total_log >= tbl_totales_logs.total_pruebas then tbl_totales_logs.total_pruebas
								else tbl_totales_logs.total_log
							end);

			--Nota: Obteniendo el procentaje por cada caso de prueba
			update tbl_totales_logs
			set porcentaje=(total_log*100)/total_pruebas;
											
			--Nota: Calculo de la cantidad de pruebas de la etapa					
			v_total_casos_pruebas := (
				select count(*)
				from sre_recaudaciones.sre_fac_casos_prueba_6_envio_paquetes PRUEBAS				
				where PRUEBAS.estado_id='AC'
			);  
										
			--Nota: Calculo de la cantidad de casos de prueba "exitosos" de la etapa
			v_total_casos_pruebas_exitosos :=(			
				select count(*)
				from tbl_totales_logs
				where porcentaje=100								
			);
			
			--Nota: Obtiene la suma total por caso de prueba de la tabla "CASOS DE PRUEBA"
			select sum(total_pruebas)  into v_suma_total_casos_pruebas
			from tbl_totales_logs;							
				
			--Nota: Obtiene la suma total por caso de prueba de la tabla "LOGS"
			select sum(total_log)  into v_suma_total_casos_pruebas_logs 
			from tbl_totales_logs;
			
			--Nota: Obtiene porcentaje total de la etapa 
			select sum(porcentaje)/v_total_casos_pruebas  into v_porcentaje_etapa 
			from tbl_totales_logs;
						
			--Nota: Calculo de la cantidad de casos de pruebas pendientes.
			v_total_casos_pruebas_pendientes :=v_total_casos_pruebas - v_total_casos_pruebas_exitosos;
						
								
														
	end case;		
				 							
	return QUERY
			(			
				select 	v_total_casos_pruebas, 
						v_total_casos_pruebas_exitosos, 
						v_total_casos_pruebas_pendientes, 
						v_porcentaje_etapa 						 					
			);
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_calcular_totales_por_etapa');
			return;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_calcular_totales_por_paquete(p_tipo_documento_sector_id integer, p_codigo_recepcion_paquete bigint)
 RETURNS TABLE(total integer, total_validos integer, total_invalidos integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene total registros del paquete, total validos, total invalidos
PARAMETROS INGRESO
    p_tipo_documento_sector_id
    p_codigo_recepcion_paquete
PARAMETROS SALIDA
    total, total_validos, total_invalidos
SUBSISTEMA : Facturación
FECHA CREACION : <07/09/2019>
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION : <dd/mm/yyyy>
AUTOR DE LA MODIFICACION : <autor>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='0';
	v_total integer:=0;
	v_total_validos integer:=0;
	v_total_invalidos integer:=0;		
	
begin			
			
		v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_contar_recepciones_correctas(p_tipo_documento_sector_id);		
		if v_sql != '0' then		
			execute v_sql using p_codigo_recepcion_paquete, 'AC' into v_total_validos;
		end if;
		
		v_total_invalidos := coalesce((select count(*) from sre_recaudaciones.sre_fac_recepciones_errores
										where recepcion_paquete_id = p_codigo_recepcion_paquete 
										and tipo_documento_sector_id = p_tipo_documento_sector_id 
										and estado_id = 'AC'),
										0); 

		v_total := v_total_validos + v_total_invalidos;
		return QUERY
		(			
			select 
			v_total::integer,
			v_total_validos::integer,
			v_total_invalidos::integer 			
		);
						
	EXCEPTION
	  when others
	    then		  
			perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_calcular_totales_por_paquete');
			return;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_2(p_json_factura json, p_json_resultado_validacion json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera los objetos json de la factura y resultado de validacion. Los objetos json recuperados permitiran 
				obtener ciertos valores de la factura y codigos de errores para su posterior almacenamiento en la tabla de logs correspondiente 
				a la etapa 2. 
				El formato de codigo hash_descripcion establecido para la etapa 2 es: "codigoTipoDocumentoIdentidad|19|1|-"   
PARAMETROS INGRESO
    p_json_factura : Objeto json de la factura.
	p_json_resultado_validacion: Objeto json que contiene el resultado de la validacion de la factura.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
	v_etapa integer:=2852;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
	
	v_ha_iniciado_etapa boolean:=false; --*
	
	p_sistema_id bigint:=0;
	p_id_recepcion bigint:=0;
	p_tipo_emision integer:=0;
	p_tipo_documento_sector_id integer:=0;
	p_tipo_documento_fiscal_id integer:=0;
	p_valor_parametro varchar:='';
	p_parametro_entrada varchar:=''; 
	p_resultado_esperado integer:=0;
	p_hash_descripcion varchar(1000):='';
	p_hash varchar:='';	
	p_nit bigint:=0; --TODO: obtener el nit del json
	i json;
begin
	p_sistema_id :=sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_json_factura->'xmlRecepcionGenerica'->>'p_codigo_sistema');	
	p_nit := (p_json_factura->'xmlRecepcionGenerica'->>'p_nit');

	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa_proveedor); --*
	
	v_ha_iniciado_etapa:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa); --*
	
	--Nota: Verificar si el contribuyente ha iniciado la etapa de pruebas (1=Si ha iniciado; 0=No ha iniciado)		
	if (v_ha_iniciado_etapa or  v_ha_iniciado_etapa_proveedor) then --*
		p_id_recepcion :=coalesce((p_json_factura->'xmlRecepcionGenerica'->>'v_recepcionId')::bigint, 0);
		p_tipo_emision :=(p_json_factura->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
		p_tipo_documento_sector_id :=(p_json_factura->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
		p_tipo_documento_fiscal_id :=(p_json_factura->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		
	
		--Nota: Obtiene los nombres de validaciones y codigos de error
		for i in select * from json_array_elements(p_json_resultado_validacion->'resultados')
		loop
			p_parametro_entrada :=(i->>'nombre_funcion_validacion'); --Nombre de la funcion de validacion. json errores.
			p_resultado_esperado :=(i->>'resultado_ejecucion'); --Resultado devuelvo por la funcion de validacion. json errores. 
	
			--Nota: Obtiene valores de los parametros de entrada para los casos de prueba: nombreRazonSocial,numeroDocumento. 
			--Es necesario obtener los parametros para diferenciar las pruebas de la bateria de prueas etapa 2.		
			case
				when p_parametro_entrada='sre_fac_val_nombre_razon_social' then
					 p_valor_parametro :=(p_json_factura->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial')::varchar;			
					 p_valor_parametro := UPPER(TRIM(unaccent(p_valor_parametro)));
				when p_parametro_entrada='sre_fac_val_numero_documento' then
					 p_valor_parametro :=(p_json_factura->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
					 p_valor_parametro :=UPPER(TRIM(p_valor_parametro));
				else
					p_valor_parametro :='-';	
			end case;	
			
			--Nota: formato del hash_decripcion: "sre_fac_val_codigo_documento_fiscal|1000|2|-"
			p_hash_descripcion := concat_ws('|', TRIM(p_parametro_entrada),TRIM(p_resultado_esperado::varchar),TRIM(p_tipo_emision::varchar),TRIM(p_valor_parametro));
			p_hash := md5(p_hash_descripcion);
													
			if (v_ha_iniciado_etapa) then			
				perform sre_recaudaciones.sre_fac_pru_crud_log_2_validacion_generales_xml_xsd(p_sistema_id, p_hash, p_hash_descripcion, p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_id_recepcion);
			end if;									

			--Nota: La siguiente intruccion permite verificar si la prueba corresponde a un proveedor. Si el resultado es cero quiere decir que el sistema es PROPIO			
			if (v_ha_iniciado_etapa_proveedor) then --*
				perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
						 p_sistema_id,
						 p_nit,
						 p_hash,
						 p_hash_descripcion,
						 p_tipo_documento_fiscal_id,
						 p_tipo_documento_sector_id,
						 'VALIDACION XML-XSD',
						 p_id_recepcion
				);				
			end if;
																						
		end loop;
		
		v_resultado:=1;							
	else
		v_resultado:=0;		
	end if;
		
	return v_resultado;
			
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_2');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_2'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_2_sugerido(p_sistema_id bigint, p_nro character varying, p_tipo_prueba character varying, p_tipo_emision character varying, p_parametro_entrada character varying, p_documento_sector character varying, p_accion character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo que permite guardar si un caso de prueba fue checado o no.    
PARAMETROS INGRESO
	p_sistema_id : identificador del sistema de facturacion.
	p_nro : nro de caso de prueba.
	p_tipo_prueba : tipo de prueba (Sugerido/obligatorio).
	p_tipo_emision : tipo de emision (Online/offline).
	p_parametro_entrada : parametro de entrada del caso de prueba. 
	p_documento_sector : documento sector al que pertenece el caso de prueba.
	p_accion : Se refiere si el caso de prueba fue checado o no.	
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
	v_etapa integer:=2852;

	p_hash_descripcion varchar:='';
	p_hash varchar:='';
	p_documento_fiscal_id integer:=0; 
	p_documento_sector_id integer:=0;	
	p_id_recepcion bigint:=0;
	
	v_nro varchar:='-';
begin				
	if (sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa)) then
				
		case
			when p_accion='CHECADO' then
				p_documento_fiscal_id :=0; 
				p_documento_sector_id := coalesce((select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO SECTOR' and 	descripcion = UPPER(TRIM(p_documento_sector))),0);  
				p_id_recepcion :=0;
				
				select 
				hash, 
				hash_descripcion
				into 
				p_hash,
				p_hash_descripcion
				from sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd
				where opcional=1 and
				split_part(caso_prueba::varchar, '|',1)=p_nro and
				split_part(caso_prueba::varchar, '|',9)=p_tipo_emision and
				documento_sector_id=p_documento_sector_id;
				
				p_hash:=coalesce(p_hash,'-'); 
				p_hash_descripcion:=coalesce(p_hash_descripcion,'-');

				INSERT INTO sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
				(
				sistema_id,
				hash, 
				hash_descripcion, 
				estado_match, 
				caso_prueba_id, 
				documento_fiscal_id, 
				documento_sector_id, 
				fecha_prueba, 
				id_recepcion, 
				estado_id, 
				fecha_registro, 
				fecha_ultima_modificacion,
				usuario_registro_id, 
				usuario_ultima_modificacion
				)
				VALUES(
				p_sistema_id, 
				p_hash, 
				p_hash_descripcion,
				1, 
				null, 
				p_documento_fiscal_id, 
				p_documento_sector_id, 
				now(),  
				p_id_recepcion, 
				'AC', 
				now(), 
				now(), 
				1000,
				1000
				);
				
				v_resultado:=1;
			
			when p_accion='NO_CHECADO' then
				update sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
				set estado_id='AN',
				fecha_ultima_modificacion=now()
				where hash=p_hash and estado_id='AC';
				v_resultado:=1;
			else
				v_resultado:=0;
		end case;							
	end if;
		
	return v_resultado;
			
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_2_sugerido');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_2_sugerido'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_3(p_sistema_id bigint, p_codigo_ambiente integer, p_codigo_sistema character varying, p_nit bigint, p_cuis character varying, p_sucursal integer, p_punto_venta integer, p_agrupador character varying, p_autorizacion bigint, p_envio integer, p_transaccion boolean, p_mensaje integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo que registra los logs segun los datos enviados para la sincronizacion de catalogos 
				para su posterior almacenamiento en la tabla de logs correspondiente a la etapa 3. 
PARAMETROS INGRESO
    p_sistema_id: Identificador del sistema registrado
    p_codigo_ambiente: Identificador del código ambiente
	p_codigo_sistema: Código del sistema que va a sincronizar 
	p_nit: Número de NIT del contribuyente asociado al sistema 
	p_cuis: Código CUIS del sistema que va a sincronizar 
	p_sucursal: Sucursal que va a sincronizar 
	p_punto_venta: Numero de punto de venta que va a sincronizar
	p_agrupador: Grupo al q pertenece el registro (Leyendas, mensajes, etc)
	p_autorizacion: Codigo de autorizacion de sincronizacion total
	p_envio: Si es Total o Parcial
	p_transaccion: Si la transacción de sincronizacion fue exitosa o no
	p_mensaje: Indica si esta ya actualizado el sistema (Codigo 92)
PARAMETROS SALIDA
    Retorma 1 si la operacion se realizó con exito y 0 cuando no realizó ninguna operación
SUBSISTEMA : Facturación
FECHA CREACION : 30/07/2019
AUTOR : Ivan Salas
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_tipo_prueba varchar;
	v_codigo_ambiente varchar;
	v_codigo_sistema varchar;
	v_nit varchar;
	v_cuis varchar;
	v_sucursal varchar;
	v_punto_venta varchar;
	v_autorizacion varchar;
	v_resultado varchar;
	
	v_hash varchar;
	v_hash_descripcion varchar;
	v_etapa_iniciado smallint := 0;
	v_respuesta smallint := 0;
	v_operacion bool := true;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
	
begin	
	--Nota: Verificar si el contribuyente ha iniciado la etapa de pruebas (1=Si ha iniciado; 0=No ha iniciado)
	v_etapa_iniciado := coalesce(
		 ( select 1 
			 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
			   on PRU.prueba_etapa_certificacion_id = ETA.prueba_etapa_certificacion_id
			where PRU.estado_id = 'AC' 
			  and PRU.sistema_id = p_sistema_id 
			  and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is null) 
			  and ETA.etapa_certificacion_sistemas_id = 2853 --Etapa 3
			  and ETA.estado_id = 'AC'
			limit 1),
		  0);
	
	if (v_etapa_iniciado = 1) then
		if (p_transaccion = true) then
			v_tipo_prueba := 'OBLIGATORIA';
			if p_mensaje = 92 then
				v_resultado := 'Ya está actualizado';
			else
				if p_envio = 1 then
					v_resultado := 'Listado Total';
				else
					v_resultado := 'Listado Parcial';
				end if;
			end if;
			v_operacion := false;
		else
			v_tipo_prueba := 'SUGERIDA';
		end if;
		
		if p_codigo_ambiente is null then
			v_codigo_ambiente := 'null';
		else
			v_codigo_ambiente := p_codigo_ambiente;
		end if;
		
		if v_operacion = true then
			if v_codigo_ambiente in ('null','0','3') then
				v_resultado := 'Código de ambiente inválido/ Código 1 = Ambiente Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_codigo_sistema is not null then
			if p_codigo_sistema != '1808D8C24EF-808D8C24EF' then
				v_codigo_sistema := 'su código de sistema';
			else 
				v_codigo_sistema := p_codigo_sistema;
			end if;
		else
			v_codigo_sistema := 'null';
		end if;
		
		if v_operacion = true then
			if v_codigo_sistema in ('null','1808D8C24EF-808D8C24EF') then
				v_resultado := 'Código de sistema  inválido / Código 2 = Código de Sistema Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_nit is not null then
			if p_nit in (100357902810035,0) then
				v_nit := p_nit;
			else 
				v_nit := 'su NIT';
			end if;
		else
			v_nit := 'null';
		end if;
		
		if v_operacion = true then
			if v_nit in ('null','0','100357902810035') then
				v_resultado := 'NIT inválido / Código 9 = NIT inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_cuis is not null then
			if p_cuis != '12D270CA12D270CA12D270CA12D270CA12D270CA' then
				v_cuis := 'su cuis de prueba';
			else 
				v_cuis := p_cuis;
			end if;
		else
			v_cuis := 'null';
		end if;
		
		if v_operacion = true then
			if v_cuis in ('null','12D270CA12D270CA12D270CA12D270CA12D270CA') then
				v_resultado := 'CUIS inválido / Código 3 = Código Único de Inicio de Sistema (CUIS) Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_sucursal is null then
			v_sucursal = 'null';
		else
			v_sucursal := p_sucursal;
		end if;
		
		if v_operacion = true then
			if v_sucursal in ('null','10000','-1') then
				v_resultado := 'Sucursal inválida / Código 8 = Sucursal inválida';
				v_operacion := false;
			end if;
		end if;
		
		if p_punto_venta is null or p_punto_venta = 0 then
			v_punto_venta := 'null / 0';
		else
			v_punto_venta := p_punto_venta;
		end if;
		
		if v_operacion = true then
			if v_punto_venta in ('10000','-1') then
				v_resultado := 'Punto de Venta inválido / Código 82 = Punto de venta inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_autorizacion is null or p_autorizacion = 0 then
			v_autorizacion := 'null / 0';
		else
			v_autorizacion := p_autorizacion;
		end if;
		
		v_hash_descripcion := v_tipo_prueba||'|'||v_codigo_ambiente||'|'||v_codigo_sistema||'|'||v_nit||'|'||v_cuis||'|'||v_sucursal||'|'||v_punto_venta||'|'||v_autorizacion||'|'||v_resultado;
		v_hash := (select md5(v_tipo_prueba||'|'||v_codigo_ambiente||'|'||v_codigo_sistema||'|'||v_nit||'|'||v_cuis||'|'||v_sucursal||'|'||v_punto_venta||'|'||v_autorizacion||'|'||v_resultado));
		

		INSERT INTO sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo
		(sistema_id, hash, hash_descripcion, agrupador, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(p_sistema_id, v_hash, v_hash_descripcion, p_agrupador, 0, null, now(), 0, 'AC', now(), now(), 1000, 1000);			
		
		v_respuesta := 1;
				
	else
		v_respuesta := 0;		
	end if;
	return v_respuesta;
EXCEPTION
	when others then		  
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_3');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_3'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_4(p_sistema_id bigint, p_codigo_ambiente integer, p_codigo_sistema character varying, p_nit bigint, p_cuis character varying, p_sucursal integer, p_punto_venta integer, p_transaccion boolean)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo que registra los logs segun los datos enviados para la sincronizacion de fecha y hora 
				para su posterior almacenamiento en la tabla de logs correspondiente a la etapa 4. 
PARAMETROS INGRESO
    p_sistema_id: Identificador del sistema registrado
    p_codigo_ambiente: Identificador del código ambiente
	p_codigo_sistema: Código del sistema que va a sincronizar 
	p_nit: Número de NIT del contribuyente asociado al sistema 
	p_cuis: Código CUIS del sistema que va a sincronizar 
	p_sucursal: Sucursal que va a sincronizar 
	p_punto_venta: Numero de punto de venta que va a sincronizar
	p_transaccion: Si la transacción de sincronizacion fue exitosa o no
PARAMETROS SALIDA
    Retorma 1 si la operacion se realizó con exito y 0 cuando no realizó ninguna operación
SUBSISTEMA : Facturación
FECHA CREACION : 08/07/2019
AUTOR : Ivan Salas
VERSION : 1.0
**************************************************************************************************************************************************/
declare	
	
	v_tipo_prueba varchar;
	v_codigo_ambiente varchar;
	v_codigo_sistema varchar;
	v_nit varchar;
	v_cuis varchar;
	v_sucursal varchar;
	v_punto_venta varchar;
	v_resultado varchar;
	
	v_hash varchar;
	v_hash_descripcion varchar;
	v_etapa_iniciado smallint := 0;
	v_respuesta smallint := 0;
	v_operacion bool := true;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
begin
	--Nota: Verificar si el contribuyente ha iniciado la etapa de pruebas (1=Si ha iniciado; 0=No ha iniciado)
	v_etapa_iniciado:=coalesce(
		 ( select 1 
			 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
			   on PRU.prueba_etapa_certificacion_id = ETA.prueba_etapa_certificacion_id
			where PRU.estado_id = 'AC' 
			  and PRU.sistema_id = p_sistema_id 
			  and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is null) 
			  and ETA.etapa_certificacion_sistemas_id = 2854 --Etapa 4
			  and ETA.estado_id = 'AC'
			limit 1),
		  0);
	
	if (v_etapa_iniciado=1) then
		if (p_transaccion = true) then
			v_tipo_prueba := 'OBLIGATORIA';
			v_resultado := 'Fecha y Hora';
			v_operacion := false;
		else
			v_tipo_prueba := 'SUGERIDA';
		end if;
		
		if p_codigo_ambiente is null then
			v_codigo_ambiente := 'null';
		else
			v_codigo_ambiente := p_codigo_ambiente;
		end if;
		
		if v_operacion = true then
			if v_codigo_ambiente in ('null','0','3') then
				v_resultado := 'Código de ambiente inválido/ Código 1 = Ambiente Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_codigo_sistema is not null then
			if p_codigo_sistema != '1808D8C24EF-808D8C24EF' then
				v_codigo_sistema := 'su código de sistema';
			else 
				v_codigo_sistema := p_codigo_sistema;
			end if;
		else
			v_codigo_sistema := 'null';
		end if;
		
		if v_operacion = true then
			if v_codigo_sistema in ('null','1808D8C24EF-808D8C24EF') then
				v_resultado := 'Código de sistema  inválido / Código 2 = Código de Sistema Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_nit is not null then
			if p_nit in (100357902810035,0) then
				v_nit := p_nit;
			else 
				v_nit := 'su NIT';
			end if;
		else
			v_nit := 'null';
		end if;
		
		if v_operacion = true then
			if v_nit in ('null','0','100357902810035') then
				v_resultado := 'NIT inválido / Código 9 = NIT inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_cuis is not null then
			if p_cuis != '12D270CA12D270CA12D270CA12D270CA12D270CA' then
				v_cuis := 'su cuis de prueba';
			else 
				v_cuis := p_cuis;
			end if;
		else
			v_cuis := 'null';
		end if;
		
		if v_operacion = true then
			if v_cuis in ('null','12D270CA12D270CA12D270CA12D270CA12D270CA') then
				v_resultado := 'CUIS inválido / Código 3 = Código Único de Inicio de Sistema (CUIS) Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_sucursal is null then
			v_sucursal = 'null';
		else
			v_sucursal := p_sucursal;
		end if;
		
		if v_operacion = true then
			if v_sucursal in ('null','10000','-1') then
				v_resultado := 'Sucursal inválida / Código 8 = Sucursal inválida';
				v_operacion := false;
			end if;
		end if;
		
		if p_punto_venta is null or p_punto_venta = 0 then
			v_punto_venta := 'null / 0';
		else
			v_punto_venta := p_punto_venta;
		end if;
		
		if v_operacion = true then
			if v_punto_venta in ('10000','-1') then
				v_resultado := 'Punto de Venta inválido / Código 82 = Punto de venta inválido';
				v_operacion := false;
			end if;
		end if;
		
		v_hash_descripcion := v_tipo_prueba||'|'||v_codigo_ambiente||'|'||v_codigo_sistema||'|'||v_nit||'|'||v_cuis||'|'||v_sucursal||'|'||v_punto_venta||'|'||v_resultado;
		v_hash := (select md5(v_tipo_prueba||'|'||v_codigo_ambiente||'|'||v_codigo_sistema||'|'||v_nit||'|'||v_cuis||'|'||v_sucursal||'|'||v_punto_venta||'|'||v_resultado));
		
		INSERT INTO sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(p_sistema_id, v_hash, v_hash_descripcion, 0, null, now(), 0, 'AC', now(), now(), 1000, 1000);
							
		v_respuesta := 1;
								
	else
		v_respuesta := 0;		
	end if;
	return v_respuesta;
EXCEPTION
	when others then		  
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_4');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_4'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_6(p_json_varchar character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera los objetos json de la factura y resultado de validacion. Los objetos json recuperados permitiran 
				obtener ciertos valores de la factura y codigos de errores para su posterior almacenamiento en la tabla de logs correspondiente 
				a la etapa 8. 
				El formato de codigo hash_descripcion establecido para la etapa 2 es: "codigoTipoDocumentoIdentidad|19|1|-"   
PARAMETROS INGRESO
    p_json_varchar : Objeto json contiene campos codigoSistema, documentoFiscal, documentoSector, codigoRecepcionPaquete.	
PARAMETROS SALIDA
    valor 1 - registro exitoso
    valor 0 - registro fallido/excepción 
SUBSISTEMA : Facturación
FECHA CREACION : 01/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : <Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_codigo_sistema varchar:='';	
	p_tipo_documento_fiscal_id integer:=0;
	p_tipo_documento_sector_id integer:=0;	
	p_recepcion_id bigint:=0;
	
	v_etapa integer:=2856;
	v_exl_tipo_prueba_obligatoria varchar:='OBLIGATORIA';	
	v_exl_hoja1 varchar:='SOAP PARAMETROS';	
	v_exl_hoja2 varchar:='CASOS DE PRUEBA';
	v_tipo_ambiente_id integer:=2;
	v_resultado smallint := 0;
	v_etapa_iniciado smallint:=0;
	v_sistema_id bigint:=0;
	v_caso_prueba_id integer:=null;	
	v_hash_descripcion varchar:='';
	v_hash varchar:='';
	v_json json;
	v_nit bigint:=0;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
	
	v_ha_iniciado_etapa boolean:=false; --*
	v_log_id bigint:=0;
	
begin
	v_json := cast(p_json_varchar as json);		
	p_codigo_sistema := (v_json->'jsonEtapa6'->>'codigoSistema')::varchar;	
	p_tipo_documento_fiscal_id :=(v_json->'jsonEtapa6'->>'tipoDocumentoFiscalId')::integer;
	p_tipo_documento_sector_id :=(v_json->'jsonEtapa6'->>'tipoDocumentoSectorId')::integer;	
	p_recepcion_id := coalesce((v_json->'jsonEtapa6'->>'codigoRecepcionPaqueteId')::bigint, 0) ;
	
	v_sistema_id :=sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema)::bigint;
	
	v_nit :=(v_json->'jsonEtapa6'->>'nit')::bigint; --QUEMADO	
	
	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(v_sistema_id, v_etapa_proveedor); --*
	v_ha_iniciado_etapa:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(v_sistema_id, v_etapa);
	
	if ( (v_ha_iniciado_etapa or v_ha_iniciado_etapa_proveedor) and v_tipo_ambiente_id=2) then
		--Nota: formato del hash_descripcion: "nroPruebaExcel|OBLIGATORIO|SOAP PARAMETROS"
		v_hash_descripcion := concat_ws('|','1', UPPER(UNACCENT(TRIM(v_exl_tipo_prueba_obligatoria))), UPPER(UNACCENT(TRIM(v_exl_hoja1))));
		v_hash := md5(v_hash_descripcion);

		--Buscar en tabla sre_fac_log_6_envio_paquetes, a partir del v_hash, para obtener caso_prueba_id			
		v_caso_prueba_id :=(
				select PRU.caso_prueba_id 
			  	from sre_recaudaciones.sre_fac_casos_prueba_6_envio_paquetes PRU
			  	where PRU.estado_id = 'AC' and PRU.hash = v_hash
			  	limit 1);
											  				  	
		  		-- REGISTRO CASO OBLIGATORIO HOJA EXCEL 1
				INSERT INTO sre_recaudaciones.sre_fac_log_6_envio_paquetes
				(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
				VALUES(v_sistema_id, v_hash, v_hash_descripcion, 0, v_caso_prueba_id, p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, now(), p_recepcion_id, 'AC', now(), now(), 1000, 1000);
					
				--Nota: La siguiente intruccion permite verificar si la prueba corresponde a un proveedor. Si el resultado es cero quiere decir que el sistema es PROPIO			
				if (v_ha_iniciado_etapa_proveedor) then --*
					perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
						 v_sistema_id,
						 v_nit,
						 v_hash,
						 v_hash_descripcion,
						 p_tipo_documento_fiscal_id,
						 p_tipo_documento_sector_id,
						 'PAQUETE',
						 p_recepcion_id
					);				
				end if;				
				
										
				--Nota: formato del hash_descripcion: "p_sistema_id|p_id_recepcion|DocumentoSector|OBLIGATORIO|CASOS DE PRUEBA"
				v_hash_descripcion := concat_ws('|', v_sistema_id, p_recepcion_id, p_tipo_documento_sector_id, UPPER(UNACCENT(TRIM(v_exl_tipo_prueba_obligatoria))), UPPER(UNACCENT(TRIM(v_exl_hoja2))));
				v_hash := md5(v_hash_descripcion);
				-- REGISTRO CASO POR DEFECTO PARA PRUEBA OBLIGATORIA HOJA EXCEL, EN EL MATCH IDENTIFICARA A QUE CASO CORRESPONDERA Y SOBREESCRIBIRA HAS,DESCRIPCION DE HASH Y CASOPRUEBAID
				INSERT INTO sre_recaudaciones.sre_fac_log_6_envio_paquetes
					(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
				VALUES(v_sistema_id, v_hash, v_hash_descripcion, 0, 1, p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, now(), p_recepcion_id, 'AC', now(), now(), 1000, 1000) returning log_id into v_log_id;
			
				
				--Nota: La siguiente intruccion permite verificar si la prueba corresponde a un proveedor. Si el resultado es cero quiere decir que el sistema es PROPIO			
				if (v_ha_iniciado_etapa_proveedor) then --*
					perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
						 v_sistema_id,
						 v_nit,
						 v_hash,
						 v_hash_descripcion,
						 p_tipo_documento_fiscal_id,
						 p_tipo_documento_sector_id,
						 'PAQUETE',
						 v_log_id
					);				
				end if;			
								
		v_resultado:=1;
	else		
		v_resultado:=0;
	end if;

	return v_resultado;

	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_6');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_6'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_6_sugerido(p_sistema_id bigint, p_nro character varying, p_documento_sector character varying, p_accion character varying, p_nro_hoja_excel integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo que permite guardar si un caso de prueba fue checado o no.    
PARAMETROS INGRESO
	p_sistema_id : identificador del sistema de facturacion.
	p_nro : nro de caso de prueba.		
	p_documento_sector : documento sector al que pertenece el caso de prueba.
	p_accion : Se refiere si el caso de prueba fue checado o no.
	p_nro_Hoja_Excel : numero de hoja excel de prueba	
PARAMETROS SALIDA
    valor 1 - registro exitoso
    valor 0 - registro fallido/excepción 
SUBSISTEMA : Facturación
FECHA CREACION : 01/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
-- VERIFICAR SI SE UTILIZA, CASO CONTRARIO BORRAR FUNCION
-- REEMPLAZADA POR FUNCION sre_fac_reg_log_casos_prueba_sugerida_etapa_6 ????
declare
	p_documento_fiscal_id integer :=0; 
	p_documento_sector_id integer :=0;	
	p_id_recepcion bigint :=0;
	v_etapa integer:=2856;
	
	v_resultado smallint := 0;
	v_etapa_iniciado smallint:=0;
	v_caso_prueba_id integer :=0;	
	v_exl_tipo_prueba_sugerida varchar:='SUGERIDA';	
	v_exl_hoja1 varchar:='SOAP Parámetros';	
	v_exl_hoja2 varchar:='Casos de Prueba';
	v_hash_descripcion varchar:='';
	v_hash varchar:='';
	
begin	
	p_documento_sector_id := p_documento_sector;
	
	if (sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa)) then		
		if (nroHojaExcel == 1) then
			--Nota: formato del hash_descripcion: "nroPruebaExcel|SUGERIDA|SOAP PARAMETROS"
			v_hash_descripcion := concat_ws('|',p_nro, UPPER(UNACCENT(TRIM(v_exl_tipo_prueba_sugerida))), UPPER(UNACCENT(TRIM(v_exl_hoja1))));
		else  
            --Nota: formato del hash_descripcion: "nroPruebaExcel|SUGERIDA|CASOS DE PRUEBA"
			v_hash_descripcion := concat_ws('|',p_nro, UPPER(UNACCENT(TRIM(v_exl_tipo_prueba_sugerida))), UPPER(UNACCENT(TRIM(v_exl_hoja2))));				
		end if;
			
		v_hash := md5(v_hash_descripcion);		
		
		--Buscar en tabla sre_fac_log_6_envio_paquetes, a partir del v_hash, para obtener caso_prueba_id			
		v_caso_prueba_id :=(
				select PRU.caso_prueba_id 
			  	from sre_recaudaciones.sre_fac_casos_prueba_6_envio_paquetes PRU
			  	where PRU.estado_id = 'AC' and PRU.hash = v_hash
			  	limit 1);
			  	
		
		case
			when p_accion='CHECADO' then
				INSERT INTO sre_recaudaciones.sre_fac_log_6_envio_paquetes
					(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)				
				VALUES
					(p_sistema_id, v_hash, v_hash_descripcion, 1, v_caso_prueba_id, p_documento_fiscal_id, p_documento_sector_id, now(), p_id_recepcion, 'AC', now(), now(), 1000, 1000);
				
				v_resultado:=1;
			when p_accion='NO_CHECADO' then
				update sre_recaudaciones.sre_fac_log_6_envio_paquetes
				   set estado_id='AN', fecha_ultima_modificacion=now()
				where hash=v_hash and estado_id='AC';
				
				v_resultado:=1;
			else
				v_resultado:=0;
		end case;							
	end if;
		
	return v_resultado;
			
	exception
		when others
		then
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_6_sugerido');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_6_sugerido'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_8(p_json_factura json, p_json_resultado_validacion json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera los objetos json de la factura y resultado de validacion. Los objetos json recuperados permitiran 
				obtener ciertos valores de la factura y codigos de errores para su posterior almacenamiento en la tabla de logs correspondiente 
				a la etapa 8. 
				El formato de codigo hash_descripcion establecido para la etapa 2 es: "codigoTipoDocumentoIdentidad|19|1|-"   
PARAMETROS INGRESO
    p_json_factura : Objeto json de la factura.
	p_json_resultado_validacion: Objeto json que contiene el resultado de la validacion de la factura.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
	v_etapa integer:=3069;
	
	p_sistema_id bigint:=0;
	p_id_recepcion bigint:=0;
	p_tipo_emision integer:=0;
	p_tipo_documento_sector_id integer:=0;
	p_tipo_documento_fiscal_id integer:=0;
	p_valor_parametro varchar:='';
	p_tipo_ambiente_id integer:=0;

	v_validacion varchar:='';
	v_resultado_validacion varchar:='';
	v_exl_tipo_prueba_cal varchar:='OBLIGATORIA';
	v_exl_codigo_sistema_cal varchar:=''; 
	v_exl_nit_contribuyente_cal varchar:='';
	v_exl_nro_sucursal_cal varchar:='';
	v_nit bigint:=0; 
	v_sucursal integer:=0;
	
	p_hash_descripcion varchar:='';
	p_hash varchar:='';	
	i json;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
	v_ha_iniciado_etapa boolean:=false; --*	
begin
	p_sistema_id := sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_json_factura->'xmlRecepcionGenerica'->>'p_codigo_sistema')::bigint;
	
	v_nit := (p_json_factura->'xmlRecepcionGenerica'->>'p_nit')::bigint;
	
	p_tipo_ambiente_id:=(p_json_factura->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id')::integer;
	
	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa_proveedor); --*
	v_ha_iniciado_etapa:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa); --*
			
	if ( (v_ha_iniciado_etapa  or  v_ha_iniciado_etapa_proveedor) and p_tipo_ambiente_id=2) then		
		--Nota: Obtiene los nombres de validaciones y codigos de error
		for i in select * from json_array_elements(p_json_resultado_validacion->'resultados')
		loop
			v_validacion :=(i->>'nombre_funcion_validacion'); --Nombre de la funcion de validacion. json errores.
			v_resultado_validacion :=(i->>'resultado_ejecucion'); --Resultado devuelvo por la funcion de validacion. json errores. 
	
			--Nota: Obtiene valores de los parametros de entrada para los casos de prueba: nombreRazonSocial,numeroDocumento. 
			--Es necesario obtener los parametros para diferenciar las pruebas de la bateria de prueas etapa 2.		
			case
				when v_validacion='sre_fac_val_codigo_sistema' then 
					v_exl_codigo_sistema_cal=v_resultado_validacion;
				when v_validacion='sre_fac_val_nit_recepcion' then					
					v_exl_nit_contribuyente_cal:=concat_ws('&', v_resultado_validacion,'-');										
				when v_validacion='sre_fac_val_sucursal_recepcion' then
					v_sucursal:= (p_json_factura->'xmlRecepcionGenerica'->>'p_sucursal_id');
					case
						when v_sucursal=0 then
							v_exl_nro_sucursal_cal:=concat_ws('&', v_resultado_validacion,v_sucursal::varchar);
						else 
							v_exl_nro_sucursal_cal:=concat_ws('&', v_resultado_validacion,'-');
					end case;
					exit;
				else
					v_exl_nro_sucursal_cal='-';	
			end case;							
		end loop;
		
			--Nota: formato del hash_decripcion: "sre_fac_val_codigo_documento_fiscal|1000|2|-"
			p_hash_descripcion := concat_ws('|',UPPER(UNACCENT(TRIM(v_exl_tipo_prueba_cal))), UPPER(UNACCENT(TRIM(v_exl_codigo_sistema_cal))) , UPPER(UNACCENT(TRIM(v_exl_nit_contribuyente_cal))) , UPPER(UNACCENT(TRIM(v_exl_nro_sucursal_cal))));
			p_hash := md5(p_hash_descripcion);
			
			if (v_ha_iniciado_etapa) then --*
				INSERT INTO sre_recaudaciones.sre_fac_log_8_gestion_sucursales
				(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
				VALUES(p_sistema_id, p_hash, p_hash_descripcion, 0, null, 0, 0, now(), 0, 'AC', now(), now(), 1000, 1000);
			end if;	
			
			--Nota: La siguiente intruccion permite verificar si la prueba corresponde a un proveedor. Si el resultado es cero quiere decir que el sistema es PROPIO			
			if (v_ha_iniciado_etapa_proveedor) then --*
				perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
						 p_sistema_id,
						 v_nit,
						 p_hash,
						 p_hash_descripcion,
						 0,
						 0,
						 'SUCURSAL',
						 0
				);				
			end if;			
			
			
		v_resultado:=1;							
	else
		v_resultado:=0;		
	end if;
		
	return v_resultado;
			
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_8');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_8'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_8_sugerido(p_sistema_id bigint, p_nro character varying, p_tipo_prueba character varying, p_documento_sector character varying, p_accion character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo que permite guardar si un caso de prueba fue checado o no.    
PARAMETROS INGRESO
	p_sistema_id : identificador del sistema de facturacion.
	p_nro : nro de caso de prueba.
	p_tipo_prueba : tipo de prueba (Sugerido/obligatorio).	
	p_documento_sector : documento sector al que pertenece el caso de prueba.
	p_accion : Se refiere si el caso de prueba fue checado o no.	
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
	v_etapa integer:=3069;

	p_hash_descripcion varchar:='';
	p_hash varchar:='';
	p_documento_fiscal_id integer:=0; 
	p_documento_sector_id integer:=0;	
	p_id_recepcion bigint:=0;
begin			
	if (sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa)) then	
		p_hash_descripcion :=concat_ws('|', TRIM(p_nro), UPPER(TRIM(p_tipo_prueba)));
		p_hash :=md5(p_hash_descripcion);
		
		case
			when p_accion='CHECADO' then
				p_documento_fiscal_id :=0; 

				p_id_recepcion :=0;
									
				INSERT INTO sre_recaudaciones.sre_fac_log_8_gestion_sucursales
				(
				sistema_id,
				hash, 
				hash_descripcion, 
				estado_match, 
				caso_prueba_id, 
				documento_fiscal_id, 
				documento_sector_id, 
				fecha_prueba, 
				id_recepcion, 
				estado_id, 
				fecha_registro, 
				fecha_ultima_modificacion,
				usuario_registro_id, 
				usuario_ultima_modificacion
				)
				VALUES(
				p_sistema_id, 
				p_hash, 
				p_hash_descripcion,
				1, 
				null, 
				p_documento_fiscal_id, 
				p_documento_sector_id, 
				now(),  
				p_id_recepcion, 
				'AC', 
				now(), 
				now(), 
				1000,
				1000
				);
				
				v_resultado:=1;
			
			when p_accion='NO_CHECADO' then
				update sre_recaudaciones.sre_fac_log_8_gestion_sucursales
				set estado_id='AN',
				fecha_ultima_modificacion=now()
				where hash=p_hash and estado_id='AC';
				v_resultado:=1;
			else
				v_resultado:=0;
		end case;							
	end if;
		
	return v_resultado;
			
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_etapa_8_sugerido');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_etapa_8_sugerido'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_obtencion_cufd(p_sistema_id bigint, p_codigo_sistema character varying, p_modalidad integer, p_nit bigint, p_cuis character varying, p_sucursal integer, p_punto_venta integer, p_transaccion boolean)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo que registra los logs segun los datos enviados para la obtencion del CUFD 
				para su posterior almacenamiento en la tabla de logs correspondiente. 
PARAMETROS INGRESO
    p_sistema_id: Identificador del sistema registrado
	p_codigo_sistema: Código del sistema que va a sincronizar
	p_modalidad: Modalidad del sistema de facturacion 
	p_nit: Número de NIT del contribuyente asociado al sistema 
	p_cuis: Código CUIS del sistema que va a sincronizar 
	p_sucursal: Sucursal que va a sincronizar 
	p_punto_venta: Numero de punto de venta que va a sincronizar
	p_transaccion: Si la transacción de sincronizacion fue exitosa o no
PARAMETROS SALIDA
    Retorma 1 si la operacion se realizó con exito y 0 cuando no realizó ninguna operación
SUBSISTEMA : Facturación
FECHA CREACION : 12/07/2019
AUTOR : Ivan Salas
VERSION : 1.0
**************************************************************************************************************************************************/
declare	
	v_tipo_prueba varchar;
	v_codigo_sistema varchar;
	v_modalidad varchar;
	v_nit varchar;
	v_cuis varchar;
	v_sucursal varchar;
	v_punto_venta varchar;
	v_resultado varchar;
	
	v_hash varchar;
	v_hash_descripcion varchar;
	v_etapa_iniciado smallint := 0;
	v_respuesta smallint := 0;
	v_operacion bool := true;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*	
begin
	
	--Nota: Verificar si el contribuyente ha iniciado la etapa de pruebas (1=Si ha iniciado; 0=No ha iniciado)
	v_etapa_iniciado := coalesce(
		 ( select 1 
			 from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
			   on PRU.prueba_etapa_certificacion_id = ETA.prueba_etapa_certificacion_id
			where PRU.estado_id = 'AC' 
			  and PRU.sistema_id = p_sistema_id 
			  and (PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is null) 
			  and ETA.etapa_certificacion_sistemas_id = 3016 --Etapa Obtencion CUFD
			  and ETA.estado_id = 'AC'
			limit 1),
		  0);
	
	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa_proveedor); --*		  
		  
	if ((v_etapa_iniciado = 1) or  v_ha_iniciado_etapa_proveedor) then
		if (p_transaccion = true) then
			v_tipo_prueba := 'OBLIGATORIA';
			v_operacion := false;
			v_resultado := 'CUFD';
		else
			v_tipo_prueba := 'SUGERIDA';
		end if;
		
		if p_codigo_sistema is not null then
			if p_codigo_sistema != '1808D8C24EF-808D8C24EF' then
				v_codigo_sistema := 'su código de sistema';
			else 
				v_codigo_sistema := '1808D8C24EF-808D8C24EF';
			end if;
		else
			v_codigo_sistema := 'null';
		end if;
		
		if v_operacion = true then
			if v_codigo_sistema in ('null','1808D8C24EF-808D8C24EF') then
				v_resultado := 'Código 2 = Código de Sistema Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_modalidad is not null then
			if p_modalidad in (0,6) then
				v_modalidad := p_modalidad;
			else 
				v_modalidad := ' Su Modalidad de Facturación';
			end if;
		else
			v_modalidad := 'null';
		end if;
		
		if v_operacion = true then
			if v_modalidad in ('null','0','6') then
				v_resultado := 'Código 7 = Modalidad Inválida';
				v_operacion := false;
			end if;
		end if;
		
		if p_nit is not null then
			if p_nit in (100357902810035,0) then
				v_nit := p_nit;
			else 
				v_nit := 'su NIT ';
			end if;
		else
			v_nit := 'null';
		end if;
		
		if v_operacion = true then
			if v_nit in ('null','0','100357902810035') then
				v_resultado := 'Código 9 = NIT Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_cuis is not null then
			if p_cuis != '12D270CA12D270CA12D270CA12D270CA12D270CA' then
				v_cuis := 'su CUIS';
			else 
				v_cuis := p_cuis;
			end if;
		else
			v_cuis := 'null';
		end if;
		
		if v_operacion = true then
			if v_cuis in ('null','12D270CA12D270CA12D270CA12D270CA12D270CA') then
				v_resultado := 'Código 3 = Código Único de Inicio de Sistema (CUIS) Inválido';
				v_operacion := false;
			end if;
		end if;
		
		if p_sucursal is null then
			v_sucursal = 'null';
		else
			v_sucursal := p_sucursal;
		end if;
		
		if v_operacion = true then
			if v_sucursal in ('null','10000','-1') then
				v_resultado := 'Código 8 = Sucursal Inválida';
				v_operacion := false;
			end if;
		end if;
		
		if p_punto_venta is null or p_punto_venta = 0 then
			v_punto_venta := 'null / 0';
		else
			v_punto_venta := p_punto_venta;
		end if;
		
		if v_operacion = true then
			if v_punto_venta in ('10000','-1') then
				v_resultado := 'Código 82 = Punto de venta inválido';
				v_operacion := false;
			end if;
		end if;
		
		v_hash_descripcion := v_tipo_prueba||'|'||v_codigo_sistema||'|'||v_modalidad||'|'||v_nit||'|'||v_cuis||'|'||v_sucursal||'|'||v_punto_venta||'|'||v_resultado;
		v_hash := (select md5(v_tipo_prueba||'|'||v_codigo_sistema||'|'||v_modalidad||'|'||v_nit||'|'||v_cuis||'|'||v_sucursal||'|'||v_punto_venta||'|'||v_resultado));
		
		
		if (v_etapa_iniciado = 1) then --*
			INSERT INTO sre_recaudaciones.sre_fac_log_obtencion_cufd
			(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
			VALUES(p_sistema_id, v_hash, v_hash_descripcion, 0, null, now(), 0, 'AC', now(), now(), 1000, 1000);
		end if;
		
		--Nota: La siguiente intruccion permite verificar si la prueba corresponde a un proveedor. Si el resultado es cero quiere decir que el sistema es PROPIO			
		if (v_ha_iniciado_etapa_proveedor) then --*
			perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
						 p_sistema_id,
						 p_nit,
						 v_hash,
						 v_hash_descripcion,
						 0,
						 0,
						 'CUFD',
						 0
			);				
		end if;
		
		v_respuesta := 1;
		
	else
		v_respuesta := 0;		
	end if;
	return v_respuesta;
EXCEPTION
	when others then	
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_captura_log_casos_prueba_obtencion_cufd');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_captura_log_casos_prueba_obtencion_cufd'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_comprobar_etapa_2(p_que_comprobar character varying, p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Comprueba si: existe la etapa 2; si ha finalizado; si ha iniciado.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.	
    p_etapa_certificacion_sistemas_id : Codigo de la etapa 2. 
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado bool;		
begin	
	v_resultado :=false;
	
	case
		when p_que_comprobar='existe_prueba' then
			--Comprobar si existen pruebas iniciadas
			v_resultado:=coalesce(
		 	(
				select true  
				from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS_PRUEBAS  inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETAPAS
				on ETAPAS_PRUEBAS.prueba_etapa_certificacion_id=ETAPAS.prueba_etapa_certificacion_id
				where 
				ETAPAS_PRUEBAS.sistema_id=p_sistema_id and 
				ETAPAS_PRUEBAS.estado_id='AC' and 
				ETAPAS.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id --and		
				limit 1
			), 
			false
		 	);
		 	
		 	return v_resultado;
		when p_que_comprobar='ha_finalizado' then
		--Comprobar si ha finalizado la etapa
		 	v_resultado:=coalesce(
		 	(
				select false
				from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS_PRUEBAS  inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETAPAS
				on ETAPAS_PRUEBAS.prueba_etapa_certificacion_id=ETAPAS.prueba_etapa_certificacion_id
				where 
				ETAPAS_PRUEBAS.sistema_id=p_sistema_id and 
				ETAPAS_PRUEBAS.estado_id='AC' and 
				ETAPAS.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id AND
				(ETAPAS_PRUEBAS.fecha_inicio_prueba is not null and ETAPAS_PRUEBAS.fecha_fin_prueba is not null)
				limit 1
			), 
			false
		 	);
		 	
		 	return v_resultado;		
		when p_que_comprobar='ha_iniciado' then
		--Comprobar si ha iniciado la etapa
		 	v_resultado:=coalesce(
		 	(
				select true
				from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS_PRUEBAS  inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETAPAS
				on ETAPAS_PRUEBAS.prueba_etapa_certificacion_id=ETAPAS.prueba_etapa_certificacion_id
				where 
				ETAPAS_PRUEBAS.sistema_id=p_sistema_id and 
				ETAPAS_PRUEBAS.estado_id='AC' and 
				ETAPAS.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id AND
				(ETAPAS_PRUEBAS.fecha_inicio_prueba is not null and ETAPAS_PRUEBAS.fecha_fin_prueba is  null)
				limit 1
			), 
			false
		 	);		
		 	
		 	return v_resultado;
		else 
			return v_resultado;	
	end case;
		
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_comprobar_etapa_2');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_comprobar_etapa_2')::bool);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_crud_log_2_validacion_generales_xml_xsd(p_sistema_id bigint, p_hash character varying, p_hash_descripcion character varying, p_documento_fiscal_id integer, p_documento_sector_id integer, p_id_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Registra en la tabla log de la etapa 2 los valores obtenidos de los objetos json (factura y resultado de la validacion) en la tabla log-etapa2.
				Asi tambien, genera un codigo hash con los parametros de la funcion. El codigo hash, posteriormente permitira identificar casos de prueba.
				Finalmente los datos calculos se almacenan en la tabla de logs-etapa2.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.
	p_id_recepcion: Id de recepcion de la factura.
	p_parametro_entrada: Nombre de la validacion (actividadEconomica,codigoDocumentoSector,codigoDocumentoSector,codigoMetodoPago)
	p_resultado_esperado: Codigos de error de las funciones de validacion. 
	p_tipo_emision: Online=1; Offline=2; 
	p_valor_parametro: Parametro de la validacion. (Control Tributario, VENTAS MENORES DEL DÍA, 99002, 99003)
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado bigint := 0;	
begin
	INSERT INTO sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
	(
	sistema_id,
	hash, 
	hash_descripcion, 
	estado_match, 
	caso_prueba_id, 
	documento_fiscal_id, 
	documento_sector_id, 
	fecha_prueba, 
	id_recepcion, 
	estado_id, 
	fecha_registro, 
	fecha_ultima_modificacion,
	usuario_registro_id, 
	usuario_ultima_modificacion
	)
	VALUES(
	p_sistema_id, 
	p_hash, 
	p_hash_descripcion,
	0, 
	null, 
	p_documento_fiscal_id, 
	p_documento_sector_id, 
	now(),  
	p_id_recepcion, 
	'AC', 
	now(), 
	now(), 
	1000,
	1000
	) returning log_id into v_resultado;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_crud_log_2_validacion_generales_xml_xsd');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_crud_log_2_validacion_generales_xml_xsd'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(p_sistema_id bigint, p_nit bigint, p_hash character varying, p_hash_descripcion character varying, p_documento_fiscal_id integer, p_documento_sector_id integer, p_agrupador character varying, p_id_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Registra en la tabla log de la etapa 9 los valores obtenidos de los objetos json (factura y resultado de la validacion) en la tabla log-etapa9.
				
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.
	p_id_recepcion: Id de recepcion de la factura.
	p_parametro_entrada: Nombre de la validacion (actividadEconomica,codigoDocumentoSector,codigoDocumentoSector,codigoMetodoPago)
	p_resultado_esperado: Codigos de error de las funciones de validacion. 
	p_tipo_emision: Online=1; Offline=2; 
	p_valor_parametro: Parametro de la validacion. (Control Tributario, VENTAS MENORES DEL DÍA, 99002, 99003)
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado bigint := 0;	
begin	
		INSERT INTO sre_recaudaciones.sre_fac_log_9_gestion_proveedor
				(
				 sistema_id,
				 proveedor_id,
				 nit_cliente,
				 hash,
				 hash_descripcion,
				 estado_match,
				 caso_prueba_id,
				 documento_fiscal_id,
				 documento_sector_id,
				 agrupador,
				 fecha_prueba,
				 id_recepcion,
				 estado_id,
				 fecha_registro,
				 fecha_ultima_modificacion,
				 usuario_registro_id,
				 usuario_ultima_modificacion
				)
				VALUES(
				 p_sistema_id,
				 p_sistema_id,
				 p_nit, 
				 p_hash,
				 p_hash_descripcion,
				 0,
				 null,
				 p_documento_fiscal_id,
				 p_documento_sector_id,
				 p_agrupador,
				 now(),
				 p_id_recepcion,
				 'AC',
				 now(),
				 now(),
				 1000,
				 1000
				 ) returning log_id into v_resultado;		
					
	return v_resultado;
		
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_crud_log_9_sistema_proveedor');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_crud_log_9_sistema_proveedor'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id bigint, p_etapa_certificacion_sistemas_id integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica se el contribuyente ha iniciado una etapa   
PARAMETROS INGRESO
    p_sistema_id : identificador del sistema
    p_etapa_certificacion_sistemas_id : etapa de la certificacion	
PARAMETROS SALIDA
	v_resutaldo : 1(iniciado) o 0(no iniciado) 
SUBSISTEMA : Facturación
FECHA CREACION : 01/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : <Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado boolean:=false;	
	 
begin
	
	v_resultado:=coalesce(
		(select true 
		from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas PRU inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion ETA
		on PRU.prueba_etapa_certificacion_id=ETA.prueba_etapa_certificacion_id
		where 
		PRU.estado_id='AC' and 
		PRU.sistema_id=p_sistema_id and
		(PRU.fecha_inicio_prueba is not null and PRU.fecha_fin_prueba is null) and
		ETA.etapa_certificacion_sistemas_id=p_etapa_certificacion_sistemas_id and 
		ETA.estado_id='AC'
		limit 1),
	false);

	return v_resultado;

	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_ha_iniciado_etapa');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_ha_iniciado_etapa'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_3_sincronizacion_catalogos(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 4.
PARAMETROS SALIDA
    0: Si no se realizó la operación
    1: Si se realizó la operación
SUBSISTEMA : Facturación
FECHA CREACION : 29/07/2019
AUTOR : Ivan Salas C.
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	--p_sistema_id bigint := 217; 

	v_resultado smallint := 0;	
begin
	
	update sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo
	   set estado_match = 1,
	 	   caso_prueba_id = (PRUEBAS.caso_prueba_id),
		   fecha_ultima_modificacion = now()
	  from sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_3_sincronizacion_catalogos PRUEBAS
	    on LOGS.hash = PRUEBAS.hash and logs.agrupador = pruebas.agrupador
	 where PRUEBAS.estado_id = 'AC' 
	   and LOGS.estado_id = 'AC' 
	   and LOGS.sistema_id = p_sistema_id 
	   and sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo.log_id = LOGS.log_id;
	
	v_resultado := 1;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_3_sincronizacion_catalogos');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_3_sincronizacion_catalogos'));	
end 
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa(p_sistema_id bigint, p_etapa integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
                PRUEBA, identifica los registro que sean iguales. 
                En caso de ser iguales actualiza los valores de los campos: estado_match=1; 
                												            caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Devuelve el valor 1 si la ejecución es correcta, caso contrario devuelve otro valor.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Realiza la ejecución de las funciones Match y Actualización de los Porcentajes.
				 Se optimizó la llamada a las ejecución de funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<11/10/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare 
        v_resultado smallint := 0;             
begin          
        if p_sistema_id>0 and p_etapa=0 then--Ingresa solamente cuando lista las Etapas de la Fase I 
			perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_2(p_sistema_id);--Validaciones Generales XML/XSD
			perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_4(p_sistema_id);--Sincronización de Fecha y Hora
			perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_6(p_sistema_id);--Envío de Paquetes                               
			perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_8(p_sistema_id);--Gestión de sucursales
			perform sre_recaudaciones.sre_fac_match_log_casos_prueba_etapa_10(p_sistema_id);-- Envio Masivo
			perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_11(p_sistema_id);--Anulaciones
		end if;
        v_resultado:=1; 
                        
        return v_resultado;
        
        EXCEPTION
          when others
            then                    
               perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_2');
               return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_2'));    
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_11(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 11.
PARAMETROS SALIDA
    0: Si no se realizó la operación
    1: Si se realizó la operación
SUBSISTEMA : Facturación
FECHA CREACION : 09/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	--p_sistema_id bigint := 217; 

	v_resultado smallint := 0;	
begin
	
	update sre_recaudaciones.sre_fac_log_11_anulaciones
	set
	estado_match = 1,
	caso_prueba_id = (PRUEBAS.caso_prueba_id),
	fecha_ultima_modificacion = now()
	from sre_recaudaciones.sre_fac_log_11_anulaciones LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_11_anulaciones PRUEBAS
	on LOGS.hash = PRUEBAS.hash
	where
	PRUEBAS.estado_id = 'AC' and
	LOGS.estado_id = 'AC' and	
	LOGS.sistema_id = p_sistema_id and
	sre_recaudaciones.sre_fac_log_11_anulaciones.log_id = LOGS.log_id;
	
	v_resultado := 1;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_11');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_11'));	
end 
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_12(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 12.
PARAMETROS SALIDA
    0: Si no se realizó la operación
    1: Si se realizó la operación
SUBSISTEMA : Facturación
FECHA CREACION : 09/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
begin
	
	update sre_recaudaciones.sre_fac_log_12_reportes
	set
	estado_match = 1,
	caso_prueba_id = (PRUEBAS.caso_prueba_id),
	fecha_ultima_modificacion = now()
	from sre_recaudaciones.sre_fac_log_12_reportes LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_12_reportes PRUEBAS
	on LOGS.hash = PRUEBAS.hash
	where
	PRUEBAS.estado_id = 'AC' and
	LOGS.estado_id = 'AC' and	
	LOGS.sistema_id = p_sistema_id and
	sre_recaudaciones.sre_fac_log_12_reportes.log_id = LOGS.log_id;
	
	v_resultado := 1;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_12');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_12'));	
end 
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_2(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 2.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	v_etapa integer:=2852;
	v_resultado smallint := 0;	
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
	v_fecha timestamp;
begin
	if (sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa)) then
		v_fecha:=now();
		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'F');
	
		update sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
		set
		estado_match=1,
		caso_prueba_id=(PRUEBAS.caso_prueba_id),
		fecha_ultima_modificacion=v_fecha
		from sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd PRUEBAS
		on LOGS.hash=PRUEBAS.hash
		where
		PRUEBAS.estado_id='AC' and
		PRUEBAS.documento_sector_id=LOGS.documento_sector_id and
		LOGS.estado_id='AC' and
		LOGS.estado_match=0 and
		LOGS.sistema_id=p_sistema_id and
		LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
		sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd.log_id=LOGS.log_id; --(NO OLVIDAR ESTE CAMPO)						
		
		v_resultado:=1;	
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_2');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_2'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_4(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 4.
PARAMETROS SALIDA
    0: Si no se realizó la operación
    1: Si se realizó la operación
SUBSISTEMA : Facturación
FECHA CREACION : 09/07/2019
AUTOR : Ivan Salas C.
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
begin
	
	update sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora
	set
	estado_match = 1,
	caso_prueba_id = (PRUEBAS.caso_prueba_id),
	fecha_ultima_modificacion = now()
	from sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_4_sincronizacionf_fecha_hora PRUEBAS
	on LOGS.hash = PRUEBAS.hash
	where
	PRUEBAS.estado_id = 'AC' and
	LOGS.estado_id = 'AC' and
	LOGS.estado_match = 0 and
	LOGS.sistema_id = p_sistema_id and
	sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora.log_id = LOGS.log_id;
	
	v_resultado := 1;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_4');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_4'));	
end 
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_6(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 6.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Actualización de campo estado_match, para caso obligatorio de la hoja excel 1
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 16/08/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Actualizacion validacion pruebas obligatorias hoja excel 2 
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 06/09/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se crea funcion funcion sre_fac_pru_calcular_totales_por_paquete que reemplaza funcion sre_fac_pru_verificar_recepcion_paquete
				con la finalidad de emplear count en registro de tablas recepciones_errores y recepciones_corretas_... 
NUMERO SECUENCIAL : 3
FECHA DE MODIFICACION : 07/09/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciono la eliminacion logica de los registros de PAQUETES de la etapa proveedor.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<28/10/2019>
AUTOR DE LA MODIFICACION : <Victor Cruz Gomez>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare		
	v_resultado smallint := 0;
	v_etapa integer:=2856;

	
	v_id_recepcion_paquete bigint := 0;
	v_tipo_documento_sector_id integer := 0;
	v_total integer:=0;
	v_total_validos integer:=0;
	v_total_invalidos integer:=0;
	v_evento_significativo_registrado boolean:=false;
	v_hash_descripcion varchar:='-';
	v_hash varchar:='';
	
	c_logs refcursor;	  
	r_fila record;
	
	v_hash_obligatoria_hoja_1 varchar:='94369a00c73f23733c4129ccebf14a1f'; -- 1|OBLIGATORIA|SOAP PARAMETROS	 
	v_caso_prueba_id integer:=0;
	
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
	
	v_ha_iniciado_etapa boolean:=false; --*
begin
	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa_proveedor); --*
	v_ha_iniciado_etapa:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa);
	
	
	if (v_ha_iniciado_etapa or v_ha_iniciado_etapa_proveedor) then	
		--para caso obligatorio de hoja excel 1
		if (v_ha_iniciado_etapa) then --*
	    	update sre_recaudaciones.sre_fac_log_6_envio_paquetes
			set estado_match = 1
			where estado_match = 0 and sre_recaudaciones.sre_fac_log_6_envio_paquetes.hash=v_hash_obligatoria_hoja_1;
		end if;	
		
		if (v_ha_iniciado_etapa_proveedor) then --*
		    update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
			set estado_match = 1
			where estado_match = 0 and sre_recaudaciones.sre_fac_log_9_gestion_proveedor.hash=v_hash_obligatoria_hoja_1;								
		end if;	
			
		--Nota: Obtener registros LOGS del sistema_id
		drop table if exists TEMPORAL_PRUEBAS;
			
		create temp table TEMPORAL_PRUEBAS
		as
		select  		
			log_id,
			sistema_id,
			hash,
			hash_descripcion,
			estado_match,
			caso_prueba_id,
			documento_fiscal_id,
			documento_sector_id,
			fecha_prueba,
			id_recepcion,
			estado_id
		from sre_recaudaciones.sre_fac_log_6_envio_paquetes
		where 
			sistema_id=p_sistema_id and 
			estado_id='AC' and
			estado_match=0;
	
		open c_logs for (
						select 
						log_id,
						sistema_id,
						hash,
						hash_descripcion,
						estado_match,
						caso_prueba_id,
						documento_fiscal_id,
						documento_sector_id,
						fecha_prueba,
						id_recepcion,
						estado_id
						from TEMPORAL_PRUEBAS);
		  loop
		    fetch c_logs into r_fila;
		    exit when not found;
				
			--Nota: Obtener el id_recepcion_paquete y tipo_documento_sector	
			select r_fila.id_recepcion, r_fila.documento_sector_id into v_id_recepcion_paquete, v_tipo_documento_sector_id;
			
			--Nota: Verificando si existe evento sigui
			v_evento_significativo_registrado:=sre_recaudaciones.sre_fac_val_existe_evento_significativo_para_paquete_id(v_tipo_documento_sector_id, v_id_recepcion_paquete);

						
			-- TODO EDWIN CORO crear funcion donde solo obtenga cantidades de tabla recepciones_errores y receciones_correctas_...
			select total, total_validos, total_invalidos into v_total, v_total_validos, v_total_invalidos  
			from sre_recaudaciones.sre_fac_pru_calcular_totales_por_paquete(v_tipo_documento_sector_id, v_id_recepcion_paquete);
			
			--Nota: reemplazada por funcion sre_fac_pru_calcular_totales_por_paquete	

						
			--Nota:Logica para identificar los casos de prueba de la etapa 6 - hoja "Casos de Prueba" 	
			case
			--Caso de prueba 1 
			--500 documentos fiscales válidos
			--Evento Signitificativo = SI
				when v_total = 500 and v_total_validos=500 and v_total_invalidos=0 and v_evento_significativo_registrado=true then
				v_hash_descripcion:='=500|=500|=0|1';
					   				 					
			--Caso de prueba 5
			--500 documentos fiscales válidos
			--Evento Signitificativo = NO		
				when v_total = 500 and v_total_validos=500 and v_total_invalidos=0  and v_evento_significativo_registrado=false then
				v_hash_descripcion:='=500|=500|=0|0';
		
			--Caso de prueba 2
			--400 documentos fiscales válidos y 100 inválidos
			--Evento Signitificativo = SI	
				when v_total = 500 and v_total_validos=400 and v_total_invalidos=100  and v_evento_significativo_registrado=true  then
				v_hash_descripcion:='=500|=400|=100|1';
				
			--Caso de prueba 6
			--400 documentos fiscales válidos y 100 inválidos
			--Evento Signitificativo = NO		
				when v_total = 500 and v_total_validos=400 and v_total_invalidos=100  and v_evento_significativo_registrado=false then
				v_hash_descripcion:='=500|=400|=100|0';	
		
			--Caso de prueba 3
			--menor a 500 documentos fiscales válidos (0 invalidos)
			--Evento Signitificativo = SI		
				when v_total < 500 and v_total_validos<500 and v_total_invalidos=0  and v_evento_significativo_registrado=true then				
				v_hash_descripcion:='<500|<500|=0|1';
				
			--Caso de prueba 11
			--menor a 500 documentos fiscales validos, 0 invalidos
			--Evento Signitificativo = NO		
				when v_total < 500 and v_total_validos<500 and v_total_invalidos=0  and v_evento_significativo_registrado=false then
				v_hash_descripcion:='<500|<500|=0|0';
									 

			--Caso de prueba 4
			--menor a 500 documentos fiscales válidos e inválidos
			--Evento Signitificativo = SI		
				when v_total < 500 and (v_total_validos > 0 and v_total_validos<500) and (v_total_invalidos > 0 and v_total_invalidos<500) and v_evento_significativo_registrado=true then			
				v_hash_descripcion:='<500|<500|<500|1';	
				 					 
			--Caso de prueba 12
			--menor a 500 documentos fiscales válidos e inválidos
			--Evento Signitificativo = NO		
				when v_total < 500 and (v_total_validos > 0 and v_total_validos<500) and (v_total_invalidos > 0 and v_total_invalidos<500) and v_evento_significativo_registrado=false then			
				v_hash_descripcion:='<500|<500|<500|0';
									 				
			--Caso de prueba 9
			--menor a 500 documentos invalidos, 0 validos
			--Evento Signitificativo = SI
				when v_total < 500 and v_total_validos=0 and v_total_invalidos<500  and v_evento_significativo_registrado=true then				
				v_hash_descripcion:='<500|=0|<500|1';
									 
			--Caso de prueba 10
			--menor a 500 documentos invalidos, 0 validos
			--Evento Signitificativo = NO		
				when v_total < 500 and v_total_validos=0 and v_total_invalidos<500  and v_evento_significativo_registrado=false then
				v_hash_descripcion:='<500|=0|<500|0';
									 									 
			--Caso de prueba 7 - SUGERIDA
			--mayor a 500
			--Evento Signitificativo = SI		
			--	when v_total > 500   and v_evento_significativo_registrado=true then
			--	v_hash_descripcion:='>500|=|=|1';	
		
			--Caso de prueba 8 - SUGERIDA
			--mayor a 500
			--Evento Signitificativo = NO		
			--	when v_total > 500   and v_evento_significativo_registrado=true then
			--	v_hash_descripcion:='>500|=|=|0';
			
				else
				v_hash_descripcion:='-';				
			end case;
		    		
			
			if v_hash_descripcion<>'-' then
				v_hash := md5(v_hash_descripcion);
								
				--Buscar en tabla sre_fac_log_6_envio_paquetes, a partir del v_hash, para obtener caso_prueba_id			
				v_caso_prueba_id :=(
						select PRU.caso_prueba_id 
					  	from sre_recaudaciones.sre_fac_casos_prueba_6_envio_paquetes PRU
					  	where PRU.estado_id = 'AC' and PRU.hash = v_hash
					  	limit 1);
					  	
				
			if (v_ha_iniciado_etapa) then --*		  	
				update sre_recaudaciones.sre_fac_log_6_envio_paquetes
				set
				estado_match=1,
				hash=v_hash,
				hash_descripcion=v_hash_descripcion,
				caso_prueba_id = v_caso_prueba_id
				where
				sre_recaudaciones.sre_fac_log_6_envio_paquetes.log_id=r_fila.log_id;
			end if;	
				
			if (v_ha_iniciado_etapa_proveedor) then --*
			    update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
				set
				estado_match=1,
				hash=v_hash,
				hash_descripcion=v_hash_descripcion,
				caso_prueba_id = v_caso_prueba_id
				where 
				sre_recaudaciones.sre_fac_log_9_gestion_proveedor.id_recepcion=r_fila.log_id;								
			end if;	
				
				
			end if;					    	
		 end loop;	  
		  	 	
		 close c_logs;
		  
		  -- anula registros q no puedan hacer match
		  update sre_recaudaciones.sre_fac_log_6_envio_paquetes
		  set 
			estado_id='AN' 
		  where 
			sistema_id=p_sistema_id and 
			estado_match=0 and
			estado_id='AC';
		
		 update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
		  set 
			estado_id='AN' 
		  where 
			sistema_id=p_sistema_id and 
			estado_match=0 and
			agrupador='PAQUETE' and
			estado_id='AC';
		
		return 1;	
	
	end if;
	
	return v_resultado;

	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_6');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_6'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_8(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 8.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;	
	v_etapa integer:=3069;
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
begin
	
	if (sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa)) then
	
		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'F');	

		update sre_recaudaciones.sre_fac_log_8_gestion_sucursales
		set
		estado_match=1,
		caso_prueba_id=(PRUEBAS.caso_prueba_id),
		fecha_ultima_modificacion=now()
		from sre_recaudaciones.sre_fac_log_8_gestion_sucursales LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_8_gestion_sucursales PRUEBAS
		on LOGS.hash=PRUEBAS.hash
		where
		PRUEBAS.estado_id='AC' and
		PRUEBAS.documento_sector_id=LOGS.documento_sector_id and
		LOGS.estado_id='AC' and
		LOGS.estado_match=0 and
		LOGS.sistema_id=p_sistema_id and
		LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
		sre_recaudaciones.sre_fac_log_8_gestion_sucursales.log_id=LOGS.log_id; --(NO OLVIDAR ESTE CAMPO)
		
		update sre_recaudaciones.sre_fac_log_8_gestion_sucursales
		set 
		estado_id='AN' 
		where 
		sistema_id=p_sistema_id and 
		fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
		estado_match=0;
		
		v_resultado:=1;
	
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_8');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_8'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_9(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 2.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se omitio la eliminacion logica de los registros de PAQUETES.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<28/10/2019>
AUTOR DE LA MODIFICACION : <Victor Cruz Gomez>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;
	v_etapa integer:=3052;
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;	
begin
	
	if (sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(p_sistema_id, v_etapa)) then
		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa, p_sistema_id, 'F');
		
		--Actualizando registros LOGS que incluyen documentos sectores
		
		update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
		set
		estado_match=1,
		caso_prueba_id=(PRUEBAS.caso_prueba_id),
		fecha_ultima_modificacion=now()
		from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_9_proveedor PRUEBAS
		on LOGS.hash=PRUEBAS.hash
		where
		PRUEBAS.estado_id='AC' and
		LOGS.estado_id='AC' and
		LOGS.estado_match=0 and
		PRUEBAS.documento_sector_id=LOGS.documento_sector_id and
		LOGS.sistema_id=p_sistema_id and
		LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
		PRUEBAS.agrupador in ('VALIDACION XML-XSD','ANULACIONES') and  		 
		sre_recaudaciones.sre_fac_log_9_gestion_proveedor.log_id=LOGS.log_id; --(NO OLVIDAR ESTE CAMPO)
		
		--Actualizando registros LOGS que NO incluyen documentos sectores
		update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
		set
		estado_match=1,
		caso_prueba_id=(PRUEBAS.caso_prueba_id),
		fecha_ultima_modificacion=now()
		from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_9_proveedor PRUEBAS
		on LOGS.hash=PRUEBAS.hash
		where
		PRUEBAS.estado_id='AC' and
		LOGS.estado_id='AC' and
		LOGS.estado_match=0 and		
		LOGS.sistema_id=p_sistema_id and
		LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
		sre_recaudaciones.sre_fac_log_9_gestion_proveedor.log_id=LOGS.log_id; --(NO OLVIDAR ESTE CAMPO)
		
		--Eliminando logicamente registro(s) no emparejado(s)
		update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
		set 
		estado_id='AN' 
		where 
		estado_id='AC' and
		estado_match=0 and		
		sistema_id=p_sistema_id and	
		agrupador<>'PAQUETE' and 
		fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa;
	
		--Eliminando logicamente registro(s) no emparejado(s)
		update sre_recaudaciones.sre_fac_log_9_gestion_proveedor
		set 
		estado_id='AN' 
		where 
		estado_id='AC' and
		estado_match=0 and		
		sistema_id=p_sistema_id and 
		fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and
		agrupador in ('VALIDACION XML-XSD','ANULACIONES');	
		
		v_resultado:=1;
	
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_etapa_9');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_etapa_9'));	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_obtencion_cufd(p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Identifica los registros LOG y CASOS DE PRUEBAS que sean iguales. Es decir, segun el codigo hash almacenado en tabla LOG y CASOS DE
				PRUEBA, identifica los registro que sean iguales. En caso de ser iguales actualiza los valores de los campos: 
					estado_match=1; 
					caso_prueba_id=Identficador del caso de prueba;  
PARAMETROS INGRESO
    p_sistema_id : Codigo del sistema para identificar los registros de la tabla LOG y CASOS DE PRUEBA de la etapa 4.
PARAMETROS SALIDA
    0: Si no se realizó la operación
    1: Si se realizó la operación
SUBSISTEMA : Facturación
FECHA CREACION : 13/07/2019
AUTOR : Ivan Salas C.
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	--p_sistema_id bigint := 217; 

	v_resultado smallint := 0;	
begin
	
	update sre_recaudaciones.sre_fac_log_obtencion_cufd
	set	estado_match = 1,
		caso_prueba_id = (PRUEBAS.caso_prueba_id),
		fecha_ultima_modificacion = now()
	from sre_recaudaciones.sre_fac_log_obtencion_cufd LOGS inner join sre_recaudaciones.sre_fac_casos_prueba_obtencion_cufd PRUEBAS
	on LOGS.hash = PRUEBAS.hash
	where PRUEBAS.estado_id = 'AC' 
	and	LOGS.estado_id = 'AC' 
	and	LOGS.sistema_id = p_sistema_id 
	and	sre_recaudaciones.sre_fac_log_obtencion_cufd.log_id = LOGS.log_id;
	
	v_resultado := 1;

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_match_log_casos_prueba_obtencion_cufd');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_match_log_casos_prueba_obtencion_cufd'));	
end 
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_2(p_sistema_id bigint)
 RETURNS TABLE(logid bigint, casopruebaid bigint, sistemaid bigint, estadomatch integer, fechaprueba timestamp without time zone, documentosectoridlog character varying, idrecepcion bigint, casoprueba text, documentosectoridprueba character varying, exlnro character varying, exlparametrodeentrada character varying, exlvalorparametro character varying, exltipovalidacion character varying, exlprueba character varying, exlresultadoesperado character varying, exlsolucion character varying, exltipoemision character varying, opcional smallint, totalpruebasesperadas integer, totalpruebascorrectas integer, totalpruebasincorrectas integer, porcentajecasoprueba integer, checado boolean, exltipoprueba character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene una lista con todos los casos de prueba de la etapa 2 efectuados por el contribuente.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.
	p_sector	: Identificador del documento sector.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;
	v_total_log_sistema_id integer:=0;
	v_ha_finalizado bool:=false;
	v_etapa_certificacion_sistemas_id integer:=2852;
	
	v_total_casos_pruebas integer:=0; 
	v_total_casos_pruebas_exitosos integer:=0; 
	v_total_casos_pruebas_pendientes integer:=0; 
	v_porcentaje_etapa integer:=0;
	
	v_suma_total_casos_pruebas integer:=0;
	v_suma_total_casos_pruebas_logs integer:=0;	
	 
	
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
	v_fecha_prueba timestamp:= now();
	v_res_match smallint:=0;
begin		
		--Nota: Obtenidiendo fechas inicio y fin de pruebas
		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'F');
		
		--Nota: Tabla temporal para almacenar los CASOS DE PRUEBA asignados al sistema 
		drop table if exists TEMPORAL_PRUEBAS;
		
		create temp table TEMPORAL_PRUEBAS
		as
		select * 
		from (
				select distinct 
				0::bigint as log_id,
				coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
				p_sistema_id::bigint as sistema_id , 
				0::integer as estado_match , 
				v_fecha_prueba as fecha_prueba, 
				'-'::varchar  as documento_sector_id_log, 
				0::bigint as id_recepcion, 
				coalesce(PRUEBAS.caso_prueba,'-') as caso_prueba,
				PRUEBAS.documento_sector_id  as documento_sector_id,
				split_part(PRUEBAS.caso_prueba, '|',1)::varchar as exlnro,
				split_part(PRUEBAS.caso_prueba, '|',3)::varchar as exlparametrodeentrada,
				split_part(PRUEBAS.caso_prueba, '|',4)::varchar as exlvalorparametro,
				split_part(PRUEBAS.caso_prueba, '|',5)::varchar as exltipovalidacion,
				split_part(PRUEBAS.caso_prueba, '|',6)::varchar as exlprueba,
				split_part(PRUEBAS.caso_prueba, '|',7)::varchar as exlresultadoesperado,		
				split_part(PRUEBAS.caso_prueba, '|',8)::varchar as exlsolucion,
				split_part(PRUEBAS.caso_prueba, '|',9)::varchar as exltipoemision,
				PRUEBAS.opcional,
				PRUEBAS.total_pruebas::integer as totalpruebasesperadas,
				0::integer as totalpruebascorrectas,
				0::integer as totalpruebasincorrectas,
				0::integer as porcentajecasoprueba,
				true::bool as checado,
				'-'::varchar as exltipoprueba,
				PRUEBAS.estado_id as pruebas_estado_id,
				'AC'::varchar as logs_estado_id,
				PRUEBAS.hash as hash,
				PRUEBAS.hash_descripcion as hash_descripcion,
				'-'::varchar as  documentosector 
				from sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd PRUEBAS				
				where 				
				PRUEBAS.estado_id='AC'  and 
				PRUEBAS.documento_sector_id in (
												select CLA.codigo_clasificador 
												from sre_recaudaciones.sre_fac_tipos_documentos_sistemas DOC inner join sre_recaudaciones.sre_fac_clasificadores CLA 
												on DOC.tipo_documento_factura_id=CLA.codigo_clasificador_equivalente			
												where DOC.sistema_id=p_sistema_id and
													DOC.estado_id='AC' and 
													CLA.estado_id='AC' and
													DOC.estado_tipo_documento_sistema_id = 1380 and 
													DOC.fecha_ultima_modificacion <= v_fecha_inicio_etapa
												)
			 ) as DETALLE;
			 		 		 	
		drop table if exists TEMPORAL_LOGS;		 
		create temp table TEMPORAL_LOGS (documento_sector_id int4, hash varchar, total_log integer, total_pruebas integer, porcentaje integer);		 
				
		insert into TEMPORAL_LOGS (documento_sector_id, hash, total_log, total_pruebas, porcentaje)
		(
				select LOGS.documento_sector_id, LOGS.hash,  COUNT(LOGS.*) as total_log, PRUEBAS.totalpruebasesperadas, 0 as porcentaje
				from sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd LOGS inner join TEMPORAL_PRUEBAS PRUEBAS								
				on (LOGS.hash=PRUEBAS.hash and LOGS.documento_sector_id=PRUEBAS.documento_sector_id) 
				where LOGS.sistema_id=p_sistema_id and 
				LOGS.estado_match=1 and
				LOGS.estado_id='AC' and
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa 
				group by LOGS.documento_sector_id, LOGS.hash, PRUEBAS.totalpruebasesperadas				
		);
		
	
		--Nota: Limpiando los "totales de los casos de pruebas" que sobre pasa la "cantidad de pruebas definidos" para cada caso.						
		update TEMPORAL_LOGS
		set total_log =(case 
								when TEMPORAL_LOGS.total_log >= TEMPORAL_LOGS.total_pruebas then TEMPORAL_LOGS.total_pruebas
								else TEMPORAL_LOGS.total_log
						end);
							
		--Nota: Obteniendo el procentaje por cada caso de prueba
		update TEMPORAL_LOGS
		set porcentaje=(total_log*100)/total_pruebas;
		
		
		--Nota: Calculo de la cantidad de pruebas de la etapa					
		v_total_casos_pruebas := (
				select count(*)
				from TEMPORAL_PRUEBAS				
		);  --
																	
		update TEMPORAL_PRUEBAS 
		set
			estado_match=coalesce((select 1 from TEMPORAL_LOGS where TEMPORAL_LOGS.hash=TEMPORAL_PRUEBAS.hash and TEMPORAL_LOGS.documento_sector_id=TEMPORAL_PRUEBAS.documento_sector_id  limit 1),0),  
			documento_sector_id_log=coalesce((select (select descripcion  from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO SECTOR' and codigo_clasificador= TEMPORAL_LOGS.documento_sector_id limit 1)  from TEMPORAL_LOGS where TEMPORAL_LOGS.hash=TEMPORAL_PRUEBAS.hash and TEMPORAL_LOGS.documento_sector_id=TEMPORAL_PRUEBAS.documento_sector_id  limit 1),'-'),
			id_recepcion=1;
							

		--Nota: Calcular el total de pruebas correctas e incorrectas por cada caso de prueba.	
		update TEMPORAL_PRUEBAS 
		set 
			totalpruebascorrectas=coalesce(
				(
					select TEMPORAL_LOGS.total_log
					from TEMPORAL_LOGS
					where 				
					TEMPORAL_PRUEBAS.estado_match=1 and
					TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash and
					TEMPORAL_LOGS.documento_sector_id=TEMPORAL_PRUEBAS.documento_sector_id
				),0
			)
			,
			totalpruebasincorrectas=0, 						
			checado = case 
						when TEMPORAL_PRUEBAS.opcional=1 and TEMPORAL_PRUEBAS.estado_match=1 then true
						when TEMPORAL_PRUEBAS.opcional=1 and TEMPORAL_PRUEBAS.estado_match=0 then false
						else false
					  end,
			exltipoprueba= case 
								when TEMPORAL_PRUEBAS.opcional=1 then 'SUGERIDA'								
								else 'OBLIGATORIA'
					  		end;
				
			--Nota: Calcular el porcentaje de prueba OBLIGATORIO		  		
			update TEMPORAL_PRUEBAS 
			set 
				porcentajecasoprueba=coalesce((
					select TEMPORAL_LOGS.porcentaje
					from TEMPORAL_LOGS
					where 									
					TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash and
					TEMPORAL_LOGS.documento_sector_id=TEMPORAL_PRUEBAS.documento_sector_id
					),0);   
			
				
			update TEMPORAL_PRUEBAS 
			set 			
				porcentajecasoprueba = case 
							when  TEMPORAL_PRUEBAS.porcentajecasoprueba>=100 then 100
							when TEMPORAL_PRUEBAS.porcentajecasoprueba<0 then 0
							else TEMPORAL_PRUEBAS.porcentajecasoprueba
						  end;
			
		--Nota: Calcular el porcentaje de prueba SUGERIDO		  		
		update TEMPORAL_PRUEBAS 
		set 
			porcentajecasoprueba=100,				
			totalpruebascorrectas=TEMPORAL_PRUEBAS.totalpruebasesperadas,
			totalpruebasincorrectas=0
		where TEMPORAL_PRUEBAS.opcional=1 and TEMPORAL_PRUEBAS.checado=true;
		
		update TEMPORAL_PRUEBAS
		set
		documentosector =(select descripcion  from sre_recaudaciones.sre_fac_clasificadores where agrupador like 'TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_PRUEBAS.documento_sector_id);
		
			 
		return QUERY
		(			
			select 
			RESULTADO_A.log_id,
			RESULTADO_A.caso_prueba_id,
			RESULTADO_A.sistema_id , 
			RESULTADO_A.estado_match, 
			RESULTADO_A.fecha_prueba, 
			RESULTADO_A.documento_sector_id_log,			
			RESULTADO_A.id_recepcion, 
			RESULTADO_A.caso_prueba,
			RESULTADO_A.documentosector,			
			RESULTADO_A.exlnro,
			RESULTADO_A.exlparametrodeentrada,
			RESULTADO_A.exlvalorparametro,
			RESULTADO_A.exltipovalidacion,
			RESULTADO_A.exlprueba,
			RESULTADO_A.exlresultadoesperado,		
			RESULTADO_A.exlsolucion,
			RESULTADO_A.exltipoemision,
			RESULTADO_A.opcional,
			RESULTADO_A.totalpruebasesperadas,
			RESULTADO_A.totalpruebascorrectas,
			RESULTADO_A.totalpruebasincorrectas,
			RESULTADO_A.porcentajecasoprueba,
			RESULTADO_A.checado,
			RESULTADO_A.exltipoprueba

			from TEMPORAL_PRUEBAS as RESULTADO_A
			order by RESULTADO_A.documento_sector_id, RESULTADO_A.exlnro::integer   			
		);

	
		drop table if exists TEMPORAL_PRUEBAS;
		drop table if exists TEMPORAL_LOGS;
		
				
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_obtener_detalle_pruebas_etapa_2');
			return;	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_6(p_sistema_id bigint)
 RETURNS TABLE(caso_prueba_id bigint, sistema_id bigint, estado_match integer, fecha_prueba timestamp without time zone, hash character varying, hash_descripcion character varying, nro character varying, tipo_prueba character varying, codigo_sistema character varying, codigo_ambiente character varying, codigo_emision character varying, codigo_modalidad character varying, nit_requerimiento character varying, cuis character varying, cufd character varying, documento_fiscal_paquete character varying, documento_sector character varying, sucursal_requerimiento character varying, codigo_punto_venta character varying, fecha_envio character varying, archivo character varying, resultado_esperado character varying, solucion character varying, documento_sector_paquete character varying, descripcion_prueba character varying, cantidad_documentos_fiscales character varying, evento_significativo_registrado character varying, resultado_esperado_paquete character varying, opcional smallint, cantidad_casos_esperados integer, cantidad_casos_correctos integer, cantidad_casos_incorrectos integer, porcentaje_avance integer, satisfactorio boolean, agrupador character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene una lista con todos los casos de prueba de la etapa 6 efectuados por el contribuente.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.
      p_sector    : Identificador del documento sector.
PARAMETROS SALIDA    
    retorna conjunto de datos correspondiente la tabla sre_fac_casos_prueba_6_envio_paquetes definidas y la tabla sre_fac_log_6_envio_paquetes
    cada registro contempa su totalpruebasesperadas, totalpruebascorrectas totalpruebasincorrectas::integer,porcentajecasoprueba::integer,...
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste para reducir tiempo de procesamiento en retorno
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 10/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.1
**************************************************************************************************************************************************/
declare           

      v_resultado smallint := 0;
      v_total_log_sistema_id integer:=0;
      v_ha_finalizado bool:=false;
      v_etapa_certificacion_sistemas_id integer:=2856;
      v_fecha_inicio_etapa timestamp;
      v_fecha_fin_etapa timestamp;
begin                  
            --Nota: Obtenidiendo fechas inicio y fin de pruebas
            v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'I');
            v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'F');
            
            --Nota: Tabla temporal para almacenar los CASOS DE PRUEBA asignados al sistema 
            drop table if exists TEMPORAL_PRUEBAS;
             
            create temp table TEMPORAL_PRUEBAS
            as
            select * 
            from (
                        select distinct 
                        0::bigint as log_id,
                        coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
                        sistema_id as sistema_id , 
                        0::integer as estado_match , 
                        '1900-01-01'::timestamp as fecha_prueba,                               
                        0::bigint as id_recepcion, 
                        
                        split_part(PRUEBAS.caso_prueba, '|',1)::varchar as exlnro,
                        split_part(PRUEBAS.caso_prueba, '|',2)::varchar as exltipoprueba,
                        split_part(PRUEBAS.caso_prueba, '|',3)::varchar as exlcodigosistema,
                        split_part(PRUEBAS.caso_prueba, '|',4)::varchar as exlcodigoambiente,
                        split_part(PRUEBAS.caso_prueba, '|',5)::varchar as exlcodigoemision,
                        split_part(PRUEBAS.caso_prueba, '|',6)::varchar as exlcodigomodalidad,          
                        split_part(PRUEBAS.caso_prueba, '|',7)::varchar as exlnit,
                        split_part(PRUEBAS.caso_prueba, '|',8)::varchar as exlcuis, 
                        split_part(PRUEBAS.caso_prueba, '|',9)::varchar as exlcufd,
                        split_part(PRUEBAS.caso_prueba, '|',10)::varchar as exlcodigodocumentofiscal,
                        split_part(PRUEBAS.caso_prueba, '|',11)::varchar as exlcodigodocumentosector,
                        split_part(PRUEBAS.caso_prueba, '|',12)::varchar as exlsucursal,
                        split_part(PRUEBAS.caso_prueba, '|',13)::varchar as exlcodigopuntoventa,
                        split_part(PRUEBAS.caso_prueba, '|',14)::varchar as exlfechaenvio,
                        split_part(PRUEBAS.caso_prueba, '|',15)::varchar as exlarchivo,
                        split_part(PRUEBAS.caso_prueba, '|',16)::varchar as exlresultadoesperado,
                        split_part(PRUEBAS.caso_prueba, '|',17)::varchar as exlsolucion,                   
                        
                        -- Ajuste por ultimo cambio en pruebas paquete ECA
                        split_part(PRUEBAS.caso_prueba, '|',2)::varchar as exlcodigodocumentosectorpaquete,
                        split_part(PRUEBAS.caso_prueba, '|',3)::varchar as exldescripcionprueba,
                        split_part(PRUEBAS.caso_prueba, '|',4)::varchar as exlcantidaddocumentosfiscales,
                        split_part(PRUEBAS.caso_prueba, '|',5)::varchar as exleventosignificativoregistrado,
                        split_part(PRUEBAS.caso_prueba, '|',6)::varchar as exlresultadoesperadopaquete,
                        
                        PRUEBAS.agrupador,
                        
                        PRUEBAS.opcional,
                        PRUEBAS.total_pruebas::integer as totalpruebasesperadas,
                        0::integer as totalpruebascorrectas,
                        0::integer as totalpruebasincorrectas,
                        0::integer as porcentajecasoprueba,
                        
                        false::bool as satisfactorio,
                        PRUEBAS.estado_id as pruebas_estado_id,
                        'AC'::varchar as logs_estado_id,
                        PRUEBAS.hash as hash,
                        PRUEBAS.hash_descripcion as hash_descripcion
                        from sre_recaudaciones.sre_fac_casos_prueba_6_envio_paquetes PRUEBAS                       
                        where                         
                        PRUEBAS.estado_id='AC'  
                   ) as DETALLE;
                             
            
            --Comprobar si ha finalizado la etapa                     
             v_ha_finalizado:=sre_recaudaciones.sre_fac_pru_comprobar_etapa_2('ha_finalizado', p_sistema_id, v_etapa_certificacion_sistemas_id); --ok          
                              
            drop table if exists TEMPORAL_LOGS;
            
            --Nota: Tabla temporal para almacenar los LOGS capturados en un rango de fechas.
            create temp table TEMPORAL_LOGS
            as    
            select 
            LOGS.log_id, 
            LOGS.sistema_id, 
            LOGS.hash,
            LOGS.hash_descripcion,
            LOGS.caso_prueba_id, 
            LOGS.documento_sector_id, 
            LOGS.id_recepcion, 
            LOGS.fecha_prueba, 
            LOGS.estado_match, 
            LOGS.estado_id
            from sre_recaudaciones.sre_fac_log_6_envio_paquetes LOGS 
            where 
            LOGS.sistema_id=p_sistema_id and 
            LOGS.estado_id='AC' and            
            LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa and --ok
            v_ha_finalizado=false
            ;                                                                     
                                    
            --Nota: Calcular campos de la tabla LOGS - ETAPA 6.  
            update TEMPORAL_PRUEBAS 
            set 
                  estado_match = coalesce((select TEMPORAL_LOGS.estado_match from TEMPORAL_LOGS where TEMPORAL_LOGS.hash=TEMPORAL_PRUEBAS.hash and TEMPORAL_LOGS.estado_id = 'AC' limit 1),0),  
                  fecha_prueba = now(); 
                                    
            --Nota: Calcular el total de pruebas correctas.      
            update TEMPORAL_PRUEBAS 
            set 
                  totalpruebascorrectas=(
                        select count(TEMPORAL_LOGS.*)
                        from TEMPORAL_LOGS
                        where 
                        TEMPORAL_LOGS.caso_prueba_id = TEMPORAL_PRUEBAS.caso_prueba_id and
                        TEMPORAL_PRUEBAS.estado_match=1 and
                        TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash and
                        TEMPORAL_PRUEBAS.opcional=0
                  );
                                                                                                                                                                       
            --Nota: Calcular el porcentaje de prueba SUGERIDO                      
            update TEMPORAL_PRUEBAS 
            set 
                  porcentajecasoprueba=100,                      
                  totalpruebascorrectas=TEMPORAL_PRUEBAS.totalpruebasesperadas,
                  totalpruebasincorrectas=0
            where TEMPORAL_PRUEBAS.opcional=1 and TEMPORAL_PRUEBAS.estado_match=1;
                        
            --Nota: Calcular el porcentaje de prueba OBLIGATORIO                   
            update TEMPORAL_PRUEBAS 
            set 
                  porcentajecasoprueba=  ((                      
                  case 
                        when (TEMPORAL_PRUEBAS.totalpruebascorrectas-TEMPORAL_PRUEBAS.totalpruebasincorrectas)<0 then 0                          
                        else (TEMPORAL_PRUEBAS.totalpruebascorrectas-TEMPORAL_PRUEBAS.totalpruebasincorrectas)
                  end                           
                  )*100)/TEMPORAL_PRUEBAS.totalpruebasesperadas
            where TEMPORAL_PRUEBAS.opcional=0; 
                  

            update TEMPORAL_PRUEBAS 
            set               
                  porcentajecasoprueba = case 
                                   when  TEMPORAL_PRUEBAS.porcentajecasoprueba>=100 then 100
                                   when TEMPORAL_PRUEBAS.porcentajecasoprueba<0 then 0
                                   else TEMPORAL_PRUEBAS.porcentajecasoprueba
                                end;
                                
            --Calcular el valor satisfactorio para los casos de prueba  OBLIGATORIOS Y SUGERIDOS                           
            update TEMPORAL_PRUEBAS 
            set               
                  satisfactorio = case 
                                   when  TEMPORAL_PRUEBAS.porcentajecasoprueba>=100 then true
                                   when TEMPORAL_PRUEBAS.porcentajecasoprueba<100 then false
                                   else false
                                end;                                     
                                          
            --Obtener el texto SUGERIDO/OBLIGATORIO                          
            update TEMPORAL_PRUEBAS 
            set               
                  exltipoprueba= case 
                                               when TEMPORAL_PRUEBAS.opcional=1 then 'SUGERIDA'                                           
                                               else 'OBLIGATORIA'
                                          end;                                            
                                          
                  
            return QUERY
            (                 
                  select 
                  RESULTADO_A.caso_prueba_id::bigint, 
                  RESULTADO_A.sistema_id::bigint ,  
                  RESULTADO_A.estado_match::integer, 
                  RESULTADO_A.fecha_prueba::timestamp, 
                  RESULTADO_A.hash,
                  RESULTADO_A.hash_descripcion,                                    
                  
                  RESULTADO_A.exlnro::varchar,
                  RESULTADO_A.exltipoprueba::varchar,
                  RESULTADO_A.exlcodigosistema::varchar,
                  RESULTADO_A.exlcodigoambiente::varchar,
                  RESULTADO_A.exlcodigoemision::varchar,
                  RESULTADO_A.exlcodigomodalidad::varchar,       
                  RESULTADO_A.exlnit::varchar,
                  --RESULTADO_A.exlcuis::varchar, 
                  sre_recaudaciones.sre_fac_dividir_cadena(RESULTADO_A.exlcuis, 17)::varchar as exlcuis,
                  --RESULTADO_A.exlcufd::varchar,
                  sre_recaudaciones.sre_fac_dividir_cadena(RESULTADO_A.exlcufd, 20)::varchar as exlcufd,
                  RESULTADO_A.exlcodigodocumentofiscal::varchar,
                  RESULTADO_A.exlcodigodocumentosector::varchar,
                  RESULTADO_A.exlsucursal::varchar,
                  RESULTADO_A.exlcodigopuntoventa::varchar,
                  RESULTADO_A.exlfechaenvio::varchar,
                  RESULTADO_A.exlarchivo::varchar,
                  RESULTADO_A.exlresultadoesperado::varchar,
                  RESULTADO_A.exlsolucion::varchar,                    
                  
                  RESULTADO_A.exlcodigodocumentosectorpaquete::varchar,
                  RESULTADO_A.exldescripcionprueba::varchar,
                  RESULTADO_A.exlcantidaddocumentosfiscales::varchar,
                  RESULTADO_A.exleventosignificativoregistrado::varchar,
                  RESULTADO_A.exlresultadoesperadopaquete::varchar,
                  
                  RESULTADO_A.opcional::smallint, 
                  RESULTADO_A.totalpruebasesperadas::integer, 
                  RESULTADO_A.totalpruebascorrectas::integer, 
                  RESULTADO_A.totalpruebasincorrectas::integer, 
                  RESULTADO_A.porcentajecasoprueba::integer,
                  RESULTADO_A.satisfactorio::bool,
                  RESULTADO_A.agrupador::varchar
                              
                  from TEMPORAL_PRUEBAS as RESULTADO_A
                  order by RESULTADO_A.exlnro::integer                       
            );    
                        
      EXCEPTION
        when others
          then
            perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_obtener_detalle_pruebas_etapa_6 - sistema:' || p_sistema_id);
            
                  return;     
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_8(p_sistema_id bigint)
 RETURNS TABLE(caso_prueba_id bigint, sistema_id bigint, estado_match integer, fecha_prueba timestamp without time zone, hash character varying, hash_descripcion character varying, nro character varying, tipo_prueba character varying, codigo_sistema character varying, nit_requerimiento character varying, sucursal_requerimiento character varying, direccion character varying, resultado_esperado character varying, solucion character varying, opcional smallint, cantidad_casos_esperados integer, cantidad_casos_correctos integer, cantidad_casos_incorrectos integer, porcentaje_avance integer, satisfactorio boolean)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene una lista con todos los casos de prueba de la etapa 2 efectuados por el contribuente.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.
	p_sector	: Identificador del documento sector.
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se modifico el calculo de totales de la tabla LOGS
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/09/2019>
AUTOR DE LA MODIFICACION : :<vcg>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		

	v_resultado smallint := 0;
	v_total_log_sistema_id integer:=0;
	v_ha_finalizado bool:=false;
	v_etapa_certificacion_sistemas_id integer:=3069;
	
	v_total_casos_pruebas integer:=0; 
	v_total_casos_pruebas_exitosos integer:=0; 
	v_total_casos_pruebas_pendientes integer:=0; 
	v_porcentaje_etapa integer:=0;
	
	v_suma_total_casos_pruebas integer:=0;
	v_suma_total_casos_pruebas_logs integer:=0;
	
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
begin		
		--Nota: Realizar el match entre la tabla LOGS y CASOS DE PRUEBA de la etapa 8.
		perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_8(p_sistema_id);
		
		--Nota: Obtenidiendo fechas inicio y fin de pruebas
		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'F');
		
		--Nota: Tabla temporal para almacenar los CASOS DE PRUEBA asignados al sistema 
		drop table if exists TEMPORAL_PRUEBAS;
		
		create temp table TEMPORAL_PRUEBAS
		as
		select * 
		from (
				select distinct 
				0::bigint as log_id,
				coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
				p_sistema_id::bigint as sistema_id , 
				0::integer as estado_match , 
				'1900-01-01'::timestamp as fecha_prueba, 					
				0::bigint as id_recepcion, 
				coalesce(PRUEBAS.caso_prueba,'-') as caso_prueba,					
				split_part(PRUEBAS.caso_prueba, '|',1)::varchar as exlnro,
				split_part(PRUEBAS.caso_prueba, '|',2)::varchar as exltipoprueba,
				split_part(PRUEBAS.caso_prueba, '|',3)::varchar as exlcodigosistema,
				split_part(PRUEBAS.caso_prueba, '|',4)::varchar as exlnit,
				split_part(PRUEBAS.caso_prueba, '|',5)::varchar as exlsucursal,
				split_part(PRUEBAS.caso_prueba, '|',6)::varchar as exldireccion,		
				split_part(PRUEBAS.caso_prueba, '|',7)::varchar as exlresultadoesperado,
				split_part(PRUEBAS.caso_prueba, '|',8)::varchar as exlsolucion, 
				PRUEBAS.opcional,
				PRUEBAS.total_pruebas::integer as totalpruebasesperadas,
				0::integer as totalpruebascorrectas,
				0::integer as totalpruebasincorrectas,
				0::integer as porcentajecasoprueba,
				false::bool as satisfactorio,
					PRUEBAS.estado_id as pruebas_estado_id,
					'AC'::varchar as logs_estado_id,
					PRUEBAS.hash as hash,
					PRUEBAS.hash_descripcion as hash_descripcion
				from sre_recaudaciones.sre_fac_casos_prueba_8_gestion_sucursales PRUEBAS				
				where 				
				PRUEBAS.estado_id='AC'  
			 ) as DETALLE;
			 
			 					 			
		drop table if exists TEMPORAL_LOGS;
		
		create temp table TEMPORAL_LOGS (hash varchar, total_log integer, total_pruebas integer, porcentaje integer);		 
				
		insert into TEMPORAL_LOGS(hash, total_log, total_pruebas, porcentaje)
		(
				select LOGS.hash,  COUNT(LOGS.*) as total_log, PRUEBAS.totalpruebasesperadas, 0 as porcentaje
				from sre_recaudaciones.sre_fac_log_8_gestion_sucursales LOGS inner join TEMPORAL_PRUEBAS PRUEBAS								
				on (LOGS.hash=PRUEBAS.hash) 
				where LOGS.sistema_id=p_sistema_id and 
				LOGS.estado_match=1 and
				LOGS.estado_id='AC' and
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa 
				group by LOGS.hash, PRUEBAS.totalpruebasesperadas				
		);
																																			 

		
	
		--Nota: Limpiando los "totales de los casos de pruebas" que sobre pasa la "cantidad de pruebas definidos" para cada caso.						
		update TEMPORAL_LOGS
		set total_log =(case 
								when TEMPORAL_LOGS.total_log >= TEMPORAL_LOGS.total_pruebas then TEMPORAL_LOGS.total_pruebas
								else TEMPORAL_LOGS.total_log
						end);
							
		--Nota: Obteniendo el procentaje por cada caso de prueba
		update TEMPORAL_LOGS
		set porcentaje=(total_log*100)/total_pruebas;
		
		
		--Nota: Calculo de la cantidad de pruebas de la etapa					
		v_total_casos_pruebas := (
				select count(*)
				from TEMPORAL_PRUEBAS				
		);  --
																	
		update TEMPORAL_PRUEBAS 
		set
			estado_match=coalesce((select 1 from TEMPORAL_LOGS where TEMPORAL_LOGS.hash=TEMPORAL_PRUEBAS.hash limit 1),0),  
			id_recepcion=1;
							

		--Nota: Calcular el total de pruebas correctas e incorrectas por cada caso de prueba.	
		update TEMPORAL_PRUEBAS 
		set 
			totalpruebascorrectas=coalesce(
				(
					select TEMPORAL_LOGS.total_log
					from TEMPORAL_LOGS
					where 				
					TEMPORAL_PRUEBAS.estado_match=1 and
					TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash
				),0
			)
			,
			totalpruebasincorrectas=0, 						
			exltipoprueba= case 
								when TEMPORAL_PRUEBAS.opcional=1 then 'SUGERIDA'								
								else 'OBLIGATORIA'
					  		end;
				
			--Nota: Calcular el porcentaje de prueba OBLIGATORIO		  		
			update TEMPORAL_PRUEBAS 
			set 
				porcentajecasoprueba=coalesce((
					select TEMPORAL_LOGS.porcentaje
					from TEMPORAL_LOGS
					where 									
					TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash 
					),0);   
			
				
			update TEMPORAL_PRUEBAS 
			set 			
				porcentajecasoprueba = case 
							when  TEMPORAL_PRUEBAS.porcentajecasoprueba>=100 then 100
							when TEMPORAL_PRUEBAS.porcentajecasoprueba<0 then 0
							else TEMPORAL_PRUEBAS.porcentajecasoprueba
						  end;
			
		--Nota: Calcular el porcentaje de prueba SUGERIDO		  		
		update TEMPORAL_PRUEBAS 
		set 
			porcentajecasoprueba=100,				
			totalpruebascorrectas=TEMPORAL_PRUEBAS.totalpruebasesperadas,
			totalpruebasincorrectas=0
		where TEMPORAL_PRUEBAS.opcional=1 and TEMPORAL_PRUEBAS.estado_match=1; --modificado 20190918
		
		
		--Calcular el valor satisfactorio para los casos de prueba  OBLIGATORIOS Y SUGERIDOS			  		
		update TEMPORAL_PRUEBAS 
		set 			
			satisfactorio = case 
							when  TEMPORAL_PRUEBAS.porcentajecasoprueba>=100 then true
							when TEMPORAL_PRUEBAS.porcentajecasoprueba<100 then false
							else false
		  end;	
			
		return QUERY
		(			
			select 
			RESULTADO_A.caso_prueba_id::bigint, 
				RESULTADO_A.sistema_id::bigint ,  
			RESULTADO_A.estado_match::integer, 
			RESULTADO_A.fecha_prueba::timestamp, 
				RESULTADO_A.hash,
				RESULTADO_A.hash_descripcion,							
			RESULTADO_A.exlnro::varchar, 
			RESULTADO_A.exltipoprueba::varchar, 
			RESULTADO_A.exlcodigosistema::varchar, 
			RESULTADO_A.exlnit::varchar, 
			sre_recaudaciones.sre_fac_dividir_cadena(RESULTADO_A.exlsucursal, 20)::varchar as exlsucursal, 								
			RESULTADO_A.exldireccion::varchar,
			RESULTADO_A.exlresultadoesperado::varchar, 
			RESULTADO_A.exlsolucion::varchar, 
			RESULTADO_A.opcional::smallint, 
			RESULTADO_A.totalpruebasesperadas::integer, 
			RESULTADO_A.totalpruebascorrectas::integer, 
			RESULTADO_A.totalpruebasincorrectas::integer, 
			RESULTADO_A.porcentajecasoprueba::integer, 
			RESULTADO_A.satisfactorio::bool 
					
			from TEMPORAL_PRUEBAS as RESULTADO_A
			order by RESULTADO_A.exlnro::integer  				
		);	
				
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_obtener_detalle_pruebas_etapa_8');
			return;	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_9(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(caso_prueba_id bigint, sistema_id bigint, estado_match smallint, fecha_descripcion_prueba timestamp without time zone, hash character varying, hash_descripcion character varying, opcional smallint, cantidad_casos_esperados integer, cantidad_casos_correctos integer, cantidad_casos_incorrectos integer, porcentaje_avance integer, satisfactorio boolean, archivo character varying, codigo_ambiente character varying, codigo_autorizacion character varying, documento_fiscal_paquete character varying, documento_sector character varying, codigo_emision character varying, codigo_modalidad character varying, motivo_evento character varying, codigo_punto_venta character varying, codigo_sistema character varying, sucursal_requerimiento character varying, cuf character varying, cufd character varying, cuis character varying, descripcion_descripcion_prueba character varying, direccion character varying, fecha_envio character varying, nit_requerimiento character varying, nro integer, numero_documento_fiscal character varying, parametro_evento character varying, descripcion_prueba character varying, requisito_prueba character varying, resultado_esperado character varying, solucion character varying, tipo_validacion character varying, tipo_prueba character varying, valor_parametro character varying, prueba character varying, tipo_evento character varying, descripcion_prueba_evento character varying, procedimiento_evento character varying, parametros_importantes character varying, accion_evento character varying, resultado_evento character varying, descripcion_sector character varying, agrupador character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 9
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;
	v_total_log_sistema_id integer:=0;
	v_ha_finalizado bool:=false;
	v_etapa_certificacion_sistemas_id integer:=3052;
	v_tipo_documento_sector integer:=0;
	v_tipo_documento_sector_proveedor bigint:=0;
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
begin	
		perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_9(p_sistema_id);	

		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'F');
		v_tipo_documento_sector_proveedor:=(select tipo_documento_sector_id from sre_recaudaciones.sre_fac_nits_pruebas_proveedores where nit=p_nit);
		v_tipo_documento_sector:= (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where codigo_clasificador_equivalente=v_tipo_documento_sector_proveedor limit 1);
		
		--Nota: Tabla temporal para almacenar los CASOS DE PRUEBA asignados al sistema 
		drop table if exists TEMPORAL_PRUEBAS;
		
		create temp table TEMPORAL_PRUEBAS
		as
		(
			--**********ANULACIONES			
				select
						coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_ambiente,
						'' as codigo_autorizacion,
						split_part(pruebas.caso_prueba, '|',4)::varchar as documento_fiscal_paquete,
						split_part(pruebas.caso_prueba, '|',5)::varchar as documento_sector,
						split_part(pruebas.caso_prueba, '|',6)::varchar as codigo_emision,
						split_part(pruebas.caso_prueba, '|',7)::varchar as codigo_modalidad,
						split_part(pruebas.caso_prueba, '|',8)::varchar as motivo_evento,
						split_part(pruebas.caso_prueba, '|',9)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',10)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',11)::varchar as sucursal_requerimiento,
						split_part(pruebas.caso_prueba, '|',12)::varchar as cuf,
						split_part(pruebas.caso_prueba, '|',13)::varchar as cufd,
						split_part(pruebas.caso_prueba, '|',14)::varchar as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,
						split_part(pruebas.caso_prueba, '|',15)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						split_part(pruebas.caso_prueba, '|',16)::varchar as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',17)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',10)::varchar as solucion,
						'' as tipo_validacion,
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,						
						split_part(pruebas.caso_prueba, '|',5)::varchar as descripcion_sector,
						PRUEBAS.agrupador as agrupador
						 
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas						
					where pruebas.agrupador='ANULACIONES' 
					and pruebas.estado_id='AC'
					and documento_sector_id=v_tipo_documento_sector
					union						
--**********CUFD
					select
						coalesce(pruebas.caso_prueba_id,0) as caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						pruebas.hash as hash,
						pruebas.hash_descripcion as hash_descripcion,
						pruebas.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						'' as documento_sector,
						'' as codigo_emision,
						split_part(pruebas.caso_prueba, '|',4)::varchar as codigo_modalidad,--si
						'' as motivo_evento,
						split_part(pruebas.caso_prueba, '|',8)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_sistema,--si					
						split_part(pruebas.caso_prueba, '|',7)::varchar as sucursal_requerimiento,--si
						'' as cuf,
						'' as cufd,						
						split_part(pruebas.caso_prueba, '|',6)::varchar as cuis,--si
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,						
						split_part(pruebas.caso_prueba, '|',5)::varchar as nit_requerimiento,--si
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,--si
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',9)::varchar as resultado_esperado,--si
						split_part(pruebas.caso_prueba, '|',10)::varchar as solucion,--si						
						'' as tipo_validacion,										
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,--si
						'' as valor_parametro,
						'' as prueba,
						'' as tipo_evento,
						'' as descripcion_prueba_evento,
						'' as procedimiento_evento,
						'' as parametros_importantes,
						'' as accion_evento,
						'' as resultado_evento,
						'' descripcion_sector,
						PRUEBAS.agrupador as agrupador			
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='CUFD' and
						pruebas.estado_id='AC'
						UNION
--**********EVENTOS SIGNIFICATIVOS

					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						split_part(pruebas.caso_prueba, '|',1)::varchar as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						'' as documento_sector,
						'' as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						split_part(pruebas.caso_prueba, '|',8)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',4)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',7)::varchar as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,
						split_part(pruebas.caso_prueba, '|',6)::varchar as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,
						split_part(pruebas.caso_prueba, '|',5)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						split_part(pruebas.caso_prueba, '|',6)::varchar as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',8)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',12)::varchar as solucion,						
						split_part(pruebas.caso_prueba, '|',10)::varchar as tipo_validacion,						
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='EVENTOS SIGNIFICATIVOS' and
						pruebas.estado_id='AC'
					union	
					
--**********PAQUETES
					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						split_part(pruebas.caso_prueba, '|',15)::varchar as archivo,
						split_part(pruebas.caso_prueba, '|',4)::varchar as codigo_ambiente,
						'' as codigo_autorizacion,
						split_part(pruebas.caso_prueba, '|',10)::varchar as documento_fiscal_paquete,
						'' as documento_sector,
						split_part(pruebas.caso_prueba, '|',5)::varchar as codigo_emision,
						split_part(pruebas.caso_prueba, '|',6)::varchar as codigo_modalidad,
						'' as motivo_evento,
						split_part(pruebas.caso_prueba, '|',13)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',12)::varchar as sucursal_requerimiento,
						'' as cuf,
						split_part(pruebas.caso_prueba, '|',9)::varchar as cufd,
						split_part(pruebas.caso_prueba, '|',8)::varchar as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						split_part(pruebas.caso_prueba, '|',14)::varchar as fecha_envio,
						split_part(pruebas.caso_prueba, '|',7)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',16)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',17)::varchar as solucion,
						'' as tipo_validacion,
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						'' as descripcion_prueba_evento,
						'' as procedimiento_evento,
						'' as parametros_importantes,
						'' as accion_evento,
						'' as resultado_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where (pruebas.agrupador='SOAP PARAMETROS' or pruebas.agrupador='SOAP PARAMETROS 1')
					and	 pruebas.estado_id='AC'
					union
										
--**********SUCURSAL
					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						'' as documento_sector,
						'' as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						'' as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',5)::varchar as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,
						'' as cuis,
						'' as descripcion_descripcion_prueba,
						split_part(pruebas.caso_prueba, '|',6)::varchar as direccion,						
						'' as fecha_envio,
						split_part(pruebas.caso_prueba, '|',4)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',7)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',8)::varchar as solucion,						
						'' as tipo_validacion,						
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='SUCURSAL' and
						pruebas.estado_id='AC'
					UNION						
--**********XML XSD
					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						split_part(pruebas.caso_prueba, '|',10)::varchar as documento_sector,						
						split_part(pruebas.caso_prueba, '|',9)::varchar as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						'' as codigo_punto_venta,
						'' codigo_sistema,
						'' as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,
						'' as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,						
						'' as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						split_part(pruebas.caso_prueba, '|',3)::varchar as parametro_evento,
						split_part(pruebas.caso_prueba, '|',6)::varchar as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',7)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',8)::varchar as solucion,
						split_part(pruebas.caso_prueba, '|',5)::varchar as tipo_validacion,						
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						split_part(pruebas.caso_prueba, '|',4)::varchar as valor_parametro,
						'' as prueba,
						
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='VALIDACION XML-XSD' 
					and pruebas.estado_id='AC'
					and documento_sector_id=v_tipo_documento_sector														  
			 );
		    		    		   
		    --Nota: Obtiene los registros LOGS 
		    drop table if exists TEMPORAL_LOGS;
		
		    if (p_nit=0) then
				create temp table TEMPORAL_LOGS
				as	 
				select DISTINCT 
				LOGS.log_id, 
				LOGS.sistema_id,
				LOGS.nit_cliente,
				LOGS.hash,
				LOGS.hash_descripcion,
				LOGS.caso_prueba_id, 
				LOGS.documento_sector_id, 
				LOGS.id_recepcion, 
				LOGS.fecha_prueba, 
				LOGS.estado_match 
				from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS 
				where 
				LOGS.sistema_id=p_sistema_id and				
				LOGS.estado_id='AC' and		
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa; 
			else
				create temp table TEMPORAL_LOGS
				as	 
				select DISTINCT 
				LOGS.log_id, 
				LOGS.sistema_id,
				LOGS.nit_cliente,
				LOGS.hash,
				LOGS.hash_descripcion,
				LOGS.caso_prueba_id, 
				LOGS.documento_sector_id, 
				LOGS.id_recepcion, 
				LOGS.fecha_prueba, 
				LOGS.estado_match 
				from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS 
				where 
				LOGS.sistema_id=p_sistema_id and
				LOGS.nit_cliente=p_nit and --***
				LOGS.estado_id='AC' and		
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa; --and			                          
		    end if;
		    		   	 													  					
			--Nota: Calcular el total de pruebas correctas e incorrectas por cada caso de prueba.
			update TEMPORAL_PRUEBAS 
			set 
			cantidad_casos_correctos=(
				select count(TEMPORAL_LOGS.*)				
				from TEMPORAL_LOGS
				where 
				TEMPORAL_LOGS.estado_match=1 and
				TEMPORAL_LOGS.hash=TEMPORAL_PRUEBAS.hash 
			),
			cantidad_casos_incorrectos=0;
			
			--Nota: Calcular el estado match			
			update TEMPORAL_PRUEBAS 
			set				
			estado_match=coalesce((
				select max(TEMPORAL_LOGS.estado_match)
				from TEMPORAL_LOGS
				where 				
				TEMPORAL_LOGS.estado_match=1 and
				TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash 							
			),0), 
			fecha_descripcion_prueba=coalesce((
				select max(TEMPORAL_LOGS.fecha_prueba)
				from TEMPORAL_LOGS
				where 				
				TEMPORAL_LOGS.estado_match=1 and
				TEMPORAL_PRUEBAS.hash=TEMPORAL_LOGS.hash 							
			),'1900-01-01 00:00:00'); 
			 				
			--Nota: Calcular el porcentaje del caso de prueba		  		
			update TEMPORAL_PRUEBAS 
			set 
				porcentaje_avance=  ((				
					case 
						when (TEMPORAL_PRUEBAS.cantidad_casos_correctos-TEMPORAL_PRUEBAS.cantidad_casos_incorrectos)<0 then 0						
						else (TEMPORAL_PRUEBAS.cantidad_casos_correctos-TEMPORAL_PRUEBAS.cantidad_casos_incorrectos)
					end					
				)*100)/TEMPORAL_PRUEBAS.cantidad_casos_esperados;			
				
			update TEMPORAL_PRUEBAS 
			set 			
				porcentaje_avance = case 
							when  TEMPORAL_PRUEBAS.porcentaje_avance>=100 then 100
							when TEMPORAL_PRUEBAS.porcentaje_avance<0 then 0
							else TEMPORAL_PRUEBAS.porcentaje_avance
						  end;
						  
			--Nota: Verifica si la prueba fue satisfactoria
			update TEMPORAL_PRUEBAS 
			set 
				satisfactorio=  (				
					case 
						when TEMPORAL_PRUEBAS.porcentaje_avance>=100 then true
						else false
					end					
				)
				;	

		    update TEMPORAL_PRUEBAS
			set documento_sector =(select descripcion from sre_recaudaciones.sre_fac_clasificadores a where a.agrupador='TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_PRUEBAS.documento_sector_id);
						
			return query  
				      (				      						
					  select 	
					  	TEMPORAL_PRUEBAS.caso_prueba_id::bigint as caso_prueba_id_res,
						TEMPORAL_PRUEBAS.sistema_id::bigint as sistema_id_res,
						TEMPORAL_PRUEBAS.estado_match::smallint as estado_match_res,
						TEMPORAL_PRUEBAS.fecha_descripcion_prueba::timestamp as fecha_descripcion_prueba_res,
						TEMPORAL_PRUEBAS.hash::varchar as hash_res,
						TEMPORAL_PRUEBAS.hash_descripcion::varchar as hash_descripcion_res,
						TEMPORAL_PRUEBAS.opcional::smallint as opcional_res,							
						TEMPORAL_PRUEBAS.cantidad_casos_esperados::integer as cantidad_casos_esperados_res,
						TEMPORAL_PRUEBAS.cantidad_casos_correctos::integer as cantidad_casos_correctos_res,
						TEMPORAL_PRUEBAS.cantidad_casos_incorrectos::integer as cantidad_casos_incorrectos_res,							
						
						TEMPORAL_PRUEBAS.porcentaje_avance::integer as porcentaje_avance_res,												
						TEMPORAL_PRUEBAS.satisfactorio::boolean as satisfactorio_res,
						
						TEMPORAL_PRUEBAS.archivo::varchar as archivo_res,
						TEMPORAL_PRUEBAS.codigo_ambiente::varchar as codigo_ambiente_res,
						TEMPORAL_PRUEBAS.codigo_autorizacion::varchar as codigo_autorizacion_res,
						TEMPORAL_PRUEBAS.documento_fiscal_paquete::varchar as documento_fiscal_paquete_res,
						TEMPORAL_PRUEBAS.documento_sector::varchar as documento_sector_res,
						TEMPORAL_PRUEBAS.codigo_emision::varchar as codigo_emision_res,
						TEMPORAL_PRUEBAS.codigo_modalidad::varchar as codigo_modalidad_res,
						TEMPORAL_PRUEBAS.motivo_evento::varchar as motivo_evento_res,
						TEMPORAL_PRUEBAS.codigo_punto_venta::varchar as codigo_punto_venta_res,
						TEMPORAL_PRUEBAS.codigo_sistema::varchar as codigo_sistema_res,
						TEMPORAL_PRUEBAS.sucursal_requerimiento::varchar as sucursal_requerimiento_res,
						TEMPORAL_PRUEBAS.cuf::varchar as cuf_res,
						TEMPORAL_PRUEBAS.cufd::varchar as cufd_res,
						TEMPORAL_PRUEBAS.cuis::varchar as cuis_res,
						TEMPORAL_PRUEBAS.descripcion_descripcion_prueba::varchar as descripcion_descripcion_prueba_res,
						TEMPORAL_PRUEBAS.direccion::varchar as direccion_res,						
						TEMPORAL_PRUEBAS.fecha_envio::varchar as fecha_envio_res,
						TEMPORAL_PRUEBAS.nit_requerimiento::varchar as nit_requerimiento_res,
						TEMPORAL_PRUEBAS.nro::integer as nro_res,
						
						TEMPORAL_PRUEBAS.numero_documento_fiscal::varchar as numero_documento_fiscal_res,
						TEMPORAL_PRUEBAS.parametro_evento::varchar as parametro_evento_res,
						TEMPORAL_PRUEBAS.descripcion_prueba::varchar as descripcion_prueba_res,
						TEMPORAL_PRUEBAS.requisito_prueba::varchar as requisito_prueba_res,
						TEMPORAL_PRUEBAS.resultado_esperado::varchar as resultado_esperado_res,
						TEMPORAL_PRUEBAS.solucion::varchar as solucion_res,
						TEMPORAL_PRUEBAS.tipo_validacion::varchar as tipo_validacion_res,						
						TEMPORAL_PRUEBAS.tipo_prueba::varchar as tipo_prueba_res,												
						TEMPORAL_PRUEBAS.valor_parametro::varchar as valor_parametro_res,
						TEMPORAL_PRUEBAS.prueba::varchar as prueba_res,
						TEMPORAL_PRUEBAS.tipo_evento::varchar as tipo_evento_res,
						TEMPORAL_PRUEBAS.descripcion_prueba_evento::varchar as descripcion_prueba_evento_res,
						TEMPORAL_PRUEBAS.procedimiento_evento::varchar as procedimiento_evento_res,
						TEMPORAL_PRUEBAS.parametros_importantes::varchar as parametros_importantes_res,
						TEMPORAL_PRUEBAS.accion_evento::varchar as accion_evento_res,
						TEMPORAL_PRUEBAS.resultado_evento::varchar as resultado_evento_res,
						TEMPORAL_PRUEBAS.descripcion_sector ::varchar as descripcion_sector_res,
						TEMPORAL_PRUEBAS.agrupador::varchar as agrupador_res
						from TEMPORAL_PRUEBAS
						order by documento_sector_res,nro_res
						);											 								
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_obtener_detalle_casos_prueba_etapa_9');
			return;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_detalle_pruebas_etapa_9_(p_sistema_id bigint, p_nit bigint)
 RETURNS TABLE(caso_prueba_id bigint, sistema_id bigint, estado_match smallint, fecha_descripcion_prueba timestamp without time zone, hash character varying, hash_descripcion character varying, opcional smallint, cantidad_casos_esperados integer, cantidad_casos_correctos integer, cantidad_casos_incorrectos integer, porcentaje_avance integer, satisfactorio boolean, archivo character varying, codigo_ambiente character varying, codigo_autorizacion character varying, documento_fiscal_paquete character varying, documento_sector character varying, codigo_emision character varying, codigo_modalidad character varying, motivo_evento character varying, codigo_punto_venta character varying, codigo_sistema character varying, sucursal_requerimiento character varying, cuf character varying, cufd character varying, cuis character varying, descripcion_descripcion_prueba character varying, direccion character varying, fecha_envio character varying, nit_requerimiento character varying, nro integer, numero_documento_fiscal character varying, parametro_evento character varying, descripcion_prueba character varying, requisito_prueba character varying, resultado_esperado character varying, solucion character varying, tipo_validacion character varying, tipo_prueba character varying, valor_parametro character varying, prueba character varying, tipo_evento character varying, descripcion_prueba_evento character varying, procedimiento_evento character varying, parametros_importantes character varying, accion_evento character varying, resultado_evento character varying, descripcion_sector character varying, agrupador character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite generar el detalle de los casos de prueba de la etapa 9
PARAMETROS INGRESO
    		p_sistema_id
    		p_etapa_certificacion_sistemas_id
PARAMETROS SALIDA
    Tabla de resultado
SUBSISTEMA : Facturación
FECHA CREACION : <22/07/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare		
	v_resultado smallint := 0;
	v_total_log_sistema_id integer:=0;
	v_ha_finalizado bool:=false;
	v_etapa_certificacion_sistemas_id integer:=3052;
	v_tipo_documento_sector integer:=0;
	v_tipo_documento_sector_proveedor bigint:=0;
	v_fecha_inicio_etapa timestamp;
	v_fecha_fin_etapa timestamp;
begin	
		perform sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_9(p_sistema_id);	

		v_fecha_inicio_etapa :=sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'I');
		v_fecha_fin_etapa := sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(v_etapa_certificacion_sistemas_id, p_sistema_id, 'F');
		v_tipo_documento_sector_proveedor:=(select tipo_documento_sector_id from sre_recaudaciones.sre_fac_nits_pruebas_proveedores where nit=p_nit);
		v_tipo_documento_sector:= (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where codigo_clasificador_equivalente=v_tipo_documento_sector_proveedor limit 1);
		
		--Nota: Tabla temporal para almacenar los CASOS DE PRUEBA asignados al sistema 
		drop table if exists TEMPORAL_PRUEBAS;
		
		create temp table TEMPORAL_PRUEBAS
		as
		(
			--**********ANULACIONES			
				select
						coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_ambiente,
						'' as codigo_autorizacion,
						split_part(pruebas.caso_prueba, '|',4)::varchar as documento_fiscal_paquete,
						split_part(pruebas.caso_prueba, '|',5)::varchar as documento_sector,
						split_part(pruebas.caso_prueba, '|',6)::varchar as codigo_emision,
						split_part(pruebas.caso_prueba, '|',7)::varchar as codigo_modalidad,
						split_part(pruebas.caso_prueba, '|',8)::varchar as motivo_evento,
						split_part(pruebas.caso_prueba, '|',9)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',10)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',11)::varchar as sucursal_requerimiento,
						split_part(pruebas.caso_prueba, '|',12)::varchar as cuf,
						split_part(pruebas.caso_prueba, '|',13)::varchar as cufd,
						split_part(pruebas.caso_prueba, '|',14)::varchar as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,
						split_part(pruebas.caso_prueba, '|',15)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						split_part(pruebas.caso_prueba, '|',16)::varchar as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',17)::varchar as resultado_esperado,
						'' as solucion,
						'' as tipo_validacion,
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						'' as tipo_evento,
						'' as descripcion_prueba_evento,
						'' as procedimiento_evento,
						'' as parametros_importantes,
						'' as accion_evento,
						'' as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as descripcion_sector,
						PRUEBAS.agrupador as agrupador
						 
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas						
					where pruebas.agrupador='ANULACIONES' 
					and pruebas.estado_id='AC'
					and documento_sector_id=v_tipo_documento_sector
					union						
--**********CUFD
					select
						coalesce(pruebas.caso_prueba_id,0) as caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						pruebas.hash as hash,
						pruebas.hash_descripcion as hash_descripcion,
						pruebas.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						'' as documento_sector,
						'' as codigo_emision,
						split_part(pruebas.caso_prueba, '|',4)::varchar as codigo_modalidad,
						'' as motivo_evento,
						split_part(pruebas.caso_prueba, '|',8)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_sistema,					
						split_part(pruebas.caso_prueba, '|',7)::varchar as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,						
						split_part(pruebas.caso_prueba, '|',6)::varchar as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,						
						split_part(pruebas.caso_prueba, '|',5)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',9)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',10)::varchar as solucion,						
						'' as tipo_validacion,										
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						'' as tipo_evento,
						'' as descripcion_prueba_evento,
						'' as procedimiento_evento,
						'' as parametros_importantes,
						'' as accion_evento,
						'' as resultado_evento,
						'' descripcion_sector,
						PRUEBAS.agrupador as agrupador			
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='CUFD' and
						pruebas.estado_id='AC'
						UNION
--**********EVENTOS SIGNIFICATIVOS

					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						'' as documento_sector,
						'' as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						split_part(pruebas.caso_prueba, '|',8)::varchar as codigo_punto_venta,
						'' as codigo_sistema,
						'' as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,						
						'' as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,					
						'' as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						split_part(pruebas.caso_prueba, '|',6)::varchar as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',8)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',12)::varchar as solucion,						
						split_part(pruebas.caso_prueba, '|',10)::varchar as tipo_validacion,
						'' as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						'' as descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='EVENTOS SIGNIFICATIVOS' and
						pruebas.estado_id='AC'
					union	

--**********PAQUETES
					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						split_part(pruebas.caso_prueba, '|',15)::varchar as archivo,
						split_part(pruebas.caso_prueba, '|',4)::varchar as codigo_ambiente,
						'' as codigo_autorizacion,
						split_part(pruebas.caso_prueba, '|',10)::varchar as documento_fiscal_paquete,
						'' as documento_sector,
						split_part(pruebas.caso_prueba, '|',5)::varchar as codigo_emision,
						split_part(pruebas.caso_prueba, '|',6)::varchar as codigo_modalidad,
						'' as motivo_evento,
						split_part(pruebas.caso_prueba, '|',13)::varchar as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',12)::varchar as sucursal_requerimiento,
						'' as cuf,
						split_part(pruebas.caso_prueba, '|',9)::varchar as cufd,
						split_part(pruebas.caso_prueba, '|',8)::varchar as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						split_part(pruebas.caso_prueba, '|',14)::varchar as fecha_envio,
						split_part(pruebas.caso_prueba, '|',7)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',16)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',17)::varchar as solucion,
						'' as tipo_validacion,
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						'' as descripcion_prueba_evento,
						'' as procedimiento_evento,
						'' as parametros_importantes,
						'' as accion_evento,
						'' as resultado_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where (pruebas.agrupador='SOAP PARAMETROS' or pruebas.agrupador='SOAP PARAMETROS 1')
					and	 pruebas.estado_id='AC'
					union				
--**********SUCURSAL
					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						'' as documento_sector,
						'' as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						'' as codigo_punto_venta,
						split_part(pruebas.caso_prueba, '|',3)::varchar as codigo_sistema,
						split_part(pruebas.caso_prueba, '|',5)::varchar as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,
						'' as cuis,
						'' as descripcion_descripcion_prueba,
						split_part(pruebas.caso_prueba, '|',6)::varchar as direccion,						
						'' as fecha_envio,
						split_part(pruebas.caso_prueba, '|',4)::varchar as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						'' as parametro_evento,
						'' as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',7)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',8)::varchar as solucion,						
						'' as tipo_validacion,						
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						'' as valor_parametro,
						'' as prueba,
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='SUCURSAL' and
						pruebas.estado_id='AC'
					UNION						
--**********XML XSD
					select 
						coalesce(PRUEBAS.caso_prueba_id,0) as  caso_prueba_id,
						p_sistema_id as sistema_id,
						0::integer as estado_match,
						'1900-01-01'::timestamp as fecha_descripcion_prueba,
						PRUEBAS.hash as hash,
						PRUEBAS.hash_descripcion as hash_descripcion,
						PRUEBAS.opcional as opcional,
						pruebas.total_pruebas::integer as cantidad_casos_esperados,
						0::integer as cantidad_casos_correctos,
						0::integer as cantidad_casos_incorrectos,
						0::integer as porcentaje_avance,
						false::bool as satisfactorio,
						documento_sector_id,
						'' as archivo,
						'' as codigo_ambiente,
						'' as codigo_autorizacion,
						'' as documento_fiscal_paquete,
						split_part(pruebas.caso_prueba, '|',10)::varchar as documento_sector,												
						split_part(pruebas.caso_prueba, '|',9)::varchar as codigo_emision,
						'' as codigo_modalidad,
						'' as motivo_evento,
						'' as codigo_punto_venta,
						'' codigo_sistema,
						'' as sucursal_requerimiento,
						'' as cuf,
						'' as cufd,
						'' as cuis,
						'' as descripcion_descripcion_prueba,
						'' as direccion,						
						'' as fecha_envio,						
						'' as nit_requerimiento,
						split_part(pruebas.caso_prueba, '|',1)::varchar as nro,
						'' as numero_documento_fiscal,
						split_part(pruebas.caso_prueba, '|',3)::varchar as parametro_evento,
						split_part(pruebas.caso_prueba, '|',6)::varchar as descripcion_prueba,
						'' as requisito_prueba,
						split_part(pruebas.caso_prueba, '|',7)::varchar as resultado_esperado,
						split_part(pruebas.caso_prueba, '|',8)::varchar as solucion,						
						split_part(pruebas.caso_prueba, '|',5)::varchar as tipo_validacion,						
						split_part(pruebas.caso_prueba, '|',2)::varchar as tipo_prueba,
						split_part(pruebas.caso_prueba, '|',4)::varchar as valor_parametro,
						'' as prueba,						
						split_part(pruebas.caso_prueba, '|',3)::varchar as tipo_evento,
						split_part(pruebas.caso_prueba, '|',4)::varchar as descripcion_prueba_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar as procedimiento_evento,
						split_part(pruebas.caso_prueba, '|',7)::varchar as parametros_importantes,
						split_part(pruebas.caso_prueba, '|',9)::varchar as accion_evento,
						split_part(pruebas.caso_prueba, '|',11)::varchar as resultado_evento,
						split_part(pruebas.caso_prueba, '|',5)::varchar descripcion_sector,
						PRUEBAS.agrupador as agrupador
					from sre_recaudaciones.sre_fac_casos_prueba_9_proveedor as pruebas
					where pruebas.agrupador='VALIDACION XML-XSD' 
					and pruebas.estado_id='AC'
					and documento_sector_id=v_tipo_documento_sector														  
			 );
		    		    		    
		    --Nota: Obtiene los registros LOGS 
		    drop table if exists TEMPORAL_LOGS;
		
		    if (p_nit=0) then
				create temp table TEMPORAL_LOGS
				as	 
				select DISTINCT 
				LOGS.log_id, 
				LOGS.sistema_id,
				LOGS.nit_cliente,
				LOGS.hash,
				LOGS.hash_descripcion,
				LOGS.caso_prueba_id, 
				LOGS.documento_sector_id, 
				LOGS.id_recepcion, 
				LOGS.fecha_prueba, 
				LOGS.estado_match 
				from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS 
				where 
				LOGS.sistema_id=p_sistema_id and				
				LOGS.estado_id='AC' and		
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa; 
				
			else
				create temp table TEMPORAL_LOGS
				as	 
				select DISTINCT 
				LOGS.log_id, 
				LOGS.sistema_id,
				LOGS.nit_cliente,
				LOGS.hash,
				LOGS.hash_descripcion,
				LOGS.caso_prueba_id, 
				LOGS.documento_sector_id, 
				LOGS.id_recepcion, 
				LOGS.fecha_prueba, 
				LOGS.estado_match 
				from sre_recaudaciones.sre_fac_log_9_gestion_proveedor LOGS 
				where 
				LOGS.sistema_id=p_sistema_id and
				LOGS.nit_cliente=p_nit and 
				LOGS.estado_id='AC' and		
				LOGS.fecha_prueba between v_fecha_inicio_etapa and v_fecha_fin_etapa; 
		    end if;
		    		   	 			
		    update TEMPORAL_PRUEBAS
			set documento_sector =(select descripcion from sre_recaudaciones.sre_fac_clasificadores a where a.agrupador='TIPO DOCUMENTO SECTOR' and codigo_clasificador=TEMPORAL_PRUEBAS.documento_sector_id);
						
			return query  
				      (				      						
					  select 	
					  	TEMPORAL_PRUEBAS.caso_prueba_id::bigint as caso_prueba_id_res,
						TEMPORAL_PRUEBAS.sistema_id::bigint as sistema_id_res,
						TEMPORAL_PRUEBAS.estado_match::smallint as estado_match_res,
						TEMPORAL_PRUEBAS.fecha_descripcion_prueba::timestamp as fecha_descripcion_prueba_res,
						TEMPORAL_PRUEBAS.hash::varchar as hash_res,
						TEMPORAL_PRUEBAS.hash_descripcion::varchar as hash_descripcion_res,
						TEMPORAL_PRUEBAS.opcional::smallint as opcional_res,							
						TEMPORAL_PRUEBAS.cantidad_casos_esperados::integer as cantidad_casos_esperados_res,
						TEMPORAL_PRUEBAS.cantidad_casos_correctos::integer as cantidad_casos_correctos_res,
						TEMPORAL_PRUEBAS.cantidad_casos_incorrectos::integer as cantidad_casos_incorrectos_res,							
						
						TEMPORAL_PRUEBAS.porcentaje_avance::integer as porcentaje_avance_res,												
						TEMPORAL_PRUEBAS.satisfactorio::boolean as satisfactorio_res,
						
						TEMPORAL_PRUEBAS.archivo::varchar as archivo_res,
						TEMPORAL_PRUEBAS.codigo_ambiente::varchar as codigo_ambiente_res,
						TEMPORAL_PRUEBAS.codigo_autorizacion::varchar as codigo_autorizacion_res,
						TEMPORAL_PRUEBAS.documento_fiscal_paquete::varchar as documento_fiscal_paquete_res,
						TEMPORAL_PRUEBAS.documento_sector::varchar as documento_sector_res,
						TEMPORAL_PRUEBAS.codigo_emision::varchar as codigo_emision_res,
						TEMPORAL_PRUEBAS.codigo_modalidad::varchar as codigo_modalidad_res,
						TEMPORAL_PRUEBAS.motivo_evento::varchar as motivo_evento_res,
						TEMPORAL_PRUEBAS.codigo_punto_venta::varchar as codigo_punto_venta_res,
						TEMPORAL_PRUEBAS.codigo_sistema::varchar as codigo_sistema_res,
						TEMPORAL_PRUEBAS.sucursal_requerimiento::varchar as sucursal_requerimiento_res,
						TEMPORAL_PRUEBAS.cuf::varchar as cuf_res,
						TEMPORAL_PRUEBAS.cufd::varchar as cufd_res,
						TEMPORAL_PRUEBAS.cuis::varchar as cuis_res,
						TEMPORAL_PRUEBAS.descripcion_descripcion_prueba::varchar as descripcion_descripcion_prueba_res,
						TEMPORAL_PRUEBAS.direccion::varchar as direccion_res,						
						TEMPORAL_PRUEBAS.fecha_envio::varchar as fecha_envio_res,
						TEMPORAL_PRUEBAS.nit_requerimiento::varchar as nit_requerimiento_res,
						TEMPORAL_PRUEBAS.nro::integer as nro_res,
						
						TEMPORAL_PRUEBAS.numero_documento_fiscal::varchar as numero_documento_fiscal_res,
						TEMPORAL_PRUEBAS.parametro_evento::varchar as parametro_evento_res,
						TEMPORAL_PRUEBAS.descripcion_prueba::varchar as descripcion_prueba_res,
						TEMPORAL_PRUEBAS.requisito_prueba::varchar as requisito_prueba_res,
						TEMPORAL_PRUEBAS.resultado_esperado::varchar as resultado_esperado_res,
						TEMPORAL_PRUEBAS.solucion::varchar as solucion_res,
						TEMPORAL_PRUEBAS.tipo_validacion::varchar as tipo_validacion_res,						
						TEMPORAL_PRUEBAS.tipo_prueba::varchar as tipo_prueba_res,												
						TEMPORAL_PRUEBAS.valor_parametro::varchar as valor_parametro_res,
						TEMPORAL_PRUEBAS.prueba::varchar as prueba_res,
						TEMPORAL_PRUEBAS.tipo_evento::varchar as tipo_evento_res,
						TEMPORAL_PRUEBAS.descripcion_prueba_evento::varchar as descripcion_prueba_evento_res,
						TEMPORAL_PRUEBAS.procedimiento_evento::varchar as procedimiento_evento_res,
						TEMPORAL_PRUEBAS.parametros_importantes::varchar as parametros_importantes_res,
						TEMPORAL_PRUEBAS.accion_evento::varchar as accion_evento_res,
						TEMPORAL_PRUEBAS.resultado_evento::varchar as resultado_evento_res,
						TEMPORAL_PRUEBAS.descripcion_sector ::varchar as descripcion_sector_res,
						TEMPORAL_PRUEBAS.agrupador::varchar as agrupador_res
						from TEMPORAL_PRUEBAS
						order by documento_sector_res,nro_res
						);											 								
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_obtener_detalle_casos_prueba_etapa_9');
			return;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa(p_etapa integer, p_sistema_id bigint, p_cual_fecha character varying)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene la fecha inicio o fin de la etapa.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.	
    p_cual_fecha : I=fecha inicio de pruebas, F=fecha fin de prueba 
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado timestamp;		
begin
	
	case
		when upper(p_cual_fecha)='I' then
			v_resultado:=(
			select ETAPAS.fecha_inicio_prueba
			from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS  inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion PRUEBAS
				on ETAPAS.prueba_etapa_certificacion_id=PRUEBAS.prueba_etapa_certificacion_id
			where ETAPAS.sistema_id=p_sistema_id and 
				  ETAPAS.estado_id='AC' and
				  PRUEBAS.etapa_certificacion_sistemas_id = p_etapa
			limit 1); 
		when upper(p_cual_fecha)='F' then 
			v_resultado:=(
			select ETAPAS.fecha_fin_prueba 
			from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion PRUEBAS
				on ETAPAS.prueba_etapa_certificacion_id=PRUEBAS.prueba_etapa_certificacion_id 
			where ETAPAS.sistema_id=p_sistema_id and 
				  ETAPAS.estado_id='AC' and
				  PRUEBAS.etapa_certificacion_sistemas_id = p_etapa
			limit 1);
		else
			v_resultado:=now();
	end case;
			
	return coalesce(v_resultado, now()) ;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_obtener_fecha_inicio_fin_etapa');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_obtener_fecha_inicio_fin_etapa')::timestamp);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_obtener_fecha_inicio_fin_etapa_2(p_sistema_id bigint, p_cual_fecha character varying)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene la fecha inicio o fin de la etapa 2.
PARAMETROS INGRESO
    p_sistema_id : Identificador del sistema.	
    p_cual_fecha : I=fecha inicio de pruebas, F=fecha fin de prueba 
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado timestamp;		
begin
	
	case
		when upper(p_cual_fecha)='I' then
			v_resultado:=(
			select ETAPAS.fecha_inicio_prueba
			from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS  inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion PRUEBAS
				on ETAPAS.prueba_etapa_certificacion_id=PRUEBAS.prueba_etapa_certificacion_id
			where ETAPAS.sistema_id=p_sistema_id and 
				  ETAPAS.estado_id='AC' and
				  PRUEBAS.etapa_certificacion_sistemas_id = 2852
			limit 1); 
		when upper(p_cual_fecha)='F' then 
			v_resultado:=(
			select ETAPAS.fecha_fin_prueba 
			from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas ETAPAS inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion PRUEBAS
				on ETAPAS.prueba_etapa_certificacion_id=PRUEBAS.prueba_etapa_certificacion_id 
			where ETAPAS.sistema_id=p_sistema_id and 
				  ETAPAS.estado_id='AC' and
				  PRUEBAS.etapa_certificacion_sistemas_id = 2852
			limit 1);
		else
			v_resultado:=now();
	end case;
			
	return coalesce(v_resultado, now()) ;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_obtener_fecha_inicio_fin_etapa_2');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_pru_obtener_fecha_inicio_fin_etapa_2')::timestamp);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_verificar_recepcion_individual(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llaman a las funciones: sre_fac_ope_verificar_id_recepcion_correcta, sre_fac_ope_obtener_venta_id
				 sre_fac_ope_obtener_venta_id, sre_fac_ope_actualizar_estado_recepcion_ventas, sre_fac_ope_obtener_numero_factura,
				 sre_fac_ope_obtener_cuf
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :15/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_resultado_recepcion bigint := 0;
   v_resultado_recepcion_correcta bigint := 0;
   
   v_venta_id bigint := 0;  
   v_lista_errores varchar := '0';
   
   v_estado_recepcion_observada integer := 708;
   v_resultado smallint:=0;
   
begin
	-- Nota :: Se obtiene el ID de la recepcion de la funcion sre_fac_ope_verificar_id_recepcion
	v_resultado_recepcion := (sre_recaudaciones.sre_fac_ope_verificar_id_recepcion(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
	
	if(v_resultado_recepcion != 0)
	then
	     -- Nota :: Se obtiene el ID de la recepcion correcta de la funcion sre_fac_ope_verificar_id_recepcion_correcta
		 v_resultado_recepcion_correcta := (sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_correcta(p_tipo_documento_sector_id, p_codigo_recepcion)); --*
		
		 if(v_resultado_recepcion_correcta != 0)
		 then
		 	-- Nota :: ACTUALIZAR EL ESTADO DE LA RECEPCION				 	
		    v_venta_id := cast((sre_recaudaciones.sre_fac_ope_obtener_venta_id(p_tipo_documento_sector_id,v_resultado_recepcion_correcta)) as bigint); --*
		    if v_venta_id<>0 then
		    	v_resultado:=1;
		    end if;
		 else
		 	-- Nota :: OBTENER DATOS DE LA TABLA ERRORES
		 	v_resultado:=0;		    		  		 			    
		 end if;
	end if;
	

	return v_resultado;
	
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_verificar_recepcion_individual');
			return 0;
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_pru_verificar_recepcion_paquete(p_tipo_documento_sector_id integer, p_codigo_recepcion bigint)
 RETURNS TABLE(total integer, total_validos integer, total_invalidos integer)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el select donde se llama a las funciones
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :16/05/2019
AUTOR DE LA MODIFICACION : rgt
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar:='0';	
	v_json json;	
	i json;	
		
	v_resultado_recepcion_individual smallint:=0;			
	v_resultado_validacion_id_paquete smallint:=0;	
	
	v_total integer:=0;
	v_total_validos integer:=0;
	v_total_invalidos integer:=0;		
begin			
	--Nota: Verifica si el paquete fue recepcionado
	v_resultado_validacion_id_paquete:=(sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete(p_tipo_documento_sector_id, p_codigo_recepcion)); --*	
	
	if(v_resultado_validacion_id_paquete>0) then
		v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_lista_recepcion_id(p_tipo_documento_sector_id)); --*			
		execute v_sql using p_codigo_recepcion into v_json;
									
			if( (v_json->'recepciones_id')::text <> 'null') then
			
				for i in select * from json_array_elements(v_json->'recepciones_id') 
				loop								
					v_resultado_recepcion_individual := (select (sre_recaudaciones.sre_fac_pru_verificar_recepcion_individual(p_tipo_documento_sector_id, cast(i->>'recepciones_id_i' as bigint)))); 					
					
					if(v_resultado_recepcion_individual=0) then 						
						v_total_invalidos:=v_total_invalidos+1;
					else
						v_total_validos:=v_total_validos+1;
					end if;	
					v_total:=v_total+1;
													
			 	end loop;			 							 				 				 		 				 				 				 		
			end if;					    
	end if;
				 	
		 
		return QUERY
		(			
			select 
			v_total::integer,
			v_total_validos::integer,
			v_total_invalidos::integer 			
		);
	
							
	EXCEPTION
	  when others
	    then		  
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_pru_verificar_recepcion_paquete');
			return;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_prueba_temporal(p_json character varying)
 RETURNS TABLE(resultado character varying)
 LANGUAGE plpgsql
AS $function$

declare


	
begin
	
	  drop table if exists prueba;
	 -- ALTER  TABLE prueba ADD COLUMN id SERIAL PRIMARY KEY;
	  create temp table prueba as
							    select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS caso_prueba_id, a.* 
							    from sre_recaudaciones.sre_fac_obtener_combinaciones_cuf_etapa_0(242, 1020703023) as a;
	 return query
	  (select row_to_json(tbl) :: varchar
	  from (	  
	  		select *
	  		from prueba
	       ) tbl);
	

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_asignar_nit_proveedor(p_sistema_id_proveedor bigint, p_persona_contribuyente_id_proveedor bigint, p_modalidades_facturacion_proveedor character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion realiza la asignacion de NITs a un sistema proveedor.
PARAMETROS INGRESO
    		p_sistema_id    	
PARAMETROS SALIDA
    v_resultado: 1 si el registro fue exitoso; 0 caso contrario
SUBSISTEMA : Facturación
FECHA CREACION : <22/08/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_resultado smallint := 0;
	
	v_contribuyente_id bigint:=0; 
	v_contribuyente_proveedor_id bigint:=0; 
	v_sistema_id_proveedor bigint:=0; 
	v_modalidad_facturacion_id int4:=0;  
	v_estado_sistema_contribuyente_id int4:=0; 
	v_ultimo_registro_sre_fac_sistemas_contribuyentes bigint:=0;	
	v_estado_inicio_id int4:=0; 
	v_CUIS varchar(20):='-';
	
	c_cursor       refcursor;
  	r_registro      record;	
  	
  	v_sistema_contribuyente_id_maximo bigint:=0;
  	v_inicio_sistema_id_maximo bigint:=0;
begin			
		if((select count(*) from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor where sistema_id_proveedor=p_sistema_id_proveedor and estado_id='AC')=0) then
		
			v_sistema_contribuyente_id_maximo :=coalesce((select max(sistema_contribuyente_id) from sre_recaudaciones.sre_fac_sistemas_contribuyentes where sistema_contribuyente_id between 1 and 3000),1);
  			v_inicio_sistema_id_maximo :=coalesce((select max(inicio_sistema_id) from sre_recaudaciones.sre_fac_inicios_sistemas where inicio_sistema_id between 1 and 3000), 1);
		
  			if(v_sistema_contribuyente_id_maximo<=3000 and v_inicio_sistema_id_maximo<=3000)then
						--Nota: guardar la asociacion sistema_proveedor y nit_cliente
						
						INSERT INTO sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor
						(sistema_id_proveedor, cuis, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion, nit_prueba_proveedor_id)
						(select p_sistema_id_proveedor, 'CUIS123456789', 'AC', NOW(), NOW(), 1000, 1000, nit_prueba_proveedor_id
						from sre_recaudaciones.sre_fac_nits_pruebas_proveedores
						where tipo_documento_sector_id in (
									select distinct b.codigo_clasificador_equivalente
									from sre_recaudaciones.sre_fac_tipos_documentos_sistemas a
									inner join sre_recaudaciones.sre_fac_clasificadores b
									on a.tipo_documento_factura_id=b.codigo_clasificador_equivalente
									where sistema_id=p_sistema_id_proveedor and
										  a.estado_tipo_documento_sistema_id = 1380
						));	
								
						
						--Nota: guar las asociaciones sistema_proveedor y nit_cliente en las tablas:  "sre_fac_sistemas_contribuyentes" y "sre_fac_inicios_sistemas"
						open c_cursor for
													(select PROVEEDOR.sistema_id_proveedor, PROVEEDOR.cuis, PROVEEDOR.nit_prueba_proveedor_id, NITS.nit, NITS.persona_contribuyente_id, NITS.tipo_documento_sector_id
													from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor PROVEEDOR inner join sre_recaudaciones.sre_fac_nits_pruebas_proveedores NITS
													on PROVEEDOR.nit_prueba_proveedor_id=NITS.nit_prueba_proveedor_id
													where PROVEEDOR.estado_id='AC' and
													NITS.estado_id='AC' and
													PROVEEDOR.sistema_id_proveedor=p_sistema_id_proveedor); 																			 										 																
													
				 		loop
							    fetch c_cursor into r_registro;
							    exit when not found;
							    
								v_contribuyente_id := r_registro.persona_contribuyente_id;
								v_contribuyente_proveedor_id :=p_persona_contribuyente_id_proveedor; 
								v_sistema_id_proveedor := p_sistema_id_proveedor; 
								v_modalidad_facturacion_id :=600; 
								v_estado_sistema_contribuyente_id :=637;
								
								v_estado_inicio_id :=633; 
								v_CUIS :=r_registro.cuis;
								
								
								v_sistema_contribuyente_id_maximo :=v_sistema_contribuyente_id_maximo+1;
								v_inicio_sistema_id_maximo :=v_inicio_sistema_id_maximo+1;
								
							   	INSERT INTO sre_recaudaciones.sre_fac_sistemas_contribuyentes
								(
								sistema_contribuyente_id
								,usuario_registro_id
								, usuario_ultima_modificacion_id
								, contribuyente_id
								, contribuyente_proveedor_id
								, usuario_aprueba_id
								, usuario_baja_id
								, sistema_id
								, modalidad_facturacion_id
								, estado_sistema_contribuyente_id
								, observacion
								, fecha_solicitud
								, fecha_aprobacion_rechazo
								, fecha_baja
								, fecha_registro
								, fecha_ultima_modificacion
								, estado_id
								, modalidad_servicio_id)
								VALUES(
								v_sistema_contribuyente_id_maximo
								, 1000
								, 1000		
								, v_contribuyente_id
								, v_contribuyente_proveedor_id    
								, null
								, null
								, v_sistema_id_proveedor 
								, v_modalidad_facturacion_id
								, v_estado_sistema_contribuyente_id
								, null
								, now()
								, null
								, null
								, now()
								, now()
								, 'AC'
								, NULL
								) returning sistema_contribuyente_id into v_ultimo_registro_sre_fac_sistemas_contribuyentes;
											
								INSERT INTO sre_recaudaciones.sre_fac_inicios_sistemas
								(
								inicio_sistema_id
								,usuario_registro_id
								, usuario_ultima_modificacion_id
								, contribuyente_id
								, sucursal_id
								, sistema_id
								, sistema_contribuyente_id
								, estado_inicio_id
								, cuis
								, fecha_baja
								, fecha_registro
								, fecha_ultima_modificacion
								, estado_id
								, usuario_baja_id
								, punto_venta_id)
								VALUES(
								v_inicio_sistema_id_maximo
								, 1000
								, 1000
								, v_contribuyente_id
								, 0
								, v_sistema_id_proveedor
								, v_ultimo_registro_sre_fac_sistemas_contribuyentes
								, v_estado_inicio_id
								, v_CUIS
								, now()
								, now()
								, now()
								, 'AC'
								, 1000
								, null
								); 
																					    	   
					  end loop;
					  	
					  close c_cursor;
					  
					  v_resultado:=1;					  
  			end if;					
		end if;
									
	return v_resultado;

	EXCEPTION
	when others
		then		  
		  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_asignar_nit_proveedor');
	      return 0;		  	   
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_compra_recepcion_etapa_1(p_json json, p_etapa character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare


	v_fecha_actual timestamp:=now();
	
		p_usuario_registro_id int8:=1000; 
		p_usuario_ultima_modificacion_id int8:=1000; 
		p_sistema_id bigint:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');--obtener apartir del codigo sistema
		p_persona_contribuyente_id bigint:=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener a partir del nit
		p_recepcion_paquete_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');--por el momento vacio
		p_punto_venta_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id'); 
		p_oficina_id integer:= sre_recaudaciones.sre_fac_ope_obtener_oficina_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener apartir del nit 
		p_sucursal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id'); 
		p_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id'); 
		p_estado_recepcion_id integer:=709; --En la etapa 1 codigo 709, en la etapa 2, luego de validar colocar el codigo 902 
		p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
		p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
		p_cufd varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cufd'); 
		p_cuis varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
		p_fecha_envio timestamp:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
		p_fecha_recepcion timestamp:= v_fecha_actual; 
		p_fecha_consolidacion timestamp:= null; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
		p_fecha_registro timestamp:= v_fecha_actual; 
		p_fecha_ultima_modificacion timestamp:= v_fecha_actual; 
		p_estado_id varchar:='AC';
		p_tipo_emision_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id'); 		


		
	p_tipo_crud varchar(2):='C';
		
	p_id_recepciones bigint:=0;	
		
begin		
	case
		when p_tipo_emision_id = 1 and p_etapa='1'--ONLINE
			then
			--Insercion tabla: RecepcionesCorrectas
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_compras_etapa_1
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id, 
				p_recepcion_paquete_id, 
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
			
		when (p_tipo_emision_id = 2 or p_tipo_emision_id = 3)  and p_etapa='1' --OFFLINE
			then
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_paquete_compra_etapa_1
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id,  
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
			
		when (p_tipo_emision_id = 2 or p_tipo_emision_id = 3)  and p_etapa='2' --Obtiene el id_recepcion
			then
			--Insercion tabla: RecepcionesCorrectas
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_compras_etapa_1
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id, 
				p_recepcion_paquete_id, 
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud				
				)
			);
					
		else 
				p_id_recepciones:=0;
	end case;
	
	--add: 20190325
	if (p_id_recepciones<0) then
		return -1;
	end if;	

	
	return p_id_recepciones; 
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_compra_recepcion_etapa_1'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_factura_actualizar_anulacion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Actualiza los estados de las siguientes tablas: sre_fac_recepciones_anulaciones y las diferentes facturas de ventas.
PARAMETROS INGRESO:
    				Parametros JSON de entrada de datos
PARAMETROS SALIDA:
    				Estado de recepcion de anulacion de la tabla sre_fac_recepciones_anulaciones
SUBSISTEMA : Facturación
FECHA CREACION : <12/04/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se modificó los estados de respuesta para mostrar a los contribuyentes de acuerdo al resultado de la transacción.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<06/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Asignacion valor cufp -> cuf, para el tipo documento sector 28 - prevalorada
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 29/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare

	v_estado_recepcion_anulacion_id integer:=0;
	v_estado_recepcion_anulacion_anulado_confirmado_id integer:=sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_confirmada_bd');
	v_estado_recepcion_id integer:=0;
	v_estado_recepcion_anulado_id integer:=sre_recaudaciones.sre_fac_par_estado('estado_factura_anulada');
	v_resultado integer:=0;
	p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
	p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 		
	p_cuf varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
	p_id_recepcion_anulacion bigint:=(p_json->'xmlRecepcionGenerica'->>'p_recepcion_anulacion_id');
	v_sql varchar:='';
	
begin						
	if(p_tipo_documento_sector_id = 28)then -- valida si es prevalorada
	   	p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cufp');	 
	end if;
	
	v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_actualizacion_ventas(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_cuf,v_estado_recepcion_anulado_id);
	execute v_sql;	

	UPDATE  sre_recaudaciones.sre_fac_recepciones_anulaciones 
	SET estado_recepcion_anulacion_id = v_estado_recepcion_anulacion_anulado_confirmado_id, fecha_ultima_modificacion=now()
	WHERE recepcion_anulacion_id=p_id_recepcion_anulacion;

	v_estado_recepcion_anulacion_id:=(select estado_recepcion_anulacion_id from sre_recaudaciones.sre_fac_recepciones_anulaciones where recepcion_anulacion_id=p_id_recepcion_anulacion);
	v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_cuf, false);
	execute v_sql  	
    into v_estado_recepcion_id;
  
    v_resultado:=case when (v_estado_recepcion_anulacion_id=v_estado_recepcion_anulacion_anulado_confirmado_id AND v_estado_recepcion_id=v_estado_recepcion_anulado_id)
    				  then sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_confirmada') 
    				  else sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_rechazada') end;
	return v_resultado; 
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_factura_actualizar_anulacion'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_factura_actualizar_anulacion_contingencia(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Actualiza los estados de las siguientes tablas: sre_fac_recepciones_anulaciones y las diferentes facturas de ventas.
PARAMETROS INGRESO:
    				Parametros JSON de entrada de datos
PARAMETROS SALIDA:
    				Estado de recepcion de anulacion de la tabla sre_fac_recepciones_anulaciones
SUBSISTEMA : Facturación
FECHA CREACION : <12/04/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se modificó los estados de respuesta para mostrar a los contribuyentes de acuerdo al resultado de la transacción.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<06/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_estado_recepcion_anulacion_id integer:=0;
	v_estado_recepcion_anulacion_anulado_confirmado_id integer:=sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_confirmada_bd');
	v_estado_recepcion_id integer:=0;
	v_estado_recepcion_anulado_id integer:=sre_recaudaciones.sre_fac_par_estado('estado_factura_anulada');
	v_resultado integer:=0;
	p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
	p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 		
	p_cuf varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
	p_id_recepcion_anulacion bigint:=(p_json->'xmlRecepcionGenerica'->>'p_recepcion_anulacion_id');
	v_sql varchar:='';		

begin						
	
	v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_actualizacion_venta_contingencia(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_cuf,v_estado_recepcion_anulado_id);
	execute v_sql;	

	UPDATE sre_recaudaciones.sre_fac_recepciones_anulaciones_contingencias  
	SET 
		estado_recepcion_anulacion_id = v_estado_recepcion_anulacion_anulado_confirmado_id, 
		fecha_ultima_modificacion=now()
	WHERE recepcion_anulacion_contingencia_id=p_id_recepcion_anulacion;

	v_estado_recepcion_anulacion_id:=(select estado_recepcion_anulacion_id from sre_recaudaciones.sre_fac_recepciones_anulaciones_contingencias where recepcion_anulacion_contingencia_id=p_id_recepcion_anulacion);
	v_sql := sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, p_cuf, false);
	execute v_sql  	
    into v_estado_recepcion_id;
  
    v_resultado:=case when (v_estado_recepcion_anulacion_id=v_estado_recepcion_anulacion_anulado_confirmado_id AND v_estado_recepcion_id=v_estado_recepcion_anulado_id)
    				  then sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_confirmada') 
    				  else sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_rechazada') end;
	return v_resultado; 
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_factura_actualizar_anulacion_contingencia'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_factura_recepcion_anulacion(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Asignacion valor cufp -> cuf, para el tipo documento sector 28 - prevalorada
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 21/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare

     v_fecha_actual timestamp:=now();
     v_usuario_registro_id int8:=1000; 
     v_usuario_ultima_modificacion_id int8:=1000; 
     v_sistema_id bigint:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));--obtener apartir del codigo sistema
     v_persona_contribuyente_id bigint:=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener a partir del nit 
     v_punto_venta_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id');  
     v_sucursal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id'); 
     v_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id'); 
     v_estado_recepcion_id integer:=1496; --Anulado pendiente
     v_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
     v_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
    v_numero_documento_fiscal int8:=(p_json->'xmlRecepcionGenerica'->>'p_numero_documento_fiscal');
     v_cufd varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cufd'); 
     v_cuis varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuis');     
     v_fecha_recepcion timestamp:= v_fecha_actual; 
     v_fecha_consolidacion timestamp:= null; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
     v_fecha_registro timestamp:= v_fecha_actual; 
     v_fecha_ultima_modificacion timestamp:= v_fecha_actual; 
     v_estado_id varchar:='AC';    
     v_tipo_ambiente_id Integer :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
     v_cuf varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
     v_motivo_anulacion_id Integer:=(p_json->'xmlRecepcionGenerica'->>'p_motivo_anulacion_id');
     v_sql varchar:='';  
     p_id_recepcion_anulacion bigint:=0;          
begin                               

     if(v_tipo_documento_sector_id = 28)then -- valida si es prevalorada
          v_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cufp');
     end if;
     
     v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_anulaciones
                (usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, codigo_documento_sector_id, tipo_ambiente_id, motivo_anulacion_id, sucursal_id, tipo_documento_fiscal_id, estado_recepcion_anulacion_id, numero_documento_fiscal, pin_anulacion, cuf, cufd, cuis, email_comprador, celular_comprador, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_modalidad_id, codigo_tipo_anulacion)
                VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25) returning recepcion_anulacion_id';
          
     execute v_sql  
         using 
                v_usuario_registro_id, 
                v_usuario_ultima_modificacion_id, 
                v_sistema_id, 
                v_persona_contribuyente_id, 
                v_punto_venta_id, 
                v_tipo_documento_sector_id, 
                v_tipo_ambiente_id, 
                v_motivo_anulacion_id, 
                v_sucursal_id, 
                v_tipo_documento_fiscal_id, 
                v_estado_recepcion_id, 
                v_numero_documento_fiscal, 
                0,--TODO: Quitar de la base de datos el campo PIN porque ya se utiliza 
                v_cuf, 
                v_cufd, 
                v_cuis, 
                null, --TODO: Quitar de la base de datos el campo EMAIL_COMPRADOR porque ya se utiliza
                0, --TODO: Quitar de la base de datos el campo EMAIL_COMPRADOR porque ya se utiliza
                v_fecha_recepcion, 
                v_fecha_consolidacion, 
                v_fecha_registro, 
                v_fecha_ultima_modificacion, 
                v_estado_id, 
                v_tipo_modalidad_id, 
                0 -- De donde provien el valor???
         into p_id_recepcion_anulacion;
     if(p_id_recepcion_anulacion>0)then      
         v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_actualizacion_ventas(v_tipo_documento_fiscal_id, v_tipo_documento_sector_id, v_cuf,2170);
          execute v_sql; 
     end if;
     return p_id_recepcion_anulacion; 
                
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_factura_recepcion_anulacion'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_factura_recepcion_anulacion_contingencia(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_fecha_actual timestamp:=now();
	v_usuario_registro_id int8:=1000; 
	v_usuario_ultima_modificacion_id int8:=1000; 
	v_sistema_id bigint:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));--obtener apartir del codigo sistema
	v_persona_contribuyente_id bigint:=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener a partir del nit	
	v_punto_venta_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id');  
	v_sucursal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id'); 
	v_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id'); 
	v_estado_recepcion_id integer:=1496; --Anulado pendiente
	v_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
	v_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
    v_numero_documento_fiscal int8:=(p_json->'xmlRecepcionGenerica'->>'p_numero_documento_fiscal');
	v_cufd varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cufd'); 
	v_cuis varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuis');	
	v_fecha_recepcion timestamp:= v_fecha_actual; 
	v_fecha_consolidacion timestamp:= null; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
	v_fecha_registro timestamp:= v_fecha_actual; 
	v_fecha_ultima_modificacion timestamp:= v_fecha_actual; 
	v_estado_id varchar:='AC'; 	
	v_tipo_ambiente_id Integer :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
	v_cuf varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
	v_motivo_anulacion_id Integer:=(p_json->'xmlRecepcionGenerica'->>'p_motivo_anulacion_id');
	v_sql varchar:='';	
	p_id_recepcion_anulacion bigint:=0;		
begin						

	--TODO: Preguntar a Fernando 
	v_sql:='INSERT INTO sre_recaudaciones.sre_fac_recepciones_anulaciones_contingencias
			(usuario_registro_id, usuario_ultima_modificacion_id, sistema_id, persona_contribuyente_id, punto_venta_id, codigo_documento_sector_id, tipo_ambiente_id, motivo_anulacion_id, sucursal_id, tipo_documento_fiscal_id, estado_recepcion_anulacion_id, numero_documento_fiscal, pin_anulacion, cuf, cufd, cuis, email_comprador, celular_comprador, fecha_recepcion, fecha_consolidacion, fecha_registro, fecha_ultima_modificacion, estado_id, tipo_modalidad_id, codigo_tipo_anulacion)
			VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25) returning recepcion_anulacion_contingencia_id';
		
	execute v_sql  
	    using 
			v_usuario_registro_id, 
			v_usuario_ultima_modificacion_id, 
			v_sistema_id, 
			v_persona_contribuyente_id, 
			v_punto_venta_id, 
			v_tipo_documento_sector_id, 
			v_tipo_ambiente_id, 
			v_motivo_anulacion_id, 
			v_sucursal_id, 
			v_tipo_documento_fiscal_id, 
			v_estado_recepcion_id, 
			v_numero_documento_fiscal, 
			0,--TODO: Quitar de la base de datos el campo PIN porque ya se utiliza 
			v_cuf, 
			v_cufd, 
			v_cuis, 
			null, --TODO: Quitar de la base de datos el campo EMAIL_COMPRADOR porque ya se utiliza
			0, --TODO: Quitar de la base de datos el campo EMAIL_COMPRADOR porque ya se utiliza
			v_fecha_recepcion, 
			v_fecha_consolidacion, 
			v_fecha_registro, 
			v_fecha_ultima_modificacion, 
			v_estado_id, 
			v_tipo_modalidad_id, 
			0 -- De donde provien el valor???
	    into p_id_recepcion_anulacion;
	if(p_id_recepcion_anulacion>0)then		
	    v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_actualizacion_venta_contingencia(v_tipo_documento_fiscal_id, v_tipo_documento_sector_id, v_cuf,2170);
		execute v_sql;	
	end if;
	return p_id_recepcion_anulacion; 
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_factura_recepcion_anulacion_contingencia'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1(p_json json, p_etapa character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare


	v_fecha_actual timestamp:=now();
	
		p_usuario_registro_id int8:=1000; 
		p_usuario_ultima_modificacion_id int8:=1000; 
		p_sistema_id bigint:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');--obtener apartir del codigo sistema
		p_persona_contribuyente_id bigint:=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener a partir del nit
		p_recepcion_paquete_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');--por el momento vacio
		p_punto_venta_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id'); 
		p_oficina_id integer:= sre_recaudaciones.sre_fac_ope_obtener_oficina_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener apartir del nit 
		p_sucursal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id'); 
		p_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id'); 
		p_estado_recepcion_id integer:=709; --En la etapa 1 codigo 709, en la etapa 2, luego de validar colocar el codigo 902 
		p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
		p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
		p_cufd varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cufd'); 
		p_cuis varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
		p_fecha_envio timestamp:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
		p_fecha_recepcion timestamp:= v_fecha_actual; 
		p_fecha_consolidacion timestamp:= null; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
		p_fecha_registro timestamp:= v_fecha_actual; 
		p_fecha_ultima_modificacion timestamp:= v_fecha_actual; 
		p_estado_id varchar:='AC';
		p_tipo_emision_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id'); 		


		
	p_tipo_crud varchar(2):='C';
		
	p_id_recepciones bigint:=0;	
		
begin				
	--Mostrando los parametros recibidos
	    
	case
		when p_tipo_emision_id = 1 and p_etapa='1'--ONLINE
			then
			--Insercion tabla: RecepcionesCorrectas
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_dinamico_etapa_1
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id, 
				p_recepcion_paquete_id, 
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
			
		when (p_tipo_emision_id = 2 or p_tipo_emision_id = 3)  and p_etapa='1' --OFFLINE
			then
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_paquete_dinamico_etapa_1
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id,  
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
			
		when (p_tipo_emision_id = 2 or p_tipo_emision_id = 3)  and p_etapa='2' --Obtiene el id_recepcion
			then
			--Insercion tabla: RecepcionesCorrectas
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_dinamico_etapa_1
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id, 
				p_recepcion_paquete_id, 
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
		else 
				p_id_recepciones:=0;
	end case;
	
	--add: 20190325
	if (p_id_recepciones<0) then
		return -1;
	end if;	

	
	return p_id_recepciones; 
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_factura_recepcion_etapa_1'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1_contingencia(p_json json, p_etapa character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

		v_fecha_actual timestamp:=now();
	
		p_usuario_registro_id int8:=1000; 
		p_usuario_ultima_modificacion_id int8:=1000; 
		p_sistema_id bigint:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');--obtener apartir del codigo sistema
		p_persona_contribuyente_id bigint:=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener a partir del nit
		p_recepcion_paquete_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');--por el momento vacio
		p_punto_venta_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id'); 
		p_oficina_id integer:= sre_recaudaciones.sre_fac_ope_obtener_oficina_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint)));--obtener apartir del nit 
		p_sucursal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id'); 
		p_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id'); 
		p_estado_recepcion_id integer:=709; --En la etapa 1 codigo 709, en la etapa 2, luego de validar colocar el codigo 902 
		p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
		p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
		p_cufd varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cufd'); 
		p_cuis varchar:=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
		p_fecha_envio timestamp:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
		p_fecha_recepcion timestamp:= v_fecha_actual; 
		p_fecha_consolidacion timestamp:= null; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
		p_fecha_registro timestamp:= v_fecha_actual; 
		p_fecha_ultima_modificacion timestamp:= v_fecha_actual; 
		p_estado_id varchar:='AC';
		p_tipo_emision_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id'); 		
	
		p_tipo_crud varchar(2):='C';
		
		p_id_recepciones bigint:=0;	
		
begin 
	case
		when p_tipo_emision_id = 1 and p_etapa='1'--ONLINE
			then
			--Insercion tabla: RecepcionesCorrectas
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_dinamico_etapa_1_contingencia
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id, 
				p_recepcion_paquete_id, 
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
			
		when p_tipo_emision_id = 2 and p_etapa='1' --OFFLINE
			then
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_paquete_dinamico_etapa_1_contingencia
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id,  
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
			
		when p_tipo_emision_id = 2 and p_etapa='2' --Obtiene el id_recepcion
			then
			--Insercion tabla: RecepcionesCorrectas
			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepciones_dinamico_etapa_1_contingencia
				(
				p_usuario_registro_id, 
				p_usuario_ultima_modificacion_id, 
				p_sistema_id,
				p_persona_contribuyente_id, 
				p_recepcion_paquete_id, 
				p_punto_venta_id, 
				p_oficina_id, 
				p_sucursal_id, 
				p_tipo_modalidad_id, 
				p_estado_recepcion_id, 
				p_tipo_documento_fiscal_id, 
				p_tipo_documento_sector_id, 
				p_cufd, 
				p_cuis,
				p_fecha_envio, 
				p_fecha_recepcion, 
				p_fecha_consolidacion, 
				p_fecha_registro, 
				p_fecha_ultima_modificacion, 
				p_estado_id,
				p_tipo_emision_id, 
				p_tipo_crud
				)
			);
					
		else 
				p_id_recepciones:=0;
	end case;
	
	--add: 20190325
	if (p_id_recepciones<0) then
		return -1;
	end if;	

	
	return p_id_recepciones; 
				
	  EXCEPTION
	  when others
	    then
	      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_factura_recepcion_etapa_1_contingencia'));

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_etapa_0(p_json character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 0, los datos se capturan del proyecto JAVA, 
				puesto que es ahi donde se realizan las validaciones del CUF.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <31/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  registra null en caso_prueba_id
				 validacion de que el sistema haya iniciado sus pruebas automaticas
				 y que la misma no haya finalizado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/06/2019  -   03/07/2019 
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion_individual bigint := 0;
	v_id_recepcion_paquete bigint := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;-- p_codigo_error esta variable contiene el codigo_respuesta = 20 o 1000
	v_sistema_id bigint := 0;
	v_hash varchar;
	v_estado_match integer := 2; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	
	
begin
	--(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais' as Integer));
	v_documento_fiscal_id  := (v_json->'xmlRecepcionLog'->>'p_tipo_documento_fiscal_id');
	v_documento_sector_id  := (v_json->'xmlRecepcionLog'->>'p_tipo_documento_sector_id');
	v_descripcion_respuesta  := (v_json->'xmlRecepcionLog'->>'p_descripcion_respuesta');
	v_id_recepcion_individual  := coalesce ((select cast (v_json->'xmlRecepcionLog'->>'v_recepcionId' as bigint)), 0);
	v_id_recepcion_paquete := coalesce ((select cast (v_json->'xmlRecepcionLog'->>'v_recepcionPaqueteId' as bigint)), 0);
	v_codigo_respuesta  := (v_json->'xmlRecepcionLog'->>'p_codigo_error');-- p_codigo_error esta variable contiene el codigo_respuesta = 20 o 1000
	v_sistema_id  := sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionLog'->>'p_codigo_sistema' as varchar)));
	v_etapa_prueba := (v_json->'xmlRecepcionLog'->>'p_etapa_certificacion_sistema_id');
	
	case
		when v_codigo_respuesta = 20 then --CUF no valido or v_codigo_respuesta <> 100
			v_estado_match := 0;
		
		when v_codigo_respuesta = 1000 then --CUF valido
			v_estado_match := 1;
		else 
			v_estado_match := 2;
	end case;
	
	v_hash := (select md5(v_descripcion_respuesta));
	
	--Nota: Obtenemos el ID de recepcion
	if(v_id_recepcion_individual <> 0)then
		v_id_recepcion := v_id_recepcion_individual;
	elseif (v_id_recepcion_paquete <> 0) then
		v_id_recepcion := v_id_recepcion_paquete;
	end if;
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );

	if (v_es_prueba_activa)then
		
		INSERT INTO sre_recaudaciones.sre_fac_log_0_cuf
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_descripcion_respuesta, v_estado_match, null, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);
	
		return '1000';
	else
		return '0'; 
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_etapa_10(p_json character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 0, los datos se capturan del proyecto JAVA, 
				puesto que es ahi donde se realizan las validaciones del CUF.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 01/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta varchar := 0;
	v_id_recepcion_individual bigint := 0;
	v_id_recepcion_paquete bigint := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;--estado de la recepcion
	v_sistema_id bigint := 0;
	
	v_estado_match integer := 0; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	--variables etapa 10
	v_estado varchar;
	v_punto_venta integer;
	v_punto_venta_hash varchar;
	v_sucursal integer;
	v_agrupador varchar;
	v_tipo_prueba varchar;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_cantidad_facturas integer;
	v_cantidad_maxima_facturas integer;
	
	v_cantidad_facturas_errores bigint;
	---variables control de cantidad
	v_resultado_esperado varchar;
	v_cantidad_documentos_fiscales varchar;
	
	v_resultado varchar := '0';
	
	v_sql varchar:='0';
	v_cantidad_recepciones_correctos bigint := 0;
	v_cantidad_recepciones_incorrectas bigint := 0;
	v_estado_id varchar := 'AC';
	
begin
	v_tipo_prueba := 'OBLIGATORIA';
	v_descripcion_respuesta  := cast ((v_json->'xmlRecepcionLog'->>'p_descripcion_respuesta') as varchar);
	
	v_documento_fiscal_id      := (v_json->'xmlRecepcionLog'->>'p_tipo_documento_fiscal_id');
	v_documento_sector_id      := (v_json->'xmlRecepcionLog'->>'p_tipo_documento_sector_id');
	v_cantidad_facturas        := (v_json->'xmlRecepcionLog'->>'v_cantidadFacturas');
	v_cantidad_maxima_facturas := (v_json->'xmlRecepcionLog'->>'v_cantidadMaximaFacturas');
	
	
	v_id_recepcion_individual  := coalesce ((select cast (v_json->'xmlRecepcionLog'->>'v_recepcionId' as bigint)), 0);
	v_id_recepcion_paquete 	   := coalesce ((select cast (v_json->'xmlRecepcionLog'->>'v_recepcionPaqueteId' as bigint)), 0);
	
	v_codigo_respuesta  := cast( (v_json->'xmlRecepcionLog'->>'p_codigo_error') as integer);-- estado de la respuesta 901
	v_sistema_id  		:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionLog'->>'p_codigo_sistema' as varchar)));
	v_etapa_prueba 		:= (v_json->'xmlRecepcionLog'->>'p_etapa_certificacion_sistema_id');
	
	v_punto_venta :=  cast (split_part(v_descripcion_respuesta,'|',11) as integer);
	v_sucursal    := cast(split_part(v_descripcion_respuesta,'|',10) as integer);
	
	
	-----*****************************************************************************----
	-----         OPERACIONES PARA CASOS DE PRUEBA HOJA: SOAP PARAMETROS
	-----*****************************************************************************----
	
	--NOTA: Obtenemos el valor de punto de venta
	case
		when v_punto_venta = 0 then --Recepcion correcta
			 v_punto_venta_hash := 'NULL / 0';
	    when v_punto_venta = 1 then --Recepcion correcta
			 v_punto_venta_hash := '1';
		else 
			 v_punto_venta_hash := '0';
	end case;
	
	--NOTA: Obtenemos el ID de recepcion
	if(v_id_recepcion_individual <> 0)then
		v_id_recepcion := v_id_recepcion_individual;
	elseif (v_id_recepcion_paquete <> 0) then
		v_id_recepcion := v_id_recepcion_paquete;
	end if;
	
	--NOTA: Obtenemos el hash de acuerdo al consumo del servicio - SOAP PARAMETROS
	case
		when v_codigo_respuesta = 901 then --Recepcion correcta
			 v_estado := 'PAQUETE RECEPCIONADO';
			 v_agrupador := 'SOAP PARÁMETROS';
			 v_hash_descripcion := v_tipo_prueba ||'|'|| v_sucursal ||'|'|| v_punto_venta_hash  ||'|'||v_agrupador;
		
		when v_codigo_respuesta = 908 then
		     
			 v_agrupador := 'CASOS DE PRUEBA';
			 
			 v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_contar_recepciones_correctas(v_documento_sector_id));
			 execute v_sql  using v_id_recepcion, v_estado_id into v_cantidad_recepciones_correctos;
			 
			 select  count(*) into v_cantidad_recepciones_incorrectas
		     from sre_recaudaciones.sre_fac_recepciones_errores
		     where recepcion_paquete_id = v_id_recepcion and tipo_documento_sector_id = v_documento_sector_id;
		     
		     if (v_cantidad_recepciones_correctos = v_cantidad_maxima_facturas )then
		    	--caso 1
		     	v_cantidad_documentos_fiscales := '2000 DOCUMENTOS FISCALES VÁLIDOS';
	     		v_resultado_esperado := 'ESTADO = 908 RECEPCIÓN VALIDADA';	
	     		v_hash_descripcion := v_tipo_prueba ||'|'|| v_cantidad_documentos_fiscales ||'|'|| v_resultado_esperado ||'|'||v_agrupador;
			 else 
			 	if (v_cantidad_recepciones_correctos < v_cantidad_maxima_facturas ) then
			 		--caso 3
			 		v_cantidad_documentos_fiscales := 'MENOR A 2000 DOCUMENTOS FISCALES VÁLIDOS';
		     		v_resultado_esperado := 'ESTADO = 908 RECEPCIÓN VALIDADA';	
		     		v_hash_descripcion := v_tipo_prueba ||'|'|| v_cantidad_documentos_fiscales ||'|'|| v_resultado_esperado ||'|'||v_agrupador;
		     		
			 	end  if;
		     end if;
		    
		when v_codigo_respuesta = 904 then
		
			 v_agrupador := 'CASOS DE PRUEBA';
			 
			 v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_contar_recepciones_correctas(v_documento_sector_id));
			 execute v_sql  using v_id_recepcion, v_estado_id into v_cantidad_recepciones_correctos;
			 
			 select  count(*) into v_cantidad_recepciones_incorrectas
		     from sre_recaudaciones.sre_fac_recepciones_errores
		     where recepcion_paquete_id = v_id_recepcion and tipo_documento_sector_id = v_documento_sector_id;
		     
		     
		     if (v_cantidad_recepciones_correctos + v_cantidad_recepciones_incorrectas = v_cantidad_maxima_facturas and v_cantidad_recepciones_correctos <> 0 and v_cantidad_recepciones_incorrectas <> 0)then
		     	--caso 2
		     	v_cantidad_documentos_fiscales := '2000 DOCUMENTOS FISCALES VÁLIDOS E INVÁLIDOS';
	     		v_resultado_esperado := 'ESTADO = 904 RECEPCIÓN OBSERVADA';	
	     		v_hash_descripcion := v_tipo_prueba ||'|'|| v_cantidad_documentos_fiscales ||'|'|| v_resultado_esperado ||'|'||v_agrupador;
			     		
			 else 
			 	if (v_cantidad_recepciones_correctos + v_cantidad_recepciones_incorrectas < v_cantidad_maxima_facturas ) then
			 		--caso 4
			 		v_cantidad_documentos_fiscales := 'MENOR A 2000 DOCUMENTOS FISCALES VÁLIDOS E INVÁLIDOS';
		     		v_resultado_esperado := 'ESTADO = 904 RECEPCIÓN OBSERVADA';	     		
		     		v_hash_descripcion := v_tipo_prueba ||'|'|| v_cantidad_documentos_fiscales ||'|'|| v_resultado_esperado ||'|'||v_agrupador;
		     		
			 	end  if;
		     end if;
		     
		else 
			 v_agrupador := '0';
			 v_cantidad_documentos_fiscales := '0';
			 v_resultado_esperado := '0';
			 
	end case;
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );

	v_hash := (select md5(v_hash_descripcion));

	if (v_es_prueba_activa)then
			
		INSERT INTO sre_recaudaciones.sre_fac_log_10_envio_masivos
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, null, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);

		v_resultado := '1000';
		
	end if;
	
	
	return v_resultado;
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_etapa_5(p_json character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 5, los datos se capturan del proyecto JAVA, 
				donde se realiza la recepcion  de evento significativo.
PARAMETROS INGRESO

PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <17/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  se agrego al hash el campo tipo de prueba
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :24/07/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_sistema_id bigint :=(v_json->'recepcionLog'->>'sistemaId');
	v_codigo_evento integer := (v_json->'recepcionLog'->>'codigoEvento');
	v_tipo_evento integer := (v_json->'recepcionLog'->>'tipoEvento');
	v_codigo_respuesta integer := (v_json->'recepcionLog'->>'codigoRespuesta');
	v_codigo_recepcion_evento bigint := 0; --valor por defecto para su registro
	v_descripcion_prueba varchar := (v_json->'recepcionLog'->>'descripcionPrueba');
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 0 ; --valor por defecto para su registro
	v_documento_fiscal_id integer := 0; --valor por defecto para su registro
	v_documento_sector_id integer := 0; --valor por defecto para su registro
	v_es_prueba_activa bool := false;
	v_etapa_prueba integer:=0;
	v_tipo_prueba smallint := 0; ---0 obligatoria / 1 opcional
	v_nit bigint:=0; --TODO, recuperar el NIT
			
	v_etapa_proveedor integer:=3052; --*
	v_ha_iniciado_etapa_proveedor boolean:=false; --*
	
	v_ha_iniciado_etapa boolean:=false; --*
begin
	
	v_nit := (v_json->'recepcionLog'->>'p_nit'); --Existe este campo en el JSON?
	
	v_etapa_prueba := (v_json->'recepcionLog'->>'etapaPrueba');
	
	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(v_sistema_id, v_etapa_proveedor); --*
	
	if v_tipo_evento = 1296 then
		v_descripcion_prueba := 'Registro del Evento Significativo';	
	end if;
	
	v_hash_descripcion := v_tipo_evento||'|'||v_codigo_evento||'|'||v_codigo_respuesta||'|'||v_descripcion_prueba||'|'||v_tipo_prueba;
	
	v_hash := (select md5(v_tipo_evento||'|'||v_codigo_evento||'|'||v_codigo_respuesta||'|'||v_descripcion_prueba||'|'||v_tipo_prueba));
	
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
								   
	if(v_es_prueba_activa or v_ha_iniciado_etapa_proveedor)then --*

		if (v_es_prueba_activa) then --*		
			INSERT INTO sre_recaudaciones.sre_fac_log_5_eventos_significativos
			(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
			VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, null, v_documento_fiscal_id, v_documento_sector_id, now(), v_codigo_recepcion_evento, 'AC', now(), now(), 1000, 1000);
		end if;			
		
		--Nota: La siguiente intruccion permite verificar si la prueba corresponde a un proveedor. Si el resultado es cero quiere decir que el sistema es PROPIO			
		if (v_ha_iniciado_etapa_proveedor) then --*
				perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
						 v_sistema_id,
						 v_nit,
						 v_hash,
						 v_hash_descripcion,
						 v_documento_fiscal_id,
						 v_documento_sector_id,
						 'EVENTOS SIGNIFICATIVOS',
						 0
				);				
		end if;				
		
		return '1000';				
		
	else 
		return '0';
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_0(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 0, los datos se capturan del proyecto JAVA, 
				puesto que es ahi donde se realizan las validaciones del CUF.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <31/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  registra null en caso_prueba_id
				 validacion de que el sistema haya iniciado sus pruebas automaticas
				 y que la misma no haya finalizado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/06/2019  -   03/07/2019 
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;-- p_codigo_error esta variable contiene el codigo_respuesta = 20 o 1000
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false; --false
	v_caso_prueba_id bigint := 0;
	
	
begin
	--(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais' as Integer));
	v_documento_fiscal_id  := (v_json->>'documento_fiscal');
	v_documento_sector_id  := (v_json->>'sector');
	v_hash                 := (v_json->>'hash');
	v_hash_descripcion     := (v_json->>'hash_descripcion');
	v_sistema_id           := (v_json->>'sistemaId');
	v_etapa_prueba         := (v_json->>'etapaPrueba');
	v_caso_prueba_id       := (v_json->>'caso_prueba_id');
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
								   
	
	if (v_es_prueba_activa)then
		
		INSERT INTO sre_recaudaciones.sre_fac_log_0_cuf
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);
	
		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_10(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 05/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_caso_prueba_id bigint := 0;
	
	
begin
	--(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais' as Integer));
	v_documento_fiscal_id  := 1; --valor por defecto
	v_documento_sector_id  := 0; --valor por defecto
	v_hash := (v_json->>'hash');
	v_hash_descripcion := (v_json->>'hash_descripcion');
	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');
	v_caso_prueba_id := (v_json->>'caso_prueba_id');
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 10 - Envio Masivo
	if (v_es_prueba_activa)then
	
		INSERT INTO sre_recaudaciones.sre_fac_log_10_envio_masivos
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);

		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_11(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 05/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_caso_prueba_id bigint := 0;
	v_id_log bigint;	
	
begin	
	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 11 - Anulaciones
	if (v_es_prueba_activa)then
		v_documento_fiscal_id  := 1; --valor por defecto
		v_documento_sector_id := (v_json->>'sector');
		v_hash := (v_json->>'hash');
		v_hash_descripcion := (v_json->>'hash_descripcion');		
		v_caso_prueba_id := (v_json->>'caso_prueba_id');

		INSERT INTO sre_recaudaciones.sre_fac_log_11_anulaciones
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000)
		returning log_id
		into v_id_log;
		return case when v_id_log>0 then true else false end;

	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_12(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 20/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_caso_prueba_id bigint := 0;
	v_id_log bigint;	
	
begin	
	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');		
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 12 - Reportes
	if (v_es_prueba_activa)then		
		v_documento_fiscal_id  := 1; --valor por defecto
		v_documento_sector_id := 0;
		v_hash := (v_json->>'hash');
		v_hash_descripcion := (v_json->>'hash_descripcion');		
		v_caso_prueba_id := (v_json->>'caso_prueba_id');

		INSERT INTO sre_recaudaciones.sre_fac_log_12_reportes
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000)
		returning log_id
		into v_id_log;
		return case when v_id_log>0 then true else false end;
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_2(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 2, solo los casos sugeridos.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <06/09/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  registra null en caso_prueba_id
				 validacion de que el sistema haya iniciado sus pruebas automaticas
				 y que la misma no haya finalizado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_id_recepcion bigint := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_agrupador character varying := '';
	
begin
	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');	
		
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA
									 inner join sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 on ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );					   
	
	if (v_es_prueba_activa)then	
	
		v_agrupador:=(v_json->>'agrupador');
		v_hash := (v_json->>'hash');
		v_hash_descripcion := (v_json->>'hash_descripcion');
		INSERT INTO sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, null, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);
	
		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_3(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 3, solo los casos sugeridos.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <31/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  registra null en caso_prueba_id
				 validacion de que el sistema haya iniciado sus pruebas automaticas
				 y que la misma no haya finalizado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/06/2019  -   03/07/2019 
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_id_recepcion bigint := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_agrupador character varying := '';
	
begin
	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');	
		
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA
									 inner join sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 on ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );					   
	
	if (v_es_prueba_activa)then	
	
		v_agrupador:=(v_json->>'agrupador');
		v_hash := (v_json->>'hash');
		v_hash_descripcion := (v_json->>'hash_descripcion');
		--v_hash_descripcion := v_tipo_prueba||'|'||v_codigo_ambiente||'|'||v_codigo_sistema||'|'||v_nit_requerimiento||'|'||v_cuis||'|'||v_sucursal_requerimiento||'|'||v_codigo_punto_venta||'|'||v_codigo_autorizacion||'|'||v_resultado_esperado;
		--v_hash := sre_recaudaciones.sre_fac_generador_hash_caso_prueba(v_hash_descripcion);		
		INSERT INTO sre_recaudaciones.sre_fac_log_3_sincronizacion_catalogo
		(sistema_id, hash, hash_descripcion, agrupador, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion,v_agrupador, v_estado_match, null, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);
	
		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_4(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 4, solo los casos sugeridos.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <31/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  registra null en caso_prueba_id
				 validacion de que el sistema haya iniciado sus pruebas automaticas
				 y que la misma no haya finalizado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/06/2019  -   03/07/2019 
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;-- p_codigo_error esta variable contiene el codigo_respuesta = 20 o 1000
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 0; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_resultado_match integer := 0;	
	
begin

	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');	
		
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA
									 inner join sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 on ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id 
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );					   
	
	if (v_es_prueba_activa)then	
		v_hash := (v_json->>'hash');
		v_hash_descripcion := (v_json->>'hash_descripcion');
		INSERT INTO sre_recaudaciones.sre_fac_log_4_sincronizacionf_fecha_hora
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, null, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);
	
		v_resultado_match:=sre_recaudaciones.sre_fac_pru_match_log_casos_prueba_etapa_4(v_sistema_id) ;

		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_5(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 23/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;
	v_codigo_respuesta integer := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;
	v_caso_prueba_id bigint := 0;
	
	
begin
	--(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais' as Integer));
	v_documento_fiscal_id  := 1; --valor por defecto
	v_documento_sector_id  := 1; --valor por defecto
	v_hash := (v_json->>'hash');
	v_hash_descripcion := (v_json->>'hash_descripcion');
	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');
	v_caso_prueba_id := (v_json->>'caso_prueba_id');
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 5
	if (v_es_prueba_activa)then
	
		INSERT INTO sre_recaudaciones.sre_fac_log_5_eventos_significativos
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);

		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_6(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido para la etapa 6 - pestaña 1 y 2
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    boolean
SUBSISTEMA : Facturación
FECHA CREACION : 29/07/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;-- pruebas sugeridas no requieren codigo de recepcion	
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=2856; --corresponde a etapa 6
	v_es_prueba_activa bool := false;
	v_caso_prueba_id bigint := 0;	
	
begin	
	v_documento_fiscal_id  := 1; --valor por defecto
	v_documento_sector_id  := 1; --valor por defecto	
	v_hash_descripcion := (v_json->>'hash_descripcion');
	v_sistema_id  := (v_json->>'sistemaId');
	v_caso_prueba_id := (v_json->>'caso_prueba_id');	
	v_hash := (select md5(v_hash_descripcion));	
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 5
	if (v_es_prueba_activa)then
	
		INSERT INTO sre_recaudaciones.sre_fac_log_6_envio_paquetes
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);

		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_7(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido para la etapa 6 - pestaña 1 y 2
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    boolean
SUBSISTEMA : Facturación
FECHA CREACION : 29/07/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_documento_fiscal_id integer := 0;
	v_documento_sector_id integer := 0;
	v_descripcion_respuesta text := 0;
	v_id_recepcion bigint := 0;-- pruebas sugeridas no requieren codigo de recepcion	
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=2857; --corresponde a etapa 7
	v_es_prueba_activa bool := false;
	v_caso_prueba_id bigint := 0;	
	
begin
	v_sistema_id  := (v_json->>'sistemaId');
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 7
	if (v_es_prueba_activa)then
	
		v_documento_fiscal_id  := 1; --valor por defecto
		v_documento_sector_id  := 0; --valor por defecto	
		v_hash_descripcion := (v_json->>'hash_descripcion');		
		v_caso_prueba_id := (v_json->>'caso_prueba_id');	
		v_hash := (v_json->>'hash');
		INSERT INTO sre_recaudaciones.sre_fac_log_7_firma_digital
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);

		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_8(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite el registro del caso de prueba sugerido
PARAMETROS INGRESO
	p_json : que contiene los campos para el registro del caso de prueba en la tabla de logs
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 23/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);

	v_sistema_id int8 :=0;
	v_hash varchar(250) :='';
	v_hash_descripcion varchar(250) :='';
	v_estado_match int4 :=1;
	v_caso_prueba_id int8 :=0;
	v_documento_fiscal_id int4 :=0;
	v_documento_sector_id int4 :=0;	
	v_id_recepcion int8 :=0;
	v_estado_id varchar(2) :='AC';
	v_fecha timestamp :=now();	
	v_usuario_registro_id int8 :=1000;
	v_usuario_ultima_modificacion int8 :=1000;
	
	v_etapa_prueba integer:=0;
	v_es_prueba_activa boolean:=false;
	
begin

	v_hash := (v_json->>'hash');
	v_hash_descripcion := (v_json->>'hash_descripcion');
	v_sistema_id  := (v_json->>'sistema_id');
	v_caso_prueba_id := (v_json->>'caso_prueba_id');
	
	v_etapa_prueba := (v_json->>'etapaPrueba');
				
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado  20190703
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
									 limit 1       
								    ), false
								   );
	--Nota: Insertamos el caso de prueb en la tabla de logs de la etapa 5
	if (v_es_prueba_activa)then
		INSERT INTO sre_recaudaciones.sre_fac_log_8_gestion_sucursales
		(
		sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, v_caso_prueba_id, v_documento_fiscal_id, v_documento_sector_id, v_fecha, v_id_recepcion, v_estado_id, v_fecha, v_fecha, v_usuario_registro_id, v_usuario_ultima_modificacion);


		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
EXCEPTION
   when others
     then
	   perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_log_casos_prueba_sugerida_etapa_8');
       return false;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_cufd(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite el registro de logs de la etapa 0, los datos se capturan del proyecto JAVA, 
				puesto que es ahi donde se realizan las validaciones del CUFD.
PARAMETROS INGRESO
    Tiene como parametros de entrada un objeto json, el cual contiene los siguientes parametros: 
    1. el documento fiscal, 
    2. sector,
    3. descripcion de la combinacion
    4. recepcion id,
    5. Sistema id
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <31/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  registra null en caso_prueba_id
				 validacion de que el sistema haya iniciado sus pruebas automaticas
				 y que la misma no haya finalizado
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :17/06/2019  -   03/07/2019 
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_json json := cast(p_json as json);
	v_id_recepcion bigint := 0;
	v_sistema_id bigint := 0;
	v_hash_descripcion varchar;
	v_hash varchar;
	v_estado_match integer := 1; --valor por defecto para su registro
	v_etapa_prueba integer:=0;
	v_es_prueba_activa bool := false;

begin

	v_sistema_id  := (v_json->>'sistemaId');
	v_etapa_prueba := (v_json->>'etapaPrueba');	
	
	--Nota: Verificar que el sistema haya iniciado sus pruebas automaticas y que no este finalizado
  	v_es_prueba_activa := coalesce (
								    (
								     select true
									 from   sre_recaudaciones.sre_fac_pruebas_etapa_certificacion as ETAPA,
									        sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas as PRUEBA_SISTEMA
									 where  ETAPA.etapa_certificacion_sistemas_id = v_etapa_prueba and
									 	    ETAPA.prueba_etapa_certificacion_id = PRUEBA_SISTEMA.prueba_etapa_certificacion_id and
									        PRUEBA_SISTEMA.sistema_id = v_sistema_id and PRUEBA_SISTEMA.fecha_fin_prueba is null and
									        PRUEBA_SISTEMA.estado_id = 'AC'
								    ), false
								   );					   
	
	if (v_es_prueba_activa)then		
		v_hash := (v_json->>'hash');
		v_hash_descripcion := (v_json->>'hash_descripcion');
		INSERT INTO sre_recaudaciones.sre_fac_log_obtencion_cufd
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, fecha_prueba, id_recepcion, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
		VALUES(v_sistema_id, v_hash, v_hash_descripcion, v_estado_match, null, now(), v_id_recepcion, 'AC', now(), now(), 1000, 1000);
	
		return true; --registro exitoso
	else
		return false;  --registro no realizado
	end if;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_log_excepcion_bd_errores(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, inserta registro en tabla sre_fac_logbd_errores
PARAMETROS INGRESO
    p_json_varchar : Cadena en formato json 
    				'{"jsonLogException":
    					{"usuarioRegistroId":1000,"descripcion":"Input byte array has incorrect ending byte at 1960",
    					"codigoError":"CORE","valoresParametro":"Input byte array has incorrect ending byte at 1960",
    					"recepcionPaqueteId":0,"fechaRegistro":1566867456831,"tipoDocumentoSectorId":0,"subsistemaId":1008,
    					"nit":0,"estadoId":"AC","errorId":0,"funcion":"validarArchivoPaquete","recepcionId":0}}'	
PARAMETROS SALIDA
    '1000' registro exitoso
    '0' registro fallido
SUBSISTEMA : Facturación
FECHA CREACION : 26/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado varchar:='1000';
	v_json json;
	
	v_usuario_registro_id bigint:=0;	
	v_subsistema_id integer:=0;
	v_funcion varchar:='';
	v_fecha_Registro timestamp;
	v_codigo_error varchar:='';
	v_descripcion varchar:='';
	v_valores_parametro varchar:='';
	v_estado_id varchar:='';	
	v_nit bigint:=0;
	v_recepcion_id bigint:=0;
	v_recepcion_paquete_id bigint:=0;
	v_tipo_documento_sector_id integer:=0;
	
begin	
	v_json := cast(p_json_varchar as json);
	v_usuario_registro_id := (v_json->'jsonLogException'->>'usuarioRegistroId')::bigint;
	v_subsistema_id := (v_json->'jsonLogException'->>'subsistemaId')::integer;
	v_funcion := (v_json->'jsonLogException'->>'funcion')::varchar;
	v_codigo_error := (v_json->'jsonLogException'->>'codigoError')::varchar;
	v_descripcion := (v_json->'jsonLogException'->>'descripcion')::varchar;
	v_valores_parametro := (v_json->'jsonLogException'->>'valoresParametro')::varchar;
	v_estado_id := (v_json->'jsonLogException'->>'estadoId')::varchar;
	v_nit := (v_json->'jsonLogException'->>'nit')::bigint;
	v_recepcion_id := (v_json->'jsonLogException'->>'recepcionId')::bigint;
	v_recepcion_paquete_id := (v_json->'jsonLogException'->>'recepcionPaqueteId')::bigint;
	v_tipo_documento_sector_id := (v_json->'jsonLogException'->>'tipoDocumentoSectorId')::integer;
	
	
	INSERT INTO sre_recaudaciones.sre_fac_logbd_errores(
             usuario_registro_id, subsistema_id, funcion, fecha_registro, 
            codigo_error, descripcion, valores_parametro, estado_id, nit, rececpcion_id, recepcion_paquete_id, tipo_documento_sector_id )
    VALUES ( v_usuario_registro_id, v_subsistema_id, v_funcion, current_timestamp, 
           v_codigo_error, v_descripcion, v_valores_parametro, v_estado_id, v_nit, v_recepcion_id, v_recepcion_paquete_id, v_tipo_documento_sector_id);
         
	return v_resultado;
	
	EXCEPTION
	  when others
	    then
	    	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_obtener_archivo_xml_valido');
			return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_servicio_obtener_archivo_xml_valido')) as varchar) ;	      	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_pruebas_automaticas(p_etapa character varying, p_resultado character varying, p_sistema_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	v_resultado smallint:=0;	
		
begin
	--TODO: Esta funcion eliminar y comentar las otras funciones donde se llaman a la misma.
	/*
	--p_etapa = 1 (Recepcion); p_etapa=2 (Cabecera - Detalle)
	--p_resultado=0 (validacion de la recepcion incorrecta); p_resultado = 1 (validacion de la recepcion correcta); 
	
	case
		when p_etapa = '1' and p_resultado='0' --Etapa 1 y el resultado de la validacion con errores
			then 			
				update sre_recaudaciones.sre_fac_registros_pruebas_automaticas
				set
				cantidad_intento=(cantidad_intento + 1), 
				cantidad_errores=(cantidad_errores + 1), 				
				porcentaje_errores= (select sre_recaudaciones.sre_fac_ope_calcular_porcentaje_prueba (cantidad_intento,cantidad_errores))   
				where sistema_id = p_sistema_id and prueba_automatica_id in (683,729);
												
				v_resultado:=1;
		
		when p_etapa = '1' and p_resultado='1' --Etapa 1 y el resultado de la validacion exitoso
			then 			
				update sre_recaudaciones.sre_fac_registros_pruebas_automaticas
				set
				cantidad_intento=(cantidad_intento + 1), 
				cantidad_correctos=(cantidad_correctos + 1), 				
				porcentaje_correctos=(select sre_recaudaciones.sre_fac_ope_calcular_porcentaje_prueba(cantidad_intento,cantidad_correctos))
				where sistema_id = p_sistema_id and prueba_automatica_id in (683,729);
				
				v_resultado:=1;
				
		when p_etapa = '2' and p_resultado='0' --Etapa 2 y el resultado de la validacion con errores
			then 			
				update sre_recaudaciones.sre_fac_registros_pruebas_automaticas
				set
				cantidad_intento=(cantidad_intento + 1), 
				cantidad_errores=(cantidad_errores + 1), 				
				porcentaje_errores=(select sre_recaudaciones.sre_fac_ope_calcular_porcentaje_prueba(cantidad_intento,cantidad_errores))
				where sistema_id = p_sistema_id and prueba_automatica_id in (706,752);
				
				v_resultado:=1;
				
		when p_etapa = '2' and p_resultado='1' --Etapa 2 y el resultado de la validacion exitoso
			then 			
				update sre_recaudaciones.sre_fac_registros_pruebas_automaticas
				set
				cantidad_intento=(cantidad_intento + 1), 
				cantidad_correctos=(cantidad_correctos + 1), 				
				porcentaje_correctos=(select sre_recaudaciones.sre_fac_ope_calcular_porcentaje_prueba(cantidad_intento,cantidad_correctos))
				where sistema_id = p_sistema_id and prueba_automatica_id in (706,752);
				
				v_resultado:=1;				
		else 
				v_resultado:=0;
	end case;
	
 --add: 20190325
	if (v_resultado<0) then
		return -1;
	end if;	
	*/
	
  return v_resultado;
			
  EXCEPTION
  when others
    then
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_pruebas_automaticas'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_recepciones_anulados_facturacion_manual(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del objeto JSON en variables para ser enviados al CRUD de recepciones.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de  recepcion_anulado_id si se realizo el registro correctamente y -1 si fallo
SUBSISTEMA : Facturación
FECHA CREACION : 04/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	       
		v_fecha_actual timestamp:=now();			
		p_usuario_registro_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
		p_usuario_ultima_modificacion_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
		p_persona_contribuyente_id bigint:= (p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
		p_sucursal_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');
		
		p_actividad_economica_id  integer:=(p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id'); 
		p_recepcion_paquete_anulado_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_recepcion_paquete_anulado_id');
		p_modalidad_facturacion_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_modalidad_facturacion_id'); 
		p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
		p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
		p_estado_recepcion_anulado_id integer;  --estado_recepcion_anulado_id
		p_codigo_actividad  varchar:=(p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad'); 
		p_numero_sucursal integer:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal'); 
		p_numero_documento_fiscal bigint:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
		
		p_fecha_envio timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
		p_fecha_emision_anulacion  timestamp without time zone:= (p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion');
		p_fecha_recepcion timestamp without time zone:= v_fecha_actual; 
		p_fecha_consolidacion timestamp without time zone:= null; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
		p_fecha_registro timestamp without time zone:= v_fecha_actual; 
		p_fecha_ultima_modificacion timestamp without time zone:= v_fecha_actual; 
		p_estado_id varchar:='AC';

		p_tipo_crud varchar(2):='C';		
		p_id_recepciones bigint:=0;	

				
begin		

		
		p_sucursal_contribuyente_id:= (select case when p_sucursal_contribuyente_id=0 then null end);
		p_codigo_actividad:= (select case when p_codigo_actividad=' ' then null end);
		p_actividad_economica_id:= (select case when p_actividad_economica_id=0 then null end);
		p_estado_recepcion_anulado_id:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion ='RECEPCIONADO');---FAKE
		

			p_id_recepciones:=(
				select sre_recaudaciones.sre_fac_crud_recepcion_anulados_facturacion_manual
				(
				p_usuario_registro_id,
				p_usuario_ultima_modificacion_id,
				p_persona_contribuyente_id,
				p_sucursal_contribuyente_id,
				p_actividad_economica_id,
				p_recepcion_paquete_anulado_id,
				p_modalidad_facturacion_id,
				p_tipo_documento_fiscal_id,
				p_tipo_documento_sector_id,
				p_estado_recepcion_anulado_id,
				p_codigo_actividad,
				p_numero_sucursal,
				p_numero_documento_fiscal,
				p_fecha_emision_anulacion,
				p_fecha_envio,
				p_fecha_recepcion,
				p_fecha_consolidacion,
				p_fecha_registro,
				p_fecha_ultima_modificacion,
				p_estado_id
				)
			);		
			
	
	if (p_id_recepciones<0) then
		return -1;
	end if;	
	return p_id_recepciones; 
  			
  EXCEPTION
  when others
  
    then      
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_reg_recepciones_anulados_facturacion_manual'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_recepciones_correctas_anulados_manual(p_json json, p_resultado_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del objeto JSON en variables para ser enviados al CRUD de recepciones correctas.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
recepcion_anulado_id
PARAMETROS SALIDA
Valor de recepcion_correcta_anulada_id si se realizo el registro correctamente y -1 si fallo
SUBSISTEMA : Facturación
FECHA CREACION : 06/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
		
		v_fecha_actual timestamp:=now();			
		p_usuario_registro_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
		p_usuario_ultima_modificacion_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
		p_persona_contribuyente_id bigint:= (p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
		p_sucursal_contribuyemte_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');
		p_actividad_economica_id  integer:=(p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id'); 
		p_modalidad_facturacion_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_modalidad_facturacion_id'); 
		p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
		p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
		p_estado_recepcion_anulado_manual_id integer;  --estado_recepcion_documento_fiscal
		p_codigo_actividad  varchar(10):=(p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad'); 
		p_numero_sucursal integer:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal'); 
		p_numero_documento_fiscal bigint:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
		p_caed character varying(100):=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
		
		p_fecha_emision_anulacion timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion');
		p_fecha_envio timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
		p_fecha_recepcion timestamp without time zone:= v_fecha_actual; 
		p_fecha_consolidacion timestamp without time zone:= v_fecha_actual; --En la fase 1 valor Null, en la fase 2 actualizar a la fecha de procesamiento. 
		p_fecha_registro timestamp without time zone:= v_fecha_actual; 
		p_fecha_ultima_modificacion timestamp without time zone:= v_fecha_actual; 
		p_estado_id varchar:='AC';
		
		p_tipo_crud varchar(2):='C';		
		v_id_recepciones_correctas bigint:=0;	

				
begin	
		p_estado_recepcion_anulado_manual_id:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion ='RECEPCIONADO');--FAKE
		
		
			v_id_recepciones_correctas:=(
				select sre_recaudaciones.sre_fac_crud_recepcion_correctas_anulados_facturacion_manual
				(
					    p_usuario_registro_id,
					    p_usuario_ultima_modificacion_id,
					    p_resultado_recepcion,
					    p_persona_contribuyente_id,
					    p_sucursal_contribuyemte_id,
					    p_actividad_economica_id,
					    p_modalidad_facturacion_id,
					    p_tipo_documento_fiscal_id,
					    p_tipo_documento_sector_id,
					    p_estado_recepcion_anulado_manual_id,
					    p_codigo_actividad,
					    p_numero_sucursal,
					    p_numero_documento_fiscal,
					    p_caed,
					    p_fecha_emision_anulacion,
					    p_fecha_envio,
					    p_fecha_recepcion,
					    p_fecha_consolidacion,
					    p_fecha_registro,
					    p_fecha_ultima_modificacion,
					    p_estado_id
				)
			);		
			
	if (v_id_recepciones_correctas<0) then
		return -1;
	end if;	
	return v_id_recepciones_correctas; 
  			
  EXCEPTION
  when others
  
    then      
      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_reg_recepciones_anulados_facturacion_manual'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_recepciones_correctas_facturacion_manual(p_json json, p_recepcion_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Registro de recepciones correctas, llama a la funcion de registro de ventas y a la funcion de consolidacion.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
id de la recepcion 
PARAMETROS SALIDA
Valor de exito 1, valor de error -1, desconocido 0
SUBSISTEMA : Facturación
FECHA CREACION : 03/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	
	p_id_recepciones_correctas bigint:=0;
	p_id_ventas bigint:=0;
	p_id_detalles_ventas bigint:=0;	
	v_resultado smallint:=0;	
	p_fecha_consolidacion timestamp without time zone; 	
	v_sql varchar:='';	
	p_tipo_documento_sector_id integer; 
	p_tipo_documento_fiscal_id integer; 	
begin 
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');	
	---------------INSERCION TABLA: RecepcionesCorrectas---------------
	p_id_recepciones_correctas:=(
	sre_recaudaciones.sre_fac_crud_recepcion_correcta_dinamico_facturacion_manual
	(
		p_json, p_recepcion_id		
	)
	);

	---------------INSERCION TABLA: Ventas---------------	
	--PREGUNTAR SI EXISTE SINO GUARDAR NORMAL 
	--MANDAR EL IDVENTA ENCONTRADO 
	
	p_id_ventas:=(
	sre_recaudaciones.sre_fac_crud_ventas_dinamico_facturacion_manual
	(
		p_json, 
		p_id_recepciones_correctas
		--IDVENTASENCONTRADO
	)
	);
		
	if (p_id_recepciones_correctas<0 or p_id_ventas<=0) then
		v_resultado:=-1;
	else
		p_fecha_consolidacion:= now();
		v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_actualizar_fecha_consolidacion_etapa_2(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));
		
	
	execute v_sql  
	    using 			
			p_fecha_consolidacion,
			p_recepcion_id	 ;
		v_resultado:=1;
	end if;	

  return v_resultado;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_recpciones_correctas_facturacion_manual'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_registrar_excepcion(p_cod_error character varying, p_msg_error character varying, p_funcion character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
DECLARE
  --Constante
  -- ajuste subsistema 1008 20190510 rgt
  p_subsistema_id Integer:=1008;
  p_usuario_id    integer:=1000;
begin
 RAISE INFO 'Codigo de Error:%', p_cod_error;
 RAISE INFO 'Mensaje de Error:%', p_msg_error;	
	
 if sre_recaudaciones.sre_fac_reg_registro_errores(p_cod_error, p_msg_error, p_funcion, p_subsistema_id, p_usuario_id, 'p_usuario_id=' || p_usuario_id) then    
	return -1;
 else
	return -2;
 end if;        
END; 
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_registrar_log(p_nombre_funcion character varying, p_resultado_validacion integer, p_tipo_emision_id integer, p_sistema_id integer, p_documento_fiscal_id integer, p_documento_sector_id integer, p_fecha timestamp without time zone)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función permite realizar el almacenamiento en la tabla de log por cada validación correspondiente a los siguientes servicios:
						- sre_fac_servicio_recepcion_factura etapa 1
						- sre_fac_servicio_recepcion_factura etapa 2
						- sre_fac_servicio_validacion_recepcion_factura
						- sre_fac_servicio_anulacion_factura						
						- sre_fac_servicio_validacion_anulacion_factura
PARAMETROS INGRESO
					    - p_nombre_funcion: Nombre de la función sin esquema
						- p_resultado_validacion: Resultado de la validación del campo del Json
						- p_tipo_emision_id: Tipo de emisión online u ofline
						- p_sistema_id: El sistema al cual pertenece el Contribuyente
						- p_documento_fiscal_id: Tipo de documento fiscal del Contribuyente 
						- p_documento_sector_id: Documento sector del Contribuyente
						- p_fecha: Fecha del Registro
PARAMETROS SALIDA
    Resultado de la transacción
SUBSISTEMA : Facturación
FECHA CREACION : <19/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

  	v_resultado smallint;
  	v_agrupador varchar :='';
  	v_agrupador_md5 varchar :='';
	v_nombre_funcion_log character varying;
	v_caso_prueba_id integer;
begin

	if(p_nombre_funcion notnull and p_resultado_validacion>=0 and p_tipo_emision_id>0 and p_sistema_id >0 and p_documento_fiscal_id > 0 and p_documento_sector_id >0 and p_fecha notnull) then
		v_agrupador := 'tipo_moneda_id'; --Cordinar este parametro con Fernando  
		v_nombre_funcion_log:=replace(p_nombre_funcion,'select sre_recaudaciones.','');
		v_nombre_funcion_log:=trim(replace(v_nombre_funcion_log,'($1)',''));
		v_nombre_funcion_log:=(select regexp_replace(v_nombre_funcion_log, E'[\\n\\r]+', '', 'g' ));
	  	v_agrupador_md5:=v_nombre_funcion_log||'|'||p_resultado_validacion||'|'||p_tipo_emision_id;
	  	v_caso_prueba_id:=(select caso_prueba_id from sre_recaudaciones.sre_fac_casos_prueba_2_validacion_generales_xml_xsd where hash_descripcion=v_agrupador_md5); 
		insert into sre_recaudaciones.sre_fac_log_2_validacion_generales_xml_xsd
		(sistema_id, hash, hash_descripcion, estado_match, caso_prueba_id, documento_fiscal_id, documento_sector_id, fecha_prueba, estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion,id_recepcion)
		values (p_sistema_id, (SELECT md5(v_agrupador_md5)), v_agrupador_md5, 0, v_caso_prueba_id, p_documento_fiscal_id, p_documento_sector_id, p_fecha, 'AC', p_fecha,p_fecha, 1000, 1000,1);
	end if;

  return v_resultado;

  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_moneda'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_registrar_log_certificacion_sistemas(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función permite realizar el almacenamiento en la tabla de log por cada validación correspondiente a los siguientes servicios:
						- sre_fac_servicio_recepcion_factura etapa 1
						- sre_fac_servicio_recepcion_factura etapa 2
						- sre_fac_servicio_validacion_recepcion_factura
						- sre_fac_servicio_anulacion_factura						
						- sre_fac_servicio_validacion_anulacion_factura
PARAMETROS INGRESO
					    - p_json_varchar: Parámetros de entrada para el registro de los logs
PARAMETROS SALIDA
    Resultado de la transacción
SUBSISTEMA : Facturación
FECHA CREACION : <30/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

  	v_hash_descripcion text;
   	v_hash character varying;
  	v_agrupador varchar :='';
  	v_agrupador_md5 varchar :='';
	v_nombre_funcion_log character varying;
	v_caso_prueba_id integer;
	v_documento_fiscal_id integer;
	v_documento_sector_id integer;
	v_id_recepcion integer;
	v_id_log integer;
	v_sistema_id bigint;
	v_fecha timestamp:=now();
	v_resultado varchar;
	v_json json;
	v_etapa_prueba integer:=0;
	v_registro_iniciado integer:=0;
	v_ha_iniciado_etapa_proveedor boolean:=false;
	v_etapa_proveedor integer:=3052;
	v_nit bigint:=0;
begin
	v_json := cast(p_json_varchar as json);
	v_etapa_prueba := (v_json->'xmlRecepcionLog'->>'p_etapa_certificacion_sistema_id');
	v_sistema_id := sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionLog'->>'p_codigo_sistema' as varchar)));
	v_ha_iniciado_etapa_proveedor:=sre_recaudaciones.sre_fac_pru_ha_iniciado_etapa(v_sistema_id, v_etapa_proveedor); 
	v_registro_iniciado := (select count (1) 
						    from sre_recaudaciones.sre_fac_pruebas_certificacion_sistemas a
						    inner join sre_recaudaciones.sre_fac_pruebas_etapa_certificacion b 
						    on a.prueba_etapa_certificacion_id=b.prueba_etapa_certificacion_id
						    where sistema_id=v_sistema_id 
						    and b.etapa_certificacion_sistemas_id=v_etapa_prueba
						    and a.fecha_fin_prueba is null
						    and a.estado_id='AC'
						   );
						  
	case
		when v_etapa_prueba = 2850 and v_registro_iniciado > 0 then
			v_resultado = (select sre_recaudaciones.sre_fac_reg_log_casos_prueba_etapa_0(p_json_varchar));
			
	    when v_etapa_prueba = 2851  and v_registro_iniciado > 0 then	    												    		
			v_documento_fiscal_id:= (v_json->'xmlRecepcionLog'->>'p_tipo_documento_fiscal_id');
			v_id_recepcion:= (v_json->'xmlRecepcionLog'->>'v_recepcionId');
			v_documento_sector_id:= (v_json->'xmlRecepcionLog'->>'p_tipo_documento_sector_id');			
			v_hash_descripcion:= (v_json->'xmlRecepcionLog'->>'p_descripcion_respuesta');
			v_hash:= sre_recaudaciones.sre_fac_generador_hash_caso_prueba(v_hash_descripcion);
			v_caso_prueba_id:=(select caso_prueba_id from sre_recaudaciones.sre_fac_casos_prueba_1_consumo_servicio where hash=v_hash and documento_sector_id=v_documento_sector_id limit 1);
			INSERT INTO sre_recaudaciones.sre_fac_log_1_consumo_servicio(
			sistema_id, hash, hash_descripcion,estado_match,caso_prueba_id ,documento_fiscal_id, documento_sector_id, fecha_prueba,id_recepcion,estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)
			VALUES (v_sistema_id,v_hash,v_hash_descripcion,1,v_caso_prueba_id,v_documento_fiscal_id,v_documento_sector_id,v_fecha,v_id_recepcion,'AC',v_fecha,v_fecha,1000,1000)
			returning log_id
			into v_id_log;	

		when v_etapa_prueba = 3053 and v_registro_iniciado > 0 then
			v_resultado = (select sre_recaudaciones.sre_fac_reg_log_casos_prueba_etapa_10(p_json_varchar));
		
		when v_etapa_prueba = 3141  and (v_registro_iniciado > 0 or v_ha_iniciado_etapa_proveedor) then -- Etapa XI Anulaciones			 								
			v_documento_fiscal_id:= (v_json->'xmlRecepcionLog'->>'p_tipo_documento_fiscal_id');
			v_id_recepcion:= (v_json->'xmlRecepcionLog'->>'v_recepcionId');
			v_documento_sector_id:= (v_json->'xmlRecepcionLog'->>'p_tipo_documento_sector_id');
			v_hash_descripcion:= (v_json->'xmlRecepcionLog'->>'p_descripcion_respuesta');
			v_hash_descripcion:=case when v_hash_descripcion='VERIFICACION ANULACION|905|1'then v_hash_descripcion
										  when v_hash_descripcion='VERIFICACION ANULACION|905|null'then 'VERIFICACION ANULACION|905|null / 0'
										  when v_hash_descripcion='VERIFICACION ANULACION|905|0'then 'VERIFICACION ANULACION|905|null / 0'
										  else v_hash_descripcion end;
			v_hash_descripcion:=v_hash_descripcion||'|'||v_documento_sector_id;
			v_hash:= sre_recaudaciones.sre_fac_generador_hash_caso_prueba(v_hash_descripcion);
			
			if v_registro_iniciado > 0 then
				INSERT INTO sre_recaudaciones.sre_fac_log_11_anulaciones(
				sistema_id, hash, hash_descripcion,estado_match,caso_prueba_id ,documento_fiscal_id, documento_sector_id, fecha_prueba,id_recepcion,estado_id, fecha_registro, fecha_ultima_modificacion, usuario_registro_id, usuario_ultima_modificacion)	
				VALUES (v_sistema_id,v_hash,v_hash_descripcion,0,null,v_documento_fiscal_id,v_documento_sector_id,v_fecha,0,'AC',v_fecha,v_fecha,1000,1000)
				returning log_id			
				into v_id_log;
			elseif v_ha_iniciado_etapa_proveedor then
				v_nit := (v_json->'xmlRecepcionLog'->>'p_nit');
				perform sre_recaudaciones.sre_fac_pru_crud_log_9_sistema_proveedor(
				v_sistema_id,
				v_nit,
				v_hash,
				v_hash_descripcion,
				0,
				0,
				'ANULACIONES',
				0
				);		
				v_id_log=1;
			end if;

		else
			v_id_log:=0;
	end case;
	
  	return coalesce(v_resultado,case when v_id_log> 0 then '1000' else '0' end);

  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_reg_registrar_log_certificacion_sistemas'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_reg_registro_errores(pcod_error character varying, pmsg_error character varying, pfuncion character varying, psistema integer, pusuario bigint, pvalores character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Log de errores generados en las funciones de base de datos
PARAMETROS INGRESO
    cod_error character varying,
    msg_error character varying,
    funcion character varying,
    pSistema integer,
    usuario bigint,
    valores character varying
PARAMETROS SALIDA
  Retorna un boolean
SUBSISTEMA : Transversales
FECHA CREACION : 06/11/2018
AUTOR : Gilka Salas
VERSION : 1.0

**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripción>
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <número Versión secuencial>
EAD :<Número EAD>
**************************************************************************************************************************************************/
DECLARE

msg varchar(300) := '';
BEGIN

INSERT INTO sre_recaudaciones.sre_fac_logbd_errores(
             usuario_registro_id, subsistema_id, funcion, fecha_registro, 
            codigo_error, descripcion, valores_parametro, estado_id)
    VALUES ( pUsuario, pSistema, pFuncion, current_timestamp, 
           pcod_error, pMsg_error, pValores, 'AC');

   return true;
 
EXCEPTION
    when others then
        RAISE INFO 'X Error Name:%',SQLERRM;
        RAISE INFO 'X Error State:%', SQLSTATE;
        return false;
        
END; $function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_registro_log_prueba_sugerida_por_etapa(p_json character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  v_json json := cast(p_json as json);
  v_respuesta boolean=false;
  v_etapa_prueba integer := 0;

begin
	
	v_etapa_prueba := (v_json->>'etapaPrueba');
	
	
	case 
		when v_etapa_prueba = 2850 then --ETAPA 0 - GENERACION DE CUF
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_0(p_json);
		when v_etapa_prueba = 3016 then --2850 etapa cufd
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_cufd(p_json);
		when v_etapa_prueba = 2853 then --Etapa III - Sincronización de Catálogos
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_3(p_json);
		when v_etapa_prueba = 2854 then --Etapa IV - Sincronización de Fecha y Hora
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_4(p_json);
		when v_etapa_prueba = 2855 then --ETAPA 5 EVENTOS SIGNIFICATIVOS 2019/07/23
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_5(p_json);
		when v_etapa_prueba = 2856 then --ETAPA 6 ENVIO PAQUETE 2019/08/15
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_6(p_json);
		when v_etapa_prueba = 2857 then --ETAPA 7 FIRMA DIGITAL
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_7(p_json);
		when v_etapa_prueba = 3069 then 
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_8(p_json);	
		when v_etapa_prueba = 3053 then --ETAPA 10 ENVIO MASIVO 2019/08/05
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_10(p_json);
		when v_etapa_prueba = 3141 then --ETAPA 11 ANULACIONES 2019/08/20
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_11(p_json);
		when v_etapa_prueba = 3142 then --ETAPA 12 REPORTES 2019/08/21
			v_respuesta := sre_recaudaciones.sre_fac_reg_log_casos_prueba_sugerida_etapa_12(p_json);
		else
			return v_respuesta;
	end case;
	
  	return v_respuesta;

  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_registro_log_prueba_sugerida_por_etapa'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_anulacion_factura(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_tipo_documento_fiscal_id integer := 0;
	p_json json;
	v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5	
begin
	p_json:=p_json_varchar::json;
	
	p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
	
	if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
			v_documento_fiscal := 2;
	end if;

	if (v_documento_fiscal = 1 )then		
		return (select sre_recaudaciones.sre_fac_val_facturacion_validar_anulacion_desarrollo(p_json_varchar));	                                     
    else
		return (select sre_recaudaciones.sre_fac_val_facturacion_validar_anulacion_contingencia(p_json_varchar));		
	end if;
	
	 
						
	EXCEPTION
		  when others
		    then
		      return cast ( (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_anulacion_factura')) as varchar );
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_observados(p_json json, p_proceso integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_registro timestamp:=now();
	v_crud_observados bigint:=0;
	v_resultado_validacion smallint:=0;
	v_estado_observado smallint:=0;
	v_resultado smallint:=0;	
		
	p_usuario_registro_id int8;
	p_usuario_ultima_modificacion_id int8;
	p_persona_contribuyente_emisor_id int8;
	p_persona_contribuyente_beneficiario_id int8;
	p_tipo_motivo_observacion_id int4; -- CLONADA, DUPLICADO, DIFERENCIA MONTOS, OTROS (fake)
	p_tipo_modalidad_id int4;
	p_tipo_documento_fiscal_id int4;
	p_tipo_documento_sector_id int4;
	p_tipo_origen_documento_id int4; -- Compras y ventas (fake)
	p_tipo_documento_identidad_id int4; -- En casos especiales "No Identificado"
	p_estado_inicial_documento_fiscal_id int4; --(fake)
	p_estado_documento_fiscal_observado_id int4; -- Observado, Rezagado,otros (fake)
	p_sucursal_emisor_id int4;
	p_nit_emisor int8;
	p_codigo_actividad_id int4;
	p_numero_documento_fiscal int8;
	p_recepcion_documento_id int8; -- numero de recepcion del documento, en caso de que este haya sido recibido por el SIN
	p_descripcion_motivo varchar(250); --(fake)
	p_cuf varchar(100);
	p_cufd varchar(100);
	p_caed varchar(100);
	p_cuis varchar(20);
	p_numero_documento_beneficiario varchar(20);
	p_nombre_razon_social_beneficiario varchar(100);
	p_monto_total numeric(20,5);
	p_fecha_emision timestamp;
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp;
	p_estado_id varchar(2);

begin
	--Nota: Valores del campo "p_proceso":
			--1 = 0bservados
			--2 = Sancionatorios
			--3 = Masivos
			--4 = Contingencias
				
	--Nota: v_resultado_validacion=1000, siginifica hay validaciones que no se cumplieron en los procesos masivos/observados/sancionatorios/contingencias.
	
	case
		when p_proceso = 1 then  --Observados
			if (select count(*) from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_obs_mas_san_con(p_json, 222, 2) where resultado_ejecucion<>1000)=0 then
				v_resultado_validacion:=1000;
			end if;
		when p_proceso = 2 then  --Sancionatorios
			v_resultado_validacion:=0;
		when p_proceso = 3 then  --Masivos
			if (select count(*) from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_obs_mas_san_con(p_json, 111, 2) where resultado_ejecucion<>1000)<>0 then
				v_resultado_validacion:=1000;
			end if;
		when p_proceso = 4 then  --Contingencias
			 v_resultado_validacion:=0;
		else 
			v_resultado_validacion:=0;
	end case;
	
			
	
	--------Insercion en observados	
	if (v_resultado_validacion=1000) then --¿Existe observacion?
		p_usuario_registro_id := 1000;
		p_usuario_ultima_modificacion_id :=1000;
		p_persona_contribuyente_emisor_id := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id((p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor')::bigint);
		p_persona_contribuyente_beneficiario_id := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id_ben((p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad')::integer, (p_json->'xmlRecepcionGenerica'->>'p_nit')::bigint);
		p_tipo_motivo_observacion_id :=1; -- CLONADA, DUPLICADO, DIFERENCIA MONTOS, OTROS (fake)
		p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');
		p_tipo_documento_fiscal_id  :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		p_tipo_documento_sector_id  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector');
		p_tipo_origen_documento_id  :=1; -- Compras y ventas (fake)
		p_tipo_documento_identidad_id  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad'); -- En casos especiales "No Identificado"
		p_estado_inicial_documento_fiscal_id  :=1; --(fake)
		p_estado_documento_fiscal_observado_id  :=1; -- Observado, Rezagado,otros (fake)
		p_sucursal_emisor_id  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
		p_nit_emisor  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
		p_codigo_actividad_id  :=(p_json->'XmlFactura'->'factura'->'detalle'->>'actividadEconomica');
		p_numero_documento_fiscal  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
		p_recepcion_documento_id  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoExcepcionDocumento'); -- numero de recepcion del documento, en caso de que este haya sido recibido por el SIN
		p_descripcion_motivo :='abc'; --(fake)
		p_cuf :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
		p_cufd  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
		p_caed  :=(p_json->'xmlRecepcionGenerica'->>'p_caed');
		p_cuis  :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
		p_numero_documento_beneficiario  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
		p_nombre_razon_social_beneficiario  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
		p_monto_total  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
		p_fecha_emision  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
		p_fecha_registro  :=v_fecha_registro;
		p_fecha_ultima_modificacion  :=v_fecha_registro;
		p_estado_id  :='AC';
				
		v_crud_observados:=sre_recaudaciones.sre_fac_crud_documentos_fiscales_observados
		(
		0,
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id,
		p_persona_contribuyente_emisor_id,
		p_persona_contribuyente_beneficiario_id,
		p_tipo_motivo_observacion_id,
		p_tipo_modalidad_id ,
		p_tipo_documento_fiscal_id ,
		p_tipo_documento_sector_id ,
		p_tipo_origen_documento_id ,
		p_tipo_documento_identidad_id ,
		p_estado_inicial_documento_fiscal_id ,
		p_estado_documento_fiscal_observado_id ,
		p_sucursal_emisor_id ,
		p_nit_emisor ,
		p_codigo_actividad_id ,
		p_numero_documento_fiscal ,
		p_recepcion_documento_id , 
		p_descripcion_motivo ,
		p_cuf ,
		p_cufd ,
		p_caed ,
		p_cuis ,
		p_numero_documento_beneficiario ,
		p_nombre_razon_social_beneficiario ,
		p_monto_total ,
		p_fecha_emision ,
		p_fecha_registro ,
		p_fecha_ultima_modificacion ,
		p_estado_id
		);	
						
	end if;
	
	v_resultado :=1000;
	
	return v_resultado;
	
	EXCEPTION
  	when others
	    then
	  	return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_observados'));
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_observados_anulacion_facturacion_manual(p_json json, p_venta_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Proceso de registro de observados, se ejecuta despues del registro de la anulacion
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Codigo de exito si se registro observacion
SUBSISTEMA : Facturación
FECHA CREACION : 16/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_registro timestamp:=now();
	v_crud_observados bigint:=0;
	v_resultado_validacion smallint:=0;
	v_estado_observado smallint:=0;
	v_resultado smallint:=0;	
	p_usuario_registro_id int8;
	p_usuario_ultima_modificacion_id int8;
	p_persona_contribuyente_emisor_id int8;
	p_persona_contribuyente_beneficiario_id int8;
	p_tipo_motivo_observacion_id int4; -- CLONADA, DUPLICADO, DIFERENCIA MONTOS, OTROS (fake)
	p_tipo_modalidad_id int4;
	p_tipo_documento_fiscal_id int4;
	p_tipo_documento_sector_id int4;
	p_tipo_origen_documento_id int4; -- Compras y ventas (fake)
	p_tipo_documento_identidad_id int4; -- En casos especiales "No Identificado"
	p_estado_inicial_documento_fiscal_id int4; --(fake)
	p_estado_documento_fiscal_observado_id int4; -- Observado, Rezagado,otros (fake)
	p_sucursal_emisor_id int4;
	p_nit_emisor int8;
	p_codigo_actividad_id int4;
	p_numero_documento_fiscal int8;
	p_recepcion_documento_id int8; -- numero de recepcion del documento, en caso de que este haya sido recibido por el SIN
	p_descripcion_motivo varchar(250); --(fake)
	p_cuf varchar(100);
	p_cufd varchar(100);
	p_caed varchar(100);
	p_cuis varchar(20);
	p_numero_documento_beneficiario varchar(20);
	p_nombre_razon_social_beneficiario varchar(100);
	p_monto_total numeric(20,5);
	p_fecha_emision timestamp;
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp;
	p_estado_id varchar(2);
	p_fecha_emision_texto character varying;
	v_venta_id bigint;

begin
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	
	
	p_estado_inicial_documento_fiscal_id  := sre_recaudaciones.sre_fac_ope_obtener_estado_inicial_observados_manual(p_tipo_documento_sector_id, p_venta_id);		
	if (p_estado_inicial_documento_fiscal_id is null)then 
		p_estado_inicial_documento_fiscal_id  :=1; --(fake)
	end if; 
	

	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
        insert into tbl_resultado_ejecucion values('sre_fac_val_fecha_envio_anulados_facturacion_manual', (select sre_recaudaciones.sre_fac_val_fecha_envio_anulados_facturacion_manual(p_json )));
	
	
	if (select count(*) from tbl_resultado_ejecucion where resultado_ejecucion<>1000)=0 then
		v_resultado_validacion:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	--------Insercion en observados	
	if (v_resultado_validacion<>1000) then --¿Existe observacion?
		p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
		p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
		p_persona_contribuyente_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
		
		p_tipo_motivo_observacion_id :=1; -- CLONADA, DUPLICADO, DIFERENCIA MONTOS, OTROS (fake)
		p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_modalidad_facturacion_id');
		
		p_tipo_origen_documento_id  :=(select clasificador_id  from str_transversales.str_cps_clasificadores where tipo_clasificador like 'tipo_origen_documento_id'  and descripcion = 'DOCUMENTO FISCAL REGISTRADO EN VENTA'); -- Compras y ventas (fake)
		p_tipo_documento_identidad_id:=(select clasificador_id  from str_transversales.str_cps_clasificadores where tipo_clasificador like 'tipo_documento_identidad_id'  and descripcion = 'NO ESPECIFICADO'); 
		
		-- Observado, Rezagado,otros (fake)
		p_estado_documento_fiscal_observado_id:=(select clasificador_id  from str_transversales.str_cps_clasificadores where tipo_clasificador like 'estado_documento_fiscal_observado_id'  and descripcion = 'PENDIENTE DE FISCALIZACION');
		p_sucursal_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');		
		p_nit_emisor :=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
		p_codigo_actividad_id := (p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');
		p_numero_documento_fiscal  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
		p_recepcion_documento_id  :=1; -- (fake) numero de recepcion del documento, en caso de que este haya sido recibido por el SIN
		p_descripcion_motivo :=null; --(fake)
		p_cuf :=null;
		p_cufd  :=null;
		p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
		p_cuis  :=null;
		p_numero_documento_beneficiario  :='';
		p_nombre_razon_social_beneficiario  :='';		
		p_monto_total  :=0;		
		p_fecha_emision :=  (select sre_recaudaciones.sre_fac_ope_obtener_fecha_emision_venta_factura_manual(p_venta_id, p_tipo_documento_sector_id));
		if(p_fecha_emision is null) then				
				p_fecha_emision :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion' as timestamp));  --mientras se arregla NULL en el campo
		end if;
		p_fecha_registro  :=v_fecha_registro;
		p_fecha_ultima_modificacion  :=v_fecha_registro;
		p_estado_id  :='AC';
		
		v_crud_observados:=sre_recaudaciones.sre_fac_crud_documentos_fiscales_observados
		(
		1,
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id,
		p_persona_contribuyente_emisor_id,
		p_persona_contribuyente_beneficiario_id,
		p_tipo_motivo_observacion_id,
		p_tipo_modalidad_id ,
		p_tipo_documento_fiscal_id ,
		p_tipo_documento_sector_id ,
		p_tipo_origen_documento_id ,
		p_tipo_documento_identidad_id ,
		p_estado_inicial_documento_fiscal_id ,
		p_estado_documento_fiscal_observado_id ,
		p_sucursal_emisor_id ,
		p_nit_emisor ,
		p_codigo_actividad_id ,
		p_numero_documento_fiscal ,
		p_recepcion_documento_id , 
		p_descripcion_motivo ,
		p_cuf ,
		p_cufd ,
		p_caed ,
		p_cuis ,
		p_numero_documento_beneficiario ,
		p_nombre_razon_social_beneficiario ,
		p_monto_total ,
		p_fecha_emision ,
		p_fecha_registro ,
		p_fecha_ultima_modificacion ,
		p_estado_id
		);	
		

  		if(v_crud_observados>0) then		
		v_resultado :=1000;
		end if;
		
	end if;

	return v_resultado;
	
	EXCEPTION
  	when others
	    then
	  	return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_observados_anulacion_facturacion_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_observados_facturacion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Proceso de registro de observados, se ejecuta en la etapa 2 despues del registro de ventas, valida segun las reglas de negocio establecidas
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Codigo de exito si se registro observacion
SUBSISTEMA : Facturación
FECHA CREACION : 15/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_registro timestamp:=now();
	v_crud_observados bigint:=0;
	v_resultado_validacion smallint:=0;
	v_estado_observado smallint:=0;
	v_resultado smallint:=0;	
	p_usuario_registro_id int8;
	p_usuario_ultima_modificacion_id int8;
	p_persona_contribuyente_emisor_id int8;
	p_persona_contribuyente_beneficiario_id int8;
	p_tipo_motivo_observacion_id int4; -- CLONADA, DUPLICADO, DIFERENCIA MONTOS, OTROS (fake)
	p_tipo_modalidad_id int4;
	p_tipo_documento_fiscal_id int4;
	p_tipo_documento_sector_id int4;
	p_tipo_origen_documento_id int4; -- Compras y ventas (fake)
	p_tipo_documento_identidad_id int4; -- En casos especiales "No Identificado"
	p_estado_inicial_documento_fiscal_id int4; --(fake)
	p_estado_documento_fiscal_observado_id int4; -- Observado, Rezagado,otros (fake)
	p_sucursal_emisor_id int4;
	p_nit_emisor int8;
	p_codigo_actividad_id int4;
	p_numero_documento_fiscal int8;
	p_recepcion_documento_id int8; -- numero de recepcion del documento, en caso de que este haya sido recibido por el SIN
	p_descripcion_motivo varchar(250); --(fake)
	p_cuf varchar(100);
	p_cufd varchar(100);
	p_caed varchar(100);
	p_cuis varchar(20);
	p_numero_documento_beneficiario varchar(20);
	p_nombre_razon_social_beneficiario varchar(100);
	p_monto_total numeric(20,5);
	p_fecha_emision timestamp;
	p_fecha_registro timestamp;
	p_fecha_ultima_modificacion timestamp;
	p_estado_id varchar(2);
	p_fecha_emision_texto character varying;
	v_venta_id bigint;

begin
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	v_venta_id := (select sre_recaudaciones.sre_fac_ope_verificar_existe_ventas_factura_manual(p_json));		
	p_estado_inicial_documento_fiscal_id  :=1; --(fake)
	
	if(v_venta_id >0) then 
	
		p_estado_inicial_documento_fiscal_id  := sre_recaudaciones.sre_fac_ope_obtener_estado_inicial_observados_manual(p_tipo_documento_sector_id, v_venta_id);		
	
	end if;
	
	if (select count(*) from sre_recaudaciones.sre_fac_ope_validar_observados_facturacion_manual(p_json) where resultado_ejecucion<>1000)=0 then
				v_resultado_validacion:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
			end if;
	
	--------Insercion en observados	
	if (v_resultado_validacion<>1000) then --¿Existe observacion?
		p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
		p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
		p_persona_contribuyente_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_emisor_id');
		p_persona_contribuyente_beneficiario_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_beneficiario_id');
		p_tipo_motivo_observacion_id :=1; -- CLONADA, DUPLICADO, DIFERENCIA MONTOS, OTROS (fake)
		p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');
		
		p_tipo_origen_documento_id  :=1; -- Compras y ventas (fake)
		p_tipo_origen_documento_id  :=(select clasificador_id  from str_transversales.str_cps_clasificadores where tipo_clasificador like 'tipo_origen_documento_id'  and descripcion = 'DOCUMENTO FISCAL REGISTRADO EN VENTA'); -- Compras y ventas (fake)
		p_tipo_documento_identidad_id:=(select sre_recaudaciones.sre_fac_ope_obtener_tipo_documento_facturacion_manual(p_json));
		
		p_estado_documento_fiscal_observado_id:=(select clasificador_id  from str_transversales.str_cps_clasificadores where tipo_clasificador like 'estado_documento_fiscal_observado_id'  and descripcion = 'PENDIENTE DE FISCALIZACION');		
		p_sucursal_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');
		
		p_nit_emisor :=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
		p_codigo_actividad_id := (p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');
		p_numero_documento_fiscal  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
		p_recepcion_documento_id  :=1; -- (fake) numero de recepcion del documento, en caso de que este haya sido recibido por el SIN
		p_descripcion_motivo :=null; --(fake)
		p_cuf :=null;
		p_cufd  :=null;
		p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
		p_cuis  :=null;
		p_numero_documento_beneficiario  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
		p_nombre_razon_social_beneficiario  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
		if(p_nombre_razon_social_beneficiario is null) then 
		p_nombre_razon_social_beneficiario := '';
		end if;
		p_monto_total  :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
		
		p_fecha_emision_texto:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
		p_fecha_emision:=(select CASE WHEN p_fecha_emision_texto <> '' THEN to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY') ELSE NULL END); 
		p_fecha_registro  :=v_fecha_registro;
		p_fecha_ultima_modificacion  :=v_fecha_registro;
		p_estado_id  :='AC';
		
		v_crud_observados:=sre_recaudaciones.sre_fac_crud_documentos_fiscales_observados
		(
		1,
		p_usuario_registro_id,
		p_usuario_ultima_modificacion_id,
		p_persona_contribuyente_emisor_id,
		p_persona_contribuyente_beneficiario_id,
		p_tipo_motivo_observacion_id,
		p_tipo_modalidad_id ,
		p_tipo_documento_fiscal_id ,
		p_tipo_documento_sector_id ,
		p_tipo_origen_documento_id ,
		p_tipo_documento_identidad_id ,
		p_estado_inicial_documento_fiscal_id ,
		p_estado_documento_fiscal_observado_id ,
		p_sucursal_emisor_id ,
		p_nit_emisor ,
		p_codigo_actividad_id ,
		p_numero_documento_fiscal ,
		p_recepcion_documento_id , 
		p_descripcion_motivo ,
		p_cuf ,
		p_cufd ,
		p_caed ,
		p_cuis ,
		p_numero_documento_beneficiario ,
		p_nombre_razon_social_beneficiario ,
		p_monto_total ,
		p_fecha_emision ,
		p_fecha_registro ,
		p_fecha_ultima_modificacion ,
		p_estado_id
		);	
		
		v_estado_observado:= sre_recaudaciones.sre_fac_ope_actualizar_estado_venta_facturacion_manual(p_tipo_documento_sector_id, v_venta_id, 'OBSERVADO VENTA'); 

  		if(v_crud_observados>0) then		
		v_resultado :=1000;
		end if;
		
	end if;

	return v_resultado;
	
	EXCEPTION
  	when others
	    then
	  	return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_observados_facturacion_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_obtener_archivo_xml_valido(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera los datos xml validos de un documento fiscal, por cuf, nitEmisor, numeroFactura   
PARAMETROS INGRESO
    p_json_varchar : Cadena en formato json contiene campos tipo documento fiscal, tipo documento sector, nitEmisor, cuf, numeroFactura.	
PARAMETROS SALIDA
    string en formato json, ejemplo: {}
    '0' cuando no existen datos encontrados
SUBSISTEMA : Facturación
FECHA CREACION : 23/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare      
	v_resultado varchar:='0';
	v_json json;
	v_json_datos_xml json;	
	
	v_tipo_documento_fical integer:=0;
	v_tipo_documento_sector integer:=0;
	v_numero_factura bigint:=0;
	v_nit_emisor bigint:=0;
	v_cuf varchar:='';
	v_sql varchar:='0';
begin	
	v_json := cast(p_json_varchar as json);
	v_tipo_documento_fical := (v_json->'jsonObtenerXmlValido'->>'pTipoDocumentoFiscal')::integer; -- 1
	v_tipo_documento_sector := (v_json->'jsonObtenerXmlValido'->>'pTipoDocumentoSector')::integer; -- 1
	v_numero_factura  := (v_json->'jsonObtenerXmlValido'->>'pNumeroFactura')::bigint; --10013
	v_nit_emisor := (v_json->'jsonObtenerXmlValido'->>'pNitEmisor')::bigint; -- 1020703023
	v_cuf := (v_json->'jsonObtenerXmlValido'->>'pCuf')::varchar; --B2C9E8121A4972FE0512BFC23030B5DB9DBDC021
	 
	v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_archivo_xml_valido(v_tipo_documento_fical, v_tipo_documento_sector));
	
	if v_sql<>'0' then
		execute v_sql using v_cuf, v_numero_factura, v_nit_emisor into v_json_datos_xml;
	end if;
	
	
	if v_json_datos_xml isnull then
		v_resultado :='0';	
	else 
		v_resultado :=v_json_datos_xml;	
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then
	    	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_obtener_archivo_xml_valido');
			return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_servicio_obtener_archivo_xml_valido')) as varchar) ;	      	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_obtener_factura_datos_parcial(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera los datos de un documento fiscal, por cuf, nitEmisor, numeroFactura   
PARAMETROS INGRESO
    p_json_varchar : Cadena en formato json contiene campos tipo documento fiscal, tipo documento sector, nitEmisor, cuf, numeroFactura.	
PARAMETROS SALIDA
    string en formato json, ejemplo: {"detalle": [{"cantidad": 10.00000, "subtotal": 25.00000, "productoid": "JN-131231", 
    "descripcion": "JUGO DE NARANJA EN VASO", "unidadmedida": "58", "productosinid": 83141, "detalleventaid": 26945, "preciounitario": 2.50000, 
    "actividadeconomicaid": 620100}], "usuario": "pperez", "ventaid": 15164, "direccion": "Calle Juan Pablo II #54", "montototal": 25.00000, 
    "sucursalid": 0, "complemento": null, "fechaemision": "2019-08-16T14:00:36.169", "puntoventaid": null, "numerodocumento": "1548971", 
    "nombrerazonsocial": "Pablo Mamani", "tipodocumentoidentidad": 1}
    '0' cuando no existen datos encontrados
SUBSISTEMA : Facturación
FECHA CREACION : 19/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Consulta de tablas dinamica por tipo documento fiscal (1-factura, 5-contingencia) y documento sector (determinado)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :20/08/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 2.0
**************************************************************************************************************************************************/
declare      
	v_resultado varchar:='0';
	v_json json;
	v_json_cabecera json;	
	v_json_detalle json;	
	
	v_tipo_documento_fical integer:=0;
	v_tipo_documento_sector integer:=0;
	v_numero_factura bigint:=0;
	v_nit_emisor bigint:=0;
	v_cuf varchar:='';
	
	v_venta_id bigint:=0;
	
	v_sql varchar:='0';
begin	
	v_json := cast(p_json_varchar as json);
	v_tipo_documento_fical := (v_json->'jsonObtenerFacturaDatosParcial'->>'pTipoDocumentoFiscal')::integer; -- 1
	v_tipo_documento_sector := (v_json->'jsonObtenerFacturaDatosParcial'->>'pTipoDocumentoSector')::integer; -- 1
	v_numero_factura  := (v_json->'jsonObtenerFacturaDatosParcial'->>'pNumeroFactura')::bigint; --10013
	v_nit_emisor := (v_json->'jsonObtenerFacturaDatosParcial'->>'pNitEmisor')::bigint; -- 1020703023
	v_cuf := (v_json->'jsonObtenerFacturaDatosParcial'->>'pCuf')::varchar; --B2C9E8121A4972FE0512BFC23030B5DB9DBDC021
	 
	v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_cab(v_tipo_documento_fical, v_tipo_documento_sector));
	
	if v_sql<>'0' then
		execute v_sql using v_cuf, v_numero_factura, v_nit_emisor into v_json_cabecera;
	end if;	
	
	if v_json_cabecera isnull then
		return v_resultado;
	else
		v_venta_id := (v_json_cabecera->>'ventaid')::bigint; -- 15164
		v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_factura_datos_parcial_det(v_tipo_documento_fical, v_tipo_documento_sector));
		execute v_sql using v_venta_id into v_json_detalle;
		
		if v_json_detalle isnull then
			return v_resultado;
		else		   
			v_resultado:=(cast(v_json_cabecera as jsonb) || jsonb_build_object('detalle', v_json_detalle));
			return v_resultado;
		end if;
  	end if;

	EXCEPTION
	  when others
	    then
	    	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_obtener_factura_datos_parcial');
			return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_servicio_obtener_factura_datos_parcial')) as varchar) ;	      	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_obtener_json_recepcion_anulacion(p_cuf character varying, p_numero_documento_fiscal bigint, p_tipo_documento_fiscal_id integer, p_resultado_consulta integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Metodo principal, recupera los del codigo anulación para facturas normales y de contingencia   
PARAMETROS INGRESO
    p_cuf: Código unico de factura
    p_numero_documento_fiscal: Número de documento fiscal
    p_tipo_documento_fiscal_id:	Tipo de documento fiscal
PARAMETROS SALIDA
    Resultado en formato Json de la respuesta
SUBSISTEMA : Facturación
FECHA CREACION : 22/10/2019
AUTOR : Equipo Tyrell <junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste para las facuras que sean validas y nunca psaron por el servicio Anulación
NUMERO SECUENCIAL: <Numero secuencial>
FECHA DE MODIFICACION :<08/11/2019>
AUTOR DE LA MODIFICACION : <junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/
declare      
	v_recepcion_anulacion bigint:=0;
	v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5
	v_estado_factura_anulado_no_confirmado smallint := 0;
	v_resultado_json varchar;
begin	

	v_estado_factura_anulado_no_confirmado := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_rechazada');
	v_resultado_json :='{"codigorecepcionanulacion": "0", "codigoestado":"'||v_estado_factura_anulado_no_confirmado||'", "listacodigoserror": []}';
	v_resultado_json :=(cast(v_resultado_json as jsonb) || jsonb_build_object('listacodigoserror','['|| cast(p_resultado_consulta as varchar) || ']'));

	-- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
	v_documento_fiscal := case when  p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6 then 2 else 1 end;
	
	if (v_documento_fiscal = 1 and (p_resultado_consulta=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_existe_solicitud_anulacion')))then		
		v_recepcion_anulacion:= coalesce(( select recepcion_anulacion_id 
										   from sre_recaudaciones.sre_fac_recepciones_anulaciones 
										   where cuf=p_cuf
										   and numero_documento_fiscal=p_numero_documento_fiscal 
										   order by fecha_registro desc limit 1
										  ),0
										 );		
    elseif(p_resultado_consulta=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_existe_solicitud_anulacion')) then
		v_recepcion_anulacion:= coalesce(( select recepcion_anulacion_contingencia_id 
										   from sre_recaudaciones.sre_fac_recepciones_anulaciones_contingencias
										   where cuf=p_cuf
										   and numero_documento_fiscal=p_numero_documento_fiscal 
										   order by fecha_registro desc limit 1
										  ),0
										 );												
	elseif(p_resultado_consulta=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
		v_resultado_json :=(cast(v_resultado_json as jsonb) || jsonb_build_object('listacodigoserror','[97]'));
	end if;  	
	
	if v_recepcion_anulacion > 0 then	
		v_resultado_json:=(cast(v_resultado_json as jsonb) || jsonb_build_object('codigoestado',''|| cast(sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_pendiente_bd') as varchar) ||'' ));		
		v_resultado_json :=(cast(v_resultado_json as jsonb) || jsonb_build_object('listacodigoserror','[]'));
	end if;

	v_resultado_json :=(cast(v_resultado_json as jsonb) || jsonb_build_object('codigorecepcionanulacion',''|| v_recepcion_anulacion ||''));
	return v_resultado_json;
	
	EXCEPTION
	  when others
	    then
	    	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_obtener_json_recepcion_anulacion');
	    	raise notice 'Excepcion ------> %',SQLERRM;
			return cast((sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_servicio_obtener_json_recepcion_anulacion')) as varchar) ;	      	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_obtener_recepcion_anulacion(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que permite la obtención del código de recepción de anulación cuantas veces quiera el contribuyente 
PARAMETROS INGRESO
    Json con datos correspondientes para la verificación de la factura y posterior devolución de la recepcion anulación 
PARAMETROS SALIDA
    Formato Json de respuesta con los siguientes parámetros:
				    		codigoestado
				    		listacodigoserror
				    		codigorecepcionanulacion
SUBSISTEMA : Facturación
FECHA CREACION : <25/10/2019>
AUTOR : Equipo Tyrell <junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adicionó la obtención del cufp para documentos de Pre Valorada Electronica y Computarizada.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<20/11/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell <junior.flores>
VERSION : 1.0
**************************************************************************************************************************************************/
declare
   v_json json;
   p_resultado_registro bigint:=0;
   v_resultado_registro smallint:=0;
   v_codigo_exito smallint:=0;
   --variables para registro de pruebas automaticas
   v_estado_factura_anulado_no_confirmado smallint := 0;
   v_resultado_defecto varchar;
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';
   v_tipo_documento_sector_id int8:=0;
   v_numero_documento_fiscal int8:=0;
   v_tipo_documento_fiscal_id integer:=0;
   v_cuf varchar:='';
begin
	v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	v_json:= cast(p_json_varchar as json);	
	v_estado_factura_anulado_no_confirmado := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_rechazada');
	v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));
	v_resultado_defecto :='{"codigorecepcionanulacion": "0", "codigoestado":"'||v_estado_factura_anulado_no_confirmado||'", "listacodigoserror": []}';

	drop table if exists tbl_resultado_anulacion;		 
	create temp table tbl_resultado_anulacion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	insert into tbl_resultado_anulacion (nombre_funcion_validacion,resultado_ejecucion)
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(v_json, 7));
	if (select count(*) from tbl_resultado_anulacion)<>0 then
		if (select count(*) from tbl_resultado_anulacion where resultado_ejecucion<>v_codigo_exito)=0 then -- =0 para validos		
			--raise notice '--------REGISTRADOS POR VALIDOS--------';
			-- Verifica la factura	
			v_resultado_registro:=sre_recaudaciones.sre_fac_val_factura(v_json);	
		raise notice '--------REGISTRADOS POR VALIDOS-------->%',v_resultado_registro;
			v_tipo_documento_fiscal_id :=(v_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');				
			v_numero_documento_fiscal :=(v_json->'xmlRecepcionGenerica'->>'p_numero_documento_fiscal');
			v_tipo_documento_sector_id := (v_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
			v_cuf := case when v_tipo_documento_sector_id=28 then (v_json->'xmlRecepcionGenerica'->>'p_cufp') else (v_json->'xmlRecepcionGenerica'->>'p_cuf') end ;	
			v_resultado_defecto:= sre_recaudaciones.sre_fac_servicio_obtener_json_recepcion_anulacion(v_cuf, v_numero_documento_fiscal, v_tipo_documento_fiscal_id, v_resultado_registro);
		else
			--raise notice '--------REGISTRADOS POR INVALIDOS--------';								
			v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror','['|| (select array_to_string (array(select resultado_ejecucion  from tbl_resultado_anulacion where resultado_ejecucion<>v_codigo_exito),',') || ']')));
		end if;
	
	 end if;		
	
	v_resultado_defecto:= replace(v_resultado_defecto, '"[', '[');
	v_resultado_defecto:= replace(v_resultado_defecto, ']"', ']');
	return v_resultado_defecto;			
		
	EXCEPTION
		  when others
		    then
		      --return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_anulacion_desarrollo'));	
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_obtener_recepcion_anulacion');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_servicio_obtener_recepcion_anulacion'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_recepcion_compra(p_json_varchar character varying, p_etapa character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
  
begin		
		--Nota: Para obtener el documento fiscal y diferenciar a traves de este la recepcion de contingencia 20190719
		p_json:= p_json_varchar::json;
		--p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
		
			case
					when p_etapa = '1' --Validacion de la Recepcion
						then 		
						return (sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_compra(p_json_varchar));									
					when p_etapa = '2' --Validacion de la Compra
						then 			
						return (sre_recaudaciones.sre_fac_val_facturacion_validar_factura_compra(p_json_varchar));								
					else 
						return '0'; --Etapa inexistente
			end case;	
			
	EXCEPTION
		  when others
		    then
		      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_recepcion_compra'))::varchar;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_recepcion_contingencia(p_json_varchar character varying, p_etapa character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Funcion principal de recepcion de factura
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	 p_json json;
	 p_resultado_registro smallint := 0;
	 p_json_errores json;
begin
	
	p_json_varchar:=(sre_recaudaciones.sre_fac_ope_limpiar_objeto_json(p_json_varchar));		
		 case
				when p_etapa = '1' --Validacion de la Recepcion
					then 					
					return (sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_contingencia(p_json_varchar));--contingencia	
				when p_etapa = '2' --Validacion de la Factura
					then 			
					return (sre_recaudaciones.sre_fac_val_facturacion_validar_factura_contingencia(p_json_varchar));								
				else 
					return '0'; --Etapa inexistente
		end case;		
						
	EXCEPTION
		  when others
		    then
		      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_recepcion_contingencia'))::varchar;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_recepcion_factura(p_json_varchar character varying, p_etapa character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   
   p_tipo_documento_fiscal_id integer := 0;
   
   v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5
   
begin
		p_json_varchar:=(sre_recaudaciones.sre_fac_ope_limpiar_objeto_json(p_json_varchar));
		
		--Nota: Para obtener el documento fiscal y diferenciar a traves de este la recepcion de contingencia 20190719
		p_json:= p_json_varchar::json;
		p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
		
		
		if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
			v_documento_fiscal := 2;
		end if;
		
		if (v_documento_fiscal = 1 )then		
			case
					when p_etapa = '1' --Validacion de la Recepcion
						then 					
						return (sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_desarrollo(p_json_varchar));			
					when p_etapa = '2' --Validacion de la Factura
						then 			
						return (sre_recaudaciones.sre_fac_val_facturacion_validar_factura_desarrollo(p_json_varchar));								
					else 
						return '0'; --Etapa inexistente
			end case;	
			
		else
			return sre_recaudaciones.sre_fac_servicio_recepcion_contingencia(p_json_varchar, p_etapa); -- add 20190718		
		end if;
						
	EXCEPTION
		  when others
		    then
		      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_recepcion_factura'))::varchar;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_recepcion_masivo(p_json_varchar character varying, p_etapa character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
begin
		p_json_varchar:=(sre_recaudaciones.sre_fac_ope_limpiar_objeto_json(p_json_varchar));		
		 case
				when p_etapa = '1' --Validacion de la Recepcion
					then 					
					return (sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_masivo(p_json_varchar));			
				when p_etapa = '2' --Validacion de la Factura
					then 			
					return (sre_recaudaciones.sre_fac_val_facturacion_validar_factura_masivo(p_json_varchar));								
				else 
					return '0'; --Etapa inexistente
		end case;		
						
	EXCEPTION
		  when others
		    then
		      return cast ( (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_recepcion_masivo')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_registro_anulados_facturacion_manual(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Proceso de registro de facturas anuladas
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Mensaje de respuesta
SUBSISTEMA : Facturación
FECHA CREACION : 01/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajustes para registro en la nueva estructura de tablas de ANULADOS
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :10/09/2019
AUTOR DE LA MODIFICACION : Susana Escobar Paz
VERSION : 1.0
**************************************************************************************************************************************************/
declare  
	v_resultado_recepcion bigint:=0; 
	v_resultado_id_recepciones_correctas bigint:=0; 
	v_id_recepcion bigint:=0;
	v_venta_id bigint ;	
	v_venta_anulado_id bigint ;		
	v_resultado varchar;
	v_resultado_anulacion bigint;
	v_sql varchar:='0';	
	v_json json;
	v_resultado_registro_rectificado bigint;
	v_resultado_registro_observados bigint;
begin
	p_json_varchar:=(sre_recaudaciones.sre_fac_ope_limpiar_objeto_json(p_json_varchar));	
	v_json := cast(p_json_varchar as json);	
	
	v_resultado_recepcion := (sre_recaudaciones.sre_fac_reg_recepciones_anulados_facturacion_manual(v_json));--recepcion sin validaciones (directamente), o realizar las validaciones de etapa 1 por los menos CONSULTAR
	
		if(v_resultado_recepcion<=0) then
			v_resultado :='No se pudo recepcionar';
		else	
			--ha sido recpcionado							
			v_resultado_id_recepciones_correctas := (sre_recaudaciones.sre_fac_val_validacion_anulados_facturacion_manual(v_json, v_resultado_recepcion));		
			v_resultado:='EXISTEN ERRORES';
				if(v_resultado_id_recepciones_correctas>0) then 	

				v_venta_anulado_id :=  (select sre_recaudaciones.sre_fac_ope_verificar_existe_venta_estado_factura_manual(v_json, 'ANULADO'));	
			
					if(v_venta_anulado_id>0) then
					v_resultado :='No se puede anular factura anulada anteriormente';
					else      
					v_venta_id := (select sre_recaudaciones.sre_fac_ope_verificar_existe_venta_estado_factura_manual(v_json, 'VALIDO'));	 
					
					v_resultado_anulacion:= (sre_recaudaciones.sre_ope_registrar_anulados_facturacion_manual(v_json, v_venta_id, v_resultado_id_recepciones_correctas));
					v_resultado_registro_rectificado := (sre_recaudaciones.sre_ope_registrar_rectificados_anulados_facturacion_manual(v_json, v_venta_id, v_resultado_anulacion));
					v_resultado_registro_observados := (sre_recaudaciones.sre_fac_servicio_observados_anulacion_facturacion_manual(v_json, v_venta_id));
						if(v_resultado_anulacion>0) then 
						v_sql:='update sre_recaudaciones.sre_fman_recepciones_anuladas set fecha_consolidacion= now() where recepcion_anulado_id = $1';
						execute v_sql  
						using           
						v_resultado_recepcion;
						v_resultado:='ANULADO CON EXITO';
						end if;
					end if;
				end if;				
		end if;
			
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'servicio_registro_anulados_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_sancionatorio(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

begin
	return 1000;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_validacion_anulacion_factura(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_tipo_documento_fiscal_id integer := 0;
	p_json json;
	v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5	
begin
	p_json:=p_json_varchar::json;
	
	p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
	
	if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
			v_documento_fiscal := 2;
	end if;

	if (v_documento_fiscal = 1 )then		
		return (select sre_recaudaciones.sre_fac_val_facturacion_validacion_anulacion_desarrollo(p_json_varchar));
    else
		return (select sre_recaudaciones.sre_fac_val_facturacion_validacion_anulacion_contingencia(p_json_varchar));		
	end if;
							
	EXCEPTION
		  when others
		    then
		      return cast ( (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_validacion_anulacion_factura')) as varchar);
	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_validacion_recepcion_compra(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_json json;
	p_tipo_documento_sector_id integer := 0;
	p_tipo_documento_fiscal_id integer := 0;
	p_tipo_emision_id integer := 0;
	v_recepcionId bigint := 0;
	v_recepcionPaqueteId bigint := 0;
	v_resultado_validacion varchar:='0';
	v_resultado_defecto varchar:='{"codigorecepcionindividual": 0,   "codigoestado": 0,   "numerofactura": 0,   "cuf": "0",   "listacodigoserror": "0"}';
	
begin	
	--Valida el xml de la recepcion.	
	v_resultado_validacion:=sre_recaudaciones.sre_fac_val_facturacion_validacion_recepcion(p_json_varchar);
	if(v_resultado_validacion='1000') then
	    p_json := cast(p_json_varchar as json);
		p_tipo_emision_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
		p_tipo_documento_sector_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	    p_tipo_documento_fiscal_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		v_recepcionId := (p_json->'xmlRecepcionGenerica'->>'v_recepcionId');
		v_recepcionPaqueteId := (p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
		
		if((p_tipo_documento_sector_id is not null) and p_tipo_documento_sector_id>0) then
			case 
				when p_tipo_emision_id = 1 and (v_recepcionId is not null) and v_recepcionId>0
				then
				
					return (sre_recaudaciones.sre_fac_ope_verificar_recepcion_individual(p_tipo_documento_sector_id, v_recepcionId));
				
				when (p_tipo_emision_id = 2 or p_tipo_emision_id=3) and (v_recepcionPaqueteId is not null) and v_recepcionPaqueteId>0
				then	
				
					return (sre_recaudaciones.sre_fac_ope_verificar_recepcion_paquete(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, v_recepcionPaqueteId));
				else
					return v_resultado_defecto;
			end case;				
		end if;
	else 
		v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror', v_resultado_validacion));
		return v_resultado_defecto;
	end if;
		
	
	EXCEPTION
		  when others
		    then
		      return cast((sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_validacion_recepcion_factura')) as varchar);	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_validacion_recepcion_contingencia(p_json_varchar character varying, p_resultado_validacion character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_json json;
	p_tipo_documento_sector_id integer := 0;
	p_tipo_documento_fiscal_id integer := 0;
	p_tipo_emision_id integer := 0;
	v_recepcionId bigint := 0;
	v_recepcionPaqueteId bigint := 0;
	v_resultado_validacion varchar:='0';
	v_resultado_defecto varchar:='{"codigorecepcionindividual": 0,   "codigoestado": 0,   "numerofactura": 0,   "cuf": "0",   "listacodigoserror": "0"}';
	
begin	
	--Valida el xml de la recepcion.	
	v_resultado_validacion:=p_resultado_validacion;
	if(v_resultado_validacion='1000') then
	    p_json := cast(p_json_varchar as json);
		p_tipo_emision_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
		p_tipo_documento_sector_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
		p_tipo_documento_fiscal_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
		v_recepcionId := (p_json->'xmlRecepcionGenerica'->>'v_recepcionId');
		v_recepcionPaqueteId := (p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
		
		if((p_tipo_documento_sector_id is not null) and p_tipo_documento_sector_id>0) then
			case 
				when p_tipo_emision_id = 1 and (v_recepcionId is not null) and v_recepcionId>0
				then
				
					return (sre_recaudaciones.sre_fac_ope_verificar_recepcion_individual_contingencia(p_tipo_documento_sector_id, v_recepcionId));
				
				when (p_tipo_emision_id = 2 or p_tipo_emision_id=3) and (v_recepcionPaqueteId is not null) and v_recepcionPaqueteId>0
				then	
				
					return (sre_recaudaciones.sre_fac_ope_verificar_recepcion_paquete_contingencia(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id, v_recepcionPaqueteId));
				else
					return v_resultado_defecto;
			end case;				
		end if;
	else 
		v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror', v_resultado_validacion));
		return v_resultado_defecto;
	end if;
		
	
	EXCEPTION
		  when others
		    then
		      return cast((sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_validacion_recepcion_contingencia')) as varchar);	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_validacion_recepcion_factura(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
   <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se optimizo la validacion de la recepcion paquete. En esta funcion se adicionaron las variables codigo_sistema, sistema_id y cuis. 
				Las variables seran enviadas a la funcion sre_fac_ope_verificar_recepcion_paquete.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<17/12/2019>
AUTOR DE LA MODIFICACION : :<Victor Cruz Gomez>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
       p_json json;
       p_tipo_documento_sector_id integer := 0;
       p_tipo_emision_id integer := 0;
       p_codigo_sistema varchar:='0';
       p_sistema_id bigint:=0; 
       p_cuis varchar:='-';
       v_recepcionId bigint := 0;
       v_recepcionPaqueteId bigint := 0;
       v_resultado_validacion varchar:='0';
       v_resultado_defecto varchar:='{"codigorecepcionindividual": 0,   "codigoestado": 0,   "numerofactura": 0,   "cuf": "0",   "listacodigoserror": "0"}';

       p_tipo_documento_fiscal_id integer := 0;
       v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5     
begin 
       --Valida el xml de la recepcion. 
v_resultado_validacion:=sre_recaudaciones.sre_fac_val_facturacion_validacion_recepcion(p_json_varchar);
       if(v_resultado_validacion='1000') then
           p_json := cast(p_json_varchar as json);
             p_tipo_emision_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
             p_tipo_documento_sector_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
             v_recepcionId := (p_json->'xmlRecepcionGenerica'->>'v_recepcionId');
             v_recepcionPaqueteId := (p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
             p_codigo_sistema :=(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema'); 
             p_sistema_id := sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema);
             p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
       
             p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer)); --adicionado vcg 20191009
             
             if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
                    v_documento_fiscal := 2;
             end if;
       
       
             if (v_documento_fiscal = 1 )then
                    if((p_tipo_documento_sector_id is not null) and p_tipo_documento_sector_id>0) then
                           case 
                                  when p_tipo_emision_id = 1 and (v_recepcionId is not null) and v_recepcionId>0
                                  then                       
                                        return (sre_recaudaciones.sre_fac_ope_verificar_recepcion_individual(p_tipo_documento_sector_id, v_recepcionId));
                                  
                                  when (p_tipo_emision_id = 2 or p_tipo_emision_id=3) and (v_recepcionPaqueteId is not null) and v_recepcionPaqueteId>0
                                  then                                     
                                        return (sre_recaudaciones.sre_fac_ope_verificar_recepcion_paquete(p_tipo_documento_fiscal_id, p_tipo_documento_sector_id, v_recepcionPaqueteId, p_sistema_id, p_cuis));
                                  else
                                        return v_resultado_defecto;
                           end case;                        
                    end if;                                 
             else
                    return sre_recaudaciones.sre_fac_servicio_validacion_recepcion_contingencia(p_json_varchar, v_resultado_validacion); --adicionado vcg 20191009                                        
             end if;             
                                  
       else 
             v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror', v_resultado_validacion));
             return v_resultado_defecto;
       end if;
             
       
       EXCEPTION
               when others
                 then
                   return cast((sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_validacion_recepcion_factura')) as varchar);      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_validacion_recepcion_factura_por_cuf(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recupera valor codigoRecepcionId
PARAMETROS INGRESO
    json con datos recuperados de los parametros del servicio
PARAMETROS SALIDA
    codigo de recepcion o valor cero
    valores negativos en caso de excepcion 
SUBSISTEMA : Facturación
FECHA CREACION : 12/07/2019
AUTOR : Equipo Tyrell (Edwin Coro)
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  No se validará que los registros de las tablas recepciones correspondan al cufd enviado, debido a que el cufd enviado es variable.
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 13/09/2019
AUTOR DE LA MODIFICACION : Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
	p_json json;	
	p_nit bigint;
	--p_cufd varchar;
	p_cuis varchar;
	p_tipo_documento_fiscal_id int;
	p_tipo_documento_sector_id int;
	p_tipo_modalidad_id int;
	p_persona_contribuyente_id bigint;
	v_sistema_id bigint;
	p_sucursal_id bigint;
	p_cuf varchar;
	p_tipo_emision_id int;
	p_estado_id varchar:='';    	
	v_sql varchar:='';
	v_recepcionId varchar := '0';
	
begin	
	p_json := cast(p_json_varchar as json);
	
	---------------DATOS DE LA TABLA: RecepcionesCorrectas---------------	 
	p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');	
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');
	p_nit :=(p_json->'xmlRecepcionGenerica'->>'p_nit');
	p_persona_contribuyente_id := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);		
	v_sistema_id := sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));
	p_sucursal_id :=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');
	p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
	p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
	p_estado_id :='AC';
	
	if(p_tipo_documento_sector_id=28) then--Por verificar
		p_cuf :=(p_json->'xmlRecepcionGenerica'->>'cufp');
		p_cuis :=(p_json->'xmlRecepcionGenerica'->>'cuape');
	end if;
			
	--Nota: Retorna el codigo de recepcion 
	v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_cuf_correctas(p_tipo_documento_sector_id);
    
    execute v_sql  
    using 
    	p_cuis,
    	p_tipo_documento_fiscal_id,
    	p_tipo_documento_sector_id,
    	p_tipo_modalidad_id,
    	p_persona_contribuyente_id,
    	v_sistema_id,
    	p_sucursal_id,
    	p_cuf,
    	p_tipo_emision_id,
    	p_estado_id
    into v_recepcionId;
    	
    return coalesce(v_recepcionId,'0');
	
  EXCEPTION
  when others
    then
      return cast ((select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_servicio_validacion_recepcion_factura_por_cuf')) as character varying);
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_servicio_validacion_recepcion_ventas_factura_manual(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Integracion de las etapas 1 y 2
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Mensaje de resultado de la etapa 1 y la etapa 2
SUBSISTEMA : Facturación
FECHA CREACION : 13/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   v_resultado_etapa1 character varying ;
   v_resultado_etapa2 character varying ;
   v_tipo_documento_identidad varchar;
   v_recepcion_id bigint;
   begin
		v_resultado_etapa1:='sin resultado';
		v_resultado_etapa2:='sin resultado';
		p_json_varchar:=(sre_recaudaciones.sre_fac_ope_limpiar_objeto_json(p_json_varchar));				
		v_resultado_etapa1 :=  (sre_recaudaciones.sre_fac_val_facturacion_manual_validar_recepcion_desarrollo(p_json_varchar));			
		
		if(v_resultado_etapa1 like '%idRecepcion%') then 		
		v_recepcion_id := cast((SELECT split_part(v_resultado_etapa1, ':', 2)) as bigint);
		
		if(v_recepcion_id>0) then
			v_resultado_etapa2:= (sre_recaudaciones.sre_fac_val_facturacion_manual_validar_factura_desarrollo(p_json_varchar,v_recepcion_id));
		
		end if;
		end if;
	return 'Resultado Etapa 1: ' || v_resultado_etapa1 ||' Resultado Etapa 2: '|| v_resultado_etapa2;	
	EXCEPTION
		  when others
		    then
		      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_servicio_validacion_recepcion_ventas_factura_manual'));	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_4_5_san(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_4_5_san');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_4_5_san'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_4_6_san(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_4_6_san');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_4_6_san'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_4_7_san(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_4_7_san');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_4_7_san'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_4_8_san(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_4_8_san');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_4_8_san'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_actividad_economica(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare    
  p_actividad_economica_id bigint:=0;
  p_producto_sin_id bigint:=0;
  p_nit bigint:=0;
  
  v_sw smallint:=0;
  i json;
  v_resultado  smallint :=0;
  v_json_prueba json;
  v_detalle varchar;

begin   
--53 - Actividad Invalida
  p_nit :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint));
  v_resultado  :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_actividad_economica'));

  --1. Validar que NIT corresponda a la actividad economica
  --2. Validar que corresponda al codigo producto del SIN.
  	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
  	v_detalle := cast (v_json_prueba as varchar);
  	
  	if(left(v_detalle, 1) = '[')
  	then
	  	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop    
	    
	    	p_actividad_economica_id :=(select cast(i->>'actividadEconomica' as bigint));	  	
	  		p_producto_sin_id :=(select cast(i->>'codigoProductoSin' as bigint));
	    	
	  		
			if(sre_recaudaciones.sre_fac_val_nit_corresponda_actividad_economica(p_nit, p_actividad_economica_id,p_producto_sin_id)<>sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				if(sre_recaudaciones.sre_fac_val_corresponda_codigo_producto_sin(p_nit,	p_actividad_economica_id, p_producto_sin_id)<>sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
			  		v_sw:=1;
				end if;
			end if;		
	    end loop; 
  	else
  		p_actividad_economica_id :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'actividadEconomica' as bigint));	  	
  		p_producto_sin_id :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoProductoSin' as bigint));
		if(sre_recaudaciones.sre_fac_val_nit_corresponda_actividad_economica(p_nit, p_actividad_economica_id,p_producto_sin_id)<>sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
			if(sre_recaudaciones.sre_fac_val_corresponda_codigo_producto_sin(p_nit,	p_actividad_economica_id, p_producto_sin_id)<>sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then

		  		v_sw:=1;
			end if;
		end if;		
  	end if;  
    
    if(v_sw=0) then
  		v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  	end if;
  	
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_actividad_economica');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_actividad_economica'));
	  
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_anulacion_factura(p_tipo_documento_sector_id integer, p_cuf character varying, p_recepcion_anulacion_id integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Realiza la verificación del estado de la recepcion de la anulacion, luego la existencia de la factura venta, 
				conjuntamente realiza la validación del estado de la factura 
PARAMETROS INGRESO
    			Parametros JSON de entrada de datos
PARAMETROS SALIDA
    			Retorna el identificador de la tabla sre_fac_mensajes_servicios
SUBSISTEMA : Facturación
FECHA CREACION : <06/03/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_resultado smallint;	
	p_resultado_val_factura smallint:=0;
	v_codigo_exito smallint:=0;
	v_estado_factura_id integer:=0; 
	v_sql varchar:='';
	v_cantidad_facturas integer:=0;
	v_estado_factura_anulado smallint := 0;
	v_estado_factura_anulado_no_confirmado smallint := 0;
	v_estado_recepcion_anulacion_confirmada smallint := 0;
	v_estado_recepcion_anulacion_pendiente smallint := 0;
begin
	v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	v_estado_factura_anulado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulada');
	v_estado_factura_anulado_no_confirmado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulado_no_confirmado');
	v_estado_recepcion_anulacion_confirmada := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_confirmada_bd');
	v_estado_recepcion_anulacion_pendiente := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_pendiente');
	
	-- Nota: Verifica el regitro en la tabla recepciones anulaciones
	v_estado_factura_id:= estado_recepcion_anulacion_id from sre_recaudaciones.sre_fac_recepciones_anulaciones where recepcion_anulacion_id=p_recepcion_anulacion_id;	

case 
    when (v_estado_factura_id=v_estado_recepcion_anulacion_confirmada) then
		p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada');
	when (v_estado_factura_id<>v_estado_recepcion_anulacion_pendiente) then
		p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_estado_recepcion_anularion_incorrecta');
	-- Nota: Verifica el regitro en la tabla ventas facturas	
	else			
		p_resultado_val_factura:=sre_recaudaciones.sre_fac_val_factura_venta(p_tipo_documento_sector_id,p_cuf);
		v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura(0,p_tipo_documento_sector_id,p_cuf,false);
 		execute v_sql  
	  	into v_estado_factura_id;
	  	if (v_estado_factura_id=v_estado_factura_anulado and p_resultado_val_factura=v_codigo_exito) then
			p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada');
		elseif (v_estado_factura_id<>v_estado_factura_anulado_no_confirmado and p_resultado_val_factura=v_codigo_exito) then
			p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_no_disponible_anulacion');
		end if;
	end case;
  return coalesce(p_resultado,p_resultado_val_factura);	
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_anulacion_factura');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_anulacion_factura'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_anulacion_factura_contingencia(p_tipo_documento_sector_id integer, p_cuf character varying, p_recepcion_anulacion_id integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Realiza la verificación del estado de la recepcion de la anulacion, luego la existencia de la factura venta, 
				conjuntamente realiza la validación del estado de la factura 
PARAMETROS INGRESO
    			Parametros JSON de entrada de datos
PARAMETROS SALIDA
    			Retorna el identificador de la tabla sre_fac_mensajes_servicios
SUBSISTEMA : Facturación
FECHA CREACION : <06/03/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_resultado smallint;	
	p_resultado_val_factura smallint:=0;
	v_codigo_exito smallint:=0;
	v_estado_factura_id integer:=0; 
	v_sql varchar:='';
	v_cantidad_facturas integer:=0;
	v_estado_factura_anulado smallint := 0;
	v_estado_factura_anulado_no_confirmado smallint := 0;
	v_estado_recepcion_anulacion_confirmada smallint := 0;
	v_estado_recepcion_anulacion_pendiente smallint := 0;
begin
	v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	v_estado_factura_anulado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulada');
	v_estado_factura_anulado_no_confirmado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulado_no_confirmado');
	v_estado_recepcion_anulacion_confirmada := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_confirmada_bd');
	v_estado_recepcion_anulacion_pendiente := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_pendiente');
	
	-- Nota: Verifica el regitro en la tabla recepciones anulaciones
	--TODO: Preguntar a Fernando sobre la tabla de contingencias para anulaciones
	v_estado_factura_id:= estado_recepcion_anulacion_id from sre_recaudaciones.sre_fac_recepciones_anulaciones_contingencias where recepcion_anulacion_contingencia_id=p_recepcion_anulacion_id;	

case 
    when (v_estado_factura_id=v_estado_recepcion_anulacion_confirmada) then
		p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada');
	when (v_estado_factura_id<>v_estado_recepcion_anulacion_pendiente) then
		p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_estado_recepcion_anularion_incorrecta');
	-- Nota: Verifica el regitro en la tabla ventas facturas	
	else			
		p_resultado_val_factura:=sre_recaudaciones.sre_fac_val_factura_venta_contingencia(p_tipo_documento_sector_id,p_cuf);
		v_sql:=sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(0,p_tipo_documento_sector_id,p_cuf,false);
 		execute v_sql  
	  	into v_estado_factura_id;
	  	if (v_estado_factura_id=v_estado_factura_anulado and p_resultado_val_factura=v_codigo_exito) then
			p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada');
		elseif (v_estado_factura_id<>v_estado_factura_anulado_no_confirmado and p_resultado_val_factura=v_codigo_exito) then
			p_resultado:=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_no_disponible_anulacion');
		end if;
	end case;
  return coalesce(p_resultado,p_resultado_val_factura);	
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_anulacion_factura_contingencia');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_anulacion_factura'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_caed(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
declare
	v_resultado smallint := 0;
	
begin
	--metodo fake
	--se debe validar que el caed se encuentre en la tabla de caed registrados como contingencia
	
	return 1000;
	
	EXCEPTION
  	when others
    then
         return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_caed'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_caed_numero_documento_fiscal_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Devuelve éxito si el CAED existe en la tabla de preregistros con estado ENTREGADO y ademas el numero de documento fiscal se encuentra en el rango para ese CAED.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion, o codigo de error asociado
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripción>
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/
declare
  p_caed varchar:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed' as varchar)); 
  p_numero_factura integer:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura' as integer));
  p_nit_emisor bigint:=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
  p_sucursal_contribuyente_id bigint:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id' as bigint)); 
  v_resultado smallint;
  v_estado_entrega_preregistro_id bigint;
begin
 v_estado_entrega_preregistro_id:=(select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_entrega_preregistro_id' and descripcion = 'ENTREGADO' and estado_id ='AC');	
 v_resultado := coalesce(
			   (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                           from sre_recaudaciones.sre_fman_documentos_fiscales_preregistros as a
                           where  p_numero_factura BETWEEN a.rango_inicial AND a.rango_final
                           and a.caed= p_caed 
                           and a.nit_emisor = p_nit_emisor 
                           and a.sucursal_contribuyente_id = p_sucursal_contribuyente_id
                           and a.estado_entrega_preregistro_id = v_estado_entrega_preregistro_id
                           limit 1)
                           ,
                           (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_factura_manual'))
                         );
  return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_caed_numero_documento_fiscal_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_caed_recepcion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Devuelve éxito si el CAED existe en la tabla de preregistros con los estados ACTIVO y ENTREGADO, ademas si esta en la tabla de solicitudes con estado ENTREGADA.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  p_caed varchar:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed' as varchar)); 
  p_sucursal_contribuyente_id bigint:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal' as bigint));	
  p_tipo_documento_fiscal_id integer := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as Integer));
  p_tipo_documento_sector_id integer := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as Integer));
  p_nit_emisor bigint:=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
  v_resultado smallint :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');    
  v_estado_documento_fiscal_preregistro_id bigint;
  v_estado_entrega_preregistro_id bigint;
  v_estado_solicitud_impresion_id bigint;
  
begin	
	v_estado_documento_fiscal_preregistro_id:=(select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_documento_fiscal_preregistro_id' and descripcion = 'ACTIVO' and estado_id ='AC');
	v_estado_entrega_preregistro_id:=(select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_entrega_preregistro_id' and descripcion = 'ENTREGADO' and estado_id ='AC');
	v_estado_solicitud_impresion_id:=(select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_solicitud_impresion_manual_id' and descripcion = 'ENTREGADO TOTAL' and estado_id ='AC');
	v_resultado := coalesce((select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                           from sre_recaudaciones.sre_fman_documentos_fiscales_preregistros as a
			   join sre_recaudaciones.sre_fman_solicitudes_impresiones_manuales s on (a.solicitud_impresion_manual_id = s.solicitud_impresion_manual_id)
                           where a.caed = p_caed
                           and a.estado_documento_fiscal_preregistro_id =v_estado_documento_fiscal_preregistro_id  
			   and a.estado_entrega_preregistro_id = v_estado_entrega_preregistro_id
			   and s.estado_solicitud_impresion_manual_id = v_estado_solicitud_impresion_id
                           limit 1)
                           ,
                           (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_caed_factura_manual'))
                         );	
	return v_resultado;		
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_val_caed_recepcion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_calcular_subtotal(p_subtotal numeric, p_cantidad numeric, p_precio_unitario numeric, p_monto_descuento numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

  v_subtotal_calculado numeric(20,5):=0;  
  v_resultado          smallint := 0;
  
begin
	v_resultado:= (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));	
  
	v_subtotal_calculado := (p_cantidad*p_precio_unitario)-p_monto_descuento;
    
  if(v_subtotal_calculado=p_subtotal) then
  	v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;
  
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_calcular_subtotal');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_calcular_subtotal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_calcular_subtotal_con_redondeo(p_subtotal numeric, p_cantidad numeric, p_precio_unitario numeric, p_monto_descuento numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

  v_subtotal_calculado numeric(20,5):=0;
  
  v_resultado          smallint := 0;
  
begin
  v_resultado:= (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));	
  
  v_subtotal_calculado := round((p_cantidad*p_precio_unitario)-p_monto_descuento,2);
    
  if(v_subtotal_calculado=p_subtotal) then
  	v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;
  
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_calcular_subtotal_moneda_extranjera');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_calcular_subtotal_moneda_extranjera'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_calcular_subtotal_moneda_extranjera(p_subtotal numeric, p_cantidad numeric, p_precio_unitario numeric, p_monto_descuento numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

  v_subtotal_calculado numeric(20,5):=0;
  
  v_resultado          smallint := 0;
  
begin
	v_resultado:= (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));	
  
	v_subtotal_calculado := round((p_cantidad*p_precio_unitario)-p_monto_descuento,2);
    
  if(v_subtotal_calculado=p_subtotal) then
  	v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;
  
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_calcular_subtotal_moneda_extranjera');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_calcular_subtotal_moneda_extranjera'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_campo_excepcion_documento(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_existe_observacion smallint:=0;	
	
	p_recepcion_documento_id int8 :=0;	
begin		
	p_recepcion_documento_id :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoExcepcionDocumento');

	case 
		when p_recepcion_documento_id is not null then
			v_existe_observacion:=1000;
		else 	
			v_existe_observacion:=0;
	end case;
		
	return v_existe_observacion;	
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cantidad_documento_paquete_mas(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint;
  
  p_persona_contribuyente_id int8;    
  p_cantidad_enviado int8;
  
  v_estado_solicitud_proceso_masivo_id int4;
  v_cantidad_solicitado int8;
      
begin
	--Codigo de error 126: cantidad de documentos por paquete excedido. 
	--No debera superar la cantidad de 500 a menos que este en sre_recaudaciones.sre_fac_solicitudes_procesos_masivos si es asi, verificar q no exceda el maximo
  p_cantidad_enviado :=3000;
  p_persona_contribuyente_id :=1000001042;
  
  v_estado_solicitud_proceso_masivo_id :=sre_recaudaciones.sre_fac_par_estado('estado_solicitud_proceso_masivo_aprobado'); 
		   
  select cantidad_maxima_paquete into v_cantidad_solicitado
  from sre_recaudaciones.sre_fac_solicitudes_procesos_masivos
  where persona_contribuyente_id=p_persona_contribuyente_id and 		
		estado_solicitud_proceso_masivo_id=v_estado_solicitud_proceso_masivo_id and 
		estado_id='AC'
  limit 1;
	
  case 
		when p_cantidad_enviado>=1 and p_cantidad_enviado <= v_cantidad_solicitado then
			return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		else 	
			return sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cantidad_documento_paquete_mas');	
  end case;
			  		
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cantidad_documento_paquete_mas');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cantidad_documento_paquete_mas'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_ambiente(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_ambiente_id     Integer:=0;
  p_codigo_sistema       varchar:='';

  v_resultado smallint :=0; 
  v_sistema_id bigint :=0;
  
begin
  p_tipo_ambiente_id     :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id' as Integer));
  p_codigo_sistema       :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar));

  v_resultado :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_ambiente'));             
--1 - Ambiente Inválido
  
  if p_tipo_ambiente_id = 1
  then
               v_sistema_id := (select sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema));
    v_resultado := coalesce(
                                                                                              (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                              from sre_recaudaciones.sre_fac_sistemas
                              where sistema_id = v_sistema_id
                                and estado_sistema_id = (select sre_recaudaciones.sre_fac_par_estado('estado_sistema_certificado'))
                              limit 1)
                              ,
                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_ambiente'))
                            );


  elseif p_tipo_ambiente_id = 2
    then
      v_sistema_id := (select sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema));
      v_resultado := coalesce(
                                                                                                 (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                from sre_recaudaciones.sre_fac_sistemas
                                where sistema_id = v_sistema_id
                                  and estado_sistema_id in (616,617) --616=INICIADO; 617=CERTIFICADO
                                limit 1)
                                ,
                                 (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_ambiente'))
                              );

  end if;

  return v_resultado;

  EXCEPTION
  when others
    then
                  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_ambiente');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_ambiente'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_documento_fiscal(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_documento_fiscal_id integer:=0;
  v_resultado smallint :=0;
begin	
--5 - Documento Fiscal Invalido
  p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
  v_resultado :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
    
  --1. Verificar en la estructura que relaciones servicios y metodos a tipos documentos fiscales  
  --fake (se envio a Fernando un correo recordando la creacion de la estructura)
  --2. Verificar la existencia del codigo_documento_fiscal en en el clasificador
  v_resultado := (
  				select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
  				from sre_recaudaciones.sre_fac_clasificadores 
  				where agrupador = 'TIPO DOCUMENTO FISCAL' and 
  				codigo_clasificador=p_tipo_documento_fiscal_id 
  				limit 1);
		    
  return coalesce(v_resultado, sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_fiscal'));

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_documento_fiscal');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_fiscal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_documento_sector(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_documento_sector_id Integer:=0;
  
  v_resultado smallint :=0;
  
begin 
--81 - Codigo Documento Sector invalido
  p_tipo_documento_sector_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as Integer));  
  v_resultado :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');

	v_resultado:=(
		select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
		from sre_recaudaciones.sre_fac_clasificadores 
	  	where agrupador = 'TIPO DOCUMENTO SECTOR' and
	  	codigo_clasificador=p_tipo_documento_sector_id
	  	limit 1
  	);
		
  	return coalesce(v_resultado, sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_sector'));   	
  
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_documento_sector');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_sector'));
	  
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_emision(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
  p_tipo_emision_id             Integer:=0;
  p_tipo_modalidad_id           Integer:=0;
  p_persona_contribuyente_id    bigint:=0;
  p_cufd                     varchar:='';
  p_fecha_envio            timestamp;
  p_sistema_id               Integer:=0;

  v_resultado                       smallint :=0;
  
  v_tolerancia_minima               integer :=0;
  v_tolerancia_maxima               integer :=0;
  v_dias_contingencia               integer :=0;
  
  v_modalidad_id integer:=0;

begin
 --6 - Tipo Emisión Invalido
  p_tipo_emision_id  :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as Integer));
  p_tipo_modalidad_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id' as Integer));
  p_persona_contribuyente_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id' as bigint));
  p_cufd :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_cufd' as varchar));
  p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));
  p_sistema_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_sistema_id' as Integer));

  v_resultado :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_emision'));  
 
     --Cambio de identificador
	 --601 = 1 (electronica)
	 --600 = 2 (computarizada)
	 if(p_tipo_modalidad_id =1) then
		v_modalidad_id=601;
	 end if;
	
	 if(p_tipo_modalidad_id =2) then
		v_modalidad_id=600;
	 end if;

  if p_tipo_emision_id = 1
  then
    v_resultado := coalesce(
    						(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                              from sre_recaudaciones.sre_fac_registros_cufd as a
                                     inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes as b
                                       on (b.sistema_id = a.sistema_id)
                              where b.sistema_id = p_sistema_id
                                and b.modalidad_facturacion_id = v_modalidad_id
                                and b.contribuyente_id = p_persona_contribuyente_id
                                and b.estado_sistema_contribuyente_id = 637 --(str_cps_clasificadores)
                                and a.cufd = p_cufd
                                and a.fecha_fin <= p_fecha_envio
                                and sre_recaudaciones.sre_fac_ope_tolerancia_fecha_emision(p_json) = 1
                              limit 1)
                              ,
                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_emision'))
                              );
   
  elseif p_tipo_emision_id = 2
    then
      v_resultado := coalesce(
      						   (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                from sre_recaudaciones.sre_fac_registros_cufd as a
                                       inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes as b
                                         on (b.sistema_id = a.sistema_id)
                                where b.sistema_id = p_sistema_id
                                  and b.modalidad_facturacion_id = v_modalidad_id
                                  and b.contribuyente_id = p_persona_contribuyente_id
                                  and b.estado_sistema_contribuyente_id = 637 --(str_cps_clasificadores)
                                  and a.cufd = p_cufd
                                  and sre_recaudaciones.sre_fac_ope_tolerancia_fecha_emision(p_json) = 1
                                limit 1)
                                ,
                                (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_emision'))
                               );

  end if;

  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_emision');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_emision'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_metodo_pago(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=0;
  
  v_tarjeta integer :=2;
    
begin
--96 - Código Método de Pago Inválido
	v_resultado :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_metodo_pago'));
	
	if(sre_recaudaciones.sre_fac_val_numero_tarjeta(p_json) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
		if(sre_recaudaciones.sre_fac_val_verificar_existencia_metodo_pago_clasificador(p_json) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then		
			v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		end if;
	end if;
			
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_metodo_pago');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_metodo_pago'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_modalidad(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_modalidad_id Integer:=0;  
  v_nit bigint:=0;
  p_persona_contribuyente_id bigint:= 0;  
  v_sistema_id Integer:= 0;  
  v_modalidad_electronica integer:=0;
  v_modalidad_computarizada integer:=0;
  
  v_resultado smallint :=0;
  v_tipo_sistema_id integer:=0;  
begin
  --7 - Modalidad Invalida 
    p_tipo_modalidad_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id' as Integer));  
    v_nit:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint));
    p_persona_contribuyente_id:= (select sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(v_nit));  
    v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));
    
    v_resultado :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_modalidad'));
	
       --Cambio de identificador
       --601 = 1 (electronica)
       --600 = 2 (computarizada)
       if(p_tipo_modalidad_id =1) then
              v_modalidad_electronica=601;
       end if;
       
       if(p_tipo_modalidad_id =2) then
              v_modalidad_computarizada=600;
       end if;
       
       -- falta las modalidades prevalorada, manual, etc

       v_tipo_sistema_id:= coalesce((select tipo_sistema_id from sre_recaudaciones.sre_fac_sistemas where sistema_id=v_sistema_id limit 1),0);

       if v_tipo_sistema_id=614 then --propio
                     
              if p_tipo_modalidad_id = 1 --electronicia
                then  
                  v_resultado := coalesce(
                                                       (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                            from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones as a
                                                   inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes as b
                                                     on (b.sistema_id = a.sistema_id)
                                                   inner join sre_recaudaciones.sre_fac_contribuyentes_modalidades as c
                                                     on (c.persona_contribuyente_id = b.contribuyente_id)
                                            where a.sistema_id = v_sistema_id
                                              and a.modalidad_facturacion_id = v_modalidad_electronica
                                              and b.contribuyente_id = p_persona_contribuyente_id
                                              and b.estado_sistema_contribuyente_id = 637 
                                              and c.modalidad_facturacion_id = v_modalidad_electronica
                                            limit 1) 
                                            ,
                                            (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_modalidad'))
                                           );
              
                elseif p_tipo_modalidad_id = 2 --computarizada 
                  then
                    v_resultado := coalesce(
                                                           (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                              from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones as a
                                                     inner join sre_recaudaciones.sre_fac_sistemas_contribuyentes as b
                                                       on (b.sistema_id = a.sistema_id)
                                                     inner join sre_recaudaciones.sre_fac_contribuyentes_modalidades as c
                                                       on (c.persona_contribuyente_id = b.contribuyente_id)
                                              where a.sistema_id = v_sistema_id
                                                and a.modalidad_facturacion_id = v_modalidad_computarizada
                                                and b.contribuyente_id = p_persona_contribuyente_id
                                                and b.estado_sistema_contribuyente_id = 637
                                                and c.modalidad_facturacion_id = v_modalidad_computarizada
                                              limit 1)
                                              ,
                                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_modalidad'))
                                             );
                    
                end if;
  else 
       v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;

  return v_resultado;

  EXCEPTION
  when others
    then
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_modalidad');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_modalidad'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_moneda(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  p_tipo_moneda_id   integer:=0;  
  v_agrupador varchar :='';
  
  v_resultado      smallint :=0;

begin
 --28 - Tipo de  Moneda Invalido 
  p_tipo_moneda_id   :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMoneda' as Integer));
  v_resultado      :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_moneda'));
	
  v_agrupador := 'tipo_moneda_id'; --Cordinar este parametro con Fernando
  
  v_resultado := coalesce(
  						  (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
  							from str_transversales.str_cps_clasificadores 
  							where tipo_clasificador = v_agrupador 
  							and estado_id='AC' 
  							and clasificador_id=p_tipo_moneda_id
                            limit 1)
                            ,
                            (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_moneda'))
                          );
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_moneda');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_moneda'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_nandina(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_sw smallint := 0;
	p_codigo_nandina varchar := '0';
	i json;
	
	v_resultado smallint := 0;
begin
	-- 20190423 rgt
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_nandina'));
	
	
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
		--add para validar array vacio
		if (select json_array_length(p_json->'XmlFactura'->'factura'->'detalle') >= 1)then	
			for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop
				
				p_codigo_nandina := (select cast(i->>'codigoNandina' as varchar));
				if(sre_recaudaciones.sre_fac_val_corresponda_codigo_nandina(p_codigo_nandina) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))then
					v_sw := 1;
				end if;
				
			end loop;
		else
			v_sw := 1;
		end if;
	else
		
		p_codigo_nandina := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoNandina' as varchar));
		if(sre_recaudaciones.sre_fac_val_corresponda_codigo_nandina(p_codigo_nandina) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))then
			v_sw := 1;
		end if;
		
	end if;
	
	if(v_sw = 0)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_nandina');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_nandina'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_pais(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_pais_id   Integer:=0;
  v_resultado      smallint :=0;
  v_agrupador varchar :='';
begin
 -- 20190423 rgt
 -- 43 - Codigo pais Invalido
  p_tipo_pais_id   :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPais' as Integer));
  v_resultado    :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_pais'));
  	
  v_agrupador := 'pais_origen_id';
  
  v_resultado := coalesce(
  						  (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
  							from str_transversales.str_cps_clasificadores 
  							where tipo_clasificador = v_agrupador 
  							and estado_id='AC' 
  							and clasificador_id=p_tipo_pais_id
                            limit 1)
                            ,
                            (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_pais'))
                          );
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_pais');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_pais'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_producto_corresponda_actividad_economica(p_producto_sin_id bigint, p_actividad_economica_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare      
  v_resultado   smallint := 0;
  
begin  
  -- add 20190507 rgt
  v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_corresponda_actividad_economica'));

  --Existe codigo producto SIN 
  if (select count(*)
  	  from sre_recaudaciones.sre_fac_catalogos_productos
  	  where codigo_producto = p_producto_sin_id
  	 )>0   then  
  	 v_resultado := coalesce(
  								(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
  								from sre_recaudaciones.sre_fac_catalogos_productos
  								where codigo_producto = p_producto_sin_id and cast(codigo_actividad_caeb as bigint) = p_actividad_economica_id
  								and estado_id='AC'
                                limit 1),(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_corresponda_actividad_economica'))
                          );	
  	 
  else 
  	v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_corresponda_actividad_economica_1'));
  end if;
                              	                                                       
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_producto_corresponda_actividad_economica');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_corresponda_actividad_economica'));
	  
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_producto_sin(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare    
  p_producto_sin_id bigint:=0;
  p_actividad_economica bigint := 0;
  
  i json;
  v_sw smallint:=0;
  v_json_prueba json;
  v_tamanio_array integer := 0;
  v_resultado          smallint :=0; 
  v_detalle varchar;
  
begin
--102 - Código de Producto SIN Invalido
	v_resultado          :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_corresponda_actividad_economica_1'));
	
	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
	v_detalle := cast (v_json_prueba as varchar);
	if(left(v_detalle, 1) = '[')
	then
		for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop
	    	p_producto_sin_id := (select cast(i->>'codigoProductoSin' as bigint));
	    	p_actividad_economica := (select cast(i->> 'actividadEconomica' as bigint));

		    if(sre_recaudaciones.sre_fac_val_codigo_producto_sin_detalle(p_producto_sin_id) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
    			v_resultado := (select sre_recaudaciones.sre_fac_val_codigo_producto_corresponda_actividad_economica(p_producto_sin_id, p_actividad_economica));			
				if( v_resultado <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))then
					v_sw=1;
					exit;
				end if;
			else
				v_sw=1;
				exit;
			end if;		
	    end loop;
		
	else
		p_producto_sin_id := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoProductoSin' as bigint));
		p_actividad_economica := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->> 'actividadEconomica' as bigint));
		
	    if(sre_recaudaciones.sre_fac_val_codigo_producto_sin_detalle(p_producto_sin_id) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
			v_resultado := (select sre_recaudaciones.sre_fac_val_codigo_producto_corresponda_actividad_economica(p_producto_sin_id, p_actividad_economica));			
			if( v_resultado <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))then
				v_sw=1;
			end if;
		else
			v_sw=1;
		end if;		
	end if;
	
	if(v_sw=0) then
  		v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  	end if;
  	
	return v_resultado;
  EXCEPTION
  when others
    then      
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_producto_corresponda_actividad_economica_1');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_corresponda_actividad_economica_1'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_producto_sin_detalle(p_producto_sin_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare      
  v_resultado          smallint :=0;
begin
  v_resultado         :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_sin'));
  
  v_resultado := coalesce((select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
  								from sre_recaudaciones.sre_fac_catalogos_productos
  								where codigo_producto = p_producto_sin_id
  								and estado_id='AC'
                            limit 1),(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_sin')));		
                            	                                                       
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_producto_sin_detalle');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_producto_sin_detalle'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_producto_sin_nandina(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare    

  i json;
  v_sw smallint:=0;
  v_resultado smallint :=0;   
  p_codigo_nandina varchar := '0';
  p_codigo_producto bigint :=0;
begin
       --Fake
       v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_nandina'));
       
       
       if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
              if (select json_array_length(p_json->'XmlFactura'->'factura'->'detalle') >= 1)then       
                     for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop                        
                           p_codigo_nandina := (select cast(i->>'codigoNandina' as varchar));
                           p_codigo_producto := (select cast(i->>'codigoProductoSin' as varchar));
                     if(sre_recaudaciones.sre_fac_val_corresponda_codigo_producto_nandina(p_codigo_nandina,p_codigo_producto) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))then
                                  v_sw := 1;
                                  exit;
                           end if;                           
                     end loop;
              else
                     v_sw := 1;
              end if;
       else          
              p_codigo_nandina := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoNandina' as varchar));
              p_codigo_producto := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoProductoSin' as varchar));           
       if(sre_recaudaciones.sre_fac_val_corresponda_codigo_producto_nandina(p_codigo_nandina,p_codigo_producto) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))then
                     v_sw := 1;
              end if;      
       end if;
       
       if(v_sw = 0)then
              v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
       end if;
       
       return v_resultado;
  EXCEPTION
  when others
    then      
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_producto_sin_nandina');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_nandina'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_punto_venta_cabecera(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_codigo_punto_venta integer:=0;
  p_punto_venta_id integer:=0;
  v_resultado smallint :=0;
begin
--82 - Punto de venta invalido
  p_codigo_punto_venta :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta' as bigint));
  p_punto_venta_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id' as bigint));
  v_resultado  :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_punto_venta_cabecera'));
	
 if (coalesce(p_codigo_punto_venta,0) = coalesce(p_punto_venta_id,0)) then
 	v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
 end if;

  return v_resultado;

  EXCEPTION
  when others
    then
	   perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_punto_venta_cabecera');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_punto_venta_cabecera'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste/adición en validacion p_tipo_documento_fiscal_id = 6
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 25/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro 
VERSION : 1.1
**************************************************************************************************************************************************/
declare

	p_tipo_documento_sector_id integer := 0;
	p_tipo_emision_id integer := 0;
	v_recepcionId bigint := 0;
	v_recepcionPaqueteId bigint := 0;
	v_resultado smallint := 0;

	p_tipo_documento_fiscal_id integer := 0;
	v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5	
begin
	p_tipo_documento_sector_id  := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));
	p_tipo_emision_id  := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id' as integer));
	v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion'));
	
	p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer)); --adicionado vcg 20191009
		
	if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6) then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
		v_documento_fiscal := 2;
	end if;

	if (v_documento_fiscal = 1 )then

		case
				when p_tipo_emision_id = 1
				then
					v_recepcionId := (select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as bigint));		
					if((v_recepcionId is not null) and (v_recepcionId > 0))
					then
				
						if((select sre_recaudaciones.sre_fac_ope_verificar_id_recepcion(p_tipo_documento_sector_id, v_recepcionId)) != 0)
						then
							v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
						end if;
						
					end if;
			
			when p_tipo_emision_id = 2 or p_tipo_emision_id = 3
				then
				
					v_recepcionPaqueteId := (select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId' as bigint));
					if((v_recepcionPaqueteId is not null) and (v_recepcionPaqueteId > 0))
					then		
						if((select sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete(p_tipo_documento_sector_id, v_recepcionPaqueteId)) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))
						then
							v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
						end if;
						
					end if;
			else
				v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion'));
			end case;	
	
	else --CONTINGENCIA
		case
				when p_tipo_emision_id = 1
				then
					v_recepcionId := (select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as bigint));		
					if((v_recepcionId is not null) and (v_recepcionId > 0))
					then
				
						if((select sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_contingencia(p_tipo_documento_sector_id, v_recepcionId)) != 0)
						then
							v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
						end if;
						
					end if;
			
			when p_tipo_emision_id = 2				
				then
				
					v_recepcionPaqueteId := (select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId' as bigint));
					if((v_recepcionPaqueteId is not null) and (v_recepcionPaqueteId > 0))
					then		
						if((select sre_recaudaciones.sre_fac_ope_verificar_id_recepcion_paquete_contingencia(p_tipo_documento_sector_id, v_recepcionPaqueteId)) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))
						then
							v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
						end if;
						
					end if;
			else
				v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion'));
			end case;	
			
	end if;	
	
	return v_resultado;
	
  EXCEPTION
  when others
    then
	  --return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_recepcion'));
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_recepcion');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_recepcion_anulacion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_cantidad_recepcion integer:=0;
	p_recepcion_anulacion_id integer:=0;
    v_resultado smallint := 0;
    p_tipo_documento_fiscal_id integer:=0;
    v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5	
begin
	p_recepcion_anulacion_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_recepcion_anulacion_id' as integer));
	p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));

    v_resultado  := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
   
    if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
			v_documento_fiscal := 2;
	end if;

	if (v_documento_fiscal = 1 )then		
		v_cantidad_recepcion:=(select count(1) from sre_recaudaciones.sre_fac_recepciones_anulaciones where recepcion_anulacion_id=p_recepcion_anulacion_id);	                                     
    else
		v_cantidad_recepcion:=(select count(1) from sre_recaudaciones.sre_fac_recepciones_anulaciones_contingencias  where recepcion_anulacion_contingencia_id=p_recepcion_anulacion_id);
	end if;    

	if (v_cantidad_recepcion=0) then  
    	v_resultado :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion_anulacion'));
    end if;
   
   return v_resultado;
  
   EXCEPTION
   when others
     then
	   perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_recepcion_anulacion');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_recepcion_anulacion'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_sistema(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Ajuste modalidades 4 y 5 (Correspondiente a prevalorada electronica y prevalorada computarizada)
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 01/10/2019
AUTOR DE LA MODIFICACION : Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
  p_tipo_ambiente_id            Integer:=0;
  p_nit         bigint:=0;
  p_codigo_sistema           varchar:='';
  p_sucursal_id              Integer:=0;
  p_cuis                     Varchar:='';
  p_tipo_modalidad_id Integer:=0;

  v_fecha_actual             timestamp;
  v_modalidad_id integer:=0;
  v_persona_contribuyente_id bigint:=0;
  v_sistema_id bigint := 0;
  
  v_resultado smallint :=0;  
  v_resultado_proveedor smallint :=0;
begin
--2 - Código de Sistema Invalido
  p_tipo_ambiente_id            :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id' as Integer));
  p_nit         :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint));
  p_codigo_sistema           :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar));
  p_sucursal_id              :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id' as Integer));
  p_cuis                     :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_cuis' as Varchar));
  p_tipo_modalidad_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id' as Integer));
  v_fecha_actual             :=cast(now() as timestamp);  
  v_resultado  :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sistema'));


       --Cambio de identificador
       --601 = 1 (electronica)
       --600 = 2 (computarizada)
       if(p_tipo_modalidad_id =1) then
             v_modalidad_id = (select sre_recaudaciones.sre_fac_par_modalidad_sistema('modalidad_electronica'));
       end if;
       
       if(p_tipo_modalidad_id =2) then
             v_modalidad_id = (select sre_recaudaciones.sre_fac_par_modalidad_sistema('modalidad_computarizada'));
       end if;
       
       if(p_tipo_modalidad_id =4) then
             v_modalidad_id = (select sre_recaudaciones.sre_fac_par_modalidad_sistema('modalidad_prevalorada_electronica'));
       end if;
       
       if(p_tipo_modalidad_id =5) then
             v_modalidad_id = (select sre_recaudaciones.sre_fac_par_modalidad_sistema('modalidad_prevalorada_computarizada'));
       end if;
       
       if(p_tipo_modalidad_id =6) then
             v_modalidad_id = (select sre_recaudaciones.sre_fac_par_modalidad_sistema('modalidad_web'));
       end if;
       
  v_persona_contribuyente_id := (select sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit));
  
  if p_tipo_ambiente_id = 1
  then
    v_resultado := coalesce(
                                         (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                              from sre_recaudaciones.sre_fac_sistemas_contribuyentes as a
                                     inner join sre_recaudaciones.sre_fac_sistemas as b on (a.sistema_id = b.sistema_id)
                                     inner join sre_recaudaciones.sre_fac_inicios_sistemas as c
                                       on (c.contribuyente_id = a.contribuyente_id
                                             and c.sistema_id = b.sistema_id)
                              where b.codigo_sistema = p_codigo_sistema
                                and a.contribuyente_id = v_persona_contribuyente_id
                                and b.estado_sistema_id = (select sre_recaudaciones.sre_fac_par_estado('estado_sistema_certificado')) 
                                and c.sucursal_id = p_sucursal_id
                                and c.cuis = p_cuis
                                and a.modalidad_facturacion_id = v_modalidad_id
                                and coalesce(c.fecha_baja, current_date) <= v_fecha_actual
                                and a.estado_id='AC'
                                and b.estado_id='AC'
                                and c.estado_id='AC'
                              limit 1)
                              ,
                              sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sistema')
                            ); 
      
      return v_resultado;

  elseif p_tipo_ambiente_id = 2    
    then    
     v_sistema_id := (select a.sistema_id from sre_recaudaciones.sre_fac_sistemas as a where a.codigo_sistema = p_codigo_sistema);
      
      v_resultado := coalesce(
                               (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                from sre_recaudaciones.sre_fac_sistemas_contribuyentes as a
                                       inner join sre_recaudaciones.sre_fac_sistemas as b
                                         on (a.sistema_id = b.sistema_id)
                                       inner join sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones c
                                         on (c.sistema_id = a.sistema_id)
                                where b.codigo_sistema = p_codigo_sistema
                                  and a.contribuyente_id = v_persona_contribuyente_id
                                  and c.cuis = p_cuis
                                  and b.estado_sistema_id not in ((select sre_recaudaciones.sre_fac_par_estado('estado_sistema_cancelado')), 
                                                                                        (select sre_recaudaciones.sre_fac_par_estado('estado_sistema_observado')),
                                                                                        (select sre_recaudaciones.sre_fac_par_estado('estado_sistema_baja')))
                                  and c.modalidad_facturacion_id = v_modalidad_id
                                  and a.estado_id='AC'
                                  and b.estado_id='AC'
                                  and c.estado_id='AC'
                                limit 1)
                                ,
                                sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sistema')
                             );

       if (v_resultado = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
           return v_resultado;
      end if;
       v_resultado_proveedor :=coalesce(
                                               (
                                                select  sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')  
                                                from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor a inner join sre_recaudaciones.sre_fac_nits_pruebas_proveedores b
                                               on a.nit_prueba_proveedor_id=b.nit_prueba_proveedor_id
                                               where
                                               a.sistema_id_proveedor=v_sistema_id AND
                                               b.persona_contribuyente_id=v_persona_contribuyente_id AND 
                                                a.cuis=p_cuis AND
                                               a.estado_id='AC' and
                                               b.estado_id='AC'
                                               limit 1
                                               ), 
                                                sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sistema')
                                       );
      
      --Nota: Si el CUIS existe en la solicitud o fue asignacion al proveedor como parte de las pruebas de la etapa proveedores
      if(v_resultado=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') or v_resultado_proveedor=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
            return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
      end if;
      
  end if;                      
                             
  return v_resultado;

  EXCEPTION
  when others
    then
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_sistema');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sistema'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_sucursal(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_sucursal_id Integer:=0;
  p_nit          bigint:=0;  
  v_persona_contribuyente_id bigint:= 0;
  
  v_resultado smallint := 0;
   
begin
  p_sucursal_id :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal' as Integer));
  p_nit         :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor' as bigint));  
  v_persona_contribuyente_id := (sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit));  
   		
  v_resultado :=( select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
  				  from   scn_contribuyentes.scn_emp_sucursales_contribuyentes 
  				  where  persona_contribuyente_id=v_persona_contribuyente_id 
  				  and  numero_sucursal = p_sucursal_id limit 1);
  
  return coalesce(v_resultado,(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sucursal'))) :: smallint;
  
  
  
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_sucursal');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sucursal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_codigo_tipo_documento_identidad(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_tipo_documento_identidad integer:=0;     
  v_resultado smallint :=0;  
begin
--19 - Tipo Documento Identidad Invalido
  v_tipo_documento_identidad :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad' as integer));     
  v_resultado  :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_tipo_documento_identidad'));
	
  if v_tipo_documento_identidad in (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador = 'TIPO DOCUMENTO IDENTIDAD') then  
    v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;
	
	
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_tipo_documento_identidad');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_tipo_documento_identidad'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_compras_duplicado_obs(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_compras_duplicado_obs');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_compras_duplicado_obs'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_corresponda_codigo_nandina(p_codigo_nandina character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	v_resultado smallint := 0;	
begin
	-- 20190423 rgt
	
	-- 0 si el codigo nandina es incorrecto
	v_resultado := coalesce(
							(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
							 from sre_recaudaciones.sre_fac_productos_nandinas
							 where nandina = p_codigo_nandina and estado_id = 'AC' limit 1),
							 -- where (replace(nandina,'.','')) = p_codigo_nandina and estado_id = 'AC'),
							 0
							);
	return v_resultado;
	
	EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_corresponda_codigo_nandina');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_corresponda_codigo_nandina'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_corresponda_codigo_producto_nandina(p_codigo_nandina character varying, p_codigo_producto bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que realiza la validación del código nandina y el código del producto
PARAMETROS INGRESO
    p_codigo_nandina
    p_codigo_producto
PARAMETROS SALIDA
    Código de salida: 
                            1000=exitoso 
                            0=erroneo
SUBSISTEMA : Facturación
FECHA CREACION : <17/10/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

       v_resultado smallint := 0; 
begin
       v_resultado := coalesce((select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                                from sre_recaudaciones.sre_fac_productos_nandinas
                                                where nandina = p_codigo_nandina
                                                and codigo_producto = p_codigo_producto
                                                and estado_id = 'AC' limit 1
                                                ),0
                                            );                             
       return v_resultado;
       
       EXCEPTION
  when others
    then
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_corresponda_codigo_nandina');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_corresponda_codigo_nandina'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_corresponda_codigo_producto_sin(p_nit bigint, p_actividad_economica_id bigint, p_producto_sin_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_total bigint:=0;
  v_resultado  smallint := 0;
  
begin
	v_total:=(
	select count(*) 
	from sre_recaudaciones.sre_fac_catalogos_productos CAT
	where cast(CAT.codigo_actividad_caeb as bigint) = p_actividad_economica_id
	and CAT.codigo_producto = p_producto_sin_id
	and exists (
		select 1 from sre_recaudaciones.sre_fac_contribuyentes_productos CON
		where CON.codigo_producto = CAT.codigo_producto
		and CON.nit = p_nit)
		);
	
	if (v_total>0) then
		v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
		
					  
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_corresponda_codigo_producto_sin');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_corresponda_codigo_producto_sin'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cuf(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<09/05/2019>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_cuf varchar:='';   
  p_tipo_documento_sector_id integer := 0;  
  v_resultado_cuf smallint := 0;
  v_sql varchar := 0;
  p_tipo_documento_fiscal_id integer := 0;
  v_codigo_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5 // 2 para los documentos fiscales 4, 6
  
  v_resultado smallint:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  
begin
--122 - 'Código Único de Factura (CUF) duplicado'
  p_cuf :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf' as varchar));   
  p_tipo_documento_sector_id  := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoDocumentoSector' as integer)); 

  --**contingencia 08/08/2019
  p_tipo_documento_fiscal_id :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
  
  if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
     v_codigo_documento_fiscal := 2;
  end if;
  --***contingencia
  
  -- 1. validacion de existencia de CUF en tabla ventas
  if (v_codigo_documento_fiscal = 1 )then
    v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_cuf(p_tipo_documento_sector_id));
  else
  	v_sql:=(select sre_recaudaciones.sre_fac_ope_armar_consulta_verificar_cuf_contingencia(p_tipo_documento_sector_id));
  end if;
  

  
  execute v_sql  
  using 
    	p_cuf			
  into v_resultado_cuf;
  v_resultado_cuf := coalesce(v_resultado_cuf,0);    
  if(v_resultado_cuf = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then  	
  	v_resultado := sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuf');  	
  else    
  	v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  end if;
  
  --v_resultado:=1000;
  
  return v_resultado;
  
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cuf');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuf'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cuf_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La función realiza la verificación del Cuf existente en las tablas de facturas de ventas dependiendo su documento fiscal.
                     Adicionalmete realiza la verificación del número de documento fiscal
PARAMETROS INGRESO
    Objeto Json con los parametros necesarios para ralizar la anulación de la factura
PARAMETROS SALIDA
    Devuelve el resultado de la respuesta
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Asignacion valor cufp -> cuf, para el tipo documento sector 28 - prevalorada
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 21/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
     v_resultado_consulta smallint:=0;
     v_resultado smallint:=0;
    v_sql varchar := '0';
    p_cuf varchar:='';
    p_tipo_documento_fiscal_id integer:=0; 
     p_tipo_documento_sector_id integer:=0; 
     v_numero_documento_fiscal bigint:=0;
     v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5     
begin          
     v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');    
     p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
    p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
     p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');   
     v_numero_documento_fiscal :=(p_json->'xmlRecepcionGenerica'->>'p_numero_documento_fiscal');

     
     if(p_tipo_documento_sector_id = 28) then -- valida si es prevalorada
          p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cufp');
     end if;
     
     if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
          v_documento_fiscal := 2;
     end if;

     --Validando el CUF
     if (v_documento_fiscal = 1 )then        
          v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id,p_cuf,true);                                          
    else
          v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id,p_cuf,true);          
     end if;
     
     execute v_sql  
     into v_resultado_consulta;
     if (v_resultado_consulta=0) then
          v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuf_recepcion'));
          return v_resultado;
     end if;

     --Validando en número de documento fiscal
     if (v_documento_fiscal = 1 )then        
          v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_numero_documento_fiscal(p_tipo_documento_sector_id,v_numero_documento_fiscal,p_cuf);                                          
    else
          v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_numero_doc_fiscal_contingencia(p_tipo_documento_sector_id,v_numero_documento_fiscal,p_cuf);          
     end if;
     
     execute v_sql  
     into v_resultado_consulta;
     if (v_resultado_consulta=0) then
          v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuf_recepcion_numero_fiscal'));
          return v_resultado;
     end if;

     return v_resultado;

  EXCEPTION
  when others
    then
       perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cuf_recepcion');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuf_recepcion'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cufd(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciono la restricion "punto_venta".
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :< 27/09/2019>
AUTOR DE LA MODIFICACION : :Victor Cruz Gomez
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciono la validacion de la fecha_fin del cufd
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION :<05/12/2019>
AUTOR DE LA MODIFICACION : :Reynaldo Chambi Rojas
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare
  p_tipo_emision_id     Integer:=0;  
  p_cufd             varchar:='';
  p_cufd_factura 	 varchar:='';
  p_sucursal_id      Integer:=0;
  p_punto_venta   bigint:=0;
  p_nit_emisor       bigint:=0;
  p_codigo_sistema varchar:='';
  p_nit   bigint:=0;
  v_resultado_validar_fecha_offline smallint :=0;
  v_CUFD_asociado                   smallint :=0;
  v_punto_venta_id  bigint:=0;
  v_estado_vigente int4:=631;
  v_sistema_id Integer :=0;
  v_persona_contribuyente_id bigint:=0;
  v_cufd_vigente integer := 672;
  p_fecha_emision timestamp;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'));
begin
--123 - Código Único de Facturación Diario (CUFD) fuera de tolerancia
  p_tipo_emision_id  :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');  
  p_cufd             :=(p_json->'xmlRecepcionGenerica'->>'p_cufd');
  p_sucursal_id      :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal');
  p_nit_emisor       :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor');
  p_cufd_factura 	 :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cufd');
  p_punto_venta   :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoPuntoVenta');
  p_punto_venta   :=coalesce(p_punto_venta,0);
  p_nit :=(p_json->'xmlRecepcionGenerica'->>'p_nit');
  v_resultado        :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'));
  p_codigo_sistema 	:= (p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');
  p_fecha_emision   := (p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision');
  
  	v_sistema_id := (select a.sistema_id from sre_recaudaciones.sre_fac_sistemas as a where a.codigo_sistema = p_codigo_sistema);
  	v_persona_contribuyente_id := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
  
    --Obtencion del id punto de venta
  select punto_venta_id into v_punto_venta_id
  from sre_recaudaciones.sre_fac_puntos_ventas
  where numero_pos=p_punto_venta and 
		contribuyente_id=v_persona_contribuyente_id and	
		estado_id='AC' and
		estado_punto_venta_id = v_estado_vigente and
		fecha_baja is null 
  limit 1;
	
  v_punto_venta_id := coalesce(v_punto_venta_id,0);
  
  /*raise notice 'p_tipo_emision_id %',p_nit;
  raise notice 'p_cufd %',p_cufd;
  raise notice 'p_sucursal_id %',p_codigo_sistema;
  raise notice 'p_nit_emisor %',p_sucursal_id;
  raise notice 'p_cufd_factura %',p_punto_venta;
  raise notice 'p_punto_venta %',v_sistema_id;
  raise notice 'p_nit %',v_persona_contribuyente_id;
  raise notice 'v_resultado %',v_punto_venta_id;
  raise notice 'p_codigo_sistema %',v_punto_venta_id;*/
  
  if p_tipo_emision_id = 1 or p_tipo_emision_id = 3  --online
  then
    --raise notice 'por 1';
    v_resultado := coalesce(
    						  (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                              from sre_recaudaciones.sre_fac_registros_cufd as a
                              where
                              	a.sistema_id = v_sistema_id
                              	and a.sucursal_id = p_sucursal_id
                              	and a.cufd = p_cufd
                              	and coalesce(a.punto_venta_id,0) = v_punto_venta_id
                              	and a.estado_registro_cufd_id = v_cufd_vigente
                                and a.nit_emisor = p_nit_emisor
                                and a.cufd = p_cufd_factura
                                and p_fecha_emision <= a.fecha_fin
                                and sre_recaudaciones.sre_fac_ope_tolerancia_fecha_emision(p_json) = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                              limit 1)
                              ,
                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'))
                             );
                             

  elseif p_tipo_emision_id = 2 --offline
    then    
      --raise notice 'por 2';
      v_CUFD_asociado := coalesce(
      								(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                    from sre_recaudaciones.sre_fac_registros_cufd as a
                                    where a.cufd = p_cufd
                                      	and a.sucursal_id = p_sucursal_id
                                      	and a.nit_emisor = p_nit_emisor 
                                      	and coalesce(a.punto_venta_id,0) = v_punto_venta_id
                                    limit 1)
                                    ,
                                    (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'))
                                  );

      --verificar CUFS sea de maximo 3 dias, si estuviera registrado en contingencias (validar fecha emision offline)
      -- VALIDARA CUFD ESTE DENTRO DEL RANGO DE 3 DIAS Y EN EL REGISTRO DE LAS CONTINGENCIAS
      v_resultado_validar_fecha_offline := sre_recaudaciones.sre_fac_ope_tolerancia_fecha_emision(p_json);


      if (v_CUFD_asociado = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') and v_resultado_validar_fecha_offline = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))
      then
        v_resultado = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
      else
        v_resultado = 0; -- Por que retorna 0
      end if;
  end if;

  return v_resultado;

  EXCEPTION
  when others
    then
	  --return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cufd'));
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cufd');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cufd_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$

/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el cufd se encuentra registrado en la tabla sre_fac_registros_cufd.
PARAMETROS INGRESO
    p_json: Datos de recepcion en formato json.
PARAMETROS SALIDA
    v_resultado:  Resultado de tipo smallint al cual se asigna el valor de 1000 caso de exito y 4 en caso de no existir un resultado
SUBSISTEMA : Facturación
FECHA CREACION : 29/03/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciono la restricion "punto_venta".
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< 27/09/2019>
AUTOR DE LA MODIFICACION : :Victor Cruz Gomez
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se adiciono la validacion de la fecha_fin del cufd
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION :<05/12/2019>
AUTOR DE LA MODIFICACION : :Reynaldo Chambi Rojas
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare
  p_cufd varchar:='';
  p_codigo_sistema varchar:='';
  p_sucursal_id integer:=0;
  p_punto_venta  bigint:=0;
  p_nit   bigint:=0;
  p_fecha_envio timestamp;
  
  v_persona_contribuyente_id bigint:=0;
  v_resultado smallint:=0;
  v_sistema_id Integer :=0;
  v_cufd_vigente integer := 672; ---add 20190802
  v_punto_venta_id  bigint:=0;
  v_estado_vigente int4:=631;
  
begin
 	
--4  Cufd, no valido
  p_nit :=(p_json->'xmlRecepcionGenerica'->>'p_nit');
  p_cufd :=(p_json->'xmlRecepcionGenerica'->>'p_cufd');
  p_codigo_sistema 	:= (p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');
  p_sucursal_id  	:= (p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');
  p_punto_venta  := (p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id');
  p_punto_venta  := coalesce(p_punto_venta,0);  
  p_fecha_envio := (p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
  
  v_sistema_id := (select a.sistema_id from sre_recaudaciones.sre_fac_sistemas as a where a.codigo_sistema = p_codigo_sistema);
  v_persona_contribuyente_id := sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
  
  --Obtencion del id punto de venta
  select punto_venta_id into v_punto_venta_id
  from sre_recaudaciones.sre_fac_puntos_ventas
  where numero_pos=p_punto_venta and 
	contribuyente_id=v_persona_contribuyente_id and	
	estado_id='AC' and
	estado_punto_venta_id = v_estado_vigente and
	fecha_baja is null 
  limit 1;
	
  v_punto_venta_id := coalesce(v_punto_venta_id,0);	

  /*raise notice 'p_nit %',p_nit;
  raise notice 'p_cufd %',p_cufd;
  raise notice 'p_codigo_sistema %',p_codigo_sistema;
  raise notice 'p_sucursal_id %',p_sucursal_id;
  raise notice 'p_punto_venta %',p_punto_venta;
  raise notice 'v_sistema_id %',v_sistema_id;
  raise notice 'v_persona_contribuyente_id %',v_persona_contribuyente_id;
  raise notice 'v_punto_venta_id %',v_punto_venta_id;*/
  
      
  v_resultado := coalesce(
							  (
							   select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
	                           from sre_recaudaciones.sre_fac_registros_cufd as a
	                           where a.sistema_id = v_sistema_id
	                            and a.sucursal_id = p_sucursal_id
	                            and a.cufd = p_cufd
	                            and coalesce(a.punto_venta_id,0)=v_punto_venta_id
	                            and a.estado_registro_cufd_id = v_cufd_vigente
	                           limit 1
	                          )
                          	  ,
                          	  (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'))
                         );
  return v_resultado;
  EXCEPTION
  when others
    then
	  --return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cufd_recepcion'));
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cufd_recepcion');
         return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufd'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cufp(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_pais_id   Integer:=0;
  v_resultado      smallint :=0;
  v_agrupador varchar :='';
begin
 --TODO:fake
 
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cufp');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cufp'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cuis(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Para el ambiente produccion, se adicion en la validacion el estado del CUIS=633 (Vigente)
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< 08/10/2019>
AUTOR DE LA MODIFICACION : :<Victor Cruz Gomez>
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/
declare
  p_cuis varchar:='';
  p_codigo_sistema varchar:='';
  p_tipo_ambiente_id Integer:=0;
  p_sucursal_id Integer:=0;
  
  v_sistema_id bigint := 0;
  v_resultado smallint := 0;
  v_resultado_proveedor smallint := 0;
  v_vigente integer:=633;
  --Constante
  
begin
 	
  p_cuis:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_cuis' as varchar));
  p_codigo_sistema:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar));
  p_tipo_ambiente_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id' as Integer));
  p_sucursal_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id' as Integer));
  
  v_resultado  :=sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis');
	
	-- AMBIENTE EN PRODUCCION
	if p_tipo_ambiente_id = 1
	then
		v_sistema_id := (select a.sistema_id from sre_recaudaciones.sre_fac_sistemas as a where a.codigo_sistema = p_codigo_sistema);
		v_resultado := coalesce(
	    						(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
	                              from sre_recaudaciones.sre_fac_inicios_sistemas as a                 
	                              where a.sistema_id = v_sistema_id 
	                              and a.sucursal_id = p_sucursal_id
	                              and a.cuis = p_cuis 
	                              and a.estado_id='AC'
	                              and a.estado_inicio_id=v_vigente
	                              
	                              limit 1)
	                              ,
	                              sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis')
	                              );
	     return v_resultado;                         
	-- AMBIENTE DE PRUEBAS
	elseif p_tipo_ambiente_id = 2
	then 
		v_sistema_id := (select a.sistema_id from sre_recaudaciones.sre_fac_sistemas as a where a.codigo_sistema = p_codigo_sistema);
		
		
		v_resultado := coalesce(
	    						(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
	                              from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones as a                 
	                              where a.sistema_id = v_sistema_id 
	                              and a.cuis = p_cuis
	                              and a.estado_id='AC'
	                              
	                              limit 1)
	                              ,
	                              sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis')
	                              );

	    if(v_resultado = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
	    	return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	    end if;
	                              
		v_resultado_proveedor := coalesce(
								(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
								 from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor as b
								 where b.sistema_id_proveedor=v_sistema_id and
								       b.cuis=p_cuis and
								       b.estado_id ='AC'
								 limit 1),
								 sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis')
								 );
		
				
		
		--Nota: Si el CUIS existe en la solicitud o fue asignacion al proveedor como parte de las pruebas de la etapa proveedores
		if(v_resultado=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') or v_resultado_proveedor=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
			return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
		end if;
	end if;	

  	return v_resultado;
  EXCEPTION
  when others
    then
     perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cuis');
     return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_cuis_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el cuis:
	1) Ambiente de pruebas. Se debe encontrar en la tabla sre_fac_detalle_solicitudes_certificaciones.
	2) Ambiente de produccion. Se debe encontrar en la tabla sre_fac_inicios_sistemas.
PARAMETROS INGRESO
    p_json: Datos de recepcion en formato json.
PARAMETROS SALIDA
    v_resultado:  Resultado de tipo smallint al cual se asigna el valor de 1000 caso de exito y 3 en caso de no existir un resultado
SUBSISTEMA : Facturación
FECHA CREACION : 29/03/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Para el ambiente produccion, se adicion en la validacion el estado del CUIS=633 (Vigente)
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< 08/10/2019>
AUTOR DE LA MODIFICACION : :<Victor Cruz Gomez>
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare
  p_cuis varchar:='';
  p_codigo_sistema varchar:='';
  p_tipo_ambiente_id Integer:=0;
  p_sucursal_id Integer:=0;
  
  v_sistema_id Integer := 0;
  v_resultado smallint := 0;
  v_resultado_proveedor smallint := 0;
  v_vigente integer:=633;
  --Constante
  
begin
 	
  p_cuis :=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
  p_codigo_sistema :=(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');
  p_tipo_ambiente_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id');
  p_sucursal_id :=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');
  v_resultado := (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis'));
  --0  Cuis no valido // falta asignar codigo error cuis
	
	-- AMBIENTE EN PRODUCCION
	if p_tipo_ambiente_id = 1
	then
		v_sistema_id := (select sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema));
		v_resultado := coalesce(
	    						(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
	                              from sre_recaudaciones.sre_fac_inicios_sistemas as a                 
	                              where a.sistema_id = v_sistema_id 
	                              and a.sucursal_id = p_sucursal_id
	                              and a.cuis = p_cuis
	                              and a.estado_id ='AC'
	                              and a.estado_inicio_id = v_vigente
	                              limit 1)
	                              ,
	                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis'))
	                              );
	-- AMBIENTE DE PRUEBAS
	elseif p_tipo_ambiente_id = 2
	then 
		v_sistema_id := (select sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema));

		v_resultado := coalesce(
	    						(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
	                              from sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones as a                 
	                              where a.sistema_id = v_sistema_id 
	                              and a.cuis = p_cuis
	                              and a.estado_id='AC'
	                              limit 1)
	                              ,
	                              (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis'))
	                              );
	                              
	                              
	    if(v_resultado = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
	    	return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	    end if;
	    
	    v_resultado_proveedor := coalesce(
								(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
								 from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor as b
								 where b.sistema_id_proveedor=v_sistema_id and
								       b.cuis=p_cuis and
								       b.estado_id ='AC'
								 limit 1),
								 sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis')
								 );
		
						
		--Nota: Si el CUIS existe en la solicitud o fue asignacion al proveedor como parte de las pruebas de la etapa proveedores
		if(v_resultado=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') or v_resultado_proveedor=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
			return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
		end if;
	    
	end if;	

  return v_resultado;
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_cuis_recepcion');
	  return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_cuis'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_diferencia_compras_ventas_obs(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	 perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_diferencia_compras_ventas_obs');
     return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));--TODO: Revisar la respuesta correcta luego de implementar el contenido
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_diferencia_ventas_compras_obs(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_diferencia_ventas_compras_obs');
 	  return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));--TODO: Revisar la respuesta correcta luego de implementar el contenido
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_documento_fiscal_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_documento_fiscal_id integer:=0;
  v_resultado smallint :=0;
  
begin
 	
  p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');

  v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_fiscal'));
  --5  Codigo documento fiscal no valido
  if p_tipo_documento_fiscal_id in (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador = 'TIPO DOCUMENTO FISCAL') then  
    v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;
   
  return v_resultado;
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_documento_fiscal_recepcion');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_fiscal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_documento_fiscal_recepcion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Devuelve éxito si el valor existe en los clasificadores "tipo_documento_fiscal_id"
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_documento_fiscal_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as integer));
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_fiscal'));  
begin
 	
  
  if p_tipo_documento_fiscal_id in (SELECT clasificador_id FROM str_transversales.str_cps_clasificadores where tipo_clasificador = 'tipo_documento_fiscal_id' and estado_id = 'AC') then  
    v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;
   
  return v_resultado;
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_documento_fiscal_recepcion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_documento_sector_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<08/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_tipo_documento_sector_id integer:=0;
   v_resultado smallint;
  
begin
    p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	v_resultado := (case	
					  when p_tipo_documento_sector_id = 0 then	
						  (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_documento_sector_incorrecto'))
					  when (p_tipo_documento_sector_id in (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador = 'TIPO DOCUMENTO SECTOR')) then  
					      sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
					  else
					      (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_sector'))
					end);
  return v_resultado;
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_documento_sector_recepcion');
	  return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_sector'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_documento_sector_recepcion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Devuelve éxito si el valor existe en los clasificadores "tipo_documento_sector_id"
PARAMETROS INGRESO
 Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<08/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tully
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_documento_sector_id integer:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));
   v_resultado smallint;
  
begin
	v_resultado := (case	
					  when p_tipo_documento_sector_id = 0 then	
						  (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_documento_sector_incorrecto'))
					  when (p_tipo_documento_sector_id in (SELECT clasificador_id FROM str_transversales.str_cps_clasificadores where tipo_clasificador = 'tipo_documento_sector_id' and estado_id = 'AC')) then  
					      sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
					  else
					      (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_documento_sector'))
					end);
  return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_val_documento_sector_recepcion_manual(SQLSTATE, SQLERRM, 'sre_fac_val_documento_sector_recepcion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_emision_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el p_tipo_emision_id, se encuentra en la tabla de clasificadores sre_fac_clasificadores.
PARAMETROS INGRESO
    p_json: Datos de recepcion en formato json.
PARAMETROS SALIDA
    v_resultado:  Resultado de tipo smallint al cual se asigna el valor de 1000 caso de exito y 6 en caso de no existir un resultado
SUBSISTEMA : Facturación
FECHA CREACION : 29/03/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripción>
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :< dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare
  p_tipo_emision_id Integer:=0;  
  v_resultado smallint :=0;
  
  
begin
	
  p_tipo_emision_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');  
  v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_emision'));
  
--6  Codigo Emision no valido
	
  if p_tipo_emision_id in (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador = 'TIPO EMISION') then  
    v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;

  return v_resultado;
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_emision_recepcion');
	  return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_emision'));	 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_evento_significativo_id(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Funcion que permite validar si el evento_significativo_id existe>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <11/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_evento_significativo_id bigint := (p_json->'xmlRecepcionGenerica'->>'p_evento_significativo_id'); 
	v_resultado smallint := 0;

begin
	-- 0 Si el evento significativo id no existe//establecer codigo error
	
	if (p_evento_significativo_id > 0) then
		v_resultado := coalesce(
							   	(
							   		select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
							   		from sre_recaudaciones.sre_fac_eventos_significativos
							   		where evento_significativo_id = p_evento_significativo_id and motivo_evento_id in (972, 974, 975) 
							   	),0
							   );
	end if;
	
	return v_resultado;

	EXCEPTION
  	when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_evento_significativo_id'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_existe_evento_significativo_para_paquete_id(p_tipo_documento_sector_id integer, p_recepcion_paquete_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que verifica la existencia de registro de evento significativo para paquete determinado
PARAMETROS INGRESO
    p_tipo_documento_sector_id tipo documento sector
    p_recepcion_paquete_id identificador del paquete
PARAMETROS SALIDA
    true o false dependiendo si existe registro de evento significativo
SUBSISTEMA : Facturación
FECHA CREACION : 08/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste consideracion numeropos en tabla sre_fac_puntos_ventas, cuando punto de venta no sea null
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :04/09/2016
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste instruccion verificacion existencia evento significativo, 24 horas antes a la fecha de envio paquete
                        CONSIDERAR AJUSTE EN REGISTRO RECEPCIONES VALORES IDENTIFICADORES DE TRANSVERSALES, CAMPOS MODALIDAD, PUNTO VENTA 
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 18/09/2016
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.2
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Se ajusta funcion, para tratamiento de cuis en caso de pruebas PROVEEDORES
                        ((select true from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor where cuis = v_cuis limit 1) or (dsc.cuis = v_cuis)) and  
NUMERO SECUENCIAL : 3
FECHA DE MODIFICACION : 26/09/2016
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.2
**************************************************************************************************************************************************/



declare
v_esiste_evento_significativo bool := false;
v_sql varchar:='';
v_recep_paq_json json;
v_cufd varchar:='';
v_cuis varchar:='';
v_sucursal_id integer:=0;
v_punto_venta_id integer:=null;
v_persona_contribuyente_id bigint:=0;
v_sistema_id bigint:=0;
v_tipo_modalidad_id integer:=0;
v_fecha_envio timestamp;

begin
      v_sql:=(select * from sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_recepcion_paquete_por_id(p_tipo_documento_sector_id));

    if v_sql != '0' then
           execute v_sql  
                using p_recepcion_paquete_id
          into v_recep_paq_json;       
      
            v_cufd := (v_recep_paq_json ->>'cufd')::varchar;
            v_cuis := (v_recep_paq_json ->>'cuis')::varchar;     
            v_sucursal_id :=(v_recep_paq_json ->>'sucursal_id')::integer;
            v_punto_venta_id :=(v_recep_paq_json ->>'punto_venta_id')::integer;
            v_persona_contribuyente_id :=(v_recep_paq_json->>'persona_contribuyente_id')::bigint;
            v_sistema_id :=(v_recep_paq_json->>'sistema_id')::bigint;        
            v_tipo_modalidad_id :=(v_recep_paq_json ->>'tipo_modalidad_id')::integer;
            v_fecha_envio :=(v_recep_paq_json ->>'fecha_envio')::timestamp;
            
            -- TODO ELIMINAR UNA VEZ QUE HAYAN AJUSTADO VALOR REGISTRADO EN PAQUETE (CODIGO, IDENTIFICADOR)
            v_tipo_modalidad_id := coalesce((select codigo_clasificador_equivalente 
                                            from sre_recaudaciones.sre_fac_clasificadores 
                                            where agrupador = 'TIPO MODALIDAD' and codigo_clasificador = v_tipo_modalidad_id
                                            limit 1), 
                                            0);

            if v_punto_venta_id is null then
                  v_esiste_evento_significativo := coalesce((select true
                                                                                   from sre_recaudaciones.sre_fac_eventos_significativos es 
                                                                                   inner join sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones dsc
                                                                                   on es.sistema_id = dsc.sistema_id
                                                                                   where 
                                                                                       es.contribuyente_id=v_persona_contribuyente_id and
                                                                                       dsc.sistema_id = v_sistema_id and        
                                                                                       dsc.modalidad_facturacion_id = v_tipo_modalidad_id and --600 computarizada 601 electronica
                                                                                       es.sucursal_id = v_sucursal_id and
                                                                                       es.punto_venta_id isnull and --pos
                                                                                       --dsc.cuis=v_cuis and
                                                                                       ((select true from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor where cuis = v_cuis limit 1) or (dsc.cuis = v_cuis)) and  
                                                                                       es.tipo_evento_id = 1297 and
                                                                                       es.fecha_fin_evento >= (v_fecha_envio - interval '24 hours') and --validacion 24 horas incluyendo segundos desde el envio
                                                                                       es.estado_id = 'AC' and 
                                                                                       dsc.estado_id = 'AC' 
                                                                                       limit 1), 
                                                                               false);
            else
                  v_esiste_evento_significativo := coalesce((
                                                                                   -- TODO EMPLEAR UNA VEZ QUE HAYAN AJUSTADO VALOR REGISTRADO EN PAQUETE (PUNTO_VENTA_ID, NUMERO_POS)
                  
                                                                                   -- TODO ELIMINAR UNA VEZ QUE HAYAN AJUSTADO VALOR REGISTRADO EN PAQUETE (PUNTO_VENTA_ID, NUMERO_POS)
                                                                                   select true
                                                                                   from sre_recaudaciones.sre_fac_eventos_significativos es 
                                                                                   inner join sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones dsc
                                                                                   on es.sistema_id = dsc.sistema_id
                                                                                   inner join sre_recaudaciones.sre_fac_puntos_ventas pv
                                                                                   on es.punto_venta_id = pv.punto_venta_id
                                                                                   where 
                                                                                       es.contribuyente_id=v_persona_contribuyente_id and
                                                                                       dsc.sistema_id=v_sistema_id and          
                                                                                       dsc.modalidad_facturacion_id = v_tipo_modalidad_id and --600 computarizada 601 electronica
                                                                                       es.sucursal_id=v_sucursal_id and
                                                                                       pv.numero_pos = v_punto_venta_id and --pos
                                                                                       --dsc.cuis=v_cuis and
                                                                                       ((select true from sre_recaudaciones.sre_fac_nit_asignados_clientes_proveedor where cuis = v_cuis limit 1) or (dsc.cuis = v_cuis)) and  
                                                                                       es.tipo_evento_id = 1297 and
                                                                                       es.fecha_fin_evento >= (v_fecha_envio - interval '24 hours') and --validacion 24 horas incluyendo segundos desde el envio
                                                                                       es.estado_id='AC' and 
                                                                                       dsc.estado_id='AC' 
                                                                                       limit 1), 
                                                                               false);
            
            end if;     
      else
            v_esiste_evento_significativo := false;
      end if;
      
      return v_esiste_evento_significativo;
      
      exception
      when others then
            perform sre_recaudaciones.sre_fac_reg_registrar_excepcion(sqlstate, SQLERRM, 'sre_fac_val_existe_evento_significativo_para_paquete_id');
      return false;
      
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_existe_evento_significativo_para_paquete_id_v0(p_tipo_documento_sector_id integer, p_recepcion_paquete_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que verifica la existencia de registro de evento significativo para paquete determinado
PARAMETROS INGRESO
    p_tipo_documento_sector_id tipo documento sector
    p_recepcion_paquete_id identificador del paquete
PARAMETROS SALIDA
    true o false dependiendo si existe registro de evento significativo
SUBSISTEMA : Facturación
FECHA CREACION : 08/08/2019
AUTOR : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste consideracion numeropos en tabla sre_fac_puntos_ventas, cuando punto de venta no sea null
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :04/09/2016
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.1
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajuste instruccion verificacion existencia evento significativo, 24 horas antes a la fecha de envio paquete
				CONSIDERAR AJUSTE EN REGISTRO RECEPCIONES VALORES IDENTIFICADORES DE TRANSVERSALES, CAMPOS MODALIDAD, PUNTO VENTA	
NUMERO SECUENCIAL : 2
FECHA DE MODIFICACION : 18/09/2016
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.2
**************************************************************************************************************************************************/
declare
v_esiste_evento_significativo bool := false;
v_sql varchar:='';
v_recep_paq_json json;
v_cufd varchar:='';
v_cuis varchar:='';
v_sucursal_id integer:=0;
v_punto_venta_id integer:=null;
v_persona_contribuyente_id bigint:=0;
v_sistema_id bigint:=0;
v_tipo_modalidad_id integer:=0;
v_fecha_envio timestamp;

begin
	v_sql:=(select * from sre_recaudaciones.sre_fac_ope_armar_consulta_obtener_recepcion_paquete_por_id(p_tipo_documento_sector_id));

    if v_sql != '0' then
	 	execute v_sql  
		    using p_recepcion_paquete_id
	    into v_recep_paq_json;	    
	
		v_cufd := (v_recep_paq_json ->>'cufd')::varchar;
		v_cuis := (v_recep_paq_json ->>'cuis')::varchar;	
	
		v_sucursal_id :=(v_recep_paq_json ->>'sucursal_id')::integer;
		v_punto_venta_id :=(v_recep_paq_json ->>'punto_venta_id')::integer;

		v_persona_contribuyente_id :=(v_recep_paq_json->>'persona_contribuyente_id')::bigint;
		v_sistema_id :=(v_recep_paq_json->>'sistema_id')::bigint;		
		v_tipo_modalidad_id :=(v_recep_paq_json ->>'tipo_modalidad_id')::integer;
		v_fecha_envio :=(v_recep_paq_json ->>'fecha_envio')::timestamp;
		
		-- TODO ELIMINAR UNA VEZ QUE HAYAN AJUSTADO VALOR REGISTRADO EN PAQUETE (CODIGO, IDENTIFICADOR)
		v_tipo_modalidad_id := coalesce((select codigo_clasificador_equivalente 
							   from sre_recaudaciones.sre_fac_clasificadores 
							   where agrupador = 'TIPO MODALIDAD' and codigo_clasificador = v_tipo_modalidad_id
							   limit 1), 
							   0);
		
		
		if v_punto_venta_id is null then
	   		v_esiste_evento_significativo := coalesce((select true
														from sre_recaudaciones.sre_fac_eventos_significativos es 
														inner join sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones dsc
														on es.sistema_id = dsc.sistema_id
														where 
														    es.contribuyente_id=v_persona_contribuyente_id and
														    dsc.sistema_id = v_sistema_id and		
														    dsc.modalidad_facturacion_id = v_tipo_modalidad_id and --600 computarizada 601 electronica
														    es.sucursal_id = v_sucursal_id and
														    es.punto_venta_id isnull and --pos
														    dsc.cuis=v_cuis and  
														    es.tipo_evento_id = 1297 and
														    es.fecha_fin_evento >= (v_fecha_envio - interval '24 hours') and --validacion 24 horas incluyendo segundos desde el envio
														    es.estado_id = 'AC' and 
														    dsc.estado_id = 'AC' 
														    limit 1), 
												        false);
		else
			v_esiste_evento_significativo := coalesce((
														-- TODO EMPLEAR UNA VEZ QUE HAYAN AJUSTADO VALOR REGISTRADO EN PAQUETE (PUNTO_VENTA_ID, NUMERO_POS)
		
														-- TODO ELIMINAR UNA VEZ QUE HAYAN AJUSTADO VALOR REGISTRADO EN PAQUETE (PUNTO_VENTA_ID, NUMERO_POS)
														select true
														from sre_recaudaciones.sre_fac_eventos_significativos es 
														inner join sre_recaudaciones.sre_fac_detalle_solicitudes_certificaciones dsc
														on es.sistema_id = dsc.sistema_id
														inner join sre_recaudaciones.sre_fac_puntos_ventas pv
														on es.punto_venta_id = pv.punto_venta_id
														where 
														    es.contribuyente_id=v_persona_contribuyente_id and
														    dsc.sistema_id=v_sistema_id and		
														    dsc.modalidad_facturacion_id = v_tipo_modalidad_id and --600 computarizada 601 electronica
														    es.sucursal_id=v_sucursal_id and
														    pv.numero_pos = v_punto_venta_id and --pos
														    dsc.cuis=v_cuis and  
														    es.tipo_evento_id = 1297 and
														    es.fecha_fin_evento >= (v_fecha_envio - interval '24 hours') and --validacion 24 horas incluyendo segundos desde el envio
														    es.estado_id='AC' and 
														    dsc.estado_id='AC' 
														    limit 1), 
												        false);
		
		end if;	
	else
		v_esiste_evento_significativo := false;
	end if;
	
	return v_esiste_evento_significativo;
	
	exception
	when others then
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion(sqlstate, SQLERRM, 'sre_fac_val_existe_evento_significativo_para_paquete_id');
	return false;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_existe_inhabilitado_factura_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica la factura enviada en el objeto JSON se encuentra en las tablas de inhabilitados
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
devuelva la respuesta de la ejecucion de la consulta SELECT, si existe en los inhabilotados y 0 si no existe.
SUBSISTEMA : Facturación
FECHA CREACION : 16/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
	
	p_caed varchar;
	p_numero_factura bigint; 
	p_tipo_documento_sector_id integer; 
	v_venta_id bigint;
	v_resultado smallint=0;
	p_estado_inhabilitado bigint; 
	p_nit_emisor bigint; 
	temprec RECORD;
begin

	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	v_venta_id := (select sre_recaudaciones.sre_fac_ope_verificar_existe_ventas_factura_manual(p_json));			
	p_nit_emisor :=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
	p_estado_inhabilitado:= ( select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador like 'estado_inhabilitado_detalle_id' and descripcion ='FINALIZADO');

	select *
                           from sre_recaudaciones.sre_fman_documentos_fiscales_preregistros as a
			  			   join sre_recaudaciones.sre_fman_impresion_inhabilitadas_detalles as i 
			  			   on (a.documento_fiscal_preregistro_id=i.documento_fiscal_preregistro_id)
                           where  p_numero_factura BETWEEN a.rango_inicial AND a.rango_final
                           and a.caed= p_caed
                           and a.nit_emisor = p_nit_emisor 
                           and a.sucursal_contribuyente_id = p_nit_emisor
                           and p_numero_factura BETWEEN i.rango_inicial_inhabilitado AND i.rango_final_inhabilitado
                           and i.caed= p_caed
                           and i.estado_inhabilitado_detalle_id = p_estado_inhabilitado
                           limit 1 into temprec;

              IF FOUND THEN
             v_resultado:=0;
    ELSE
             v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
    END IF;                       
                         	
         return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_existe_inhabilitado_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_existe_venta_anulado_facturacion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica a partir de los datos del JSON si existe la venta anulada.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion (no esta entre las ventas anuladas), o codigo de error asociado si ya esta anulado.
SUBSISTEMA : Facturación
FECHA CREACION : 16/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
 
 v_resultado smallint :=(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));     
 v_venta_anulado_id bigint;

begin
	v_venta_anulado_id :=  (select sre_recaudaciones.sre_fac_ope_verificar_existe_venta_estado_factura_manual(p_json, 'ANULADO'));	
	if(v_venta_anulado_id>0) then
			v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_existe_venta_anulado_facturacion_manual'));
			else    
			 v_resultado := (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));	
			end if;
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_existe_venta_anulado_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_factura(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Asignacion valor cufp -> cuf, para el tipo documento sector 28 - prevalorada
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 21/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
     p_resultado smallint;
     v_estado_factura_id integer:=0;
     v_codigo_exito smallint:=0;
     p_cuf varchar:='';
     p_tipo_documento_fiscal_id integer:=0; 
     p_tipo_documento_sector_id integer:=0; 
     v_sql varchar:='';  
     v_estado_factura_valido smallint := 0;   
     v_estado_factura_anulado smallint := 0;
     v_estado_factura_anulado_no_confirmado smallint := 0;
     v_cantidad_facturas integer:=0;
     v_documento_fiscal smallint := 1; --para los tipos de documentos fiscales: 1, 2, 3, 5     
     
begin
     v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
     p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
     p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
     p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
     v_estado_factura_valido  := sre_recaudaciones.sre_fac_par_estado('estado_factura_valida');   
     v_estado_factura_anulado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulada');
     v_estado_factura_anulado_no_confirmado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulado_no_confirmado');

     if(p_tipo_documento_sector_id = 28)then -- valida si es prevalorada
          p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cufp');
     end if;
          
     if (p_tipo_documento_fiscal_id = 4 or p_tipo_documento_fiscal_id = 6)then -- 4 = FACTURA CONTINGENCIA, 6 = NOTA FISCAL DE CONTINGENCIA
                v_documento_fiscal := 2;
     end if;

     if (v_documento_fiscal = 1 )then        
          p_resultado:= (sre_recaudaciones.sre_fac_val_factura_venta(p_tipo_documento_sector_id,p_cuf));                                          
    else
          p_resultado:= (sre_recaudaciones.sre_fac_val_factura_venta_contingencia(p_tipo_documento_sector_id,p_cuf));          
     end if;
     
     if(p_resultado=v_codigo_exito) then
          if (v_documento_fiscal = 1 )then        
                v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id,p_cuf,false);                                          
         else
                v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id,p_cuf,false);          
          end if;
        
        execute v_sql  
       into v_estado_factura_id;
        p_resultado:=(case
                          when v_estado_factura_id=v_estado_factura_anulado then          
                                sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada')                          
                          when v_estado_factura_id=v_estado_factura_anulado_no_confirmado then 
                               sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_existe_solicitud_anulacion')                          
                          when v_estado_factura_id<>v_estado_factura_valido then
                               sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_no_disponible_anulacion')
                          end);     
     end if;   

  return coalesce(p_resultado,v_codigo_exito);    
  EXCEPTION
  when others
    then
       perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_factura');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_factura_contingencia(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_resultado smallint;
	v_estado_factura_id integer:=0;
	v_codigo_exito smallint:=0;
	p_cuf varchar:='';
	p_tipo_documento_fiscal_id integer:=0; 
	p_tipo_documento_sector_id integer:=0; 
	v_sql varchar:='';	
	v_estado_factura_valido smallint := 0;   
	v_estado_factura_anulado smallint := 0;
	v_estado_factura_anulado_no_confirmado smallint := 0;
	v_cantidad_facturas integer:=0;
	
begin
	v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	p_cuf :=(p_json->'xmlRecepcionGenerica'->>'p_cuf');
	p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id'); 
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id'); 
	v_estado_factura_valido  := sre_recaudaciones.sre_fac_par_estado('estado_factura_valida');   
	v_estado_factura_anulado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulada');
	v_estado_factura_anulado_no_confirmado  := sre_recaudaciones.sre_fac_par_estado('estado_factura_anulado_no_confirmado');
	p_resultado:= (sre_recaudaciones.sre_fac_val_factura_venta_contingencia(p_tipo_documento_sector_id,p_cuf));

	if(p_resultado=v_codigo_exito) then
	   v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id,p_cuf,false);
	   execute v_sql  
       into v_estado_factura_id;
	   p_resultado:=(case
					when v_estado_factura_id=v_estado_factura_anulado then		 	
						 sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada')					
					when v_estado_factura_id=v_estado_factura_anulado_no_confirmado then	
						 sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_existe_solicitud_anulacion')					
					when v_estado_factura_id<>v_estado_factura_valido then
						 sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_no_disponible_anulacion')
					end);	
	end if;	

  return coalesce(p_resultado,v_codigo_exito);	
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_factura_contingencia');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_factura_venta(p_tipo_documento_sector_id integer, p_cuf character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite realizar la validación de las facturas de ventas, si es que existen duplicados, no exista factura a travez del cuf,
				en el caso de que no pase estas validaciones se procedera con la siguiente tarea.
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <13/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_resultado smallint;	
	v_sql varchar:='';	
	v_cantidad_facturas integer:=0; 
begin
  	v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura(0,p_tipo_documento_sector_id,p_cuf,true);
  	execute v_sql  	
    into v_cantidad_facturas;
   
	case
		when v_cantidad_facturas > 1 then --Registros duplicados		
			p_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_duplicada'));		
		when v_cantidad_facturas = 0 then --No existen registros		
			p_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_sin_registro'));
		when v_cantidad_facturas = 1 then
			p_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');	
	end case;	
  return p_resultado;	
  EXCEPTION
  when others
    then
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_factura_venta');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_sin_registro'));
	 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_factura_venta_contingencia(p_tipo_documento_sector_id integer, p_cuf character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Permite realizar la validación de las facturas de ventas, si es que existen duplicados, no exista factura a travez del cuf,
				en el caso de que no pase estas validaciones se procedera con la siguiente tarea.
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <13/05/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_resultado smallint;	
	v_sql varchar:='';	
	v_cantidad_facturas integer:=0; 
begin
  	v_sql:= sre_recaudaciones.sre_fac_ope_armar_consulta_ventas_factura_contingencia(0,p_tipo_documento_sector_id,p_cuf,true);
  	execute v_sql  	
    into v_cantidad_facturas;
   
	case
		when v_cantidad_facturas > 1 then --Registros duplicados		
			p_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_duplicada'));		
		when v_cantidad_facturas = 0 then --No existen registros		
			p_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_sin_registro'));
		when v_cantidad_facturas = 1 then
			p_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');	
	end case;	
  return p_resultado;	
  EXCEPTION
  when others
    then
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_factura_venta_contingencia');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_sin_registro'));
	 
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_manual_validar_factura_desarrollo(p_json_varchar character varying, p_recepcion_id bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Etapa 2, llama a la funcion de validacion, registra en recepciones correctas y si existen errores en sus respetivas tablas.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
id de la recepcion 
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 03/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   p_resultado_observacion smallint:=0;
   v_recepcion_paquete_id bigint;
   v_resultado_actualizacion_estado bigint;
   p_tipo_documento_sector_id integer; 	
begin
	p_json:= cast(p_json_varchar as json);	
	v_recepcion_paquete_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_recepcion_paquete_id' as bigint));
	p_tipo_documento_sector_id := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as Integer));
	-- Nota: Crea una tabla temporal para almacenar el resultado de la validacion de la factura. 
	drop table if exists tbl_resultado_validacion_especifica;		 
	create temp table tbl_resultado_validacion_especifica (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_especifica (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_manual(p_json, 2));
	
	if (select count(*) from tbl_resultado_validacion_especifica)<>0 then
	-- Nota: Cuando el conteo de los resultados es igual a 0 significa que no hay errores de validacion en la factura.
			--Nota: Registra el resultado en las tablas de validos Recepciones Correctas, Ventas).
			p_resultado_registro:=sre_recaudaciones.sre_fac_reg_recepciones_correctas_facturacion_manual(p_json, p_recepcion_id); --CREAR
			
			v_resultado_actualizacion_estado:= (select sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_facturacion_manual(p_tipo_documento_sector_id, p_recepcion_id, 'RECEPCIONADO CORRECTO'));
			
			p_resultado_observacion:=sre_recaudaciones.sre_fac_servicio_observados_facturacion_manual(p_json); 
			
		if (select count(*) from tbl_resultado_validacion_especifica where resultado_ejecucion<>1000)>0 then  
			--Nota: Registra el resultado en las tablas de no validos Recepciones Errores, Recepciones Detalles
					
			p_json_errores:=(
				select row_to_json(tbl_resultado)
				from (
					select array_to_json(array_agg(row_to_json(tbl))) as resultados 
					from tbl_resultado_validacion_especifica tbl
					where tbl.resultado_ejecucion <> 1000
				) tbl_resultado
			);		
			p_resultado_registro:=sre_recaudaciones.sre_reg_errores_facturacion_manual_etapa_2(p_json, p_json_errores,p_recepcion_id); --CREAR MAS p_recepcion_id		
			v_resultado_actualizacion_estado:= (select sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_facturacion_manual(p_tipo_documento_sector_id, p_recepcion_id, 'RECEPCIONADO CON ERRORES'));	
		end if;		
		--Nota: Realiza rollback a toda la transaccion en caso de generarse alguna excepcion.
		if(p_resultado_registro<0 or v_resultado_actualizacion_estado<0 or p_resultado_observacion <0) then
			raise exception '[Rollback] fallo e registro en una de las tablas facturacion manual';	
		end if;		
	end if;			
	if (p_resultado_registro = 1) then
		return '1';
	else
		return '0';
	end if;	  		
	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_manual_validar_factura_desarrollo'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_manual_validar_recepcion_desarrollo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
/**************************************************************************************************************************************************
FUNCIONALIDAD : Llama a la funcion de validacion, en caso de pasar la validacion se registra la recepcion en la tabla correspondiente.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON 
PARAMETROS SALIDA
Texto indicando el id de recepcion, o la cadena de errores si existe y en caso de fallo -1
SUBSISTEMA : Facturación
FECHA CREACION : 28/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : <autor>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare p_json json;
p_resultado_registro smallint := 0;
p_json_errores json;
v_resultado varchar := 'errores:0';
v_resultado_ejecucion varchar := '0';
begin


p_json := cast(p_json_varchar as json);
drop table
	if exists tbl_resultado_validacion_recepcion;
create temp table
	tbl_resultado_validacion_recepcion (nombre_funcion_validacion varchar,
	resultado_ejecucion smallint);
insert
	into
		tbl_resultado_validacion_recepcion (nombre_funcion_validacion,	resultado_ejecucion) (
			select nombre_funcion_validacion,
			resultado_ejecucion	from	sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_manual(p_json,1));
 if (
	select count(*) from tbl_resultado_validacion_recepcion)<> 0 then 
	if (	select count(*) from	tbl_resultado_validacion_recepcion 
	where resultado_ejecucion <> 1000) = 0 then
-- =0 para validos	
--registra validos


 p_resultado_registro := sre_recaudaciones.sre_fac_reg_factura_manual_recepcion_etapa_1(p_json,'1');--funcion creada							
 v_resultado := 'idRecepcion:' || cast(p_resultado_registro as varchar);
 v_resultado_ejecucion := '1';

v_resultado := 'errores:' ||(
	select array_to_string (array(select resultado_ejecucion
	from tbl_resultado_validacion_recepcion
	where resultado_ejecucion <> 1000),	','));

end if;
end if;
return v_resultado;
exception
when others then return (
	select sre_recaudaciones.sre_fac_reg_registrar_excepcion(sqlstate,sqlerrm,'sre_fac_val_facturacion_manual_validar_recepcion_desarrollo'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validacion_anulacion_contingencia(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La siguiente funcion realiza la validacion de la anulacion del documento fiscal, tomando en cuenta los estados de las siguientes tablas:
                    sre_fac_recepciones_anulaciones y las diferentes facturas de ventas. Si todo es correcto actualiza los estados de 
                    ambas tablas.
PARAMETROS INGRESO:
                     Parametros JSON de entrada de datos
PARAMETROS SALIDA:
                     Objeto JSON con los siguientes parametros de salida: codigorecepcionanulacion, codigoestado y listacodigoserror
SUBSISTEMA : Facturación
FECHA CREACION : <10/04/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Modificación del estado de respuesta para el servicio SOAP.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<01/07/2016>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Asignacion valor cufp -> cuf, para el tipo documento sector 28 - prevalorada
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 29/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
   v_json json;
   v_resultado_registro smallint:=0;
   v_codigo_exito smallint:=0;
   v_estado_factura_anulado_no_confirmado smallint := 0;
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;    
   v_resultado_ejecucion varchar := '0';
   v_resultado_defecto varchar;
   p_recepcion_anulacion_id integer; 
   p_tipo_documento_sector_id integer;       
   p_cuf varchar;
begin
     v_json:= cast(p_json_varchar as json);
     v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));
    v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
    v_estado_factura_anulado_no_confirmado := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_rechazada');
    p_recepcion_anulacion_id :=(select cast(v_json->'xmlRecepcionGenerica'->>'p_recepcion_anulacion_id' as integer)); 
    p_tipo_documento_sector_id :=(select cast(v_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));       
    v_resultado_defecto :='{"codigorecepcionanulacion": 0, "codigoestado":' ||v_estado_factura_anulado_no_confirmado||', "listacodigoserror": []}';
    p_cuf :=(select cast(v_json->'xmlRecepcionGenerica'->>'p_cuf' as varchar));
    
    if(p_tipo_documento_sector_id = 28)then -- valida si es prevalorada
          p_cuf :=(v_json->'xmlRecepcionGenerica'->>'p_cufp');        
     end if;
     
     drop table if exists tbl_resultado_validacion_recepcion_anulacion;         
     create temp table tbl_resultado_validacion_recepcion_anulacion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);    

     insert into tbl_resultado_validacion_recepcion_anulacion (nombre_funcion_validacion,resultado_ejecucion)
    (select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(v_json, 5));
     
    if (select count(*) from tbl_resultado_validacion_recepcion_anulacion)<>0 then
          if (select count(*) from tbl_resultado_validacion_recepcion_anulacion where resultado_ejecucion<>v_codigo_exito)=0 then -- =0 para validos   
                --registra validos
          v_resultado_registro:=sre_recaudaciones.sre_fac_val_anulacion_factura_contingencia(p_tipo_documento_sector_id,p_cuf,p_recepcion_anulacion_id);
          
                if(v_resultado_registro=v_codigo_exito) then
                v_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_actualizar_anulacion_contingencia(v_json);
                v_resultado_defecto:=sre_recaudaciones.sre_fac_ope_respuesta_validacion_anulacion(v_resultado_registro,p_recepcion_anulacion_id,v_resultado_defecto);
                     v_resultado_ejecucion := '1';
                else
                     v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror','['|| v_resultado_registro || ']'));                     
                end if;
          else
                v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror','['|| (select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion_anulacion where resultado_ejecucion<>v_codigo_exito),',') || ']')));
          end if;        
          
     end if;       
     
     v_resultado_defecto:= replace(v_resultado_defecto, '"[', '[');
     v_resultado_defecto:= replace(v_resultado_defecto, ']"', ']');
     return v_resultado_defecto;             
          
     EXCEPTION
            when others
              then
                    perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validacion_anulacion_contingencia');
                     return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_estado_recepcion_anularion_incorrecta'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validacion_anulacion_desarrollo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : La siguiente funcion realiza la validacion de la anulacion del documento fiscal, tomando en cuenta los estados de las siguientes tablas:
                    sre_fac_recepciones_anulaciones y las diferentes facturas de ventas. Si todo es correcto actualiza los estados de 
                    ambas tablas.
PARAMETROS INGRESO:
                     Parametros JSON de entrada de datos
PARAMETROS SALIDA:
                     Objeto JSON con los siguientes parametros de salida: codigorecepcionanulacion, codigoestado y listacodigoserror
SUBSISTEMA : Facturación
FECHA CREACION : <10/04/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Modificación del estado de respuesta para el servicio SOAP.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<01/07/2016>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES: Asignacion valor cufp -> cuf, para el tipo documento sector 28 - prevalorada
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION : 29/10/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell - Edwin Coro
VERSION : 1.0
**************************************************************************************************************************************************/
declare
   v_json json;
   v_resultado_registro smallint:=0;
   v_codigo_exito smallint:=0;
   v_estado_factura_anulado_no_confirmado smallint := 0;
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;    
   v_resultado_ejecucion varchar := '0';
   v_resultado_defecto varchar;
   p_recepcion_anulacion_id integer; 
   p_tipo_documento_sector_id integer;       
   p_cuf varchar;
begin
     v_json:= cast(p_json_varchar as json);
     v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));
    v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
    v_estado_factura_anulado_no_confirmado := sre_recaudaciones.sre_fac_par_estado('estado_recepcion_anulacion_rechazada');
    p_recepcion_anulacion_id :=(select cast(v_json->'xmlRecepcionGenerica'->>'p_recepcion_anulacion_id' as integer)); 
    p_tipo_documento_sector_id :=(select cast(v_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));       
    v_resultado_defecto :='{"codigorecepcionanulacion": 0, "codigoestado":' ||v_estado_factura_anulado_no_confirmado||', "listacodigoserror": []}';
    p_cuf :=(select cast(v_json->'xmlRecepcionGenerica'->>'p_cuf' as varchar));
    
    if(p_tipo_documento_sector_id = 28)then -- valida si es prevalorada
          p_cuf :=(v_json->'xmlRecepcionGenerica'->>'p_cufp');        
     end if;
     
     drop table if exists tbl_resultado_validacion_recepcion_anulacion;         
     create temp table tbl_resultado_validacion_recepcion_anulacion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);    

     insert into tbl_resultado_validacion_recepcion_anulacion (nombre_funcion_validacion,resultado_ejecucion)
    (select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(v_json, 5));
     
    if (select count(*) from tbl_resultado_validacion_recepcion_anulacion)<>0 then
          if (select count(*) from tbl_resultado_validacion_recepcion_anulacion where resultado_ejecucion<>v_codigo_exito)=0 then -- =0 para validos   
                --registra validos
          v_resultado_registro:=sre_recaudaciones.sre_fac_val_anulacion_factura(p_tipo_documento_sector_id,p_cuf,p_recepcion_anulacion_id);
          
                if(v_resultado_registro=v_codigo_exito) then
                v_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_actualizar_anulacion(v_json);
                v_resultado_defecto:=sre_recaudaciones.sre_fac_ope_respuesta_validacion_anulacion(v_resultado_registro,p_recepcion_anulacion_id,v_resultado_defecto);
                     v_resultado_ejecucion := '1';
                else
                     v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror','['|| v_resultado_registro || ']'));                     
                end if;
          else
                v_resultado_defecto :=(cast(v_resultado_defecto as jsonb) || jsonb_build_object('listacodigoserror','['|| (select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion_anulacion where resultado_ejecucion<>v_codigo_exito),',') || ']')));
          end if;        

     end if;       
     
     v_resultado_defecto:= replace(v_resultado_defecto, '"[', '[');
     v_resultado_defecto:= replace(v_resultado_defecto, ']"', ']');
     return v_resultado_defecto;             
          
     EXCEPTION
            when others
              then
                    perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validacion_anulacion_desarrollo');
                     return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_estado_recepcion_anularion_incorrecta'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validacion_recepcion(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_tipo_documento_sector_id integer:=0;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='0';
   
   v_total smallint:=0;
   v_resultado_ejecucion varchar := '0';
   
   v_resultado_defecto varchar:='0';
begin
	p_json:= cast(p_json_varchar as json);
	
	p_tipo_documento_sector_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
	v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));

	drop table if exists tbl_resultado_validacion_recepcion_indpaq;		 
	create temp table tbl_resultado_validacion_recepcion_indpaq(nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_recepcion_indpaq (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 6));			
	
	if (select count(*) from tbl_resultado_validacion_recepcion_indpaq)<>0 then
		if (select count(*) from tbl_resultado_validacion_recepcion_indpaq where resultado_ejecucion<>1000)=0 then -- =0 para validos	
			--registra validos
			v_resultado:= '1000';
			v_resultado_ejecucion := '1';
		else
						
			v_resultado:=(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion_indpaq where resultado_ejecucion<>1000),','));			
		end if;		
		
	 end if;		

	return coalesce(v_resultado, v_resultado_defecto);			
		
	EXCEPTION
		  when others
		    then
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validacion_recepcion');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validacion_recepcion'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validacion_recepcion_compra(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_tipo_documento_sector_id integer:=0;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='0';
   
   v_total smallint:=0;
   v_resultado_ejecucion varchar := '0';
   
   v_resultado_defecto varchar:='0';
begin
	p_json:= cast(p_json_varchar as json);
	
	p_tipo_documento_sector_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as integer));	
	v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));

	drop table if exists tbl_resultado_validacion_recepcion_indpaq;		 
	create temp table tbl_resultado_validacion_recepcion_indpaq(nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_recepcion_indpaq (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 6));			
	
	if (select count(*) from tbl_resultado_validacion_recepcion_indpaq)<>0 then
		if (select count(*) from tbl_resultado_validacion_recepcion_indpaq where resultado_ejecucion<>1000)=0 then -- =0 para validos	
			--registra validos
			v_resultado:= '1000';
			v_resultado_ejecucion := '1';
		else
						
			v_resultado:=(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion_indpaq where resultado_ejecucion<>1000),','));			
		end if;
		
		--Registro de pruebas automaticas
		p_resultado_registro:=sre_recaudaciones.sre_fac_reg_pruebas_automaticas('1', v_resultado_ejecucion, v_sistema_id);
		
	 end if;		

	return coalesce(v_resultado, v_resultado_defecto);			
		
	EXCEPTION
		  when others
		    then
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validacion_recepcion');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validacion_recepcion'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_anulacion_contingencia(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_json json;
   p_resultado_registro bigint:=0;
   v_resultado_registro smallint:=0;
   v_codigo_exito smallint:=0;
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';
   v_resultado_ejecucion varchar := '0';
begin
	v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	v_json:= cast(p_json_varchar as json);	
	v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));

	drop table if exists tbl_resultado_anulacion;		 
	create temp table tbl_resultado_anulacion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	insert into tbl_resultado_anulacion (nombre_funcion_validacion,resultado_ejecucion)
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(v_json, 4));
	if (select count(*) from tbl_resultado_anulacion)<>0 then
		if (select count(*) from tbl_resultado_anulacion where resultado_ejecucion<>v_codigo_exito)=0 then -- =0 para validos	
			--registra validos		
			v_resultado_registro:=sre_recaudaciones.sre_fac_val_factura_contingencia(v_json);
			if(v_resultado_registro=v_codigo_exito) then			
				p_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_recepcion_anulacion_contingencia(v_json);			
				v_resultado:= 'idRecepcion:'||cast(p_resultado_registro as varchar);
				v_resultado_ejecucion := '1';
			else
				v_resultado:='errores:'||v_resultado_registro;
			end if;
		else
			v_resultado:='errores:'||(select array_to_string (array(select resultado_ejecucion from tbl_resultado_anulacion where resultado_ejecucion<>v_codigo_exito),','));
		
		end if;
		
		
	 end if;		
	
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_anulacion_contingencia');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_anulacion_desarrollo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   v_json json;
   p_resultado_registro bigint:=0;
   v_resultado_registro smallint:=0;
   v_codigo_exito smallint:=0;
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';
   v_resultado_ejecucion varchar := '0';
begin
	v_codigo_exito :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	v_json:= cast(p_json_varchar as json);	
	v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(v_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));

	drop table if exists tbl_resultado_anulacion;		 
	create temp table tbl_resultado_anulacion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);
	
	insert into tbl_resultado_anulacion (nombre_funcion_validacion,resultado_ejecucion)
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(v_json, 4));
	if (select count(*) from tbl_resultado_anulacion)<>0 then
		if (select count(*) from tbl_resultado_anulacion where resultado_ejecucion<>v_codigo_exito)=0 then -- =0 para validos	
			--registra validos		
			v_resultado_registro:=sre_recaudaciones.sre_fac_val_factura(v_json);
			if(v_resultado_registro=v_codigo_exito) then			
				p_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_recepcion_anulacion(v_json);			
				v_resultado:= 'idRecepcion:'||cast(p_resultado_registro as varchar);
				v_resultado_ejecucion := '1';
			else
				v_resultado:='errores:'||v_resultado_registro;
			end if;
		else
						
			v_resultado:='errores:'||(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_anulacion where resultado_ejecucion<>v_codigo_exito),','));
		end if;
				
	 end if;		
	
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_anulacion_desarrollo');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_factura_anulada'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_factura_compra(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   p_resultado_observacion smallint:=0;
begin
	p_json:=p_json_varchar::json;
	
	-- Nota: Crea una tabla temporal para almacenar el resultado de la validacion de la factura. 
	drop table if exists tbl_resultado_validacion_especifica;		 
	create temp table tbl_resultado_validacion_especifica (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_especifica (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_efectuar_validacion_compra_especifica(p_json));		
		
	if (select count(*) from tbl_resultado_validacion_especifica)<>0 then
	-- Nota: Cuando el conteo de los resultados es igual a 0 significa que no hay errores de validacion en la factura.
		if (select count(*) from tbl_resultado_validacion_especifica where resultado_ejecucion<>1000)=0 then  
			--Nota: Registra el resultado en las tablas de validos (Archivos XML Validos, Recepciones Correctas, Ventas, Detalles Ventas).
			p_resultado_registro:= sre_recaudaciones.sre_reg_compras_validas(p_json);		

		else
			--Nota: Registra el resultado en las tablas de no validos (Archivos XML Invalidos, Recepciones Errores, Recepciones Detalles) 

			p_json_errores:=(
				select row_to_json(tbl_resultado)
				from (
					select array_to_json(array_agg(row_to_json(tbl))) as resultados 
					from tbl_resultado_validacion_especifica tbl
				) tbl_resultado
			);
			
			p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_erroneas(p_json, p_json_errores);

			
		end if;
					
		if(p_resultado_registro<0) then
			raise exception '[Rollback] fallo e registro en una de las tablas';			
		end if;		
	end if;
	
	--Nota: Registra en la tabla de LOGS de la Etapa 2.
	perform sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_2(p_json, p_json_errores);
			
	if (p_resultado_registro = 1) then
		return '1';
	else
		return p_resultado_registro;
	end if;	  
		
	EXCEPTION
		  when others
		    then		    
			perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_factura_desarrollo');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_factura_desarrollo'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_factura_contingencia(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   p_resultado_observacion smallint:=0;
begin
	p_json:=p_json_varchar::json;
	
	-- Nota: Crea una tabla temporal para almacenar el resultado de la validacion de la factura. 
	drop table if exists tbl_resultado_validacion_especifica;		 
	create temp table tbl_resultado_validacion_especifica (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_especifica (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_efectuar_validacion_especifica(p_json));
		
	if (select count(*) from tbl_resultado_validacion_especifica)<>0 then
	-- Nota: Cuando el conteo de los resultados es igual a 0 significa que no hay errores de validacion en la factura.
		if (select count(*) from tbl_resultado_validacion_especifica where resultado_ejecucion<>1000)=0 then  
			--Nota: Registra el resultado en las tablas de validos (Archivos XML Validos, Recepciones Correctas, Ventas, Detalles Ventas).
			p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_validas_contingencia(p_json);--contingencia
		else
			--Nota: Registra el resultado en las tablas de no validos (Archivos XML Invalidos, Recepciones Errores, Recepciones Detalles) 
			--y retorna una lista de codigos de erroes concatenado por comas.
			
			p_json_errores:=(
				select row_to_json(tbl_resultado)
				from (
					select array_to_json(array_agg(row_to_json(tbl))) as resultados 
					from tbl_resultado_validacion_especifica tbl
					where tbl.resultado_ejecucion <> 1000
				) tbl_resultado
			);
		
			
			p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_erroneas(p_json, p_json_errores);
			
		end if;
		
		--Nota: Realiza rollback a toda la transaccion en caso de generarse alguna excepcion.
		if(p_resultado_registro<0) then
			raise exception '[Rollback] fallo e registro en una de las tablas';			
		end if;
		
	end if;
			
	if (p_resultado_registro = 1) then
		return '1';
	else
		return '0';
	end if;	  
		
	EXCEPTION
		  when others
		    then
			perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_factura_contingencia');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_factura_contingencia'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_factura_desarrollo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   p_resultado_observacion smallint:=0;
begin
     p_json:=p_json_varchar::json;
     
     -- Nota: Crea una tabla temporal para almacenar el resultado de la validacion de la factura. 
     drop table if exists tbl_resultado_validacion_especifica;        
     create temp table tbl_resultado_validacion_especifica (nombre_funcion_validacion varchar, resultado_ejecucion smallint);    
     
     insert into tbl_resultado_validacion_especifica (nombre_funcion_validacion,resultado_ejecucion)   
     (select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_efectuar_validacion_especifica(p_json));          
          
     if (select count(*) from tbl_resultado_validacion_especifica)<>0 then
     -- Nota: Cuando el conteo de los resultados es igual a 0 significa que no hay errores de validacion en la factura.
          if (select count(*) from tbl_resultado_validacion_especifica where resultado_ejecucion<>1000)=0 then  
                --Nota: Registra el resultado en las tablas de validos (Archivos XML Validos, Recepciones Correctas, Ventas, Detalles Ventas).
          p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_validas(p_json);                
                
                p_json_errores:=(
                     select row_to_json(tbl_resultado)
                     from (
                          select array_to_json(array_agg(row_to_json(tbl))) as resultados 
                          from tbl_resultado_validacion_especifica tbl
                     ) tbl_resultado
                );
                
          else
                --Nota: Registra el resultado en las tablas de no validos (Archivos XML Invalidos, Recepciones Errores, Recepciones Detalles) 
                --y retorna una lista de codigos de erroes concatenado por comas.               
                p_json_errores:=(
                     select row_to_json(tbl_resultado)
                     from (
                          select array_to_json(array_agg(row_to_json(tbl))) as resultados 
                          from tbl_resultado_validacion_especifica tbl
                     ) tbl_resultado
                );
                
          p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_erroneas(p_json, p_json_errores);

                
          end if;
          
          --Nota: Realiza rollback a toda la transaccion en caso de generarse alguna excepcion.
          
          
          if(p_resultado_registro<0) then
                raise exception '[Rollback] fallo e registro en una de las tablas';             
          end if;        
     end if;
     
     --Nota: Registra en la tabla de LOGS de la Etapa 2.
     perform sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_2(p_json, p_json_errores);
                
     if (p_resultado_registro = 1) then
          return '1';
     else
          return '0';
     end if;     
          
     drop table if exists tbl_resultado_validacion_especifica;
     
     EXCEPTION
            when others
              then           
                perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_factura_desarrollo');
                return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_factura_desarrollo'));

end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_factura_masivo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;
   p_resultado_observacion smallint:=0;
begin
       p_json:= cast(p_json_varchar as json);
       
       -- Nota: Crea una tabla temporal para almacenar el resultado de la validacion de la factura. 
       drop table if exists tbl_resultado_validacion_especifica;        
       create temp table tbl_resultado_validacion_especifica (nombre_funcion_validacion varchar, resultado_ejecucion smallint);  
       
       insert into tbl_resultado_validacion_especifica (nombre_funcion_validacion,resultado_ejecucion)     
       (select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_efectuar_validacion_especifica(p_json));
             
       if (select count(*) from tbl_resultado_validacion_especifica)<>0 then
       -- Nota: Cuando el conteo de los resultados es igual a 0 significa que no hay errores de validacion en la factura.
             if (select count(*) from tbl_resultado_validacion_especifica where resultado_ejecucion<>1000)=0 then  
                    --Nota: Registra el resultado en las tablas de validos (Archivos XML Validos, Recepciones Correctas, Ventas, Detalles Ventas).
                    p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_validas(p_json);
                    --p_resultado_observacion:=sre_recaudaciones.sre_fac_servicio_observados(p_json, 3); --add vcg 20190605
             else
                    --Nota: Registra el resultado en las tablas de no validos (Archivos XML Invalidos, Recepciones Errores, Recepciones Detalles) 
                    --y retorna una lista de codigos de erroes concatenado por comas.
                    
                    p_json_errores:=(
                           select row_to_json(tbl_resultado)
                           from (
                                  select array_to_json(array_agg(row_to_json(tbl))) as resultados 
                                  from tbl_resultado_validacion_especifica tbl
                                  where tbl.resultado_ejecucion <> 1000
                           ) tbl_resultado
                    );
             
                    
                    p_resultado_registro:=sre_recaudaciones.sre_reg_factura_nota_erroneas(p_json, p_json_errores);
                    
             end if;
             
             --Nota: Realiza rollback a toda la transaccion en caso de generarse alguna excepcion.
             if(p_resultado_registro<0) then
                    raise exception '[Rollback] fallo e registro en una de las tablas';                  
             end if;
             
       end if;
                    
       if (p_resultado_registro = 1) then
             return '1';
       else
             return '0';
       end if;        
             
       EXCEPTION
               when others
                 then
                    perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_factura_desarrollo');
                    return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_factura_desarrollo'));                  
       
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_compra(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el rollback, por solo afectar auna tabla y el rollback automaticamente se aplica si hay algun problema.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<14/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro bigint:=0;
   p_json_errores json;   
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';   
   v_total smallint:=0;
   v_resultado_ejecucion varchar := '0';
begin
	p_json:= p_json_varchar::json;
			
	drop table if exists tbl_resultado_validacion_recepcion;		 
	create temp table tbl_resultado_validacion_recepcion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_recepcion (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal_compra(p_json, 1));	

	if (select count(*) from tbl_resultado_validacion_recepcion)<>0 then
		if (select count(*) from tbl_resultado_validacion_recepcion where resultado_ejecucion <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))=0 then -- =0 para validos	
			--registra validos
			p_resultado_registro:=sre_recaudaciones.sre_fac_reg_compra_recepcion_etapa_1(p_json,'1'); 
			
			v_resultado:= 'idRecepcion:'||p_resultado_registro::varchar;
			v_resultado_ejecucion := '1';
		else
			v_resultado:= 'errores:'||(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion where resultado_ejecucion <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')),','));
			
		end if;
		
	end if;
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_recepcion_compra');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_recepcion_compra'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_contingencia(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Funcion que permite llamar a la validacion de los campos de recepcion. --- FACTURA DE CONTINGENCIA ---
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <07/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el rollback, por solo afectar auna tabla y el rollback automaticamente se aplica si hay algun problema.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<14/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
   p_json json;
   p_resultado_registro smallint:=0;
   p_json_errores json;   
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';   
   v_total smallint:=0;
   v_resultado_ejecucion varchar := '0';
   
   --parametros para la contingencia
   v_resultado_fecha_recepcion smallint := 0;  
   v_nombre_funcion varchar :='sre_fac_val_fecha_envio_factura_cotingencia';
begin
	p_json:= p_json_varchar::json;

	drop table if exists tbl_resultado_validacion_recepcion;		 
	create temp table tbl_resultado_validacion_recepcion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_recepcion (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 1));			
	
	--NOTA: Agregando validacion para controlar la recepcion de facturas de contingencia (24 horas) add rgt  20190613
	v_resultado_fecha_recepcion := (sre_recaudaciones.sre_fac_val_fecha_envio_factura_cotingencia(p_json));
	
	if (select count(*) from tbl_resultado_validacion_recepcion)<>0 then
		if (select count(*) from tbl_resultado_validacion_recepcion where resultado_ejecucion <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))=0 then -- =0 para validos	
			
			--Llamar a la funcion que valida, las 24 horas
				
		
			--registra validos
			--add 20190607
			p_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1_contingencia(p_json,'1'); 
			
			v_resultado:= 'idRecepcion:'||p_resultado_registro::varchar;
			v_resultado_ejecucion := '1';
		else
						
			v_resultado:='errores:'||(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion where resultado_ejecucion <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')),','));
			
		end if;
		
	end if;
	
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
		      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_recepcion_contingencia'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_desarrollo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el rollback, por solo afectar auna tabla y el rollback automaticamente se aplica si hay algun problema.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<14/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro bigint:=0;
   p_json_errores json;   
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';   
   v_total smallint:=0;
   v_resultado_ejecucion varchar := '0';
begin
	p_json:= p_json_varchar::json;
	
	drop table if exists tbl_resultado_validacion_recepcion;		 
	create temp table tbl_resultado_validacion_recepcion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_recepcion (nombre_funcion_validacion,resultado_ejecucion)	
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 1));			
	
	if (select count(*) from tbl_resultado_validacion_recepcion)<>0 then
		if (select count(*) from tbl_resultado_validacion_recepcion where resultado_ejecucion <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'))=0 then -- =0 para validos	
			--registra validos
			--Mod:20190328 vcg
			p_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1(p_json,'1'); 
			
			v_resultado:= 'idRecepcion:'||p_resultado_registro::varchar;
			v_resultado_ejecucion := '1';
		else
						
			v_resultado:='errores:'||(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion where resultado_ejecucion <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')),','));
			
		end if;
		
		--Nota: Registra en la tabla de LOGS de la Etapa 8.
		p_json_errores:=(
				select row_to_json(tbl_resultado)
				from (
					select array_to_json(array_agg(row_to_json(tbl))) as resultados 
					from tbl_resultado_validacion_recepcion tbl
				) tbl_resultado
			);
			
		perform sre_recaudaciones.sre_fac_pru_captura_log_casos_prueba_etapa_8(p_json, p_json_errores);
	end if;
	
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
		     	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_recepcion_desarrollo');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_recepcion_desarrollo'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_facturacion_validar_recepcion_masivo(p_json_varchar character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se quito el rollback, por solo afectar auna tabla y el rollback automaticamente se aplica si hay algun problema.
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<14/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   p_json json;
   p_resultado_registro bigint:=0;
   p_json_errores json;   
   --variables para registro de pruebas automaticas
   v_sistema_id bigint:=0;
   v_resultado varchar:='errores:0';   
   v_total smallint:=0;
   v_resultado_ejecucion varchar := '0';
begin
	p_json:= cast(p_json_varchar as json);
		
	v_sistema_id:= sre_recaudaciones.sre_fac_ope_obtener_sistema_id((select cast(p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema' as varchar)));

	drop table if exists tbl_resultado_validacion_recepcion;		 
	create temp table tbl_resultado_validacion_recepcion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	
	
	insert into tbl_resultado_validacion_recepcion (nombre_funcion_validacion,resultado_ejecucion)		
	(select nombre_funcion_validacion,resultado_ejecucion from sre_recaudaciones.sre_fac_ope_validar_documento_fiscal(p_json, 1));
	
	if (select count(*) from tbl_resultado_validacion_recepcion)<>0 then
		if (select count(*) from tbl_resultado_validacion_recepcion where resultado_ejecucion<>1000)=0 then -- =0 para validos	
			--registra validos
			--Mod:20190328 vcg
			p_resultado_registro:=sre_recaudaciones.sre_fac_reg_factura_recepcion_etapa_1(p_json,'1'); 
			
			v_resultado:= 'idRecepcion:'||cast(p_resultado_registro as varchar);
			v_resultado_ejecucion := '1';
		else
						
			v_resultado:='errores:'||(select array_to_string (array(select resultado_ejecucion  from tbl_resultado_validacion_recepcion where resultado_ejecucion<>1000),','));
			
		end if;		
		
	end if;
	
	return v_resultado;			
		
	EXCEPTION
		  when others
		    then
				perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_facturacion_validar_recepcion_masivo');
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_facturacion_validar_recepcion_masivo'));		    
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_documento_mas(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint :=1000;
    
begin
		
  	return v_resultado;

  EXCEPTION
  when others
    then
	 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_documento_mas');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_documento_mas'));--TODO: Revisar la respuesta correcta luego de implementar el contenido
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_emision(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se modifico la validación de la fecha de emisión de acuerdo a los eventos significativos
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<16/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

  v_resultado smallint :=0;
  
begin
	
  v_resultado:=sre_recaudaciones.sre_fac_ope_tolerancia_fecha_emision(p_json);

  return v_resultado;

  EXCEPTION
  when others
    then	 
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_emision');
      return (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_emision_factura_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica que la fecha emision no exceda la fecha limite de emision del preregistro.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion, o codigo de error asociado
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
 p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
 p_fecha_envio timestamp:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));    
  p_caed varchar:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed' as varchar)); 
  p_sucursal_contribuyente_id bigint:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoSucursal' as bigint));	
  p_tipo_documento_fiscal_id integer := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id' as Integer));
  p_tipo_documento_sector_id integer := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as Integer));
  p_nit_emisor bigint:=(p_json->'xmlRecepcionGenerica'->>'p_nit_emisor');
  
 v_resultado smallint :=1000;     
p_fecha_emision timestamp;
begin
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 		
         if(p_fecha_emision<=p_fecha_envio)	then 
		 v_resultado := coalesce((select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                           from sre_recaudaciones.sre_fman_documentos_fiscales_preregistros as a
                           where a.caed = p_caed
                           and p_fecha_emision <= a.fecha_limite_emision
                           limit 1)
                           ,
                           (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'))
                         );				
	else
		 v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));
         end if;	
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_emision_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_envio_anulados_facturacion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica que la fecha emision anulacion no exceda la fecha limite de envio de facturas anuladas segun normativa
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion (dato correcto no excede la fecha), o codigo de error asociado
SUBSISTEMA : Facturación
FECHA CREACION : 16/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
 
  p_fecha_anulacion_emision timestamp without time zone:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion' as timestamp));  
  p_fecha_envio timestamp without time zone:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));  	
  v_fecha_limite_anulacion_normativa timestamp;
 v_resultado smallint :=(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));     
p_fecha_emision timestamp;
begin
	v_fecha_limite_anulacion_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_anulados_fact_manual(p_fecha_anulacion_emision));	
         if(p_fecha_envio<=v_fecha_limite_anulacion_normativa)	then 
		 v_resultado := (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));				
	else
		 v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_envio_anulados_facturacion_manual'));
         end if;	
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_envio_anulados_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_envio_factura_cotingencia(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <11/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Se agrego la opcion 1 debido a que el servicio no debe enviar el ID del evento_significativo>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/06/2019>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_codigo_sistema varchar := (p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema');
	p_sucursal_id    integer := (p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');
	p_punto_venta_id integer := (p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id');
	p_cuis           varchar := (p_json->'xmlRecepcionGenerica'->>'p_cuis');
	
	p_nit            bigint  := (p_json->'xmlRecepcionGenerica'->>'p_nit');
	p_fecha_envio    timestamp := (p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	
	--obtener la recepcion id del evento // add en DTO
	p_evento_significativo_id bigint := (p_json->'xmlRecepcionGenerica'->>'p_evento_significativo_id');
	
	v_nro_registros_fecha_evento integer := 0;
	v_contribuyente_id       bigint := 0;
	v_sistema_id             bigint := 0;
	v_fecha_limite_emision   timestamp;
	v_resultado              smallint := 505;
	v_resultado_rango_tiempo smallint;
	v_resultado_evento       smallint;

begin
	
	--0 si no se encuentra en el rango  //falta un codigo de error para la validacion de evento significativo
	
	v_contribuyente_id := (sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit));
	v_sistema_id := (sre_recaudaciones.sre_fac_ope_obtener_sistema_id(p_codigo_sistema));
	
	--Nota: Para la recepcion de facturas de contingencia los motivos del evento significativo son:
	--      972 Corte de energia
	--      974 virus o falla de software
	--      975 cambio de infraestructura
		
	--OPCION 1
	--========
	--NOTA: Consulta sin fecha_evento_id, solo agrupando la fecha fin de evento
	
	--NOTA: Se obtiene las fechas fin  de evento significativo del dia de ayer y hoy	
	drop table if exists fecha_evento; 
	create temp table fecha_evento as
	(select fecha_inicio_evento as fecha_inicio,fecha_fin_evento as fecha_fin, (fecha_fin_evento + interval '24 hours') as fecha_limite
	from sre_recaudaciones.sre_fac_eventos_significativos 
	where sistema_id = v_sistema_id and
		  cuis = p_cuis and 
		  sucursal_id = p_sucursal_id and
	      contribuyente_id = v_contribuyente_id and
	      motivo_evento_id in (972, 974, 975) and 
	      cast (fecha_fin_evento as date) between (cast (now() as date) - interval '1 day') and (cast (now() as date)));
         
  	v_nro_registros_fecha_evento := (select count(*) from fecha_evento);
  	
  	
  	if (v_nro_registros_fecha_evento > 0 )then
  	
  		v_resultado := coalesce (
				  					(
								  		select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
								  		from fecha_evento as a
								  		where p_fecha_envio between a.fecha_fin and a.fecha_limite
								  		limit 1
							  	    ), 505
							  	);
  	end if;
	
	--OPCION 2
	--========
	
	--NOTA: Consulta con el evento_significativo_id //enviado por el contribuyente
		
	return v_resultado;
	
	EXCEPTION
  	when others
    then
         return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_envio_factura_cotingencia'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_envio_factura_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica que la fecha de envio sea mayor a la fecha emision.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion, o codigo de error asociado
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
 p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
 p_fecha_envio timestamp:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));    
 v_resultado smallint :=1000;     
 v_fecha_limite_normativa timestamp;
 p_fecha_emision timestamp;
begin
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 
	if(p_fecha_envio>=p_fecha_emision)	then 
		v_resultado:= (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));
		else
		v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_emision'));	
         end if;
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_envio_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_envio_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el p_fecha_envio, se encuentra entre un minuto mmas o 2 minutos menos de la hora actual.
PARAMETROS INGRESO
    p_json: Datos de recepcion en formato json.
PARAMETROS SALIDA
    v_resultado:  Resultado de tipo smallint al cual se asigna el valor de 1000 caso de exito y 85 en caso de no existir un resultado
SUBSISTEMA : Facturación
FECHA CREACION : 29/03/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procedió a quitar la fecha de intervalo de 2 minutos a 1 minuto 
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :<26/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/

declare
  p_fecha_envio timestamp; 
  v_resultado smallint :=0;
  
  --Tolerancia 
  v_tolerancia_minutos_minima smallint:= 0;
  v_tolerancia_minutos_maxima smallint:= 0;
begin
  v_tolerancia_minutos_minima := sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_envio_recepcion_minuto_anterior');
  v_tolerancia_minutos_maxima := sre_recaudaciones.sre_fac_par_fecha_hora('tolerancia_fecha_envio_recepcion_minuto_posterior');
  
  p_fecha_envio:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio'); 
  v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_envio'));
--85  fecha de envio no valida

  if(p_fecha_envio::date = now()::date) then         
          if (p_fecha_envio >= (now() - (interval '1 minute' * v_tolerancia_minutos_minima)) and  p_fecha_envio <= (now()::timestamp + (interval '1 minute' * v_tolerancia_minutos_maxima))) 
              then
              v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
           end if;
  end if;
    
  return v_resultado;
  EXCEPTION
  when others
    then
              perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_envio_recepcion');
              return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_envio'));     
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_evento(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
       p_fecha_emision date;
       p_fecha_evento date;      
       v_resultado smallint := 0;
begin
       p_fecha_emision := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as date));
       p_fecha_evento := (select cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEvento' as date));      
       v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_evento'));
       -- 20190429 rgt
       -- 0, fecha evento incorrecto   
       
       if(p_fecha_evento >= p_fecha_emision)then
             v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
       end if;
       
       return v_resultado;
       
       EXCEPTION
         when others
           then
                    perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_evento');
                    return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_evento'));          
       
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_fecha_ingreso_hospedaje(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_fecha_ingreso_hospedaje timestamp ;
	p_fecha_emision timestamp ;
	v_resultado smallint := 0;
	
begin
	p_fecha_ingreso_hospedaje := (select cast( p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje' as timestamp));
	p_fecha_emision := (select cast( p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as timestamp));
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_ingreso_hospedaje'));
	-- 20190426 rgt
	-- 913 fecha ingreso hospedaje incorrecto
	
	if p_fecha_ingreso_hospedaje != null then
		if(p_fecha_ingreso_hospedaje <= p_fecha_emision)then
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		end if;
	else
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if; 
	
	
	return v_resultado;
	
	
	
	EXCEPTION
	  when others
	    then
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_ingreso_hospedaje');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_fecha_ingreso_hospedaje'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_gestion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
 
	p_gestion integer := 0;
	v_resultado smallint := 0;

begin
	p_gestion := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'gestion'  as integer)));
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_gestion'));
	-- 20190426 rgt	


	if(p_gestion = (SELECT EXTRACT(YEAR FROM now()))) then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	exception
	when others
		then
			perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_gestion');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_gestion'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_horario_mas(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare       
  v_resultado smallint;
    
  p_persona_contribuyente_id int8;
  p_fecha_envio timestamp;

  v_estado_solicitud_proceso_masivo_id int4;    
  v_estado_cronograma_proceso_masivo_id int4;
  v_estado_horario_disponible_id int4;
  
  v_hora_inicio time;
  v_hora_fin time;  
  
begin	
  --Codigo de error 127: Envio fuera de horario.
  p_fecha_envio :=now()::timestamp;
  p_persona_contribuyente_id :=1000001042;  
  
  v_estado_solicitud_proceso_masivo_id :=sre_recaudaciones.sre_fac_par_estado('estado_solicitud_proceso_masivo_aprobado'); --2682 --APROBADO
  v_estado_cronograma_proceso_masivo_id := sre_recaudaciones.sre_fac_par_estado('estado_cronograma_proceso_masivo_activo'); --2680 ACTIVO
  v_estado_horario_disponible_id :=sre_recaudaciones.sre_fac_par_estado('estado_horario_disponible_activo'); --2685 --ACTIVO
    
	select hor.hora_inicio, hor.hora_fin into v_hora_inicio, v_hora_fin 
	from sre_recaudaciones.sre_fac_solicitudes_procesos_masivos sol inner join sre_recaudaciones.sre_fac_cronogramas_procesos_masivos cro
	on sol.solicitud_proceso_masivo_id=cro.solicitud_proceso_masivo_id inner join sre_recaudaciones.sre_fac_horarios_disponibles hor
	on cro.horario_disponible_id=hor.horario_disponible_id
	where 
	sol.persona_contribuyente_id=p_persona_contribuyente_id and
	sol.estado_solicitud_proceso_masivo_id=v_estado_solicitud_proceso_masivo_id and
	sol.estado_id='AC' and
	cro.estado_cronograma_proceso_masivo_id=v_estado_cronograma_proceso_masivo_id and
	cro.estado_id='AC' and
	hor.estado_horario_disponible_id=v_estado_horario_disponible_id and
	hor.estado_id='AC'
	limit 1;
  	  
    
  case
  	when p_fecha_envio::time between v_hora_inicio and v_hora_fin then
  		return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  	else
  		return sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_horario_mas');
  end case;
    
  EXCEPTION
  when others
    then
	 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_horario_mas');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_horario_mas'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_ingreso_diferencia_cambio(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado smallint := 0;
	
	-- Se debe agregar en la factura el campo "tipo de cambio oficial"
	-- para realizar la operacion tasa de casa - tipo de cambio oficial
	p_ingreso_diferencia_cambio numeric(20,5);
	p_tipo_cambio numeric(20,5);
	p_tipo_cambio_oficial numeric(20,5);
	
begin
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_ingreso_diferencia_cambio'));
	p_ingreso_diferencia_cambio := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'ingresoDiferenciaCambio' as numeric(20,5)));
	p_tipo_cambio := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio' as numeric(20,5)));
	p_tipo_cambio_oficial := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial' as numeric(20,5)));
	if ((p_tipo_cambio - p_tipo_cambio_oficial) = p_ingreso_diferencia_cambio or (p_tipo_cambio_oficial - p_tipo_cambio ) = p_ingreso_diferencia_cambio)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then
			perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_ingreso_diferencia_cambio');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_ingreso_diferencia_cambio'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_modalidad_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_modalidad_id Integer:=0;  
  v_resultado smallint :=0;
   
begin
 	
  p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');  
  v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_modalidad'));
--7  Codigo Modalidad no valido
	
  if p_tipo_modalidad_id in (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador = 'TIPO MODALIDAD') then  
    v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end if;

  return v_resultado;
  EXCEPTION
  when others
    then
	 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_modalidad_recepcion');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_modalidad'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_modificacion_fuera_plazo_factura_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si la fecha de envio del objeto JSON enviado es mayor a la fecha limite que indica la normativa
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Codigo de exito si la fecha envio es menor a la normativa y 0 si es mayor
SUBSISTEMA : Facturación
FECHA CREACION : 16/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
	 p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));
	 p_fecha_envio timestamp;    
	 v_fecha_limite_normativa timestamp;
	 v_resultado smallint=0;
	 v_venta_id bigint;
	p_fecha_emision timestamp;
begin
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY'));
	p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));
	v_venta_id := (select sre_recaudaciones.sre_fac_ope_verificar_existe_ventas_factura_manual(p_json));			
	v_fecha_limite_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_facturacion_manual(p_fecha_emision));
	v_resultado:= (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));	
		if(v_venta_id is not null and v_venta_id>0) then 		
			if(p_fecha_envio>v_fecha_limite_normativa) then 
			v_resultado:= 0;
			end if;			
		end if;				
		
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_modificacion_fuera_plazo_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_modificacion_monto_factura_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Validacion de monto, compara el monto enviado en el objeto JSON con el monto de la venta si existe
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Codigo de exito 1000 si se cumple las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 15/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
	p_monto_total numeric(20,5); 
	p_monto_total_venta numeric(20,5); 
	p_caed varchar;
	p_numero_factura bigint; 
	p_tipo_documento_sector_id integer; 
	v_venta_id bigint;
	v_resultado smallint=0;
	v_sql varchar;
	v_fecha_limite_normativa timestamp;
	p_fecha_envio timestamp;    
	p_fecha_emision timestamp;
	p_fecha_emision_texto character varying;
begin
	p_fecha_emision_texto :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));
	p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
	p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	v_venta_id := (select sre_recaudaciones.sre_fac_ope_verificar_existe_ventas_factura_manual(p_json));	
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY'));
	v_fecha_limite_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_facturacion_manual(p_fecha_emision));
	p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));
	p_monto_total_venta:=0;

	
	v_sql:=(sre_recaudaciones.sre_fac_ope_consulta_modificacion_monto_ventas_manual(p_tipo_documento_sector_id));    
	 execute v_sql  
	    using 
	    	v_venta_id
	    into p_monto_total_venta;
	
	v_resultado :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	
	if(p_monto_total_venta>0 and p_monto_total>0) then
		if(p_monto_total<p_monto_total_venta AND p_fecha_envio > v_fecha_limite_normativa) then 
		v_resultado :=0;
		end if;
	end if; 
	
  return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_fecha_emision_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_efectivo_credito_debito(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_monto_efectivo_credito_debito numeric(20,5) := 0.0;
	p_monto_total_devuelto numeric(20,5):=0.0;
	v_porcentaje_iva numeric := 0;
	v_resultado smallint := 0;

begin
	p_monto_efectivo_credito_debito := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoEfectivoCreditoDebito' as numeric(20,5)));
	p_monto_total_devuelto := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalDevuelto' as numeric(20,5)));
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_efectivo_credito_debito'));
	v_porcentaje_iva := sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_iva_credito_debito');--- 0.13
	-- add 20190426 rgt
	-- 921, monto efectivo credito debito incorrecto
	
	
	if((p_monto_total_devuelto * v_porcentaje_iva) = p_monto_efectivo_credito_debito )then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_efectivo_credito_debito');
		return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_efectivo_credito_debito'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_ice(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare	
	
	p_alicuota_porcentual numeric(25,5) := 0;
	p_alicuota_especifica numeric(25,5) := 0;
	p_marca_ice varchar(1) := '0';
	p_subtotal numeric(20,5) := 0;
	-- NUEVO campo que se debe  añadir en la BAse de Datos como total_aplicado_alicuota
	p_cantidad_litros numeric(20,5) := 0;	
	i json;		
	v_sumatoria_monto_ice numeric(20,5) := 0;
	v_sumatoria_alicuota_especifica numeric(20,5) := 0;
	v_sumatoria_alicuota_porcentual numeric(20,5) := 0;	
	v_tolerancia_minima numeric := 1;
	v_tolerancia_maxima numeric := 2;	
	v_porcentaje_iva numeric := 0.0;
	v_resultado smallint := 0;
	p_monto_ice numeric(20,5) := 0.0;

begin
	
	v_porcentaje_iva := (select cast((select sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_iva_ice')) as numeric));-- 0.13
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_ice'));
	p_monto_ice := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce' as numeric(20,5))),0);
	-- 20190425 rgt
	-- 60 monto ice incorrecto
	
	
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
		
		for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop
		
			p_alicuota_porcentual := coalesce ((select cast(i->>'alicuotaPorcentual' as numeric(25,5))), 0);
			p_alicuota_especifica := coalesce ((select cast (i->>'alicuotaEspecifica' as numeric(25,5))), 0);
			--NUEVO campo 
			p_cantidad_litros := (select cast(i->>'cantidadLitros' as numeric(20,5)));
			
			p_marca_ice := (select cast(i->>'marcaIce' as varchar(1)));
			p_subtotal := (select cast(i->>'subTotal' as numeric(20,5)));

			if( sre_recaudaciones.sre_fac_ope_verifica_marca_ice(p_marca_ice) )then
				
				-- calculo de alicuota especifica
				if ( p_alicuota_especifica <> 0)then				
					v_sumatoria_alicuota_especifica := v_sumatoria_alicuota_especifica + ( p_cantidad_litros * p_alicuota_especifica); 
				end if;
			
			    -- calculo de alicuota porcentual
			    if( p_alicuota_porcentual <> 0 )then			    
			    	v_sumatoria_alicuota_porcentual := v_sumatoria_alicuota_porcentual + ((p_subtotal - (p_subtotal * v_porcentaje_iva )) * p_alicuota_porcentual);			    	
			    end if;
				
			end if;
					
		  end loop;

		  v_resultado := (select sre_recaudaciones.sre_fac_ope_verifica_monto_ice(p_monto_ice, v_sumatoria_alicuota_especifica,v_sumatoria_alicuota_porcentual,v_tolerancia_minima, v_tolerancia_maxima));
	else
		p_alicuota_porcentual := coalesce ((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'alicuotaPorcentual' as numeric(25,5))), 0);
		p_alicuota_especifica := coalesce ((select cast (p_json->'XmlFactura'->'factura'->'detalle'->>'alicuotaEspecifica' as numeric(25,5))), 0);
		--NUEVO campo 
		p_cantidad_litros := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'cantidadLitros' as numeric(20,5)));
		
		p_marca_ice := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'marcaIce' as varchar(1)));
		p_subtotal := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
		
		if( sre_recaudaciones.sre_fac_ope_verifica_marca_ice(p_marca_ice) )then
				
			-- calculo de alicuota especifica
			if ( p_alicuota_especifica <> 0)then				
				v_sumatoria_alicuota_especifica := v_sumatoria_alicuota_especifica + ( p_cantidad_litros * p_alicuota_especifica); 
			end if;
		
		    -- calculo de alicuota porcentual
		    if( p_alicuota_porcentual <> 0 )then			    
		    	v_sumatoria_alicuota_porcentual := v_sumatoria_alicuota_porcentual + ((p_subtotal - (p_subtotal * v_porcentaje_iva )) * p_alicuota_porcentual);			    	
		    end if;
			    
		end if;
		
		v_resultado := (select sre_recaudaciones.sre_fac_ope_verifica_monto_ice(p_monto_ice, v_sumatoria_alicuota_especifica,v_sumatoria_alicuota_porcentual,v_tolerancia_minima, v_tolerancia_maxima));
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then
		 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_ice');
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_ice'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_iehd(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_resultado       smallint := 0;
	p_monto_Iedh      numeric (20,5) := 0;
	p_porcentaje_iehd numeric := 0;
	p_subTotal        numeric (20,5) := 0;
	v_suma_monto_iehd numeric (20,5) := 0;
	i json;
	
	v_tolerancia_minima numeric := 1;
	v_tolerancia_maxima numeric := 2;
	
begin
	-- se debe aumentar en la factura 2 campos porcentaje iehd y alicuota (Bs\lit)
	-- de modo que se realice la operacion
	-- v_resultado := 1000;
	
	-- 201905099 rgt
	-- 923 monto ice incorrecto
	
	v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_iehd'));
	p_monto_Iedh := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIehd' as numeric(20,5))); --montoIedh 20190821
	
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
		for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop
			p_porcentaje_iehd := (select cast(i->>'porcentajeIehd' as numeric));
			p_subTotal := (select cast(i->>'subTotal' as numeric(20,5)));
			v_suma_monto_iehd := v_suma_monto_iehd + (p_subTotal * p_porcentaje_iehd);		

		end loop;
		
		if((v_suma_monto_iehd - v_tolerancia_minima) <= p_monto_Iedh and 
		   (v_suma_monto_iehd + v_tolerancia_maxima) >= p_monto_Iedh)then
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		end if;
	else

		p_porcentaje_iehd := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'porcentajeIehd' as numeric));
		p_subTotal := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
		v_suma_monto_iehd := v_suma_monto_iehd + (p_subTotal * p_porcentaje_iehd);
		if((v_suma_monto_iehd - v_tolerancia_minima) <= p_monto_Iedh and 
		   (v_suma_monto_iehd + v_tolerancia_maxima) >= p_monto_Iedh)then
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		end if;
		
	end if;
	
	return v_resultado;
	EXCEPTION
    when others
    then
      perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_iehd');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_iehd'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_ley317(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <se modifico la obtencion de datos del JSON en la seccion  begin>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<12/06/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_monto_total       numeric(20,5) := 0;
	p_monto_ley317      numeric(20,5) := 0;	
	v_porcentaje_ley317 numeric := 0;
	v_resultado         smallint := 0;
	
begin
	-- 20190423 rgt
	-- 56 - Monto Ley 317 incorrecto
	
	p_monto_total  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
	p_monto_ley317 := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoLey317');
	
	v_porcentaje_ley317 := (sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_ley317')::numeric);
	v_resultado         := (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_ley317'));

	if((p_monto_total * v_porcentaje_ley317) = p_monto_ley317) then
		v_resultado = sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	exception 
	when others
	 then
	 	perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_ley317');
        return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_ley317'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_original(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	p_monto_total_original     numeric(20, 5) := 0;
	p_tipo_detalle_transaccion integer := 0;
	p_subtotal_detalle         numeric(20, 5) := 0;
	
	i json;
	v_resultado           smallint := 0;
	v_transaccion_detalle integer := 1; -- 1 valor que indica que el detalle corresponde a la factura
	v_suma_total_original numeric(20,5) := 0;
	
begin	
	-- add 20190426 rgt
	-- 922, monto total devuelto incorrecto
	
	p_monto_total_original := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal' as numeric(20,5)));
	v_resultado            := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_original'));
	
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
		
		for i in (select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') where json_array_length(p_json->'XmlFactura'->'factura'->'detalle') >= 1) loop
			
		    p_tipo_detalle_transaccion := (select cast(i->>'codigoDetalleTransaccion' as integer));
			if(p_tipo_detalle_transaccion = v_transaccion_detalle)then
				p_subtotal_detalle := (select cast(i->>'subTotal' as numeric(20,5)));
				v_suma_total_original := v_suma_total_original + p_subtotal_detalle;
			end if;		
		end loop;
		
		v_resultado := (select sre_recaudaciones.sre_fac_ope_verifica_monto_original(v_suma_total_original,p_monto_total_original));

	else
		p_tipo_detalle_transaccion := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoDetalleTransaccion' as integer));
		if(p_tipo_detalle_transaccion = v_transaccion_detalle)then
			p_subtotal_detalle := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
			v_suma_total_original := v_suma_total_original + p_subtotal_detalle;
		end if;
			
		v_resultado := (select sre_recaudaciones.sre_fac_ope_verifica_monto_original(v_suma_total_original,p_monto_total_original));
	
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_original');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_original'));

end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_monto_total              numeric(20,5) := 0;
  p_monto_descuento_cabecera numeric(20,5) := 0;
  p_subtotal_detalle         numeric(20,5) := 0;
  p_monto_descuento_detalle  numeric(20,5) := 0;
  v_sumatoria_subtotales_detalle numeric(20,5) := 0;
  v_sumatoria_descuentos_detalle numeric(20,5) := 0;
  
  i json;
  v_json_prueba json;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
  v_detalle varchar;
  
begin
 	--57 - Monto Total Sujeto a IVA incorrecto
 	p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
  	p_monto_descuento_cabecera := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento' as numeric(20,5))),0) ;
 	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
 	v_detalle := cast (v_json_prueba as varchar);
 	
 	if(left(v_detalle, 1) = '[') --cast (v_json_prueba as varchar) like '%[%' 20190726
 	then
	 	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
		loop				
			p_subtotal_detalle:=(select cast(i->>'subTotal' as numeric(20,5)));
	  		p_monto_descuento_detalle:=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0);
	  		
	  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
	  		  		
	 	end loop;
				
	 	if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	else 	
 		p_subtotal_detalle:=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
  		p_monto_descuento_detalle:=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0);
  		
  		
  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
  		
  		if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	end if;
 			
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_codigo_moneda_extranjera(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
  p_monto_total        numeric(20, 5) := 0;
  p_monto_total_moneda numeric(20, 5) := 0;
  p_tipo_cambio        numeric(20, 5) := 0;

  v_tolerancia_minima  smallint :=1;
  v_tolerancia_maxima  smallint :=2;
  v_monto_total numeric(20, 5) :=0.0;
  
  v_resultado          smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_moneda'));
  
begin
  --101 - Monto Total en Moneda Invalido
  p_monto_total        := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20, 5)));
  p_monto_total_moneda := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda' as numeric(20, 5)));
  p_tipo_cambio        := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio' as numeric(20, 5)));
	
  v_tolerancia_minima := 1;
  v_tolerancia_maxima := 2;

  if (p_monto_total_moneda > 0 and p_tipo_cambio <> 0)
  then   
  	
    v_monto_total := p_monto_total_moneda * p_tipo_cambio;

    if (v_monto_total >= (p_monto_total - v_tolerancia_minima) and
        v_monto_total <= (p_monto_total + v_tolerancia_maxima))
    then
      v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
    end if;
  end if;

  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_codigo_moneda_extranjera');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_codigo_moneda_extranjera'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_devuelto(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	p_monto_total_devuelto     numeric(20,5) := 0;
	p_monto_total_original     numeric(20,5) := 0;
	p_tipo_detalle_transaccion integer := 0;
	p_subtotal_detalle         numeric(20,5) := 0;
	
	i json;
	v_resultado           smallint := 0;
	v_transaccion_detalle integer := 2; -- 2 valor que indica el detalle propio de la nota credito
	v_suma_total_devuelto numeric(20,5) := 0;
	
begin
	-- add 20190426 rgt
	-- 0, monto total devuelto incorrecto
	
	p_monto_total_devuelto := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalDevuelto' as numeric(20,5)));
	p_monto_total_original := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal'  as numeric(20,5)));
	v_resultado            := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_devuelto'));
	
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
		
		for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')loop
			
		p_tipo_detalle_transaccion := (select cast(i->>'codigoDetalleTransaccion' as integer));
			if(p_tipo_detalle_transaccion = v_transaccion_detalle)then
				p_subtotal_detalle := (select cast(i->>'subTotal' as numeric(20,5)));
				v_suma_total_devuelto := v_suma_total_devuelto + p_subtotal_detalle;
			end if;
			
		end loop;	
		-- el "monto total devuelto" debe ser menor o igual al "monto total original"
		v_resultado := (select sre_recaudaciones.sre_fac_ope_verifica_monto_devuelto(p_monto_total_devuelto, v_suma_total_devuelto, p_monto_total_original));

	else
		p_tipo_detalle_transaccion := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'codigoDetalleTransaccion' as integer));
		
		if(p_tipo_detalle_transaccion = v_transaccion_detalle)then
			p_subtotal_detalle := (select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
			v_suma_total_devuelto := v_suma_total_devuelto + p_subtotal_detalle;
		end if;
		
	
	v_resultado := (select sre_recaudaciones.sre_fac_ope_verifica_monto_devuelto(p_monto_total_devuelto, v_suma_total_devuelto, p_monto_total_original));
	
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_devuelto');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_devuelto'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_hidrocarburo(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_monto_total              numeric(20,5) := 0;
  p_monto_descuento_cabecera numeric(20,5) := 0;
  p_subtotal_detalle         numeric(20,5) := 0;
  p_monto_descuento_detalle  numeric(20,5) := 0;
  p_monto_iehd				 numeric(20,5) := 0;
  v_sumatoria_subtotales_detalle numeric(20,5) := 0;
  v_sumatoria_descuentos_detalle numeric(20,5) := 0;
  
  i json;
  v_json_prueba json;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
  v_detalle varchar;
  
begin
 	--57 - Monto Total Sujeto a IVA incorrecto
 	p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
 	p_monto_iehd			   := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIehd' as numeric(20,5)));
  	p_monto_descuento_cabecera := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento' as numeric(20,5))),0) ;
 	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
 	v_detalle := cast (v_json_prueba as varchar);
 	if(left(v_detalle, 1) = '[') --cast (v_json_prueba as varchar) like '%[%' 20190726
 	then
	 	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
		loop				
			p_subtotal_detalle:=(select cast(i->>'subTotal' as numeric(20,5)));
	  		p_monto_descuento_detalle:=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0);
	  		
	  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
	  		  		
	 	end loop;
				
	 	if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera+p_monto_iehd)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	else 	
 		p_subtotal_detalle:=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
  		p_monto_descuento_detalle:=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0);
  		
  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
  		
  		if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera+p_monto_iehd)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
	 	
 	end if;
 			
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_hidrocarburo');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_hidrocarburo'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_hotel(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 22/07/2018
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_monto_total              numeric(20,5) := 0;
  p_monto_descuento_cabecera numeric(20,5) := 0;
  p_subtotal_detalle         numeric(20,5) := 0;
  p_monto_descuento_detalle  numeric(20,5) := 0;
  v_sumatoria_subtotales_detalle numeric(20,5) := 0;
  v_sumatoria_descuentos_detalle numeric(20,5) := 0;
  
  i json;
  v_json_prueba json;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
  v_detalle varchar;
  
begin
 	--57 - Monto Total Sujeto a IVA incorrecto
 	p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
  	p_monto_descuento_cabecera := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento' as numeric(20,5))),0) ;

 	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
 	v_detalle := cast (v_json_prueba as varchar);

 	if(left(v_detalle, 1) = '[')
 	then
	 	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
		loop				
			p_subtotal_detalle:=(select cast(i->>'subTotal' as numeric(20,5)));
	  		p_monto_descuento_detalle:=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0);
	  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
	  		  		
	 	end loop;
				
	 	if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	else 	
 		p_subtotal_detalle:=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
  		p_monto_descuento_detalle:=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0);

  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
  		
  		if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	end if;
 			
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_ice(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 05/08/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_monto_total              numeric(20,5) := 0;
  p_monto_descuento_cabecera numeric(20,5) := 0;
  p_subtotal_detalle         numeric(20,5) := 0;
  p_monto_descuento_detalle  numeric(20,5) := 0;
  p_monto_ice 				 numeric(20,5) := 0;
  v_sumatoria_subtotales_detalle numeric(20,5) := 0;
  v_sumatoria_descuentos_detalle numeric(20,5) := 0;
  
  i json;
  v_json_prueba json;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
  v_detalle varchar;
  
begin
 	--57 - Monto Total  incorrecto
 	p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
  	p_monto_descuento_cabecera := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento' as numeric(20,5))),0) ;
  	p_monto_ice 			   := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce' as numeric(20,5))),0);
  	
 	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
 	v_detalle := cast (v_json_prueba as varchar);
 	
 	if(left(v_detalle, 1) = '[') --cast (v_json_prueba as varchar) like '%[%' 20190726
 	then
	 	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
		loop				
			p_subtotal_detalle:=(select cast(i->>'subTotal' as numeric(20,5)));
	  		p_monto_descuento_detalle:=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0);
	  		
	  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
	  		  		
	 	end loop;
				
	 	if((p_monto_total)=(v_sumatoria_subtotales_detalle - p_monto_descuento_cabecera + p_monto_ice)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	else 	
 		p_subtotal_detalle:=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
  		p_monto_descuento_detalle:=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0);
  		
  		
  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
  		
  		if((p_monto_total)=(v_sumatoria_subtotales_detalle - p_monto_descuento_cabecera + p_monto_ice)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	end if;
 			
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_ice');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_ice'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_ij(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_monto_total numeric(20,5) := 0;
	p_monto_total_ij numeric(20,5) := 0;	
	v_alicuota_juegos_azar numeric := 0;
	v_alicuota_juegos_promociones numeric := 0;	
	v_resultado smallint := 0;	

begin
	-- add 20190426 rgt
	-- 59 monto total ij incorrecto
	
	p_monto_total := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
	p_monto_total_ij := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalIj' as numeric(20,5)));	
	v_alicuota_juegos_azar := (select cast((select sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_iva_juegos_azar')) as numeric)); --0.30
	v_alicuota_juegos_promociones := (select cast((select sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_iva_juegos_promociones')) as numeric));--0.10	
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_ij'));	
	
	if((p_monto_total * v_alicuota_juegos_azar) = p_monto_total_ij or (p_monto_total * v_alicuota_juegos_promociones) = p_monto_total_ij)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');	
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_ij');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_ij'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_moneda(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

declare
  p_monto_total        numeric(20, 5) := 0;
  p_monto_total_moneda numeric(20, 5) := 0;
  p_tipo_cambio        numeric(20, 5) := 0;

  v_tolerancia_minima  smallint :=1;
  v_tolerancia_maxima  smallint :=2;
  v_monto_total_moneda numeric(20, 5) :=0.0;
  
  v_resultado          smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_moneda'));
  
begin
  --101 - Monto Total en Moneda Invalido
  p_monto_total        := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20, 5)));
  p_monto_total_moneda := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda' as numeric(20, 5)));
  p_tipo_cambio        := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio' as numeric(20, 5)));
	
  v_tolerancia_minima := 1;
  v_tolerancia_maxima := 2;

  if (p_monto_total > 0 and p_tipo_cambio <> 0)
  then   
  	
    v_monto_total_moneda := p_monto_total / p_tipo_cambio;

    if (v_monto_total_moneda >= (p_monto_total_moneda - v_tolerancia_minima) and
        v_monto_total_moneda <= (p_monto_total_moneda + v_tolerancia_maxima))
    then
      v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
    end if;
  end if;

  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_moneda');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_moneda'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_moneda_codigo_moneda_extranjera(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_monto_total              numeric(20,5) := 0;
  p_monto_descuento_cabecera numeric(20,5) := 0;
  p_subtotal_detalle         numeric(20,5) := 0;
  p_monto_descuento_detalle  numeric(20,5) := 0;
  p_monto_total_moneda       numeric(20,5) := 0;
  v_sumatoria_subtotales_detalle numeric(20,5) := 0;
  v_sumatoria_descuentos_detalle numeric(20,5) := 0;
  
  i json;
  v_json_prueba json;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
  v_detalle varchar;
  
begin
 	--57 - Monto Total Sujeto a IVA incorrecto
 	p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
  	p_monto_descuento_cabecera := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento' as numeric(20,5))),0) ;
  	p_monto_total_moneda       := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalMoneda' as numeric(20, 5)));
 	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
 	v_detalle := cast (v_json_prueba as varchar);
 	
 	if(left(v_detalle, 1) = '[') --cast (v_json_prueba as varchar) like '%[%' 20190726
 	then
	 	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
		loop				
			p_subtotal_detalle:=(select cast(i->>'subTotal' as numeric(20,5)));
	  		p_monto_descuento_detalle:=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0);
	  		
	  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
	  		  		
	 	end loop;
				
	 	if((p_monto_total_moneda)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	else 	
 		p_subtotal_detalle:=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
  		p_monto_descuento_detalle:=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0);
  		
  		
  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
  		
  		if((p_monto_total_moneda)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera)) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	end if;
 			
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_moneda_tipo_cambio');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_moneda_tipo_cambio'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_puerto(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<12/06/2019>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_monto_transporte_frontera  numeric(20,5) := 0;
	p_monto_seguro_internacional numeric(20,5) := 0;
	p_otros_montos               numeric(20,5) := 0;	
	p_monto_total_puerto         numeric(20,5) := 0;	
	p_monto_total_fob_frontera   numeric(20,5) := 0;
	v_resultado                  smallint := 0;

begin
	-- 20190423 rgt
	-- 917 monto total puerto incorrecto
	p_monto_transporte_frontera  := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera' as numeric(20,5))));
	p_monto_seguro_internacional := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional' as numeric(20,5))));
	p_otros_montos               := coalesce ((select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos' as numeric(20,5)))), 0);	
	p_monto_total_puerto         := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalPuerto' as numeric(20,5))));
	p_monto_total_fob_frontera   := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera' as numeric(20,5))));
	v_resultado                  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_puerto'));
	
	
	if((p_monto_total_fob_frontera + p_monto_transporte_frontera + p_monto_seguro_internacional + p_otros_montos) = p_monto_total_puerto)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	end if;
	
	return v_resultado;
	
	EXCEPTION
 	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_puerto');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_puerto'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_servicios_basicos(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 18/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_monto_total              numeric(20,5) := 0;
  p_monto_descuento_cabecera numeric(20,5) := 0;
  p_subtotal_detalle         numeric(20,5) := 0;
  p_monto_descuento_detalle  numeric(20,5) := 0;
  v_sumatoria_subtotales_detalle numeric(20,5) := 0;
  v_sumatoria_descuentos_detalle numeric(20,5) := 0;
  v_tasa_aseo 			 numeric(20,5) := 0;
  v_tasa_alumbrado         numeric(30,5) := 0;
  
  i json;
  v_json_prueba json;
  v_resultado smallint :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
    
begin
 	--57 - Monto Total Sujeto a IVA incorrecto
 	p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
  	p_monto_descuento_cabecera := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoDescuento' as numeric(20,5))),0) ;
  
  	--servicios basicos tasas
  	v_tasa_alumbrado		 := coalesce ((cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAlumbrado' as numeric(20,5))), 0);
	v_tasa_aseo				 := coalesce ((cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAseo' as numeric(20,5))), 0);
	
	
 	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
 	
 	if(cast (v_json_prueba as varchar) like '%[%')
 	then
	 	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
		loop				
			p_subtotal_detalle:=(select cast(i->>'subTotal' as numeric(20,5)));
	  		p_monto_descuento_detalle:=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0);
	  		
	  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
	  		  		
	 	end loop;
				
	 	if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera + (v_tasa_alumbrado + v_tasa_aseo))) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	else 	 			 
 		p_subtotal_detalle:=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
  		p_monto_descuento_detalle:=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0);
  		
  		
  		v_sumatoria_subtotales_detalle:=v_sumatoria_subtotales_detalle+p_subtotal_detalle;
  		
  		if((p_monto_total)=(v_sumatoria_subtotales_detalle-p_monto_descuento_cabecera + (v_tasa_alumbrado + v_tasa_aseo))) then 	
	 		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'); 
	 	end if;
 	end if;
 			
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_sujeto_ipj(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_monto_total 			 numeric(20,5) := 0;
	p_monto_total_sujeto_ipj numeric(20,5) := 0;
	v_alicuota_juegos 		 numeric := 0;
	v_resultado 			 smallint := 0;
	
begin
	-- add 20190426
	-- 58, si el monto total sujeto ipj es incorrecto
	
	p_monto_total            := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5)));
	p_monto_total_sujeto_ipj := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIpj' as numeric(20,5)));
	v_alicuota_juegos        := (select cast((select sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_alicuota_juegos')) as numeric));--0.15
	v_resultado              := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_ipj'));	
	
	if((p_monto_total * v_alicuota_juegos) = p_monto_total_sujeto_ipj)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_sujeto_ipj');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_ipj'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_sujeto_iva_combustible(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_monto_total            numeric(20,5) := 0;
	p_monto_total_sujeto_iva numeric(20,5) := 0;	
	v_porcentaje_sujeto_iva  numeric := 0;
	p_monto_ley317           numeric(20,5) := 0;
	v_resultado              smallint := 0;
	
begin
	-- 57 Monto total sujeto iva incorrecto
	-- factura de hidrocarburos
	p_monto_total            := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
	p_monto_total_sujeto_iva := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva');
	p_monto_ley317           := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoLey317');
	v_porcentaje_sujeto_iva  := (sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_iva_combustible')::numeric);--13%
	v_resultado              := (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_iva'));
			
	if(p_monto_ley317 = p_monto_total_sujeto_iva )then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	exception 
	when others
		then 
			perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_sujeto_iva_combustible');
            return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_iva'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_sujeto_iva_ice(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<12/06/2019>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_monto_total numeric(20,5) := 0;
	p_monto_ice   numeric(20,5) := 0;
	p_monto_total_sujeto_iva numeric(20,5) := 0;
	v_resultado   smallint := 0;

begin
	
	-- 57 si monto total sujeto iva es incorrecto
	p_monto_total  := (select(cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5))));
	p_monto_ice    := coalesce((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce' as numeric(20,5))),0);
	p_monto_total_sujeto_iva  := (select (cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva' as numeric(20,5))));	
	v_resultado    := (select(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_iva')));
	
	if((p_monto_total - p_monto_ice) = p_monto_total_sujeto_iva)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
	  when others
	    then
		  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_sujeto_iva_ice');
          return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_iva'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_monto_total_sujeto_iva_servicios(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_monto_total_sujeto_iva numeric(20,5) := 0;	
	p_monto_total            numeric(20,5) := 0;	
	v_porcentaje_iva         numeric := 0; 
	v_resultado              smallint := 0;
	v_tasa_aseo 			 numeric(20,5) := 0;
	v_tasa_alumbrado         numeric(30,5) := 0;
	
begin
	
	-- 20190425 rgt
	-- 57 sie el monto total sujeto iva es incorrecto
	
	p_monto_total_sujeto_iva := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalSujetoIva' as numeric(20,5))));	
	p_monto_total            := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20,5))));	
	v_porcentaje_iva         := (select cast((select sre_recaudaciones.sre_fac_par_porcentaje_iva('porcentaje_iva_servicios')) as numeric)); -- add parametrica prm
	v_tasa_aseo				 := coalesce ((cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAseo' as numeric(20,5))),0);
	v_tasa_alumbrado		 := coalesce ((cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'tasaAlumbrado' as numeric(20,5))),0);
	v_resultado              := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_iva'));
	
	
	--if((p_monto_total * v_porcentaje_iva) = p_monto_total_sujeto_iva)then
	if((p_monto_total - (v_tasa_aseo + v_tasa_alumbrado)) = p_monto_total_sujeto_iva)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	-- 20190425 rgt
	-- 57 sie el monto total sujeto iva es incorrecto
	
	EXCEPTION
	  when others
	    then
		  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_monto_total_sujeto_iva_servicios');
          return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_monto_total_sujeto_iva'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_motivo_anulacion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_motivo_anulacion_id Integer := 0;
  v_resultado           smallint := 0;
  
begin
 	v_motivo_anulacion_id := (select cast(p_json->'xmlRecepcionGenerica'->>'p_motivo_anulacion_id' as Integer));
 	
	if v_motivo_anulacion_id in (select codigo_clasificador from sre_recaudaciones.sre_fac_clasificadores where agrupador = 'MOTIVO ANULACION') then  
  		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
   	else
     	v_resultado :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_motivo_anulacion'));
	end if;

  return v_resultado;
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_motivo_anulacion');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_motivo_anulacion'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nacionalidad(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_pais_id   Integer:=0;
  v_resultado      smallint :=0;
  v_agrupador varchar :='';
begin
 --TODO: fake
 
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nacionalidad');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nacionalidad'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nit_corresponda_actividad_economica(p_nit bigint, p_actividad_economica_id bigint, p_codigo_producto bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare    
  v_resultado          smallint :=0;
  p_persona_contribuyente_id bigint:=0;  
begin
 
	p_persona_contribuyente_id := (select sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit) limit 1);
	-- Descomentar la siguiente linea de codigo luego de que la tabla scn_emp_actividades_contribuyentes se encuentre con datos.
    if(v_resultado is not null) then
		v_resultado:= (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') from sre_recaudaciones.sre_fac_catalogos_productos
		where codigo_producto=p_codigo_producto and cast(codigo_actividad_caeb as integer)=p_actividad_economica_id limit 1);
	end if; 
  	return coalesce(v_resultado,0);

 EXCEPTION
   when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nit_corresponda_actividad_economica'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nit_documento_medico(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	p_nit_documento bigint := 0;
	i json;
	v_sw        smallint := 0;
	v_resultado smallint := 0;
begin
	-- add 20190426
	-- 0, nit documento medico, no existe // establecer codigo error
	v_resultado := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_documento_medico'));
	
	if(sre_recaudaciones.sre_fac_ope_verificar_detalle(p_json))then
	
		for i in (select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') where json_array_length(p_json->'XmlFactura'->'factura'->'detalle') >= 1)
		loop
			
			p_nit_documento := coalesce((select cast(i->>'nitDocumentoMedico' as bigint)),0);		
			if (p_nit_documento <> 0) then
				if(sre_recaudaciones.sre_fac_ope_val_nit(p_nit_documento) <> (sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')))then
					v_sw := 1;
				end if;
			end if;
			
		
		end loop;
	else
		p_nit_documento := coalesce(( select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'nitDocumentoMedico' as bigint)),0);		
		if(p_nit_documento <> 0)then
			if(sre_recaudaciones.sre_fac_ope_val_nit(p_nit_documento) <> (sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')))then
					v_sw := 1;
			end if;
		end if;		
	
	end if;
	
	if(v_sw = 0)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nit_documento_medico');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_documento_medico'));
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nit_emisor(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se procede a aumentar validaciones de modalidad y codigo documento sector
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<14/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_ambiente_id smallint := 0;
  p_nit              bigint := 0;
  p_nit_emisor       bigint :=0;
  p_tipo_modalidad_id integer := 0;
  v_resultado        smallint := 0;
  v_modalidad_id integer := 0;
  v_proveedor integer := 0;
  v_codigo_sistema varchar;
begin
--9 = Nit invalido	
--75 = Nit no tiene asociado a la modalidad
--95 = Nit no tiene asociado al tipo documento sector
	
  p_tipo_ambiente_id  := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_ambiente_id' as smallint));
  p_nit               := (select cast(p_json->'xmlRecepcionGenerica'->>'p_nit' as bigint));
  p_nit_emisor        := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor' as bigint));
  p_tipo_modalidad_id := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id' as integer));
  v_codigo_sistema	  := p_json->'xmlRecepcionGenerica'->>'p_codigo_sistema';
  v_resultado         := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		
  			--Caso de prueba 23 - Codigo 9
			select tipo_sistema_id into v_proveedor from sre_recaudaciones.sre_fac_sistemas
			where codigo_sistema =  v_codigo_sistema
			limit 1;
			-- validar que el nit de la factura sea igual al nit emisor
			if (coalesce(p_nit,0) <> coalesce(p_nit_emisor,0)) then
			   		return (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron')); --9
			end if;
			-- se verifico si sistema es proveedor
			
			if (v_proveedor != 615 ) then
			
			  	v_modalidad_id:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_equivalente_clasificador(p_tipo_modalidad_id, 'TIPO MODALIDAD'));
			  	
			  	v_resultado:= (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
			 				   from sre_recaudaciones.sre_fac_contribuyentes_modalidades cm 
			 				   where cm.modalidad_facturacion_id=v_modalidad_id
			 				   and cm.nit=p_nit_emisor
			 				   limit 1);
			 				  
			 	--Caso de prueba 24 - Codigo 75			   
			  	if (v_resultado isnull)  then
			  		return (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_emisor_modalidad_diferente')); --75
			  	end if;
			
			   --Caso de prueba 25 - Codigo 75 (Se ha convertido a declarado)
				--TODO: Pendiente obtener el Código 95 = Nit sin asociación con tipo documento sector 
					  --Se debe crear una tabla donde exista el NIT al que asociado al tipo de documento sector.
			else					  
				v_resultado := 1000;
			end if;
				   		  
			return v_resultado;	

   EXCEPTION
   when others
     then
		perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nit_emisor');
        return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nit_operador_turismo(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que realiza la validación del documeto sector: NOTA FISCAL DE EXPORTACIÓN DE SERVICIO TURISTICO Y HOSPEDAJE
PARAMETROS INGRESO
    Json con los datos necesarios para la validación
PARAMETROS SALIDA
    Resultado de la validación
SUBSISTEMA : Facturación
FECHA CREACION : <23/10/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se esta tomando en cuenta el nitOperadorTurismo igual a null, lo cual deberia dejar pasar la validacion, 
caso contrario debera validar contra el nit del titular
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<25/10/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
declare
       p_nit_operador_turismo bigint := 0;
       p_nit_emisor bigint := 0;
       v_resultado smallint := 0;
       v_modalidad_id integer := 0;
       v_proveedor integer := 0;        

begin
       p_nit_operador_turismo  := coalesce ((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitOperadorTurismo' as bigint)), 0);
       p_nit_emisor  := coalesce ((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitEmisor' as bigint)), 0); -- nit titular        
       v_resultado:=(select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito'));

       if (p_nit_operador_turismo!= 0 and p_nit_operador_turismo <> p_nit_emisor) then                      
              return (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron')); --9
       end if;

       return v_resultado; 
       
       EXCEPTION
       when others
    then
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nit_operador_turismo');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_operador_turismo'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nit_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el p_nit, se encuentra en la tabla scn_vpdr_datos_contribuyentes_vw.
PARAMETROS INGRESO
    p_json: Datos de recepcion en formato json.
PARAMETROS SALIDA
    v_resultado:  Resultado de tipo smallint al cual se asigna el valor de 1000 caso de exito y 99 en caso de no existir un resultado
SUBSISTEMA : Facturación
FECHA CREACION : 29/03/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Se cambio el codigo de error
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :25/07/2019
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare
  p_nit       bigint := 0;
  v_resultado smallint;
  
begin
 	
--9  NIT, no valido
  p_nit       := (p_json->'xmlRecepcionGenerica'->>'p_nit');
  v_resultado := (
  					select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') 
					from scn_contribuyentes.scn_emp_contribuyentes as a 
					where a.nit = p_nit --indexar el campo nit 
					limit 1
                  );
                  							                                  
  return coalesce(v_resultado,(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron')));
 
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nit_recepcion');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_emisor'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nit_salon(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare

	p_nit_salon bigint := 0;
	v_resultado smallint := 0;
	
begin
	-- add 20190426
	--codigo de error 915 	
	p_nit_salon  := coalesce ((select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'nitSalon' as bigint)), 0);
	v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_salon'));

	if(p_nit_salon <> 0)then
		if(sre_recaudaciones.sre_fac_ope_val_nit(p_nit_salon)  = (sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')))then
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		end if;
	else
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
		
	return v_resultado;
	
	EXCEPTION
  	when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nit_salon');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nit_salon'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nombre_razon_social(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_numero_documento         varchar := '';
  p_tipo_documento_identidad integer := 0;
  p_razon_social             varchar := '';
     
  v_id_documento_identidad_nit integer:= 0; --par 5
  v_razon_social_consumidor_final varchar :='CONSUMIDOR FINAL'; --nit: 99002                                           
  v_razon_social_ventas_menores varchar :='VENTAS MENORES DEL DIA'; --nit: 99003
  v_razon_social_control_tributario varchar :='CONTROL TRIBUTARIO'; --nit: 99004
  p_monto_total decimal:=0;       
  v_resultado smallint :=1000;   
begin		
   --94 = Factura no consignada correctamente	  
  p_tipo_documento_identidad := (p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
  p_razon_social             := (p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
  p_numero_documento         := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');  
  p_razon_social             := upper(trim(unaccent(p_razon_social)));
  p_numero_documento         := upper(trim(unaccent(p_numero_documento)));
  p_monto_total              := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal' as numeric(20, 5))); -- add 10102019 jf
  p_monto_total              := coalesce(p_monto_total,0);
  
  v_id_documento_identidad_nit := cast(sre_recaudaciones.sre_fac_par_tipos_documentos('nit') as integer); --par 5
		if p_tipo_documento_identidad = v_id_documento_identidad_nit then 
			--1. validar NIT y razon social (casos especiales)
			if (p_numero_documento in ('99002','99003','99004') or p_razon_social in (v_razon_social_consumidor_final, v_razon_social_ventas_menores, v_razon_social_control_tributario)) then
				v_resultado :=(sre_recaudaciones.sre_fac_val_ope_validar_nit_razon_social(p_tipo_documento_identidad, p_numero_documento, p_razon_social, p_monto_total));												
				if(v_resultado=1000) then
					return v_resultado;
				else
					return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social')); 
				end if;							
			end if;
		else
			return sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  		end if;	
  	
	return v_resultado;
		
  EXCEPTION
  when others
    then	  
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nombre_razon_social');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_nombre_razon_social_factura_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
   p_numero_documento varchar:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento' as varchar));
   --p_tipo_documento_identidad integer:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad' as integer));
   p_tipo_documento_identidad integer:=(select sre_recaudaciones.sre_fac_ope_obtener_tipo_documento_facturacion_manual(p_json));
   p_razon_social varchar:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial' as varchar));
  
  --v_id_documento_identidad_ci integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos('ci') as integer); --par 1
  --v_id_documento_identidad_nit integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos('nit') as integer); --par 5

  v_id_documento_identidad_ci integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('CI') as integer); --par 1
  v_id_documento_identidad_nit integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('NIT') as integer); --par 5
  
  v_resultado_validar_nit_padron smallint :=1000;
  v_resultado_validar_nit_razon_social smallint :=1000;
  v_resultado smallint :=1000;   
  v_nit_natural bigint =0;
  v_nit_juridica bigint =0;
begin		
	p_razon_social := (select upper(p_razon_social));
	case		
		when p_tipo_documento_identidad = v_id_documento_identidad_ci		
			then
				--1. Validar el nombre contra SEGIP??																			
		when p_tipo_documento_identidad = v_id_documento_identidad_nit 
			then 			
			--2. validar existencia del NIT mediante padron
			v_resultado_validar_nit_padron :=(sre_recaudaciones.sre_fac_ope_validar_nit_padron_facturacion_manual(p_tipo_documento_identidad, p_numero_documento));	
			if(v_resultado_validar_nit_padron=1000) then
				
				 v_nit_natural:= (select c.nit from scn_contribuyentes.scn_per_personas_naturales p
										join scn_contribuyentes.scn_emp_contribuyentes c on (p.persona_id = c.persona_contribuyente_id) 
										where c.nit = cast(p_numero_documento as bigint) and p.primer_apellido like ('%'||p_razon_social||'%'));		
				v_nit_juridica:=(select c.nit from scn_contribuyentes.scn_per_personas_juridicas p
										join scn_contribuyentes.scn_emp_contribuyentes c on (p.persona_id = c.persona_contribuyente_id) 
										where c.nit = cast(p_numero_documento as bigint) and p.razon_social like ('%'||p_razon_social||'%'));				
				if(p_numero_documento = cast(v_nit_natural as varchar)	OR  p_numero_documento = cast(v_nit_juridica as varchar))	
				then				
				 v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');				 	
				 else				
				 return (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social_factura_manual'));
				 end if;
			else
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social_factura_manual'));
			end if;
		else--del case 
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social_factura_manual'));
		end case;
	return v_resultado;
		
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_nombre_razon_social_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_numero_documento(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_documento_identidad integer := 0;
  p_numero_documento         varchar := '';
  p_razon_social             varchar := '';
   
  v_id_documento_identidad_ci  integer := 0; --par 1
  v_id_documento_identidad_nit integer:= 0; --par 5
  
  v_razon_social_consumidor_final varchar :='CONSUMIDOR FINAL'; --nit: 99002                                           
  v_razon_social_ventas_menores varchar :='VENTAS MENORES DEL DIA'; --nit: 99003
  v_razon_social_control_tributario varchar :='CONTROL TRIBUTARIO'; --nit: 99004
  
  v_resultado smallint :=0;   
begin	
	--15 = Número Documento Inexistente
	--94 = Factura no consignada correctamente	
	
  v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');	
	
  p_tipo_documento_identidad := (p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
  p_numero_documento         := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
  p_razon_social             := (p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
  
  p_numero_documento         := upper(trim(unaccent(p_numero_documento)));
  p_razon_social             := upper(trim(unaccent(p_razon_social)));
   
  v_id_documento_identidad_ci  := cast(sre_recaudaciones.sre_fac_par_tipos_documentos('ci') as integer); --par 1
  v_id_documento_identidad_nit := cast(sre_recaudaciones.sre_fac_par_tipos_documentos('nit') as integer); --par 5
	
  case		
		when p_tipo_documento_identidad = v_id_documento_identidad_ci		
			then				
				--1. Validar numero el numero de documento igual a cero
				--2. Validar numero el numero de documento inexistente (segip). La validacion se lo realiza en el servicio SOAP.											
				if(p_numero_documento='0') then 
					v_resultado := sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_documento_ci');
				end if;													
		when p_tipo_documento_identidad = v_id_documento_identidad_nit 
			then 							
			--1. validar NIT y razon social (casos especiales)
			--2. validar existencia del NIT mediante padron. La validacion se lo realiza en el servicio SOAP.
			if (p_numero_documento in ('99002','99003','99004')  or p_razon_social in (v_razon_social_consumidor_final, v_razon_social_ventas_menores, v_razon_social_control_tributario)) then
				v_resultado :=sre_recaudaciones.sre_fac_val_nombre_razon_social(p_json);														
			end if;  											
		else
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');		
  end case;

  return v_resultado;
		
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_numero_documento');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_documento'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_numero_documento_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Si solo valda que no sea 0, la validacion contra SEGIP u otro esta pendiente.
Si es NIT valida casos especiales y padron
Si es NO ESPECIFICADO retorna éxito
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion, o codigo de error asociado
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_numero_documento varchar:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
  --p_tipo_documento_identidad integer:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoTipoDocumentoIdentidad');
  p_tipo_documento_identidad_id integer:=(select sre_recaudaciones.sre_fac_ope_obtener_tipo_documento_facturacion_manual(p_json));
  p_razon_social varchar:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
     	
  v_id_documento_identidad_ci integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('CI') as integer); --par 1
  v_id_documento_identidad_nit integer:=cast(sre_recaudaciones.sre_fac_par_tipos_documentos_manual('NIT') as integer); --par 5

  v_resultado_validar_nit_razon_social smallint :=1000;
  v_resultado_validar_nit_padron smallint :=1000;
  
  v_resultado smallint :=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');		   
begin	
	--15 = Número Documento Inexistente	
	case		
		when p_tipo_documento_identidad_id = v_id_documento_identidad_ci		
			then
				--1. Validar numero el numero de documento igual a cero											
				if(p_numero_documento='0') then 
					return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_documento_ci'));
				end if;
				
				--2. Validar numero el numero de documento inexistente (segip)
				--if(validar_existencia del nro de ci en el segip) then 
					--v_resultado:=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_documento_ci'));
				--end if;
												
		when p_tipo_documento_identidad_id = v_id_documento_identidad_nit 
			then 			
			--1. validar NIT y razon social (casos especiales)
			if (p_numero_documento in ('99002','99003','99004')) then
				v_resultado_validar_nit_razon_social :=(sre_recaudaciones.sre_fac_val_ope_validar_nit_razon_social_facturacion_manual(p_tipo_documento_identidad_id, p_numero_documento, p_razon_social));	--nit 719			
				
				if(v_resultado_validar_nit_razon_social=1000) then
					return v_resultado_validar_nit_razon_social;
				else
					return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_est_validar_nit_casos_especiales')); 
				end if;							
			end if;
  			
			--2. validar existencia del NIT mediante padron
			v_resultado_validar_nit_padron :=(sre_recaudaciones.sre_fac_ope_validar_nit_padron_facturacion_manual(p_tipo_documento_identidad_id, p_numero_documento));
					
			if(v_resultado_validar_nit_padron<>1000) then
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_ope_validar_nit_padron'));
			end if;				
		else
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');		
	end case;

	return v_resultado;		
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_val_numero_documento_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_numero_sucursal_recepcion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Devuelve éxito si el numero de sucursal corresponde en los datos de contribuyentes filtrado por el campo "persona_contribuyente_id"
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 24/05/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_sucursal_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');
  p_persona_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
  p_numero_sucursal bigint:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');
  v_resultado smallint;   
begin
  v_resultado :=( select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
  				  from   scn_contribuyentes.scn_emp_sucursales_contribuyentes 
  				  where   numero_sucursal = p_numero_sucursal 
  				  --and sucursal_contribuyente_id=p_sucursal_contribuyente_id 
				  and persona_contribuyente_id = p_persona_contribuyente_id
  				  and estado_id ='AC' limit 1);
  
  return coalesce(v_resultado,(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sucursal')));		 
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_numero_sucursal_recepcion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_numero_tarjeta(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  p_metodo_pago    integer := 0;
  p_numero_tarjeta bigint := 0;     
  v_resultado      smallint := 0;
  
  v_tarjeta integer :=2;
    
begin
--100 - Numero de Tarjeta Invalido
	
	p_metodo_pago    := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago' as integer));
    p_numero_tarjeta := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroTarjeta' as bigint));        
    v_resultado      := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_tarjeta'));
	
	if(p_metodo_pago = v_tarjeta and p_numero_tarjeta>0) 
	then		
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	else if(p_numero_tarjeta is null and p_metodo_pago != v_tarjeta)
		 then
		 	v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
		 end if;
	end if;
			
  	return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_numero_tarjeta');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_numero_tarjeta'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_ope_validar_nit_razon_social(p_tipo_documento_identidad integer, p_numero_documento character varying, p_razon_social character varying, p_monto_total numeric)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función que realiza la validación del número de documento, la razón social y el monto total de la moneda
PARAMETROS INGRESO
    p_tipo_documento_identidad : paramétrica para el tipo de documento de identidad (5=NUMERO DE IDENTIFICACION TRIBUTARIA)
    p_numero_documento         : número de NIT
    p_razon_social                  : Razon Social   
    p_monto_total                   : Monto total de la cabecera
PARAMETROS SALIDA
    1000 : Valor correcto
    94   : Factura no consignada correctamente
SUBSISTEMA : Facturación
FECHA CREACION : <10/10/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
declare

  v_resultado   smallint := 0; 
  v_razon_social_consumidor_final varchar :='CONSUMIDOR FINAL'; --nit: 99002                                           
  v_razon_social_ventas_menores varchar :='VENTAS MENORES DEL DIA'; --nit: 99003
  v_razon_social_control_tributario varchar :='CONTROL TRIBUTARIO'; --nit: 99004    
  
begin
       
  v_resultado   := (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social'));
  
  p_numero_documento :=upper(trim(unaccent(p_numero_documento)));
  p_razon_social :=upper(trim(unaccent(p_razon_social)));
  
  case
       when p_tipo_documento_identidad=5 and (p_numero_documento in ('99002','99003','99004') or p_razon_social in (v_razon_social_consumidor_final,v_razon_social_ventas_menores,v_razon_social_control_tributario)) then         
              case
                    when p_numero_documento='99002' and p_razon_social = v_razon_social_consumidor_final and p_monto_total<=3000 
                           then v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
                    when p_numero_documento='99003' and p_razon_social = v_razon_social_ventas_menores
                           then v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');   
                    when p_numero_documento='99004' and p_razon_social = v_razon_social_control_tributario
                           then v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
                    else                
                           v_resultado := v_resultado;
              end case;
                            
       else  
              v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end case;
                     
  return v_resultado;

  EXCEPTION
  when others
    then       
         perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_ope_validar_nit_razon_social');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_nombre_razon_social'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_ope_validar_nit_razon_social_facturacion_manual(p_tipo_documento_identidad integer, p_numero_documento character varying, p_razon_social character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Determina si el NIT proporcionado como caso especial coincide con una razon soacial de caso especial, si es otro numero que no es caso especial devuelve exito por que no se puede identificar mas alla.
PARAMETROS INGRESO
Tipo documento de identidad, numero de NIT y razon social 
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion, o codigo de error asociado
SUBSISTEMA : Facturación
FECHA CREACION : 11/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  v_resultado   smallint :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_est_validar_nit_casos_especiales'));
  
  
  v_razon_social_consumidor_final varchar :='CONSUMIDOR FINAL'; --nit: 99002                                           
  v_razon_social_ventas_menores varchar :='VENTAS MENORES DEL DÍA'; --nit: 99003
  v_razon_social_control_tributario varchar :='CONTROL TRIBUTARIO'; --nit: 99004    
begin
  p_numero_documento :=upper(trim(p_numero_documento));
  p_razon_social :=upper(trim(p_razon_social));
  
  case
  	when p_tipo_documento_identidad=(select sre_recaudaciones.sre_fac_par_tipos_documentos_manual('NIT') ) and p_numero_documento in ('99002','99003','99004') then
  		
  		case
  			when p_numero_documento='99002' and p_razon_social = v_razon_social_consumidor_final
  				then v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  			when p_numero_documento='99003' and p_razon_social = v_razon_social_ventas_menores
  				then v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');	
  			when p_numero_documento='99004' and p_razon_social = v_razon_social_control_tributario
  				then v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  			else
  				v_resultado :=(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_est_validar_nit_casos_especiales'));
  		end case;
  		  		
  	else  
  		v_resultado:=sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
  end case;
			
  return v_resultado;

  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_ope_validar_nit_razon_social_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_punto_venta_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica si el punto de venta se encuentra en la tabla sre_fac_puntos_ventas a traves de los campos: contribuyente_id, sucursal_id y
numero_pos
PARAMETROS INGRESO
    p_json: Datos de recepcion en formato json.
PARAMETROS SALIDA
    v_resultado:  Resultado de tipo smallint al cual se asigna el valor de 1000 caso de exito y 82 en caso de no existir un resultado
SUBSISTEMA : Facturación
FECHA CREACION : 29/03/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripción>
NUMERO SECUENCIAL : <número secuencial>
FECHA DE MODIFICACION :<10/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <número Versión secuencial>
**************************************************************************************************************************************************/

declare
  p_punto_venta_id Integer := 0;
  p_nit            bigint  := 0;
  p_sucursal_id    integer := 0;
  
  v_resultado        smallint;
  v_contribuyente_id bigint := 0;
  v_estado_punto_venta_vigente integer := 631; -- VIGENTE
  
begin
	
  p_punto_venta_id := (p_json->'xmlRecepcionGenerica'->>'p_punto_venta_id');
  p_nit            := (p_json->'xmlRecepcionGenerica'->>'p_nit');
  p_sucursal_id    := (p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');
 
 	
-- 82 Codigo punto de venta no valido
-- and a.estadoPuntoVentaId= :pEstadoPuntoVentaId and a.estadoId = 'AC'
  if p_punto_venta_id is null or  p_punto_venta_id=0 then
  	v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  elsif p_punto_venta_id > 0 then 

      v_contribuyente_id :=  (select sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit));
      
  	  v_resultado :=  (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                       from sre_recaudaciones.sre_fac_puntos_ventas as a
                       where a.numero_pos = p_punto_venta_id 
                       and a.contribuyente_id = v_contribuyente_id
                       and a.sucursal_id = p_sucursal_id
                       and a.estado_punto_venta_id = v_estado_punto_venta_vigente
                       limit 1);
  end if;
	  
  return coalesce(v_resultado,(sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_punto_venta_recepcion')));
  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_punto_venta_recepcion');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_punto_venta_recepcion'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_solicitud_proceso_masivo(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : FacturaciÃƒÂ³n
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare              
  v_resultado smallint :=1000;
  v_persona_contribuyente_id bigint=0;
  
  p_tipo_emision_id smallint:=0;
  p_nit bigint:=0;
begin		
   --129 = Registro de solicitud de proceso masivo inexistente.
  p_tipo_emision_id := (p_json->'xmlRecepcionGenerica'->>'p_tipo_emision_id');
  
	case
		when p_tipo_emision_id=3 then
			p_nit := (p_json->'xmlRecepcionGenerica'->>'p_nit');
			v_persona_contribuyente_id:=sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit);
	
			v_resultado := coalesce((select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') from sre_recaudaciones.sre_fac_solicitudes_procesos_masivos where estado_id='AC' and persona_contribuyente_id=v_persona_contribuyente_id limit 1), sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_solicitud_proceso_masivo'));
			return v_resultado; 
	else
			v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
			return v_resultado;
	end case;
       	  	
  EXCEPTION
  when others
    then	  
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_solicitud_proceso_masivo');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_solicitud_proceso_masivo'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_subtotal(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Optimización de la función, en el caso de que la función encuentre la primera observación del subtotal sale del FOR
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_subtotal numeric(20,5):=0;
  
  p_cantidad numeric(20,5):=0;
  p_precio_unitario numeric(20,5):=0;
  p_monto_descuento numeric(20,5):=0;
   
  v_resultado       smallint := 0;
  
  v_sw smallint:=0;
  
  i json;
  v_json_prueba json;
  v_detalle varchar;  
begin
 --55 - Calculo del subtotal incorrecto
 	v_resultado    :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));
	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
	v_detalle := cast (v_json_prueba as varchar);
	
  	if(left(v_detalle, 1) = '[')
  	then
	  	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
			loop	
			 p_subtotal :=(select cast(i->>'subTotal' as numeric(20,5)));
			 p_cantidad :=(select cast(i->>'cantidad' as numeric(20,5)));
			 p_precio_unitario :=(select cast(i->>'precioUnitario' as numeric(20,5)));
			 p_monto_descuento :=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0) ;

			if(sre_recaudaciones.sre_fac_val_calcular_subtotal(p_subtotal, p_cantidad, p_precio_unitario,  p_monto_descuento) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				v_sw=1;	
				EXIT;
			end if;			
		end loop;
  	else
  	
  			 p_subtotal :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));			 
			 p_cantidad :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'cantidad' as numeric(20,5)));
			 p_precio_unitario :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'precioUnitario' as numeric(20,5)));
			 p_monto_descuento :=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0) ;
		
		
			if(sre_recaudaciones.sre_fac_val_calcular_subtotal(p_subtotal, p_cantidad, p_precio_unitario,  p_monto_descuento) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				v_sw=1;
			end if;
  	end if;
  		 
  	if(v_sw=0) then
  		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  	end if;
	
	
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_subtotal');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_subtotal_con_redondeo(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Esta funcion permite validar el subtotal con redondeo a dos decimales
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Optimización de la función, en el caso de que la función encuentre la primera observación del subtotal sale del FOR
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_subtotal numeric(20,5):=0;
  
  p_cantidad numeric(20,5):=0;
  p_precio_unitario numeric(20,5):=0;
  p_monto_descuento numeric(20,5):=0;
   
  v_resultado       smallint := 0;
  
  v_sw smallint:=0;
  
  i json;
  v_json_prueba json;

begin
 --55 - Calculo del subtotal incorrecto
 	v_resultado    :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));
	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
  	if(cast (v_json_prueba as varchar) like '%[%')
  	then
	  	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
			loop	
			 p_subtotal :=(select cast(i->>'subTotal' as numeric(20,5)));
			 p_cantidad :=(select cast(i->>'cantidad' as numeric(20,5)));
			 p_precio_unitario :=(select cast(i->>'precioUnitario' as numeric(20,5)));
			 p_monto_descuento :=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0) ;
			if(sre_recaudaciones.sre_fac_val_calcular_subtotal_con_redondeo(p_subtotal, p_cantidad, p_precio_unitario,  p_monto_descuento) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				v_sw=1;	
				EXIT;
			end if;			
		end loop;
  	else
  			 p_subtotal :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
			 
			 p_cantidad :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'cantidad' as numeric(20,5)));
			 p_precio_unitario :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'precioUnitario' as numeric(20,5)));
			 p_monto_descuento :=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0) ;
			
			 
			if(sre_recaudaciones.sre_fac_val_calcular_subtotal_con_redondeo(p_subtotal, p_cantidad, p_precio_unitario,  p_monto_descuento) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				v_sw=1;
			end if;
  	end if;
  		 
  	if(v_sw=0) then
  		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  	end if;
	
	
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_subtotal_moneda_extranjera');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal_moneda_extranjera'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_subtotal_hoteles(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : 22/07/2019
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Optimización de la función, en el caso de que la función encuentre la primera observación del subtotal sale del FOR
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<13/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_subtotal numeric(20,5):=0;
  
  p_cantidad numeric(20,5):=0;
  p_precio_unitario numeric(20,5):=0;
  p_monto_descuento numeric(20,5):=0;
   
  v_resultado       smallint := 0;
  
  v_sw smallint:=0;
  
  i json;
  v_json_prueba json;
  v_detalle varchar;

begin
 --55 - Calculo del subtotal incorrecto
 	v_resultado    :=(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));
	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
	v_detalle := cast (v_json_prueba as varchar);

  	if(left(v_detalle, 1) = '[')
  	then
	  	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle')
			loop	
			 p_subtotal :=(select cast(i->>'subTotal' as numeric(20,5)));
			 p_cantidad :=(select cast(i->>'cantidadDias' as numeric(20,5)));
			 p_precio_unitario :=(select cast(i->>'precioUnitario' as numeric(20,5)));
			 p_monto_descuento :=coalesce((select cast(i->>'montoDescuento' as numeric(20,5))),0) ;

			if(sre_recaudaciones.sre_fac_val_calcular_subtotal(p_subtotal, p_cantidad, p_precio_unitario,  p_monto_descuento) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				v_sw=1;	
				EXIT;
			end if;			
		end loop;
  	else
  			 p_subtotal :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'subTotal' as numeric(20,5)));
			 
			 p_cantidad :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'cantidadDias' as numeric(20,5)));
			 p_precio_unitario :=(select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'precioUnitario' as numeric(20,5)));
			 p_monto_descuento :=coalesce((select cast(p_json->'XmlFactura'->'factura'->'detalle'->>'montoDescuento' as numeric(20,5))),0) ;
						
			if(sre_recaudaciones.sre_fac_val_calcular_subtotal(p_subtotal, p_cantidad, p_precio_unitario,  p_monto_descuento) <> sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')) then
				v_sw=1;
			end if;
  	end if;
  		 
  	if(v_sw=0) then
  		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');  	
  	end if;
	
	
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_subtotal');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_subtotal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_sucursal_recepcion(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<10/05/2019>
AUTOR DE LA MODIFICACION : Equipo Tyrell
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_sucursal_id Integer:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_id');
  p_nit          bigint:=(p_json->'xmlRecepcionGenerica'->>'p_nit');
  v_persona_contribuyente_id bigint:= (sre_recaudaciones.sre_fac_ope_obtener_persona_contribuyente_id(p_nit));  
  v_resultado smallint;
   
begin
  
	
  v_resultado :=( select 1000 
  				  from   scn_contribuyentes.scn_emp_sucursales_contribuyentes 
  				  where  persona_contribuyente_id=v_persona_contribuyente_id 
  				  and  numero_sucursal = p_sucursal_id limit 1);
  
  return coalesce(v_resultado,(select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_sucursal')));
  
	
  
  EXCEPTION
  when others
    then
	  return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_codigo_sucursal'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_tipo_envase_recepcion_manual(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Verifica que el tipo de envase se BIDONES, BOTELLA u OTRO
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON    
PARAMETROS SALIDA
Valor de exito 1000 si se cumplen las condiciones de la validacion
SUBSISTEMA : Facturación
FECHA CREACION : 02/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
  p_tipo_envase varchar:=((p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEnvase'));
  v_tipo_envase_descripcion varchar :='';
  v_resultado smallint := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
begin	
		if(p_tipo_envase is not null or p_tipo_envase <>'') then
		case
				when(SELECT UPPER(p_tipo_envase)='T') then 
						v_tipo_envase_descripcion = 'BOTELLAS';		
		
				when(SELECT UPPER(p_tipo_envase)='B') then 
						v_tipo_envase_descripcion = 'BIDONES';	--adicionar bidones en transversales
					
				when(SELECT UPPER(p_tipo_envase)='O') then 
						v_tipo_envase_descripcion = 'OTROS';	
						else 
				v_tipo_envase_descripcion:= '0'; --inexistente	
		end case;	

		v_resultado := coalesce((select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                          FROM str_transversales.str_cps_clasificadores c
                          WHERE c.descripcion = v_tipo_envase_descripcion
                           limit 1)
                           ,
                           (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_tipo_envase_recepcion_manual'))
                         );	
                         return v_resultado;	
                end if; 
	return v_resultado;		
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_val_tipo_envase_recepcion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_total_fob_frontera(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	
	p_total_fob_frontera numeric(20,5) := 0;
	p_precio_valor_bruto numeric(20,5) := 0;
	p_gastos_transporte_frontera numeric(20,5) := 0;
	p_gastos_seguro_frontera numeric(20,5) := 0;
	v_resultado smallint := 0;
	
begin
	--- 20190423 rgt
	--- 0 total fob frontera incorrecto
	
	p_total_fob_frontera := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera' as numeric(20,5))));
	p_precio_valor_bruto := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto' as numeric(20,5))));
	p_gastos_transporte_frontera := (select (cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera' as numeric (20,5))));
	p_gastos_seguro_frontera  := (select (cast (p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera' as numeric(20,5))));
	v_resultado  := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_total_fob_frontera'));

	if((p_precio_valor_bruto + p_gastos_transporte_frontera + p_gastos_seguro_frontera) = p_total_fob_frontera)then
		v_resultado := sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito');
	end if;
	
	return v_resultado;
	
	 EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_total_fob_frontera');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_total_fob_frontera'));
		
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_unidad_medida(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare      
  v_sw smallint:=0;
  p_unidad_medida integer:=0;
  
  i json;

  v_resultado   smallint := 0;
  v_json_prueba json;
  v_detalle varchar;
  
begin
   
--125 - Actividad Invalida	
 	v_resultado := (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_unidad_medida')); 	
  	v_json_prueba  := (p_json->'XmlFactura'->'factura'->'detalle');
  	v_detalle := cast (v_json_prueba as varchar);
  	
  	if(left(v_detalle, 1) = '[')
  	then
	  	for i in select * from json_array_elements(p_json->'XmlFactura'->'factura'->'detalle') loop    	    
	    	p_unidad_medida :=(i->>'unidadMedida');	    		
			
	    	v_resultado := coalesce((SELECT sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') FROM sre_recaudaciones.sre_fac_clasificadores where agrupador = 'UNIDAD MEDIDA' and codigo_clasificador=p_unidad_medida limit 1),0);    
			
			if (v_resultado=0) then
				return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_unidad_medida'));
			end if;						
	    end loop; 
  	else
  		p_unidad_medida :=(p_json->'XmlFactura'->'factura'->'detalle'->>'unidadMedida');
  		v_resultado := coalesce((SELECT sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito') FROM sre_recaudaciones.sre_fac_clasificadores where agrupador = 'UNIDAD MEDIDA' and codigo_clasificador=p_unidad_medida limit 1),0);
  		
  		if (v_resultado=0) then
			return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_unidad_medida'));
		end if;						  		
  	end if;  
      	
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_unidad_medida');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_unidad_medida'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_validacion_anulados_facturacion_manual(p_json json, p_resultado_recepcion bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Ejecuta las validaciones de CAED y numero de documento fiscal, si exiten errores se registran en las tablas de errores si no existen errores se registran en la tabla de recepciones correctas.
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
recepcion_anulado_id
PARAMETROS SALIDA
recepcion_correcta_anulada_id
SUBSISTEMA : Facturación
FECHA CREACION : 03/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
   
   v_resultado_id_recepciones_correctas bigint:=0;
   p_json_errores json;
   p_resultado_registro smallint;
   v_recepcion_paquete_id bigint;
   v_resultado_actualizacion_estado bigint;
   p_resultado_registro_errores bigint;
   p_tipo_documento_sector_id integer; 	
begin
	
	v_recepcion_paquete_id:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_recepcion_paquete_id' as bigint));
	p_tipo_documento_sector_id := (select cast(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id' as Integer));
	-- Nota: Crea una tabla temporal para almacenar el resultado de la validacion de la factura. 
	drop table if exists tbl_resultado_ejecucion;		 
	create temp table tbl_resultado_ejecucion (nombre_funcion_validacion varchar, resultado_ejecucion smallint);	

	  insert into tbl_resultado_ejecucion values('sre_fac_val_caed_numero_documento_fiscal_manual', (select sre_recaudaciones.sre_fac_val_caed_numero_documento_fiscal_manual(p_json )));--del autorizado, si no es estado AUTORIZADO
	  insert into tbl_resultado_ejecucion values('sre_fac_val_caed_recepcion_manual', (select sre_recaudaciones.sre_fac_val_caed_recepcion_manual(p_json )));	  
	  insert into tbl_resultado_ejecucion values('sre_fac_val_existe_venta_anulado_facturacion_manual', (select sre_recaudaciones.sre_fac_val_existe_venta_anulado_facturacion_manual(p_json )));--16092019 coordinamos con Patty que se buscara en ventas por el momento.
	
		if (select count(*) from tbl_resultado_ejecucion where resultado_ejecucion<>1000)=0 then
				v_resultado_id_recepciones_correctas:=(
				sre_recaudaciones.sre_fac_reg_recepciones_correctas_anulados_manual
				(
					p_json, p_resultado_recepcion		
				)
				); 
		
		v_resultado_actualizacion_estado:= (select sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_anulado_manual(p_resultado_recepcion, 'RECEPCIONADO CORRECTO'));
		

		else 
			if (select count(*) from tbl_resultado_ejecucion where resultado_ejecucion<>1000)>0 then  
			--Nota: Registra el resultado en las tablas de no validos Recepciones Errores, Recepciones Detalles
					
			p_json_errores:=(
				select row_to_json(tbl_resultado)
				from (
					select array_to_json(array_agg(row_to_json(tbl))) as resultados 
					from tbl_resultado_ejecucion tbl
					where tbl.resultado_ejecucion <> 1000
				) tbl_resultado
			);		
			p_resultado_registro_errores:=sre_recaudaciones.sre_reg_errores_detalles_anulados_facturacion_manual(p_json, p_json_errores,p_resultado_recepcion); --CREAR MAS p_recepcion_id		
			v_resultado_actualizacion_estado:= (select sre_recaudaciones.sre_fac_ope_actualizar_estado_recepcion_anulado_manual(p_resultado_recepcion, 'RECEPCIONADO CON ERRORES'));	
			end if;		
		end if;


		
		--Nota: Realiza rollback a toda la transaccion en caso de generarse alguna excepcion.
		if(v_resultado_id_recepciones_correctas<0 or v_resultado_actualizacion_estado<0) then
			raise exception '[Rollback] fallo e registro en una de las tablas facturacion manual';	
		end if;		
	
	return v_resultado_id_recepciones_correctas;		

	EXCEPTION
		  when others
		    then
		      return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion(SQLSTATE, SQLERRM, 'sre_fac_val_validacion_registro_anulados_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_val_verificar_existencia_metodo_pago_clasificador(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_metodo_pago Integer := 0;
  v_resultado smallint := 0;
  v_agrupador varchar := '';
  
begin
   --96 Metodo pago inexistente
  p_metodo_pago := (select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'codigoMetodoPago' as Integer));
  v_resultado   := (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_metodo_pago'));
  v_agrupador := 'METODO PAGO';

  v_resultado := coalesce(
                                                                                                              (select sre_recaudaciones.sre_fac_par_codigo_respuesta('codigo_exito')
                                          from sre_recaudaciones.sre_fac_clasificadores as a
                                          where a.agrupador = v_agrupador and
                                                a.codigo_clasificador = p_metodo_pago
                                          limit 1)
                                          ,
                                          (select sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_metodo_pago'))
                         );

               return v_resultado;

  EXCEPTION
  when others
    then
                  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_fac_val_verificar_existencia_metodo_pago_clasificador');
      return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_metodo_pago'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_verificar_registros(p_etapa integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_sql varchar;
	i integer;
	v_etapas_descripcion varchar[] := array['Generacion CUF', 'Consumo Servicios','Validaciones Generales XML/XSD','Sincronizacion de Catalogos','Sincronizacion de fecha y hora','Eventos Significativos','Envio Paquetes','Firma Digital'];	
	v_sistema_id bigint := 37;
	
	-------------------
	v_etapas_casos_prueba integer[] := array[0,1,2,3,4,5,6,7];
	v_contador_consulta integer :=0;	
	v_resultado varchar;
	
begin
	foreach i in array v_etapas_casos_prueba
	loop
		v_sql := (sre_recaudaciones.sre_fac_ope_verifica_registros_en_casos_prueba(i,1));
		execute v_sql using v_sistema_id into v_contador_consulta;
		
		
		if(v_contador_consulta > 0)then
			v_resultado := concat(v_resultado, v_etapas_descripcion[i+1], ',');
		end if;
		
	end loop;

	return v_resultado;
	
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fac_web_asignar_rol_alquiler(p_rol bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare

	cur_contribuyentes cursor for
		select usuario_id from sau_usuarios.sau_adm_usuarios where persona_id in 
			(
				select persona_contribuyente_id 
				from scn_contribuyentes.scn_emp_ciius_contribuyentes 
				where codigo_ciiu_id = 71002 and persona_contribuyente_id IN
					(	
						select persona_contribuyente_id
						from sre_recaudaciones.sre_fac_contribuyentes_modalidades 
						where modalidad_facturacion_id = 1244 and estado_id = 'AC'
					)
			)	
		and estado_usuario_id = 565
		;

	v_asignacion	record;

	BEGIN
		for v_rec_usu in cur_contribuyentes loop
			--<asignar rol a usuario>
			select ok, error, rol_usuario_id into v_asignacion
			from sre_recaudaciones.sre_fac_fweb_asignar_rol_usuario(p_rol::int8, v_rec_usu.usuario_id::int8)
			as (ok boolean, error varchar, rol_usuario_id int8);
			if	v_asignacion.ok then 
			else
			end if;				
    	end loop;
		return 'EXITO';
	END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_actualiza_conteo_facturas_ventas_manuales()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función para actualizar la tabla de Control de presentación de facturas Manuales de Ventas de un Contribuyente.
                Bajo el siguiente criterio: 

				- primero, encuentra todas aquellas solicitudes de Facturas Manuales que hayan sido entregadas y que 
				  esté Activa
				- segundo, hace un conteo con todas las tablas de Facturas Manuales que tengan los mismos datos de NIT y
				  Código CAED
                - tercero, realiza la union de todos los registros cuyos totales sean diferentes de cero
				- cuarto, recorre el cursor para actualizar el total de facturas presentadas en la tabla
				  sre_recaudaciones.sre_fman_documentos_fiscales_preregistros

                --2996	1	estado_entrega_preregistro_id	ENTREGADO	PENT
                --2990	1	estado_documento_fiscal_preregistro_id	ACTIVO	DACT
                --2973	1	tipo_impresion_facturacion_id	MANUAL	TMAN
	
PARAMETROS SALIDA

SUBSISTEMA : Recaudaciones
FECHA CREACION :29/08/2019
AUTOR : Grupo Tully
VERSION : 1.0.0.0
EAD : 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
DECLARE
 
    regf          RECORD;

 --CURSOR PARA CONTEO DE FACTURAS MANUALES ESTANDAR
CUR_CONTEO_CONTROL_FACTURAS CURSOR FOR
SELECT a.*,(case when b.total is null then 0 else b.total end) total FROM
 (    
   SELECT x.persona_contribuyente_id , x.solicitud_impresion_manual_id, x.caed, x.tipo_documento_sector_id  
     FROM sre_recaudaciones.sre_fman_documentos_fiscales_preregistros x
    WHERE x.estado_entrega_preregistro_id = 2996
      AND x.modalidad_facturacion_id = 602
      AND x.tipo_impresion_facturacion_id = 2973
 GROUP BY x.persona_contribuyente_id, x.caed, x.tipo_documento_sector_id , x.solicitud_impresion_manual_id
 ORDER BY x.persona_contribuyente_id, x.solicitud_impresion_manual_id
 ) a
  LEFT JOIN
(
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_estandares y
  GROUP BY 1,2,3
UNION
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_alcanzadas_ice y
  GROUP BY 1,2,3
UNION
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_alquileres y
  GROUP BY 1,2,3
UNION	
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_entidades_financieras y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_hidrocarburos y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_hospitales y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_hoteles y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_libres_consignaciones y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_notas_credito_debito y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_notas_tasas_cero y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_notas_zona_franca y
  GROUP BY 1,2,3
UNION	  
  SELECT y.persona_contribuyente_emisor_id, y.caed, y.tipo_documento_sector_id, count(*) total
      FROM sre_recaudaciones.sre_fman_ventas_sectores_educativos y
  GROUP BY 1,2,3	
 ) b  
   ON (a.persona_contribuyente_id=b.persona_contribuyente_emisor_id 
       and a.caed=b.caed
       and a.tipo_documento_sector_id = b.tipo_documento_sector_id);
 
						 
BEGIN
    -- ACTUALIZA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE FACTURAS HAYAN TOTALIZADO PARA CADA NÚMERO DE NIT 
         OPEN CUR_CONTEO_CONTROL_FACTURAS;
		   LOOP
             FETCH CUR_CONTEO_CONTROL_FACTURAS INTO regf;
			 EXIT WHEN NOT FOUND;
			 UPDATE sre_recaudaciones.sre_fman_documentos_fiscales_preregistros
                     SET cantidad_emitida = regf.total
                   WHERE
                         persona_contribuyente_id = regf.persona_contribuyente_id
					AND  solicitud_impresion_manual_id = regf.solicitud_impresion_manual_id
                    AND  caed = regf.caed;
			 IF not (FOUND) THEN
     		 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_CONTROL_FACTURAS;	 


  EXCEPTION
    when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;
end;

$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_actualiza_tabla_resumen_ventas_contribuyente()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función para actualizar la tabla de Resumen de Ventas de un Contribuyente. Bajo el siguiente criterio: 

				- primero, realiza un conteo de los diferentes tipos de documentos fiscales definidos en la grilla para una gestión, agrupándolos por
                  nit, gestión y periodo en un Cursor (cada tipo de factura tiene su propia tabla)				
				- segundo, recorre el cursor y por cada registro intenta hacer un UPDATE, si el registro NO EXISTE hace un INSERT  

	
PARAMETROS SALIDA

SUBSISTEMA : Recaudaciones
FECHA CREACION :11/07/2019
AUTOR : Equipo Tully
VERSION : 1.0.0.0
EAD : 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
DECLARE
 
	 v_fecha_registro_aux 	timestamp:=now();
	 v_gestion_inicial      bigint := 2018;	 
	 v_gestion_final       	bigint DEFAULT 0;
     v_mes_actual           bigint DEFAULT 0;
     v_dia_actual           bigint DEFAULT 0;
	 

    regf          RECORD;
    regn          RECORD;
    regd          RECORD;

	--CURSOR PARA FACTURASs
   CUR_CONTEO_FACTURAS CURSOR(p_gestion bigint) FOR
   SELECT A.idEmisor, A.nitEmisor, A.anio, A.mes, SUM(A.facturas) totalfacturas, SUM(A.totalvalidas) totalfacturasvalidas, SUM(A.totalanuladas) totalfacturasanuladas, SUM(A.totalErrados) totalObservados  FROM
   (
    
   select a.*,b.totalErrados
   from
   (
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  ---FACTURA ESTANDAR	
	 WHERE	 
        --gestion = --p_gestion  
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
     ) a
	  left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_estandar_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_estandares where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
     UNION ALL		 

	     
	     
	     
   select a.*,b.totalErrados
   from
   (    
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_alcanzadas_ice   --- ***FACTURA VENTAS ALCANZADAS ICE
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
	 ) a
	  left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_alcanzada_ice_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_alcanzadas_ice where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)

     UNION ALL

	     
   select a.*,b.totalErrados
   from
   (     
	     
	     
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_alquileres    --- ***FACTURA DE ALQUILER DE BIENES INMUEBLES
	 WHERE	 
       -- gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id 
		  ) a
	  left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_alquiler_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_alquileres where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
     UNION ALL

	     
	     
	     
	     
	     
   select a.*,b.totalErrados
   from
   (     
	     
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones    --- ***FACTURA DE VENTAS COMERCIALES EXPORTACIONES
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id 
	     ) a
    left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_comercial_exportacion_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_comerciales_exportaciones where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
	 
     UNION ALL

	     
	     
	     
   select a.*,b.totalErrados
   from
   (   
	     
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_hidrocarburos    --- ***FACTURA DE VENTAS HIDROCARBUROS
	 WHERE	 
       -- gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
	     ) a
     left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_hidrocarburo_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_hidrocarburos where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
	  
     UNION ALL

	     
	     
   select a.*,b.totalErrados
   from
   (       
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_entidades_financieras    --- ***FACTURA DE VENTAS ENTIDADES FINANCIERAS
	 WHERE	 
       -- gestion = p_gestion  --2019
        gestion =2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
	     ) a
 left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_entidad_financiera_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_entidades_financieras where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
     UNION ALL

	     
	     
	     
	     
  select a.*,b.totalErrados
   from
   (    
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_hospitales    --- ***FACTURA DE VENTAS HOSPITALES
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
	     ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_hospital_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_hospitales where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
		 
     UNION ALL

	     
	     
	     
	     
	select a.*,b.totalErrados
   from
   (        
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_hoteles    --- ***FACTURA DE VENTAS HOTELES
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
     ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_hotel_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_hoteles where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)
	 
	 
	 
	 
     UNION ALL
   select a.*,b.totalErrados
   from
   (   
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_libres_consignaciones    --- ***FACTURA DE VENTAS LIBRES CONSIGNACIONES
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
	       ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_libre_consignacion_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_libres_consignaciones where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)

     UNION ALL

	     
	    select a.*,b.totalErrados
   from
   (     
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_notas_tasas_cero    --- ***FACTURA DE VENTAS NOTAS TASA CERO
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id		 
	 ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_nota_tasa_cero_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_notas_tasas_cero where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)	 
     UNION ALL

	     
	     
select a.*,b.totalErrados
   from
   (     
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_notas_zona_franca    --- ***FACTURA DE VENTAS NOTAS ZONA FRANCA
	 WHERE	 
        -- gestion = p_gestion  --2019
         gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id		 
     ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_nota_zona_franca_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_notas_zona_franca where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)	
     UNION ALL

	     
	     
	     
select a.*,b.totalErrados
   from
   (    
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_sectores_educativos    --- ***FACTURA DE VENTAS SECTORES EDUCATIVOS
	 WHERE	 
        --gestion = p_gestion  --2019
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
    ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_sector_educativo_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_sectores_educativos where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)	
     UNION ALL

	     
	     
	     
	     
	select a.*,b.totalErrados
   from
   (    
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS facturas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras    --- ***FACTURA DE VENTAS NOTAS MONEDAS EXTRANJERAS
	 WHERE	 
       -- gestion = p_gestion  --2019
        gestion =2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id	
	  ) a
	      left join
	(	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_nota_moneda_extranjera_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_notas_monedas_extranjeras where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	 ) b  
	 on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)	   
	     
	     
	     
		 ) A
     GROUP BY
         A.idEmisor,A.nitEmisor,A.anio,A.mes	 
     ORDER BY 
         A.idEmisor,A.nitEmisor,A.anio,A.mes;
	

	--CURSOR PARA NOTAS DE CREDITO/DEBITO
    CUR_CONTEO_NOTAS CURSOR(p_gestion bigint) FOR
    SELECT A.idEmisor,A.nitEmisor,A.anio,A.mes,SUM(A.notas) totalnotas,SUM(A.totalvalidas) totalnotasvalidas,SUM(A.totalanuladas) totalnotasanuladas,SUM(A.totalErrados) totalObservados FROM
    (
    select a.*,b.totalErrados
    from
    (   
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS notas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidas,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanuladas		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_notas_credito_debito  ---NOTA DE CREDITO-DEBITO
	 WHERE	 
        --gestion = p_gestion   --2014
        gestion = 2019
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
	       ) a
	      left join
	  (	  
	    
	   select persona_contribuyente_id, CAST (date_part('month', fecha_emision) as integer) as mes, COALESCE(count(recepcion_error_nota_credito_debito_id),0) AS totalErrados 
	    from sre_recaudaciones.sre_fman_recepciones_errores_notas_credito_debito where  
		   CAST (date_part('year', fecha_emision) as integer) = 2019
		 group by
			 CAST (date_part('month', fecha_emision) as integer)
			 ,persona_contribuyente_id
	   ) b  
	   on(a.idEmisor=b.persona_contribuyente_id and a.mes=b.mes)	 
	 
		 ) A
     GROUP BY
         A.idEmisor,A.nitEmisor,A.anio,A.mes	 
     ORDER BY 
         A.idEmisor,A.nitEmisor,A.anio,A.mes;

	--CURSOR PARA DOCUMENTOS EQUIVALENTES
	CUR_CONTEO_EQUIVALENTES CURSOR(p_gestion bigint) FOR
    SELECT A.idEmisor,A.nitEmisor,A.anio,A.mes,SUM(A.equivalentes) totalequivalentes,SUM(A.totalvalidos) totalequivalentesvalidos,SUM(A.totalanulados) totalequivalentesanulados, 0 as totalObservados FROM
    (
     SELECT 
         persona_contribuyente_emisor_id AS idEmisor, 
         nit_emisor AS nitEmisor,
         gestion  AS anio,
	     periodo  AS mes,
	     tipo_documento_fiscal_id AS tipodocumento,
         COALESCE(count(tipo_documento_fiscal_id),0) AS equivalentes,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2960   THEN 1 END),0) AS totalvalidos,
         COALESCE(COUNT(CASE estado_venta_manual_documento_fiscal_id WHEN 2961   THEN 1 END),0) AS totalanulados		 
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  ---DOCUMENTOS EQUIVALENTES
	 WHERE	 
        gestion = p_gestion  --2015
     GROUP BY
         persona_contribuyente_emisor_id,
         nit_emisor,
	     gestion,
	     periodo,
	     tipo_documento_fiscal_id
		 ) A
     GROUP BY
         A.idEmisor,A.nitEmisor,A.anio,A.mes	 
     ORDER BY 
         A.idEmisor,A.nitEmisor,A.anio,A.mes;	
	
						 
BEGIN

  -- Año de la Gestión actual, hasta donde se correrá el JOB
   SELECT date_part('year',current_date) into v_gestion_final;
   SELECT date_part('month',current_date) into v_mes_actual;   
   SELECT date_part('day',current_date) into v_dia_actual;      
 
    -- ACTUALIZA O INSERTA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE FACTURAS POR GESTIÓN Y POR MES PARA CADA NÚMERO DE NIT 
     FOR i IN v_gestion_inicial..v_gestion_final LOOP
	 
         OPEN CUR_CONTEO_FACTURAS(i);
		   LOOP
             FETCH CUR_CONTEO_FACTURAS INTO regf;
			 EXIT WHEN NOT FOUND;
			 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
                   SET cantidad_facturas                = regf.totalfacturasvalidas,
                       cantidad_anulados                = regf.totalfacturasanuladas,
                       cantidad_observados              = regf.totalObservados,
                       fecha_ultima_modificacion        = v_fecha_registro_aux					   
                   WHERE
                       persona_contribuyente_id = regf.idEmisor
                       AND gestion              = regf.anio
                       AND mes                  = regf.mes;
			 IF not (FOUND) THEN
			 begin
			 INSERT INTO sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales 
                  (resumen_venta_documento_fiscal,usuario_registro_id,usuario_ultima_modificacion_id,persona_contribuyente_id,estado_venta_resumen_manual_id,tipo_documento_id,numero_documento,codigo_complementario,numero_sucursal,gestion,mes,cantidad_facturas,cantidad_notas,cantidad_documentos_equivalente,cantidad_dui,cantidad_anulados,fecha_registro,fecha_ultima_modificacion,estado_id,cantidad_observados)
			      VALUES (NEXTVAL('sre_recaudaciones.sre_fman_resumen_ventas_docum_resumen_venta_documento_fisca_seq'),1001,1001,regf.idEmisor,2694,44,2310700,'VCP',10,regf.anio,regf.mes,regf.totalfacturasvalidas,0,0,0,regf.totalfacturasanuladas,v_fecha_registro_aux,v_fecha_registro_aux,'AC',regf.totalObservados);			 
             EXCEPTION WHEN unique_violation THEN				  
			 END;
			 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_FACTURAS;	 
     END LOOP;

    -- ACTUALIZA EL ESTADO (estado_venta_resumen_manual_id) DE LOS REGISTROS DEL RESUMEN QUE SE MANTIENE ACTIVOS O FUERA DE PLAZO	 
	 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
        SET estado_venta_resumen_manual_id   = 2693,
            fecha_ultima_modificacion        = v_fecha_registro_aux					   
      WHERE
            gestion  = v_gestion_final
        AND mes      = v_mes_actual ;

     IF v_dia_actual < 9 THEN
		 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
            SET estado_venta_resumen_manual_id   = 2693,
                fecha_ultima_modificacion        = v_fecha_registro_aux					   
          WHERE
                gestion  = v_gestion_final
            AND mes = v_mes_actual-1;
		ELSE
		 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
            SET estado_venta_resumen_manual_id   = 2694,
                fecha_ultima_modificacion        = v_fecha_registro_aux					   
          WHERE
                gestion  = v_gestion_final
            AND mes = v_mes_actual-1;
		
      END IF;

    -- ACTUALIZA O INSERTA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE NOTAS DE DEBITO/CREDITO POR GESTIÓN Y POR MES PARA CADA NÚMERO DE NIT	 
     FOR i IN v_gestion_inicial..v_gestion_final LOOP
	 
         OPEN CUR_CONTEO_NOTAS(i);
		   LOOP
             FETCH CUR_CONTEO_NOTAS INTO regn;
			 EXIT WHEN NOT FOUND;

			 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
                   SET cantidad_notas                   = regn.totalnotasvalidas,
                       cantidad_anulados                = regn.totalnotasanuladas,
					   cantidad_observados              = regn.totalObservados,
					   fecha_ultima_modificacion        = v_fecha_registro_aux
                   WHERE
                       persona_contribuyente_id = regn.idEmisor
                       AND gestion              = regn.anio
                       AND mes                  = regn.mes;
			 IF not (FOUND) THEN
			 BEGIN
			 INSERT INTO sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales 
                  (resumen_venta_documento_fiscal,usuario_registro_id,usuario_ultima_modificacion_id,persona_contribuyente_id,estado_venta_resumen_manual_id,tipo_documento_id,numero_documento,codigo_complementario,numero_sucursal,gestion,mes,cantidad_facturas,cantidad_notas,cantidad_documentos_equivalente,cantidad_dui,cantidad_anulados,fecha_registro,fecha_ultima_modificacion,estado_id,cantidad_observados)
			      VALUES (NEXTVAL('sre_recaudaciones.sre_fman_resumen_ventas_docum_resumen_venta_documento_fisca_seq'),1001,1001,regn.idEmisor,2694,44,2310800,'VCP',11,regn.anio,regn.mes,0,regn.totalnotasvalidas,0,0,regn.totalnotasanuladas,v_fecha_registro_aux,v_fecha_registro_aux,'AC',regn.totalObservados);
             EXCEPTION WHEN unique_violation THEN				  
			 END;
			 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_NOTAS;
	 END LOOP;
	 
    -- ACTUALIZA O INSERTA LOS REGISTROS QUE LOS RESULTADOS DEL CONTEO DE DOCUMENTOS EQUIVALENTES POR GESTIÓN Y POR MES PARA CADA NÚMERO DE NIT	 
     FOR i IN v_gestion_inicial..v_gestion_final LOOP
	 
         OPEN CUR_CONTEO_EQUIVALENTES(i);
		   LOOP 
             FETCH CUR_CONTEO_EQUIVALENTES INTO regd;
			 EXIT WHEN NOT FOUND;

			 UPDATE sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales
                   SET cantidad_documentos_equivalente  = regd.totalequivalentesvalidos,
                       cantidad_anulados                = regd.totalequivalentesanulados,
					   fecha_ultima_modificacion        = v_fecha_registro_aux
                   WHERE
                       persona_contribuyente_id = regd.idEmisor
                       AND gestion              = regd.anio
                       AND mes                  = regd.mes;
			 IF not (FOUND) THEN
			 BEGIN
			          INSERT INTO sre_recaudaciones.sre_fman_resumen_ventas_documentos_fiscales 
                  (resumen_venta_documento_fiscal,usuario_registro_id,usuario_ultima_modificacion_id,persona_contribuyente_id,estado_venta_resumen_manual_id,tipo_documento_id,numero_documento,codigo_complementario,numero_sucursal,gestion,mes,cantidad_facturas,cantidad_notas,cantidad_documentos_equivalente,cantidad_dui,cantidad_anulados,fecha_registro,fecha_ultima_modificacion,estado_id)
			      VALUES (nextval(sre_recaudaciones.sre_fman_resumen_ventas_docum_resumen_venta_documento_fisca_seq),1001,1001,regd.idEmisor,2694,44,2310900,'VCP',12,regd.anio,regd.mes,0,0,regd.totalequivalentesvalidos,0,regd.totalequivalentesanulados,v_fecha_registro_aux,v_fecha_registro_aux,'AC');
             EXCEPTION WHEN unique_violation THEN				  
			 END;
			 END IF;
           END LOOP;
         CLOSE CUR_CONTEO_EQUIVALENTES;	 	 
	 
     END LOOP;


  EXCEPTION
    when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;
end;

$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_obtener_facturas_compras_por_nit_fecha_emision(p_persona_id bigint, p_anio integer, p_mes integer, p_dia integer)
 RETURNS TABLE(fecha_emision timestamp without time zone, nit_emisor bigint, numero_sucursal integer, numero_documento_fiscal bigint, caed character varying, monto_total bigint, estado_venta_manual_documento_fiscal_id character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función para obtener las facturas de ventas declaradas para un contribuyente por día. 

				- primero, realiza una selección de los diferentes tipos de documentos fiscales de Ventas declaradas por los contribuyentes
				  para la confirmación de las Compras del Contribuyente Consultante(cada tipo de factura tiene su propia tabla)				
	
PARAMETROS SALIDA

SUBSISTEMA : Recaudaciones
FECHA CREACION :16/07/2019
AUTOR : Equipo Tully
VERSION : 1.0.0.0
EAD : 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/

BEGIN
   
   RETURN QUERY
   (
	 Select tbl.fecha_emision,
         tbl.nit_emisor,
         tbl.numero_sucursal, 
         tbl.numero_documento_fiscal,
		 tbl.caed,
         tbl.monto_total,        
         tbl.estado_venta_manual_documento_fiscal_id from
	   (
     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  a1---FACTURA ESTANDAR
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

     UNION ALL		 

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
	 FROM 
         sre_recaudaciones.sre_fman_ventas_sectores_educativos  a1 --- ***FACTURA SECTORES EDUCATIVOS (FALTA DEFINIR LA TABLA)
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

	 
     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
	 FROM 
         sre_recaudaciones.sre_fman_ventas_alquileres   a1 ---FACTURA DE ALQUILER DE BIENES INMUEBLES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_alcanzadas_ice  a1  ---FACTURA ICE
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

	   
     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones  a1  ---FACTURA COMERCIALES EXPORTACIONES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_hidrocarburos  a1  ---FACTURA DE HIDROCARBUROS
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

	   
     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_entidades_financieras  a1  ---FACTURA DE ENTIDADES FINANCIERAS
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_hospitales  a1  ---FACTURA DE HOSPITALES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4

     UNION ALL

     SELECT 
         a1.fecha_emision,
         a1.nit_emisor,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_hoteles  a1 ---FACTURA DE HOTELES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id  = $1
	        AND CAST (date_part('year', fecha_emision) as integer) =  $2
	        AND CAST (date_part('month', fecha_emision) as integer) =  $3
        	AND CAST (date_part('day', fecha_emision) as integer) =  $4
		   ) as tbl

    );
EXCEPTION
    when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;
end;

$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_obtener_facturas_compras_por_nit_fecha_emision_aux(p_persona_id bigint, p_anio character varying, p_mes character varying, p_dia character varying)
 RETURNS TABLE(fecha_emision timestamp without time zone, nit_emisor bigint, numero_sucursal integer, caed character varying, monto_total numeric, estado_venta_manual_documento_fiscal_id character varying)
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Función para obtener las facturas de ventas declaradas para un contribuyente por día. 

				- primero, realiza una selección de los diferentes tipos de documentos fiscales de Ventas declaradas por los contribuyentes
				  para la confirmación de las Compras del Contribuyente Consultante(cada tipo de factura tiene su propia tabla)				
	
PARAMETROS SALIDA

SUBSISTEMA : Recaudaciones
FECHA CREACION :16/07/2019
AUTOR : Equipo Tully
VERSION : 1.0.0.0
EAD : 
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
DECLARE 
v_fecha_emision character varying;
BEGIN
	v_fecha_emision := CONCAT(v_anio,'-',v_mes,'-',v_dia) ;   
   RETURN QUERY
   (
     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_estandares  a1---FACTURA ESTANDAR
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')

     UNION ALL		 

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_sectores_educativos  a1 --- ***FACTURA SECTORES EDUCATIVOS (FALTA DEFINIR LA TABLA)
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')
	 
     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_alquileres   a1 ---FACTURA DE ALQUILER DE BIENES INMUEBLES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')

     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_alcanzadas_ice  a1  ---FACTURA ICE
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')
	   
     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones  a1  ---FACTURA COMERCIALES EXPORTACIONES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')

     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_hidrocarburos  a1  ---FACTURA DE HIDROCARBUROS
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')
	   
     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_entidades_financieras  a1  ---FACTURA DE ENTIDADES FINANCIERAS
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')

     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_hospitales  a1  ---FACTURA DE HOSPITALES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')

     UNION ALL

     SELECT 
         a1.fecha_emision ,
         a1.nit_emisor ,
         a1.numero_sucursal, 
         a1.numero_documento_fiscal,
		 a1.caed,
         a1.monto_total,        
         --montoCredito
         a1.estado_venta_manual_documento_fiscal_id
     FROM 
         sre_recaudaciones.sre_fman_ventas_hoteles  a1 ---FACTURA DE HOTELES
	 WHERE	 
         a1.persona_contribuyente_beneficiario_id = p_persona_id
	 AND a1.fecha_emision = TO_TIMESTAMP(p_fecha_emision, 'yyyy-MM-dd')	   
		 ) ;	   

EXCEPTION
    when others
    then
      RAISE INFO 'Error Name:%', SQLERRM;
      RAISE INFO 'Error State:%', SQLSTATE;
end;

$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_obtener_facturas_observadas_personaid_gestion_periodo(p_persona_id bigint, p_gestion character varying, p_periodo character varying)
 RETURNS TABLE(numero_documento_fiscal bigint, caed character varying, modalidad_facturacion_id integer, tipo_documento_fiscal_id integer, tipo_documento_sector_id integer, fecha_emision timestamp without time zone, mes character varying, periodo character varying, codigo_error_id integer, descripcion character varying)
 LANGUAGE plpgsql
AS $function$ 	
	 BEGIN
	RETURN QUERY
	 ( 
	 -- ESTANDAR
    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_estandares e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_estandares d	on (e.recepcion_error_estandar_id = d.recepcion_error_estandar_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
    
    union all
    -- ALCANZADA POR ICE
	 select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_alcanzadas_ice e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_alcanzadas_ice d	on (e.recepcion_error_alcanzada_ice_id = d.recepcion_error_alcanzada_ice_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
    union all
	
	    -- ALQUILERES
	select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_alquileres e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_alquileres d	on (e.recepcion_error_alquiler_id = d.recepcion_error_alquiler_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
	union all    
		-- COMERCIAL EXPORTACION
    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_comerciales_exportaciones e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_exportaciones d	on (e.recepcion_error_comercial_exportacion_id = d.recepcion_error_comercial_exportacion_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1		
		
    union all
    
-- LIBRE CONSIGNACION
   select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 

  	from sre_recaudaciones.sre_fman_recepciones_errores_libres_consignaciones e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_libres_consigna d	on (e.recepcion_error_libre_consignacion_id = d.recepcion_error_libre_consignacion_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
        where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
         and e.persona_contribuyente_id=$1
   
    union all
-- COMERCIALIZACION HIDROCARBUROAS
	    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_hidrocarburos e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_hidrocarburos d	on (e.recepcion_error_hidrocarburo_id = d.recepcion_error_hidrocarburo_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
        
    -- ENTIDAD FINANCIERA
    union all
    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_entidades_financieras e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_entidades_financieras d	on (e.recepcion_error_entidad_financiera_id = d.recepcion_error_entidad_financiera_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
       
-- hospitales
    union all
	select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_hospitales e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_hospitales d	on (e.recepcion_error_hospital_id = d.recepcion_error_hospital_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1  
 --HOTELES
 union all
 select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_hoteles e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_hoteles d	on (e.recepcion_error_hotel_id = d.recepcion_error_hotel_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1       
 --  SECTOR EDUCATIVOI
   union all
	   
	   select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_sectores_educativos e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_sectores_educativos d	on (e.recepcion_error_sector_educativo_id = d.recepcion_error_sector_educativo_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
--nota credito debito
union all
	
	select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_notas_credito_debito e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_notas_credito_debito d	on (e.recepcion_error_nota_credito_debito_id = d.recepcion_error_nota_credito_debito_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
    -- MONEDA
    union all
    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_notas_monedas_extranjeras e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_monedas_extranjeras d	on (e.recepcion_error_nota_moneda_extranjera_id = d.recepcion_error_nota_moneda_extranjera_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
    
    -- NOTAS TASA CERO
    union all
    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_notas_tasas_cero e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_notas_tasas_cero d	on (e.recepcion_error_nota_tasa_cero_id = d.recepcion_error_nota_tasa_cero_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
    -- NOTA ZONA FRANCA
    
    union all
	    select  e.numero_documento_fiscal, e.caed, e.modalidad_facturacion_id, e.tipo_documento_fiscal_id, e.tipo_documento_sector_id, e.fecha_emision,
           CAST (date_part('month', e.fecha_emision) as varchar) as mes,CAST (date_part('year', e.fecha_emision) as varchar) as periodo,
   	       d.codigo_error_id, f.descripcion 
   	from sre_recaudaciones.sre_fman_recepciones_errores_notas_zona_franca e
   	join sre_recaudaciones.sre_fman_recepciones_errores_detalles_notas_zona_franca d	on (e.recepcion_error_nota_zona_franca_id = d.recepcion_error_nota_zona_franca_id)
   	join sre_recaudaciones.sre_fac_mensajes_servicios f  on (f.mensaje_servicio_id = d.codigo_error_id )
    where CAST (date_part('month', e.fecha_emision) as varchar) = $3 and CAST (date_part('year', e.fecha_emision) as varchar) = $2
    and e.persona_contribuyente_id=$1
    
    
    
      );
     
      END;
 $function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_obtener_facturas_ventas_por_nit_gestion_periodo(p_persona_id bigint, p_gestion bigint, p_periodo bigint)
 RETURNS TABLE(persona_contribuyente_emisor_id bigint, persona_contribuyente_beneficiario_id bigint, tipo_documento_identidad_id integer, modalidad_facturacion_id integer, tipo_documento_fiscal_id integer, tipo_documento_sector_id integer, nit_emisor bigint, gestion integer, periodo integer, numero_documento_fiscal bigint, caed character varying, numero_documento character varying, monto_total numeric, fecha_emision timestamp without time zone)
 LANGUAGE plpgsql
AS $function$
    BEGIN
	RETURN QUERY
	 (
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_estandares a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
	   from sre_recaudaciones.sre_fman_ventas_alcanzadas_ice a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_alquileres a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_comerciales_exportaciones a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision       from sre_recaudaciones.sre_fman_ventas_hidrocarburos a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_entidades_financieras  a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_hospitales a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_hoteles a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_libres_consignaciones  a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_notas_tasas_cero a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_notas_zona_franca a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_sectores_educativos a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
       union all
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_notas_monedas_extranjeras a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3		 
     );		 

    END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_fman_obtener_notas_creditodebito_por_nit_gestion_periodo(p_persona_id bigint, p_gestion bigint, p_periodo bigint)
 RETURNS TABLE(persona_contribuyente_emisor_id bigint, persona_contribuyente_beneficiario_id bigint, tipo_documento_identidad_id integer, modalidad_facturacion_id integer, tipo_documento_fiscal_id integer, tipo_documento_sector_id integer, nit_emisor bigint, gestion integer, periodo integer, numero_documento_fiscal bigint, caed character varying, numero_documento character varying, complemento character varying, nombre_razon_social character varying, monto_total numeric, fecha_emision timestamp without time zone)
 LANGUAGE plpgsql
AS $function$
    BEGIN
	RETURN QUERY
	 (
      SELECT 
    a1.persona_contribuyente_emisor_id 
       ,a1.persona_contribuyente_beneficiario_id 
       ,a1.tipo_documento_identidad_id 
       ,a1.modalidad_facturacion_id 
       ,a1.tipo_documento_fiscal_id 
       ,a1.tipo_documento_sector_id 
       ,a1.nit_emisor     
       ,a1.gestion 
       ,a1.periodo 
       ,a1.numero_documento_fiscal 
       ,a1.caed 
       ,a1.numero_documento 
       ,a1.complemento 
       ,a1.nombre_razon_social 
       ,a1.monto_total 
       ,a1.fecha_emision 
      from sre_recaudaciones.sre_fman_ventas_notas_credito_debito a1
       where a1.persona_contribuyente_emisor_id = $1
	     and a1.gestion = $2
         and a1.periodo = $3
         and a1.estado_id = 'AC'		 
     );		 

    END;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_obtener_codigo_pais_factura_manual(p_pais_texto character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Obtiene el clasificador_id del pais a partir del texto proporcionado
PARAMETROS INGRESO
Texto que indica el pais que se lleno en la plantilla
PARAMETROS SALIDA
clasificador_id del pais correspondiente, si no coincide con los valores del clasificador devuelve clasificador_id de NO REGISTRADO
SUBSISTEMA : Facturación
FECHA CREACION : 07/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
  p_tipo_pais_id   Integer:=0;
  v_resultado      Integer :=null;
  v_agrupador varchar :='';
begin
  v_agrupador := 'pais_origen_id';
	if(p_pais_texto is not null and p_pais_texto<> '') then
	  p_pais_texto   := (select UPPER(p_pais_texto));
	  v_resultado := coalesce(
							  (select clasificador_id 	from str_transversales.str_cps_clasificadores 
  							where tipo_clasificador = v_agrupador and descripcion like '%'||p_pais_texto||'%' and estado_id='AC' 
				    limit 1)
				    ,
				    (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador =v_agrupador	and descripcion like '%NO REGISTRADO%' 	and estado_id='AC')
				  );
     end if;
  return v_resultado;

  EXCEPTION
  when others
    then
	  perform sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_obtener_codigo_pais_facura_manual');
             return (sre_recaudaciones.sre_fac_ope_obtener_codigo_error('sre_fac_val_codigo_pais'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_obtener_estado_plazo_anulados_factura_manual(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Determina el estado_plazo_documento_fiscal_id para las tablas de anulados dependiendo de la fecha de envio y fecha de emision para denotar si el envio fue en plazo o rezagado
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
clasificador_id para el campo estado_plazo_documento_fiscal_id (EN PLAZO/REZAGADO)
SUBSISTEMA : Facturación
FECHA CREACION : 30/08/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
 --p_fecha_emision_anulacion character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
 p_fecha_emision_anulacion  timestamp:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion' as timestamp));
 p_fecha_envio timestamp:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));    
 v_resultado bigint:=null;     
 v_fecha_limite_normativa timestamp;
 p_fecha_emision timestamp;
begin
	--p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 
	v_fecha_limite_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_anulados_fact_manual(p_fecha_emision_anulacion));	
		if(v_fecha_limite_normativa is not null) then 		
			if(p_fecha_envio<=v_fecha_limite_normativa) then 
			v_resultado:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_plazo_documento_fiscal_id' and descripcion ='EN PLAZO');
			else
			v_resultado:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_plazo_documento_fiscal_id' and descripcion ='REZAGADO');
			end if;
		end if;				
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_obtener_estado_plazo_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_obtener_estado_plazo_factura_manual(p_json json)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Determina el estado_plazo_documento_fiscal_id para las tablas de ventas dependiendo de la fecha de envio para denotar si el envio fue en plazo o rezagado
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
PARAMETROS SALIDA
clasificador_id para el campo estado_plazo_documento_fiscal_id (EN PLAZO/REZAGADO)
SUBSISTEMA : Facturación
FECHA CREACION : 01/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
 p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
 p_fecha_envio timestamp:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));    
 v_resultado bigint:=null;     
 v_fecha_limite_normativa timestamp;
 p_fecha_emision timestamp;
begin
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 
	v_fecha_limite_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_facturacion_manual(p_fecha_emision));	
	
		if(v_fecha_limite_normativa is not null) then 		
			if(p_fecha_envio<=v_fecha_limite_normativa) then 
			v_resultado:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_plazo_documento_fiscal_id' and descripcion ='EN PLAZO');
			else
			v_resultado:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_plazo_documento_fiscal_id' and descripcion ='REZAGADO');
			end if;
		end if;				
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_obtener_estado_plazo_factura_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_registrar_anulados_facturacion_manual(p_json json, p_venta_id bigint, p_recepcion_correcta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos y los prepara para aer enviados a la consulta de INSERT para registro de anulados
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON, id venta, ide recepcion correcta
PARAMETROS SALIDA
id de registro de anulado
SUBSISTEMA : Facturación
FECHA CREACION : 25/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  Ajustes para registro en la nueva estructura de tablas de ANULADOS
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :07/09/2019
AUTOR DE LA MODIFICACION : Susana Escobar Paz
VERSION : 1.0
**************************************************************************************************************************************************/
declare  
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 	
	
	p_persona_contribuyente_id bigint;	
	p_sucursal_contribuyente_id bigint;  
	p_actividad_economica_id bigint;
	p_modalidad_facturacion_id integer; 
	p_tipo_documento_sector_id integer;
	p_tipo_documento_fiscal_id integer; 	
	p_estado_plazo_documento_fiscal_id integer;
	p_estado_anulado_documento_fiscal_id integer;
	p_numero_sucursal integer;
	p_numero_factura bigint; 
	p_codigo_actividad varchar;
	p_caed varchar;
	p_motivo_anualcion varchar;
	p_fecha_emision_venta timestamp without time zone;
	p_fecha_envio timestamp without time zone ;
	p_fecha_anulacion  timestamp without time zone;
	p_fecha_registro timestamp without time zone;
	p_fecha_ultima_modificacion timestamp without time zone;
	p_estado_id varchar;
	v_fecha_limite_normativa timestamp;
	p_fecha_emision_texto character varying;
	p_fecha_anulacion_texto character varying;
	v_fecha_actual timestamp:=now();
	v_resultado bigint:=0;
	v_sql varchar:='0';	
	v_resultado_actualizacion_estado bigint:=0;
	p_venta_id_otro_estado bigint;
	p_venta_id_historico bigint;	
begin

p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
--p_venta_id :=(p_json->'xmlRecepcionGenerica'->>'p_venta_id');

p_persona_contribuyente_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
p_sucursal_contribuyente_id:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');	
p_actividad_economica_id := (p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
p_modalidad_facturacion_id :=(p_json->'xmlRecepcionGenerica'->>'p_modalidad_facturacion_id');		
p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
p_estado_plazo_documento_fiscal_id:= (select sre_recaudaciones.sre_ope_obtener_estado_plazo_anulados_factura_manual(p_json));
p_estado_anulado_documento_fiscal_id :=(select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_anulado_documento_fiscal_id' and descripcion = 'ACTIVO' and estado_id ='AC');
p_numero_sucursal:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal'); 
p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
p_codigo_actividad := (p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');
p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
p_motivo_anualcion:= (p_json->'xmlRecepcionGenerica'->>'p_motivo_anulacion');

p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));  	
--p_fecha_emision :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_emision' as timestamp));  	
 p_fecha_emision_venta :=  (select sre_recaudaciones.sre_fac_ope_obtener_fecha_emision_venta_factura_manual(p_venta_id, p_tipo_documento_sector_id));
 p_fecha_anulacion :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion' as timestamp));  
 
 p_fecha_registro :=v_fecha_actual;
 p_fecha_ultima_modificacion :=v_fecha_actual;  
 p_estado_id :='AC';
 --p_recepcion_correcta_id:= (sre_recaudaciones.sre_fac_ope_obtener_recepcion_correctas_factura_manual(p_venta_id,p_tipo_documento_sector_id));

if(p_venta_id<=0 or p_venta_id is null) then
p_venta_id_otro_estado := (select sre_recaudaciones.sre_fac_ope_verificar_existe_venta_facturacion_manual(p_json));
	if(p_venta_id_otro_estado>0) then 
	p_venta_id_historico := (sre_recaudaciones.sre_ope_registrar_historico_facturacion_manual(p_venta_id_otro_estado, p_tipo_documento_fiscal_id,  p_tipo_documento_sector_id , p_usuario_ultima_modificacion_id , p_fecha_envio ))  ;
	p_venta_id := p_venta_id_otro_estado;
	end if;
end if;
			
			v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_registro_anulados_manual(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));

			execute v_sql  
			    using 
					 p_usuario_registro_id,
					 p_usuario_ultima_modificacion_id,
					 p_recepcion_correcta_id,
					 p_venta_id,
					 p_persona_contribuyente_id,
					 p_sucursal_contribuyente_id,
					 p_actividad_economica_id,
					 p_modalidad_facturacion_id,
					 p_tipo_documento_sector_id, 
					 p_tipo_documento_fiscal_id ,
					 p_estado_plazo_documento_fiscal_id,
					 p_estado_anulado_documento_fiscal_id,
					 p_numero_sucursal,
					 p_numero_factura,
					 p_codigo_actividad,
					 p_caed,
					 p_motivo_anualcion,
					 p_fecha_emision_venta,
					 p_fecha_envio,
					 p_fecha_anulacion,
					 p_fecha_registro,
					 p_fecha_ultima_modificacion,
					 p_estado_id

			 into v_resultado;		
			 ---actualizar el estado de la venta asociada si existe
			v_resultado_actualizacion_estado := (select sre_recaudaciones.sre_fac_ope_actualizar_estado_venta_facturacion_manual(p_tipo_documento_sector_id, p_venta_id, 'ANULADO'));	
			if(v_resultado_actualizacion_estado<0) then
			rollback;
			end if;
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_registrar_anulados_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_registrar_historico_facturacion_manual(p_venta_id bigint, p_tipo_documento_fiscal_id integer, p_tipo_documento_sector_id integer, p_usuario_ultima_modificacion_id bigint, p_fecha_envio timestamp without time zone)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos para enviarlos a la consulta de registro de HISTORICOS, los historicos se llenan cuando se identifica que una factura ya existe en las tablas de ventas.
PARAMETROS INGRESO
venta_id, tipo_documento_fiscal_id, usuario_ultima_modificacion y fecha envio.
PARAMETROS SALIDA
id de historico
SUBSISTEMA : Facturación
FECHA CREACION : 11/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  

 v_resultado bigint:=0;     
 v_fecha_modificacion timestamp:= now();

 v_sql varchar:='0';	
  
begin

	 v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_registro_historico_manual(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));

		execute v_sql  
		using 
		p_venta_id,
		p_usuario_ultima_modificacion_id,
		'Generado automáticamente con el procedimiento PL/PgSQL',
		v_fecha_modificacion,
		'AC',
		p_fecha_envio
		
		
		into v_resultado;
			
		
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_registrar_historico_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_registrar_rectificados_anulados_facturacion_manual(p_json json, p_venta_id bigint, p_venta_anulado_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos y los prepara para ejecutar la consulta INSERT para las tablas de rectificados anulados
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
venta_id
venta_id_anulado
PARAMETROS SALIDA
id de rectificado que fue registrado
SUBSISTEMA : Facturación
FECHA CREACION : 10/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_oficina_emisor_id bigint;
	p_persona_contribuyente_emisor_id bigint;
	p_sucursal_id bigint;  
	p_actividad_economica_id bigint;
	p_tipo_departamento_id integer; 
	p_modalidad_facturacion_id integer; 
	p_estado_venta_anulada_rectificatoria_id integer;
	p_estado_plazo_documento_fiscal_id integer;
	p_gestion integer;
	p_periodo integer;
	p_numero_documento_fiscal bigint; 
	p_caed varchar;
	p_fecha_emision_venta timestamp without time zone;
	p_fecha_anulacion_emision timestamp without time zone;
	p_fecha_envio timestamp without time zone ;
	p_fecha_registro timestamp without time zone;
	p_fecha_ultima_modificacion timestamp without time zone;
	p_estado_id varchar;		
	v_fecha_limite_anulacion_normativa timestamp;
	p_tipo_documento_fiscal_id integer; 	
	p_tipo_documento_sector_id integer; 


	p_numero_documento varchar;
	p_complemento varchar; 
	p_nombre_razon_social varchar;
	p_cantidad integer :=null;
	p_descripcion varchar;
	p_monto_descuento_total numeric(20,5) :=null;
	p_monto_total numeric(25,5); 	
	p_fecha_emision_texto character varying;	
	v_fecha_actual timestamp:=now();
	p_fecha_ingreso_hospedaje_texto character varying;
	p_monto_ice numeric(20,5); 
	
	v_resultado bigint:=0;
	v_sql varchar:='0';	
begin
 p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
 p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');

 p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
 p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');


 p_oficina_emisor_id := (p_json->'xmlRecepcionGenerica'->>'v_oficinaId');
 --p_persona_contribuyente_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_emisor_id');
 p_persona_contribuyente_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
 p_sucursal_id:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');	
 p_actividad_economica_id := (p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
 p_tipo_departamento_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_departamento_id');
 p_modalidad_facturacion_id :=(p_json->'xmlRecepcionGenerica'->>'p_modalidad_facturacion_id');
 
 p_estado_venta_anulada_rectificatoria_id :=  (select clasificador_id from str_transversales.str_cps_clasificadores 
						where tipo_clasificador = 'estado_venta_anulada_rectificatoria_id' and descripcion = 'PENDIENTE DE FISCALIZACION');
 p_estado_plazo_documento_fiscal_id := (select sre_recaudaciones.sre_ope_obtener_estado_plazo_anulados_factura_manual(p_json));

 p_gestion:=(p_json->'xmlRecepcionGenerica'->>'p_gestion');
 p_periodo:=(p_json->'xmlRecepcionGenerica'->>'p_periodo_facturado');
 p_numero_documento_fiscal :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
 p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
 p_fecha_emision_venta:= (select sre_recaudaciones.sre_fac_ope_obtener_fecha_emision_venta_factura_manual(p_venta_id, p_tipo_documento_sector_id));
 p_fecha_anulacion_emision:=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion' as timestamp));  
		
 p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));  	
 p_fecha_registro :=v_fecha_actual;
 p_fecha_ultima_modificacion :=v_fecha_actual;  
 p_estado_id :='AC';


------------------------------------------------------
	
	v_fecha_limite_anulacion_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_anulados_fact_manual(p_fecha_anulacion_emision));	
		if(v_fecha_limite_anulacion_normativa is not null) then 		
			if(p_fecha_envio>v_fecha_limite_anulacion_normativa) then 

			v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_reg_anulados_rectificados_manual(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));--CREAR OTRO CRUD
			execute v_sql  
			    using 
				 p_usuario_registro_id,
				 p_usuario_ultima_modificacion_id,
				 p_venta_id,
				 p_venta_anulado_id,
				 p_oficina_emisor_id,
				 p_persona_contribuyente_emisor_id,
				 p_sucursal_id,
				 p_actividad_economica_id,
				 p_tipo_departamento_id,
				 p_modalidad_facturacion_id,
				 p_estado_venta_anulada_rectificatoria_id,
				 p_estado_plazo_documento_fiscal_id,
				 p_gestion,
				 p_periodo,
				 p_numero_documento_fiscal,
				 p_caed,
				 p_fecha_emision_venta,
				 p_fecha_anulacion_emision,
				 p_fecha_envio,
				 p_fecha_registro,
				 p_fecha_ultima_modificacion,
				 p_estado_id
	
			 into v_resultado;
					
		end if;
		end if;	
			
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_registrar_rectificados_anulados_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_ope_registrar_rectificados_facturacion_manual(p_json json, p_venta_id bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos y los prepara para ejecutar la consulta INSERT para las tablas de rectificados
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
id venta
PARAMETROS SALIDA
id de rectificado que fue registrado
SUBSISTEMA : Facturación
FECHA CREACION : 11/07/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare  
	p_usuario_registro_id bigint; 
	p_usuario_ultima_modificacion_id bigint; 
	p_oficina_emisor_id bigint;
	p_persona_contribuyente_emisor_id bigint;
	p_persona_contribuyente_beneficiario_id bigint; 
	p_sucursal_id bigint;  
	p_tipo_departamento_id integer; 
	p_tipo_documento_identidad_id integer; 
	p_tipo_modalidad_id integer; 
	p_tipo_documento_fiscal_id integer; 	
	p_tipo_documento_sector_id integer; 
	p_estado_venta_rectificatoria_id integer := 1000;
	p_gestion integer;
	p_periodo integer;
	p_numero_factura bigint; 
	p_caed varchar;
	p_numero_documento varchar;
	p_complemento varchar; 
	p_nombre_razon_social varchar;
	p_cantidad integer :=null;
	p_descripcion varchar;
	p_monto_descuento_total numeric(20,5) :=null;
	p_monto_total numeric(25,5); 
	p_fecha_emision timestamp without time zone;
	p_fecha_envio timestamp without time zone ;
	p_fecha_registro timestamp without time zone;
	p_fecha_ultima_modificacion timestamp without time zone;
	p_estado_id varchar;
	p_actividad_economica_id bigint;
	p_estado_plazo_documento_fiscal_id integer;
	v_fecha_limite_normativa timestamp;
	p_fecha_emision_texto character varying;	
	v_fecha_actual timestamp:=now();

	p_fecha_ingreso_hospedaje_texto character varying;
	p_fecha_emision_factura_texto character varying;
	
	p_monto_ice numeric(20,5); 
	--exportaciones
	  p_direccion_comprador varchar(300) ;
	   p_incoterm varchar(100);
	   p_puerto_destino varchar(100);
	   p_lugar_destino varchar(100);
	   p_codigo_pais integer;
	   p_monto_total_puerto numeric(20,5);
	   p_precio_valor_bruto numeric(20,5);
	   p_gastos_transporte_frontera numeric(20,5);
	   p_gastos_seguro_frontera numeric(20,5);
	   p_total_fob_frontera numeric(20,5);
	   p_monto_transporte_frontera numeric(20,5);
	   p_monto_seguro_internacional numeric(20,5);
	   p_otros_montos numeric(20,5);
		   ----libre consignacion	  	
		p_remitente varchar(100);
		p_consignatario varchar(100);
		p_lugar_acopio_puerto varchar(100);
		--hidrocarburos
		p_placa_vehiculo varchar(12) ;
		p_tipo_envase varchar(50);
		p_monto_ley_317 numeric(20,5) ;
		p_monto_total_sujeto_iva numeric(20,5);
	--hopitales
	p_modalidad_servicio varchar(100);
	p_medico varchar(200) ;
	p_paciente varchar(200) ;
	p_especialidad varchar(100) ;
	--hoteles
	p_cantidad_huespedes integer;
	p_cantidad_habitaciones integer;
	p_cantidad_mayores integer;
	p_cantidad_menores integer;
	p_fecha_ingreso_hospedaje timestamp;
	--nota credito debito
	p_numero_factura_nota_credito bigint;
	p_numero_autorizacion_caed varchar(100);
	p_fecha_emision_factura timestamp;
	p_monto_total_original numeric(20,5) ;
	p_monto_total_devuelto numeric(20,5) ;
	p_monto_efectivo_credito_debito numeric(20,5) ;
		--nota moneda extranjera
	p_tipo_cambio_oficial numeric(20,5);
	p_tipo_cambio numeric(20,5);
	p_pais_texto varchar(250);
	v_resultado bigint:=0;
	v_sql varchar:='0';	
begin



p_fecha_emision_texto :=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));

 p_usuario_registro_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
 p_usuario_ultima_modificacion_id :=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');
 p_oficina_emisor_id := (p_json->'xmlRecepcionGenerica'->>'v_oficinaId');
 p_persona_contribuyente_emisor_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_emisor_id');
 p_persona_contribuyente_beneficiario_id:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_beneficiario_id');
 p_sucursal_id:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id');	
 p_actividad_economica_id := (p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
 p_tipo_departamento_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_departamento_id');
 p_tipo_documento_identidad_id:=(select sre_recaudaciones.sre_fac_ope_obtener_tipo_documento_facturacion_manual(p_json));
 p_tipo_modalidad_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');		
 p_tipo_documento_fiscal_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
 p_tipo_documento_sector_id :=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
 p_gestion:=(p_json->'xmlRecepcionGenerica'->>'p_gestion');
 p_periodo:=(p_json->'xmlRecepcionGenerica'->>'p_periodo_facturado');
 p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
 p_caed:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
 p_numero_documento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroDocumento');
 p_complemento :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'complemento');
 p_nombre_razon_social :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'nombreRazonSocial');
 p_descripcion :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'descripcion');
 p_monto_total :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotal');
 p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 
 p_fecha_envio :=(select cast(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio' as timestamp));  	
 p_fecha_registro :=v_fecha_actual;
 p_fecha_ultima_modificacion :=v_fecha_actual;  
 p_estado_id :='AC';
p_monto_ice :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoIce');
--exportaciones
	p_direccion_comprador:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'direccionComprador');
	p_incoterm :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'incoterm');
	p_puerto_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'puertoDestino');
	p_lugar_destino :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarDestino');
	p_pais_texto:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'pais');
	--p_codigo_pais :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'pais');
	p_codigo_pais := (select sre_recaudaciones.sre_ope_obtener_codigo_pais_factura_manual(p_pais_texto));
	p_monto_total_puerto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalPuerto');
	p_precio_valor_bruto :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'precioValorBruto');
	p_gastos_transporte_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosTransporteFrontera');
	p_gastos_seguro_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'gastosSeguroFrontera');
	p_total_fob_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'totalFobFrontera');
	p_monto_transporte_frontera :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTransporteFrontera');
	p_monto_seguro_internacional :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSeguroInternacional');
	p_otros_montos :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'otrosMontos');
	--libre consignacion
	p_remitente := (p_json->'XmlFactura'->'factura'->'cabecera'->>'remitente');
	p_consignatario := (p_json->'XmlFactura'->'factura'->'cabecera'->>'consignatario');
	p_lugar_acopio_puerto := (p_json->'XmlFactura'->'factura'->'cabecera'->>'lugarAcopioPuerto');
	--hidrocarburos
	p_placa_vehiculo := (p_json->'XmlFactura'->'factura'->'cabecera'->>'placaVehiculo');
	p_tipo_envase := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoEnvase');
	p_monto_ley_317 := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoLey317');
	p_monto_total_sujeto_iva := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoSujetoIva');
		--hospitales
	p_modalidad_servicio := (p_json->'XmlFactura'->'factura'->'cabecera'->>'modalidadServicio');
	p_medico := (p_json->'XmlFactura'->'factura'->'cabecera'->>'medico');
	p_paciente := (p_json->'XmlFactura'->'factura'->'cabecera'->>'paciente');
	p_especialidad := (p_json->'XmlFactura'->'factura'->'cabecera'->>'especialidad');
	---hoteles
	p_cantidad_huespedes := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHuespedes');
	p_cantidad_habitaciones := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadHabitaciones');
	p_cantidad_mayores := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMayores');
	p_cantidad_menores := (p_json->'XmlFactura'->'factura'->'cabecera'->>'cantidadMenores');
	p_fecha_ingreso_hospedaje_texto := (p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaIngresoHospedaje');
	p_fecha_ingreso_hospedaje := (select CASE WHEN p_fecha_ingreso_hospedaje_texto <> '' THEN to_timestamp(p_fecha_ingreso_hospedaje_texto,'DD/MM/YYYY') ELSE NULL END); 
	--nota debito credito
	p_numero_factura_nota_credito  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFacturaNotaCredito');
	p_numero_autorizacion_caed  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroAutorizacionCaed');
	p_fecha_emision_factura_texto  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmisionFactura');
	p_fecha_emision_factura  := (select CASE WHEN p_fecha_emision_factura_texto <> '' THEN to_timestamp(p_fecha_emision_factura_texto,'DD/MM/YYYY') ELSE NULL END);  
	p_monto_total_original  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalOriginal');
	p_monto_total_devuelto  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoTotalDevuelto');
	p_monto_efectivo_credito_debito  := (p_json->'XmlFactura'->'factura'->'cabecera'->>'montoEfectivoCreditoDebito');
	--nota monedas
        p_tipo_cambio_oficial := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambioOficial');
	p_tipo_cambio := (p_json->'XmlFactura'->'factura'->'cabecera'->>'tipoCambio');
 	
	p_estado_plazo_documento_fiscal_id	:= (select sre_recaudaciones.sre_ope_obtener_estado_plazo_factura_manual(p_json));

	v_fecha_limite_normativa:= (select sre_recaudaciones.sre_fac_ope_obtener_limite_envio_facturacion_manual(p_fecha_emision));	
	p_estado_venta_rectificatoria_id := (sre_recaudaciones.sre_fac_ope_obtener_estado_rectificado_factura_manual(p_json));
		if(v_fecha_limite_normativa is not null) then 		
			if(p_fecha_envio>v_fecha_limite_normativa) then 

			v_sql:=(sre_recaudaciones.sre_fac_ope_armar_consulta_registro_rectificados_manual(p_tipo_documento_fiscal_id,p_tipo_documento_sector_id));
			execute v_sql  
			    using 
					 p_usuario_registro_id,
					 p_usuario_ultima_modificacion_id,
					 p_venta_id,
					 p_oficina_emisor_id,
					 p_persona_contribuyente_emisor_id,
					 p_persona_contribuyente_beneficiario_id,
					 p_sucursal_id,
					 p_actividad_economica_id,
					 p_tipo_departamento_id,
					 p_tipo_documento_identidad_id, 
					 p_tipo_modalidad_id,
					 p_tipo_documento_fiscal_id ,
					 p_tipo_documento_sector_id, 
					 p_estado_venta_rectificatoria_id,
					 p_estado_plazo_documento_fiscal_id,
					 p_gestion,
					 p_periodo,
					 p_numero_factura,
					 p_caed,
					 p_numero_documento,
					 p_complemento,
					 p_nombre_razon_social,
					 p_cantidad,
					 p_descripcion,
					 p_monto_descuento_total,
					 p_monto_total,
					 p_fecha_emision,
					 p_fecha_envio,
					 p_fecha_registro,
					 p_fecha_ultima_modificacion,
					 p_estado_id,
					--alcanzada ice
					 p_monto_ice,
					 --exportaciones
					   p_direccion_comprador,
					   p_incoterm,
					   p_puerto_destino,
					   p_lugar_destino,
					   p_codigo_pais,
					   p_monto_total_puerto,
					   p_precio_valor_bruto,
					   p_gastos_transporte_frontera,
					   p_gastos_seguro_frontera,
					   p_total_fob_frontera,
					   p_monto_transporte_frontera,
					   p_monto_seguro_internacional,
					   p_otros_montos,
					   --libre designacion
					   p_remitente,
					   p_consignatario,
					   p_lugar_acopio_puerto,
					   --hidrocarburos
					   p_placa_vehiculo,
					   p_tipo_envase,
	                                   p_monto_ley_317,
					   p_monto_total_sujeto_iva,
					   --hospitales
					   p_modalidad_servicio,
					   p_medico,
					   p_paciente,
					   p_especialidad,
					   --hoteles 57
					 	p_cantidad_huespedes,
						p_cantidad_habitaciones,
						p_cantidad_mayores,
						p_cantidad_menores,
						p_fecha_ingreso_hospedaje,
						--nota debito credito 67
						p_numero_factura_nota_credito,
						p_numero_autorizacion_caed,
						p_fecha_emision_factura,
						p_monto_total_original,
						p_monto_total_devuelto,
						p_monto_efectivo_credito_debito,
						--nota moneda extranjera 73
	p_tipo_cambio_oficial,
	p_tipo_cambio
						
	
			 into v_resultado;
					
					end if;
		end if;	
			
	return v_resultado;
  EXCEPTION
  when others
    then
	  return (select sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_ope_registrar_historico_facturacion_manual'));
end;
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_reg_compras_validas(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	p_id_archivos_xml_validos bigint:=0;
	p_id_recepciones_correctas bigint:=0;
	p_id_ventas bigint:=0;
	p_id_detalles_ventas bigint:=0;
	
	v_resultado smallint:=0;
		
begin 
	
	---------------INSERCION TABLA: ArchivoXmlValidos---------------
	p_id_archivos_xml_validos:=(
	sre_recaudaciones.sre_fac_crud_archivos_xml_validos 
	(
		p_json
	)
	);
	---------------INSERCION TABLA: RecepcionesCorrectas---------------
	p_id_recepciones_correctas:=(
	sre_recaudaciones.sre_fac_crud_recepciones_correctas_compras
	(
		p_json, 
		p_id_archivos_xml_validos 
	)
	);

	---------------INSERCION TABLA: Ventas---------------	
	p_id_ventas:=(
	sre_recaudaciones.sre_fac_crud_registro_compras_dinamico
	(
		p_json, 
		p_id_recepciones_correctas
	)
	);

	
	---------------INSERCION TABLA: Detalles Ventas---------------		
		
	--add: 20190325
	if (p_id_archivos_xml_validos<0 or p_id_recepciones_correctas<0 or p_id_ventas<0) then
		v_resultado:=-1;
	else
		v_resultado:=1;
	end if;	
  
  return v_resultado;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_reg_factura_nota_validas'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_reg_errores_detalles_anulados_facturacion_manual(p_json json, p_json_errores json, p_recepcion_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del JSON y los prepara para ser enviados al CRUD de registro de errores detalles
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
Detalle de errores en formato JSON
recepcion_anulado_id
PARAMETROS SALIDA
Valor de exito 1 si se registraron los datos en la base de datos, -1 si ocurrio un error
SUBSISTEMA : Facturación
FECHA CREACION : 07/09/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_actual timestamp:=now();

	
	p_usuario_registro_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
	p_usuario_ultima_modificacion_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');		
	p_persona_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
	p_sucursal_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id'); 
	p_actividad_economica_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
	p_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_modalidad_facturacion_id');	
	p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	p_estado_recepcion_anulado_manual_id integer:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion ='RECEPCIONADO CON ERRORES');--FAKE
	p_codigo_actividad varchar:=(p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');
	p_numero_sucursal bigint:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');
	p_numero_documento_fiscal bigint :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_caed character varying(100):=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	--p_fecha_emision_anulacion timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_emision_anulacion');
	p_fecha_emision_anulacion timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_anulacion');
	p_fecha_envio timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion timestamp without time zone:=v_fecha_actual;
	p_fecha_consolidacion timestamp without time zone:=v_fecha_actual;
	p_fecha_registro timestamp without time zone:=v_fecha_actual;
	p_fecha_ultima_modificacion timestamp without time zone:=v_fecha_actual;
	p_estado_id varchar(2):='AC';

	v_sql varchar :='0';
	p_id_recepciones_errores bigint:=0;	
	
	p_id_recepciones_errores_detalles bigint:=0;	
begin	
	
	
	
	v_sql:='INSERT INTO sre_recaudaciones.sre_fman_recepciones_errores_anuladas
				(usuario_registro_id, 
				usuario_ultima_modificacion_id, 
				recepcion_anulado_id, 
				persona_contribuyente_id, 
				sucursal_contribuyente_id, 
				actividad_economica_id, 
				modalidad_facturacion_id, 
				tipo_documento_sector_id, 
				tipo_documento_fiscal_id, 
				estado_recepcion_anulado_manual_id, 
				codigo_actividad_economica, 
				numero_sucursal, 
				numero_documento_fiscal, 
				caed, 
				fecha_emision_anulacion, 
				fecha_envio, 
				fecha_recepcion, 
				fecha_consolidacion, 
				fecha_registro, 
				fecha_ultima_modificacion, 
				estado_id) values (
				$1,
				$2,
				$3,
				$4,
				$5,
				$6,
				$7,
				$8,
				$9,
				$10,
				$11,
				$12,
				$13,
				$14,
				$15,
				$16,
				$17,
				$18,
				$19,
				$20,
				$21				
		    ) returning  recepcion_error_anulada_id';
		    
	execute v_sql  
	    using 
					p_usuario_registro_id,
					p_usuario_ultima_modificacion_id,
					p_recepcion_id,
					p_persona_contribuyente_id,
					p_sucursal_contribuyente_id,
					p_actividad_economica_id,
					p_tipo_modalidad_id,
					p_tipo_documento_sector_id,
					p_tipo_documento_fiscal_id,
					p_estado_recepcion_anulado_manual_id,
					p_codigo_actividad,
					p_numero_sucursal,
					p_numero_documento_fiscal,
					p_caed,
					p_fecha_emision_anulacion,
					p_fecha_envio,
					p_fecha_recepcion,
					p_fecha_consolidacion,
					p_fecha_registro,
					p_fecha_ultima_modificacion,
					p_estado_id			
	 into p_id_recepciones_errores;



	
	p_id_recepciones_errores_detalles:=(sre_recaudaciones.sre_fac_ope_registrar_errores_detalles_anulados_manual(p_json, p_json_errores, p_id_recepciones_errores));

	
	if (p_id_recepciones_errores<0 or p_id_recepciones_errores_detalles<0) then
		return -1;
	end if;	
				
	return 1;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_reg_errores_detalles_anulados_facturacion_manual'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_reg_errores_facturacion_manual_etapa_2(p_json json, p_json_errores json, p_recepcion_id bigint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : Recibe los datos del JSON y los prepara para ser enviados al CRUD dinamico de registro de errores
PARAMETROS INGRESO
Detalle de Factura Manual en formato JSON
Detalle de errores en formato JSON
PARAMETROS SALIDA
Valor de exito 1 si se registraron los datos en la base de datos, -1 si ocurrio un error
SUBSISTEMA : Facturación
FECHA CREACION : 17/06/2019
AUTOR : Equipo Tully
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_actual timestamp:=now();

	--sre_recaudaciones.sre_fac_crud_recepciones_errores
	p_usuario_registro_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuarioRegistroId');
	p_usuario_ultima_modificacion_id bigint:=(p_json->'xmlRecepcionGenerica'->>'v_usuario_ultima_modificacion_id');		
	p_sucursal_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_sucursal_contribuyente_id'); 
	p_persona_contribuyente_id bigint:=(p_json->'xmlRecepcionGenerica'->>'p_persona_contribuyente_id');
	p_actividad_economica_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_actividad_economica_id');
	p_tipo_modalidad_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_modalidad_id');	
	p_tipo_documento_sector_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_tipo_documento_fiscal_id integer:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_fiscal_id');
	--p_estado_recepcion_documento_fiscal_id integer:=2956;--registrado con errores
	p_estado_recepcion_documento_fiscal_id integer:= (select clasificador_id from str_transversales.str_cps_clasificadores where tipo_clasificador = 'estado_recepcion_documento_fiscal_id' and  descripcion ='RECEPCIONADO CON ERRORES');
	p_codigo_actividad integer:=(p_json->'xmlRecepcionGenerica'->>'p_codigo_actividad');
	p_numero_sucursal bigint:=(p_json->'xmlRecepcionGenerica'->>'p_numero_sucursal');
	p_numero_factura bigint :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_caed character varying(100):=(p_json->'XmlFactura'->'factura'->'cabecera'->>'caed');
	p_fecha_emision_texto character varying:=(select cast(p_json->'XmlFactura'->'factura'->'cabecera'->>'fechaEmision' as character varying));   
	p_fecha_emision timestamp without time zone;
	p_fecha_envio timestamp without time zone:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion timestamp without time zone:=v_fecha_actual;
	p_fecha_consolidacion timestamp without time zone:=v_fecha_actual;
	p_fecha_registro timestamp without time zone:=v_fecha_actual;
	p_fecha_ultima_modificacion timestamp without time zone:=v_fecha_actual;
	p_estado_id varchar(2):='AC';
	p_tipo_crud_crear varchar(2):='C';	
	p_id_recepciones_errores bigint:=0;	
	--p_recepcion_paquete_id int8:=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
	p_id_recepciones_errores_detalles bigint:=0;	
begin	
	p_fecha_emision:=(select to_timestamp(p_fecha_emision_texto,'DD/MM/YYYY')); 
	
	p_id_recepciones_errores:=(
	sre_recaudaciones.sre_fac_crud_recepciones_errores_facturacion_manual
	(
			p_usuario_registro_id,
			p_usuario_ultima_modificacion_id,
			p_recepcion_id,
			p_sucursal_contribuyente_id,
			p_persona_contribuyente_id,
			p_actividad_economica_id,
			p_tipo_modalidad_id,
			p_tipo_documento_sector_id,
			p_tipo_documento_fiscal_id,
			p_estado_recepcion_documento_fiscal_id,
			p_codigo_actividad,
			p_numero_sucursal,
			p_numero_factura,
			p_caed,
			p_fecha_emision,
			p_fecha_envio,
			p_fecha_recepcion,
			p_fecha_consolidacion,
			p_fecha_registro,
			p_fecha_ultima_modificacion,
			p_estado_id,
			p_tipo_crud_crear
	)
	);
	
	--sre_fac_recepciones_errores_detalles (LISTA)		
	p_id_recepciones_errores_detalles:=(sre_recaudaciones.sre_fac_ope_registrar_recepciones_errores_detalles_manual(p_json, p_json_errores, p_id_recepciones_errores));
		
	if (p_id_recepciones_errores<0 or p_id_recepciones_errores_detalles<0) then
		return -1;
	end if;	
				
	return 1;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_reg_errores_facturacion_manual_etapa_2'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_reg_factura_nota_erroneas(p_json json, p_json_errores json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  No se esta tomando en cuenta el numero de boleto
NUMERO SECUENCIAL : 1
FECHA DE MODIFICACION :<14/05/2020>
AUTOR DE LA MODIFICACION : junior.flores
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare
	v_fecha_actual timestamp:=now();

	--sre_recaudaciones.sre_fac_crud_archivos_xml_invalidos
	p_archivo bytea:=(p_json->'xmlRecepcionGenerica'->>'v_archivo')::bytea;
	p_extesion varchar(5):='gzip';
	p_mime varchar(100):='application/gzip';
	p_estado_id varchar(2):='AC';
	
	
	--sre_recaudaciones.sre_fac_crud_recepciones_errores
	p_usuario_registro_id int8:=1000;
	p_usuario_ultima_modificacion_id int8:=1000;
	p_archivo_xml_invalido_id int8:=0;--'ID_XML_INVALIDOS'
	--p_recepcion_id int8:=(select cast(p_json->'xmlRecepcionGenerica'->>'v_recepcionId' as int8));
	p_recepcion_id int8:=(sre_recaudaciones.sre_fac_ope_obtener_recepcionid(p_json)); --add: 20190328 vcg
	p_recepcion_paquete_id int8:=(p_json->'xmlRecepcionGenerica'->>'v_recepcionPaqueteId');
	p_numero_factura int8:=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroFactura');
	p_tipo_documento_sector_id int4:=(p_json->'xmlRecepcionGenerica'->>'p_tipo_documento_sector_id');
	p_cuf varchar(100):=(p_json->'XmlFactura'->'factura'->'cabecera'->>'cuf');
	p_cufd varchar(100):=(p_json->'xmlRecepcionGenerica'->>'p_cufd');
	p_cuis varchar(20):=(p_json->'xmlRecepcionGenerica'->>'p_cuis');
	p_nombre_archivo varchar(200):='Nombre archivo';
	p_fecha_envio timestamp:=(p_json->'xmlRecepcionGenerica'->>'p_fecha_envio');
	p_fecha_recepcion timestamp:=v_fecha_actual;
	p_fecha_consolidacion timestamp:=v_fecha_actual;
	p_fecha_registro timestamp:=v_fecha_actual;
	p_fecha_ultima_modificacion timestamp:=v_fecha_actual;
	p_estado_id_recepciones_errores varchar(2):='AC';
	

	--sre_recaudaciones.sre_fac_crud_recepciones_errores_detalles (lista)

	
	p_tipo_crud_crear varchar(2):='C';	
	
	p_id_archivos_xml_invalidos bigint:=0;
	p_id_recepciones_errores bigint:=0;
	p_id_recepciones_errores_detalles bigint:=0;	
begin	
	                                                                
	if(p_numero_factura is null) then
		p_numero_factura :=(p_json->'XmlFactura'->'factura'->'cabecera'->>'numeroBoleto');
	end if;	 
	--sre_fac_archivos_xml_invalidos
	p_id_archivos_xml_invalidos:=(
	sre_recaudaciones.sre_fac_crud_archivos_xml_invalidos
	(
		p_archivo,
		p_extesion,
		p_mime,
		p_estado_id, --json
		p_tipo_crud_crear
	)
	);	
		
	--sre_fac_recepciones_errores
	p_id_recepciones_errores:=(
	sre_recaudaciones.sre_fac_crud_recepciones_errores
	(
		p_usuario_registro_id, --json
		p_usuario_ultima_modificacion_id, --json
		p_id_archivos_xml_invalidos, --ID
		p_recepcion_id, --json
		p_recepcion_paquete_id, --json
		p_numero_factura,
		p_tipo_documento_sector_id, --json
		p_cuf,
		p_cufd,
		p_cuis,
		p_nombre_archivo,
		p_fecha_envio,
		p_fecha_recepcion,
		p_fecha_consolidacion,
		p_fecha_registro,
		p_fecha_ultima_modificacion,
		p_estado_id_recepciones_errores, --json
		p_tipo_crud_crear
	)
	);
	--sre_fac_recepciones_errores_detalles (LISTA)		
	p_id_recepciones_errores_detalles:=(sre_recaudaciones.sre_fac_ope_insertar_recepciones_errores_detalles(p_json, p_json_errores, p_id_recepciones_errores));
		
	--add: 20190325
	if (p_id_archivos_xml_invalidos<0 or p_id_recepciones_errores<0 or p_id_recepciones_errores_detalles<0) then
		return -1;
	end if;	
				
	return 1;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_reg_factura_nota_erroneas'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_reg_factura_nota_validas(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <dd/mm/yyyy>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	p_id_archivos_xml_validos bigint:=0;
	p_id_recepciones_correctas bigint:=0;
	p_id_ventas bigint:=0;
	p_id_detalles_ventas bigint:=0;
	
	v_resultado smallint:=0;
		
begin 
	
	---------------INSERCION TABLA: ArchivoXmlValidos---------------
	p_id_archivos_xml_validos:=(
	sre_recaudaciones.sre_fac_crud_archivos_xml_validos 
	(
		p_json
	)
	);
	---------------INSERCION TABLA: RecepcionesCorrectas---------------
	p_id_recepciones_correctas:=(
	sre_recaudaciones.sre_fac_crud_recepciones_correctas_dinamico
	(
		p_json, 
		p_id_archivos_xml_validos 
	)
	);

	---------------INSERCION TABLA: Ventas---------------	
	p_id_ventas:=(
	sre_recaudaciones.sre_fac_crud_registro_ventas_dinamico
	(
		p_json, 
		p_id_recepciones_correctas
	)
	);
	
	---------------INSERCION TABLA: Detalles Ventas---------------		
	p_id_detalles_ventas:=(sre_recaudaciones.sre_fac_ope_insertar_detalle_ventas(p_json,	p_id_ventas)); 

	
	--add: 20190325
	if (p_id_archivos_xml_validos<0 or p_id_recepciones_correctas<0 or p_id_ventas<0 or p_id_detalles_ventas<0) then
		v_resultado:=-1;
	else
		v_resultado:=1;
	end if;	
			
  return v_resultado;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_reg_factura_nota_validas'));
end
$function$
;

CREATE OR REPLACE FUNCTION sre_recaudaciones.sre_reg_factura_nota_validas_contingencia(p_json json)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
/**************************************************************************************************************************************************
FUNCIONALIDAD : <Descripcion>
PARAMETROS INGRESO
    <Descripcion>
PARAMETROS SALIDA
    <Descripcion>
SUBSISTEMA : Facturación
FECHA CREACION : <10/06/2019>
AUTOR : Equipo Tyrell
VERSION : 1.0
**************************************************************************************************************************************************/
/**************************************************************************************************************************************************
MODIFICACIONES:  <Descripcion>
NUMERO SECUENCIAL : <Numero secuencial>
FECHA DE MODIFICACION :<dd/mm/yyyy>
AUTOR DE LA MODIFICACION : :<Nombre y apellido>
VERSION : <Numero Version secuencial>
**************************************************************************************************************************************************/
declare		
	p_id_archivos_xml_validos bigint:=0;
	p_id_recepciones_correctas bigint:=0;
	p_id_ventas bigint:=0;
	p_id_detalles_ventas bigint:=0;
	
	v_resultado smallint:=0;
		
begin 
	
	---------------INSERCION TABLA: ArchivoXmlValidos---------------
	p_id_archivos_xml_validos:=(
	sre_recaudaciones.sre_fac_crud_archivos_xml_validos 
	(
		p_json
	)
	);
	---------------INSERCION TABLA: RecepcionesCorrectas---------------
	p_id_recepciones_correctas:=(
	sre_recaudaciones.sre_fac_crud_recepciones_correctas_dinamico_contingencia --contingencia
	(
		p_json, 
		p_id_archivos_xml_validos 
	)
	);

	---------------INSERCION TABLA: Ventas---------------	
	p_id_ventas:=(
	sre_recaudaciones.sre_fac_crud_registro_ventas_dinamico_contingencia --contingencia
	(
		p_json, 
		p_id_recepciones_correctas
	)
	);
	
	---------------INSERCION TABLA: Detalles Ventas---------------		
	p_id_detalles_ventas:=(sre_recaudaciones.sre_fac_ope_insertar_detalle_ventas_contingencia(p_json,	p_id_ventas));--contingencia 

	
	--add: 20190325
	if (p_id_archivos_xml_validos<0 or p_id_recepciones_correctas<0 or p_id_ventas<0 or p_id_detalles_ventas<0) then
		v_resultado:=-1;
	else
		v_resultado:=1;
	end if;	
			
  return v_resultado;
			
  EXCEPTION
  when others
    then
      return (sre_recaudaciones.sre_fac_reg_registrar_excepcion (SQLSTATE, SQLERRM, 'sre_reg_factura_nota_validas_contingencia'));
end
$function$
;
